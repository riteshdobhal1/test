/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable:use-host-property-decorator
import { Input, ElementRef, Component, HostBinding, Renderer2, ChangeDetectionStrategy } from '@angular/core';
import { PrettyCheckboxColor, PrettyCheckBoxToggleType } from '../model/interfaces';
import { DEFAULT_PREFIX } from '../model/params';
import { getColorClassName } from '../utility';
var NgxPrettyToggleWillChangeComponent = /** @class */ (function () {
    function NgxPrettyToggleWillChangeComponent(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.outline = false;
    }
    Object.defineProperty(NgxPrettyToggleWillChangeComponent.prototype, "isToggleOn", {
        get: /**
         * @return {?}
         */
        function () { return this.type === PrettyCheckBoxToggleType.On; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxPrettyToggleWillChangeComponent.prototype, "isToggleOff", {
        get: /**
         * @return {?}
         */
        function () { return this.type === PrettyCheckBoxToggleType.Off; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    NgxPrettyToggleWillChangeComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.color || changes.outline) {
            /** @type {?} */
            var oldClass = getColorClassName(changes.color ? changes.color.previousValue : this.color, changes.outline ? changes.outline.previousValue : null);
            /** @type {?} */
            var newClass = getColorClassName(changes.color ? changes.color.currentValue : this.color, changes.outline ? changes.outline.currentValue : null);
            this.renderer.removeClass(this.el.nativeElement, oldClass);
            this.renderer.addClass(this.el.nativeElement, newClass);
        }
    };
    NgxPrettyToggleWillChangeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-p-toggle[will-change], p-toggle[will-change]',
                    template: "\n    <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\n    <label><ng-content></ng-content></label>\n  ",
                    host: {
                        class: 'state'
                    },
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    NgxPrettyToggleWillChangeComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    NgxPrettyToggleWillChangeComponent.propDecorators = {
        type: [{ type: Input }],
        isToggleOn: [{ type: HostBinding, args: ["class." + DEFAULT_PREFIX + "on",] }],
        isToggleOff: [{ type: HostBinding, args: ["class." + DEFAULT_PREFIX + "off",] }],
        color: [{ type: Input }],
        outline: [{ type: Input }]
    };
    return NgxPrettyToggleWillChangeComponent;
}());
export { NgxPrettyToggleWillChangeComponent };
if (false) {
    /** @type {?} */
    NgxPrettyToggleWillChangeComponent.prototype.type;
    /** @type {?} */
    NgxPrettyToggleWillChangeComponent.prototype.color;
    /** @type {?} */
    NgxPrettyToggleWillChangeComponent.prototype.outline;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyToggleWillChangeComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyToggleWillChangeComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXByZXR0eS10b2dnbGUtd2lsbC1jaGFuZ2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXByZXR0eS1jaGVja2JveC8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL25neC1wcmV0dHktdG9nZ2xlLXdpbGwtY2hhbmdlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUVBLE9BQU8sRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQTRCLFNBQVMsRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4SSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNwRixPQUFPLEVBQUUsY0FBYyxFQUEwQixNQUFNLGlCQUFpQixDQUFDO0FBQ3pFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUUvQztJQXlCRSw0Q0FBb0IsRUFBYyxFQUFVLFFBQW1CO1FBQTNDLE9BQUUsR0FBRixFQUFFLENBQVk7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBRnRELFlBQU8sR0FBRyxLQUFLLENBQUM7SUFFMEMsQ0FBQztJQVZwRSxzQkFDSSwwREFBVTs7OztRQURkLGNBQ21CLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyx3QkFBd0IsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDOzs7T0FBQTtJQUV0RSxzQkFDSSwyREFBVzs7OztRQURmLGNBQ29CLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyx3QkFBd0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDOzs7T0FBQTs7Ozs7SUFReEUsd0RBQVc7Ozs7SUFBWCxVQUFZLE9BQXNCO1FBQ2hDLElBQUksT0FBTyxDQUFDLEtBQUssSUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFOztnQkFFOUIsUUFBUSxHQUNaLGlCQUFpQixDQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUN4RCxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUN2RDs7Z0JBRUcsUUFBUSxHQUNaLGlCQUFpQixDQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUN2RCxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUN0RDtZQUVILElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQzNELElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1NBQ3pEO0lBQ0gsQ0FBQzs7Z0JBN0NGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsa0RBQWtEO29CQUM1RCxRQUFRLEVBQUUsc0pBR1Q7b0JBQ0QsSUFBSSxFQUFFO3dCQUNKLEtBQUssRUFBRSxPQUFPO3FCQUNmO29CQUNELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2lCQUNoRDs7OztnQkFmZSxVQUFVO2dCQUFvRCxTQUFTOzs7dUJBa0JwRixLQUFLOzZCQUVMLFdBQVcsU0FBQyxXQUFTLGNBQWMsT0FBSTs4QkFHdkMsV0FBVyxTQUFDLFdBQVMsY0FBYyxRQUFLO3dCQUl4QyxLQUFLOzBCQUNMLEtBQUs7O0lBd0JSLHlDQUFDO0NBQUEsQUEvQ0QsSUErQ0M7U0FwQ1ksa0NBQWtDOzs7SUFFN0Msa0RBQXdDOztJQVN4QyxtREFBb0M7O0lBQ3BDLHFEQUF5Qjs7Ozs7SUFFYixnREFBc0I7Ozs7O0lBQUUsc0RBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHNsaW50OmRpc2FibGU6dXNlLWhvc3QtcHJvcGVydHktZGVjb3JhdG9yXHJcblxyXG5pbXBvcnQgeyBJbnB1dCwgRWxlbWVudFJlZiwgQ29tcG9uZW50LCBIb3N0QmluZGluZywgU2ltcGxlQ2hhbmdlcywgT25DaGFuZ2VzLCBSZW5kZXJlcjIsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFByZXR0eUNoZWNrYm94Q29sb3IsIFByZXR0eUNoZWNrQm94VG9nZ2xlVHlwZSB9IGZyb20gJy4uL21vZGVsL2ludGVyZmFjZXMnO1xyXG5pbXBvcnQgeyBERUZBVUxUX1BSRUZJWCwgREVGQVVMVF9PVVRMSU5FX1BSRUZJWCB9IGZyb20gJy4uL21vZGVsL3BhcmFtcyc7XHJcbmltcG9ydCB7IGdldENvbG9yQ2xhc3NOYW1lIH0gZnJvbSAnLi4vdXRpbGl0eSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ25neC1wLXRvZ2dsZVt3aWxsLWNoYW5nZV0sIHAtdG9nZ2xlW3dpbGwtY2hhbmdlXScsXHJcbiAgdGVtcGxhdGU6IGBcclxuICAgIDxuZy1jb250ZW50IHNlbGVjdD1cIltwSWNvbl0sIFtwLWljb25dLCBbcFN2Z10sIFtwLXN2Z10sIFtwSW1hZ2VdLCBbcC1pbWFnZV1cIj48L25nLWNvbnRlbnQ+XHJcbiAgICA8bGFiZWw+PG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PjwvbGFiZWw+XHJcbiAgYCxcclxuICBob3N0OiB7XHJcbiAgICBjbGFzczogJ3N0YXRlJ1xyXG4gIH0sXHJcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcclxufSlcclxuZXhwb3J0IGNsYXNzIE5neFByZXR0eVRvZ2dsZVdpbGxDaGFuZ2VDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xyXG5cclxuICBASW5wdXQoKSB0eXBlOiBQcmV0dHlDaGVja0JveFRvZ2dsZVR5cGU7XHJcblxyXG4gIEBIb3N0QmluZGluZyhgY2xhc3MuJHtERUZBVUxUX1BSRUZJWH1vbmApXHJcbiAgZ2V0IGlzVG9nZ2xlT24oKSB7IHJldHVybiB0aGlzLnR5cGUgPT09IFByZXR0eUNoZWNrQm94VG9nZ2xlVHlwZS5PbjsgfVxyXG5cclxuICBASG9zdEJpbmRpbmcoYGNsYXNzLiR7REVGQVVMVF9QUkVGSVh9b2ZmYClcclxuICBnZXQgaXNUb2dnbGVPZmYoKSB7IHJldHVybiB0aGlzLnR5cGUgPT09IFByZXR0eUNoZWNrQm94VG9nZ2xlVHlwZS5PZmY7IH1cclxuXHJcblxyXG4gIEBJbnB1dCgpIGNvbG9yOiBQcmV0dHlDaGVja2JveENvbG9yO1xyXG4gIEBJbnB1dCgpIG91dGxpbmUgPSBmYWxzZTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7IH1cclxuXHJcbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xyXG4gICAgaWYgKGNoYW5nZXMuY29sb3IgfHwgY2hhbmdlcy5vdXRsaW5lKSB7XHJcblxyXG4gICAgICBjb25zdCBvbGRDbGFzcyA9XHJcbiAgICAgICAgZ2V0Q29sb3JDbGFzc05hbWUoXHJcbiAgICAgICAgICBjaGFuZ2VzLmNvbG9yID8gY2hhbmdlcy5jb2xvci5wcmV2aW91c1ZhbHVlIDogdGhpcy5jb2xvcixcclxuICAgICAgICAgIGNoYW5nZXMub3V0bGluZSA/IGNoYW5nZXMub3V0bGluZS5wcmV2aW91c1ZhbHVlIDogbnVsbFxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICBjb25zdCBuZXdDbGFzcyA9XHJcbiAgICAgICAgZ2V0Q29sb3JDbGFzc05hbWUoXHJcbiAgICAgICAgICBjaGFuZ2VzLmNvbG9yID8gY2hhbmdlcy5jb2xvci5jdXJyZW50VmFsdWUgOiB0aGlzLmNvbG9yLFxyXG4gICAgICAgICAgY2hhbmdlcy5vdXRsaW5lID8gY2hhbmdlcy5vdXRsaW5lLmN1cnJlbnRWYWx1ZSA6IG51bGxcclxuICAgICAgICApO1xyXG5cclxuICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVDbGFzcyh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsIG9sZENsYXNzKTtcclxuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsIG5ld0NsYXNzKTtcclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcbiJdfQ==