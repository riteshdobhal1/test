{"version":3,"file":"ngx-pretty-checkbox.js","sources":["ng://ngx-pretty-checkbox/lib/model/params.ts","ng://ngx-pretty-checkbox/lib/model/interfaces.ts","ng://ngx-pretty-checkbox/lib/components/ngx-pretty-hover.component.ts","ng://ngx-pretty-checkbox/lib/directives/ngx-pretty-icon.directive.ts","ng://ngx-pretty-checkbox/lib/directives/ngx-pretty-image.directive.ts","ng://ngx-pretty-checkbox/lib/components/ngx-pretty-Indeterminate.component.ts","ng://ngx-pretty-checkbox/lib/directives/ngx-pretty-svg.directive.ts","ng://ngx-pretty-checkbox/lib/components/ngx-pretty-toggle.component.ts","ng://ngx-pretty-checkbox/lib/utility.ts","ng://ngx-pretty-checkbox/lib/components/ngx-pretty-hover-will-change.component.ts","ng://ngx-pretty-checkbox/lib/components/ngx-pretty-Indeterminate-will-change.component.ts","ng://ngx-pretty-checkbox/lib/components/ngx-pretty-toggle-will-change.component.ts","ng://ngx-pretty-checkbox/lib/components/ngx-pretty-checkbox.component.ts","ng://ngx-pretty-checkbox/lib/components/ngx-pretty-checkbox-will-change.component.ts","ng://ngx-pretty-checkbox/lib/ngx-pretty-checkbox.service.ts","ng://ngx-pretty-checkbox/lib/components/ngx-pretty-radio-group.component.ts","ng://ngx-pretty-checkbox/lib/components/ngx-pretty-radio.component.ts","ng://ngx-pretty-checkbox/lib/components/ngx-pretty-radio-will-change.component.ts","ng://ngx-pretty-checkbox/lib/ngx-pretty-checkbox.module.ts"],"sourcesContent":["export const DEFAULT_PRETTY_CLASS_NAME = 'pretty';\r\nexport const DEFAULT_PREFIX = 'p-';\r\nexport const DEFAULT_OUTLINE_PREFIX = '-o';\r\n\r\nexport const GROUP_NAME = 'p-radio';\r\n","export enum PrettyCheckBoxToggleType {\r\n  On = 'on',\r\n  Off = 'off'\r\n}\r\nexport enum PrettyCheckboxStroke {\r\n  // Accept Null\r\n  Fill = 'fill',   // Square and Switch\r\n  Thick = 'thick', // Square\r\n  Slim = 'slim' // Switch\r\n}\r\n\r\nexport enum PrettyCheckboxShape {\r\n  // Accept Null\r\n  Curve = 'curve',\r\n  Round = 'round',\r\n}\r\n\r\n\r\nexport enum PrettyCheckboxColor {\r\n  Primary = 'primary',\r\n  Success = 'success',\r\n  Info = 'info',\r\n  Warning = 'warning',\r\n  Danger = 'danger',\r\n}\r\n\r\nexport enum PrettyCheckboxAnimation {\r\n  Smooth = 'smooth',\r\n  Jelly = 'jelly',\r\n  Tada = 'tada',\r\n  Rotate = 'rotate',\r\n  Pulse = 'pulse',\r\n}\r\n\r\nexport interface PrettyCheckBoxChange {\r\n  checked: boolean;\r\n  value: string;\r\n  event: Event;\r\n}\r\n\r\nexport interface PrettyRadioChange {\r\n  checked: boolean;\r\n  value: string;\r\n  event: Event;\r\n}\r\n","// tslint:disable:use-host-property-decorator\r\n\r\nimport { Component, Input, ElementRef, Renderer2, SimpleChanges, AfterViewInit, ChangeDetectionStrategy, Attribute } from '@angular/core';\r\nimport { DEFAULT_PREFIX, DEFAULT_OUTLINE_PREFIX } from '../model/params';\r\nimport { PrettyCheckboxColor } from '../model/interfaces';\r\nimport { getColorClassName } from '../utility';\r\n\r\n@Component({\r\n  selector: 'ngx-p-hover:not([will-change]), p-hover:not([will-change])',\r\n  template: `\r\n    <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n    <label><ng-content></ng-content></label>\r\n  `,\r\n  host: {\r\n    class: `state ${DEFAULT_PREFIX}is-hover`\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxPrettyHoverComponent implements AfterViewInit {\r\n\r\n  constructor(\r\n    private el: ElementRef,\r\n    private renderer: Renderer2,\r\n    @Attribute('outline') private _outline = false,\r\n    @Attribute('color')   private _color: PrettyCheckboxColor,\r\n  ) { }\r\n\r\n  ngAfterViewInit() {\r\n    if (this._color) {\r\n      this.renderer.addClass(this.el.nativeElement,\r\n        `${DEFAULT_PREFIX}${this._color}${this._outline ? DEFAULT_OUTLINE_PREFIX : ''}`\r\n      );\r\n    }\r\n  }\r\n\r\n\r\n}\r\n","import { Directive, ElementRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[pIcon], [p-icon]'\r\n})\r\nexport class NgxPrettyIconDirective {\r\n\r\n  constructor(private elemRef: ElementRef) {\r\n    this.elemRef.nativeElement.classList.add('icon');\r\n  }\r\n\r\n}\r\n","import { Directive, ElementRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[pImage], [p-image]'\r\n})\r\nexport class NgxPrettyImageDirective {\r\n\r\n  constructor(private elemRef: ElementRef) {\r\n    console.log('TCL: NgxPrettyImageDirective -> constructor -> elemRef', elemRef);\r\n    this.elemRef.nativeElement.classList.add('image');\r\n  }\r\n\r\n}\r\n","// tslint:disable:use-host-property-decorator\r\n\r\nimport { Component, Input, ElementRef, Renderer2, AfterViewInit, ChangeDetectionStrategy, Attribute } from '@angular/core';\r\nimport { DEFAULT_PREFIX, DEFAULT_OUTLINE_PREFIX } from '../model/params';\r\nimport { PrettyCheckboxColor } from '../model/interfaces';\r\n\r\n@Component({\r\n  selector: 'ngx-p-indeterminate:not([will-change]), p-indeterminate:not([will-change])',\r\n  template: `\r\n    <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n    <label><ng-content></ng-content></label>\r\n  `,\r\n  host: {\r\n    class: `state ${DEFAULT_PREFIX}is-indeterminate`\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxPrettyIndeterminateComponent implements AfterViewInit {\r\n\r\n  constructor(\r\n    private el: ElementRef,\r\n    private renderer: Renderer2,\r\n    @Attribute('outline') private _outline = false,\r\n    @Attribute('color')   private _color: PrettyCheckboxColor,\r\n  ) { }\r\n\r\n  ngAfterViewInit() {\r\n    if (this._color) {\r\n      this.renderer.addClass(this.el.nativeElement,\r\n        `${DEFAULT_PREFIX}${this._color}${this._outline ? DEFAULT_OUTLINE_PREFIX : ''}`\r\n      );\r\n    }\r\n  }\r\n\r\n\r\n}\r\n","import { Directive, AfterViewInit, ElementRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[pSvg], [p-svg]'\r\n})\r\nexport class NgxPrettySvgDirective implements AfterViewInit {\r\n\r\n  constructor(private elemRef: ElementRef) { }\r\n\r\n  ngAfterViewInit() {\r\n    this.elemRef.nativeElement.classList.add('svg');\r\n  }\r\n\r\n}\r\n","// tslint:disable:use-host-property-decorator\r\n\r\nimport { Input, ElementRef, Component, AfterViewInit, Renderer2, ChangeDetectionStrategy, Attribute } from '@angular/core';\r\nimport { PrettyCheckboxColor, PrettyCheckBoxToggleType } from '../model/interfaces';\r\nimport { DEFAULT_PREFIX, DEFAULT_OUTLINE_PREFIX } from '../model/params';\r\nimport { getColorClassName } from '../utility';\r\n\r\n@Component({\r\n  selector: 'ngx-p-toggle:not([will-change]), p-toggle:not([will-change])',\r\n  template: `\r\n    <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n    <label><ng-content></ng-content></label>\r\n  `,\r\n  host: {\r\n    class: 'state'\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxPrettyToggleComponent implements AfterViewInit {\r\n\r\n  constructor(\r\n    private el: ElementRef,\r\n    private renderer: Renderer2,\r\n    @Attribute('outline') private _outline = false,\r\n    @Attribute('color')   private _color: PrettyCheckboxColor,\r\n    @Attribute('type')   private _type: PrettyCheckBoxToggleType,\r\n  ) { }\r\n\r\n  ngAfterViewInit() {\r\n    if (this._color) {\r\n      this.renderer.addClass(this.el.nativeElement,\r\n        `${DEFAULT_PREFIX}${this._color}${this._outline ? DEFAULT_OUTLINE_PREFIX : ''}`\r\n      );\r\n    }\r\n\r\n    this.renderer.addClass(this.el.nativeElement, `${DEFAULT_PREFIX}${this._type}`);\r\n  }\r\n\r\n}\r\n","import { PrettyCheckboxColor } from './model/interfaces';\r\nimport { DEFAULT_PREFIX, DEFAULT_OUTLINE_PREFIX } from './model/params';\r\n\r\nexport function getColorClassName(color: PrettyCheckboxColor, outline?: boolean) {\r\n  if (!color) { return null; }\r\n  return DEFAULT_PREFIX + color + (outline ? DEFAULT_OUTLINE_PREFIX : '');\r\n}\r\n\r\nexport function strToBoolean(str?: string | boolean): boolean {\r\n  if (typeof str === 'boolean') {\r\n    return str;\r\n  }\r\n\r\n  const regex = /^\\s*(true|1|on|enable)\\s*$/i;\r\n  return regex.test(str);\r\n}\r\n","// tslint:disable:use-host-property-decorator\r\n\r\nimport { Component, Input, ElementRef, Renderer2, SimpleChanges, OnChanges, ChangeDetectionStrategy } from '@angular/core';\r\nimport { DEFAULT_PREFIX } from '../model/params';\r\nimport { PrettyCheckboxColor } from '../model/interfaces';\r\nimport { getColorClassName } from '../utility';\r\n\r\n@Component({\r\n  selector: 'ngx-p-hover[will-change], p-hover[will-change]',\r\n  template: `\r\n    <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n    <label><ng-content></ng-content></label>\r\n  `,\r\n  host: {\r\n    class: `state ${DEFAULT_PREFIX}is-hover`\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxPrettyHoverWillChangeComponent implements OnChanges {\r\n\r\n  @Input() color: PrettyCheckboxColor;\r\n  @Input() outline = false;\r\n\r\n  constructor(\r\n    private el: ElementRef,\r\n    private renderer: Renderer2\r\n  ) { }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.color || changes.outline) {\r\n\r\n      const oldClass =\r\n        getColorClassName(\r\n          changes.color ? changes.color.previousValue : this.color,\r\n          changes.outline ? changes.outline.previousValue : null\r\n        );\r\n\r\n      const newClass =\r\n        getColorClassName(\r\n          changes.color ? changes.color.currentValue : this.color,\r\n          changes.outline ? changes.outline.currentValue : null\r\n        );\r\n\r\n      this.renderer.removeClass(this.el.nativeElement, oldClass);\r\n      this.renderer.addClass(this.el.nativeElement, newClass);\r\n    }\r\n  }\r\n\r\n}\r\n","// tslint:disable:use-host-property-decorator\r\n\r\nimport { Component, Input, ElementRef, Renderer2, SimpleChanges, OnChanges, ChangeDetectionStrategy } from '@angular/core';\r\nimport { getColorClassName } from '../utility';\r\nimport { DEFAULT_PREFIX } from '../model/params';\r\nimport { PrettyCheckboxColor } from '../model/interfaces';\r\n\r\n@Component({\r\n  selector: 'ngx-p-indeterminate[will-change], p-indeterminate[will-change]',\r\n  template: `\r\n    <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n    <label><ng-content></ng-content></label>\r\n  `,\r\n  host: {\r\n    class: `state ${DEFAULT_PREFIX}is-indeterminate`\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxPrettyIndeterminateWillChangeComponent implements OnChanges {\r\n\r\n  @Input() color: PrettyCheckboxColor;\r\n  @Input() outline = false;\r\n\r\n  constructor(private el: ElementRef, private renderer: Renderer2) { }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.color || changes.outline) {\r\n\r\n      const oldClass =\r\n        getColorClassName(\r\n          changes.color ? changes.color.previousValue : this.color,\r\n          changes.outline ? changes.outline.previousValue : null\r\n        );\r\n\r\n      const newClass =\r\n        getColorClassName(\r\n          changes.color ? changes.color.currentValue : this.color,\r\n          changes.outline ? changes.outline.currentValue : null\r\n        );\r\n\r\n      this.renderer.removeClass(this.el.nativeElement, oldClass);\r\n      this.renderer.addClass(this.el.nativeElement, newClass);\r\n    }\r\n  }\r\n\r\n}\r\n","// tslint:disable:use-host-property-decorator\r\n\r\nimport { Input, ElementRef, Component, HostBinding, SimpleChanges, OnChanges, Renderer2, ChangeDetectionStrategy } from '@angular/core';\r\nimport { PrettyCheckboxColor, PrettyCheckBoxToggleType } from '../model/interfaces';\r\nimport { DEFAULT_PREFIX, DEFAULT_OUTLINE_PREFIX } from '../model/params';\r\nimport { getColorClassName } from '../utility';\r\n\r\n@Component({\r\n  selector: 'ngx-p-toggle[will-change], p-toggle[will-change]',\r\n  template: `\r\n    <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n    <label><ng-content></ng-content></label>\r\n  `,\r\n  host: {\r\n    class: 'state'\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxPrettyToggleWillChangeComponent implements OnChanges {\r\n\r\n  @Input() type: PrettyCheckBoxToggleType;\r\n\r\n  @HostBinding(`class.${DEFAULT_PREFIX}on`)\r\n  get isToggleOn() { return this.type === PrettyCheckBoxToggleType.On; }\r\n\r\n  @HostBinding(`class.${DEFAULT_PREFIX}off`)\r\n  get isToggleOff() { return this.type === PrettyCheckBoxToggleType.Off; }\r\n\r\n\r\n  @Input() color: PrettyCheckboxColor;\r\n  @Input() outline = false;\r\n\r\n  constructor(private el: ElementRef, private renderer: Renderer2) { }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.color || changes.outline) {\r\n\r\n      const oldClass =\r\n        getColorClassName(\r\n          changes.color ? changes.color.previousValue : this.color,\r\n          changes.outline ? changes.outline.previousValue : null\r\n        );\r\n\r\n      const newClass =\r\n        getColorClassName(\r\n          changes.color ? changes.color.currentValue : this.color,\r\n          changes.outline ? changes.outline.currentValue : null\r\n        );\r\n\r\n      this.renderer.removeClass(this.el.nativeElement, oldClass);\r\n      this.renderer.addClass(this.el.nativeElement, newClass);\r\n    }\r\n  }\r\n\r\n}\r\n","import {\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  Output,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  Attribute,\r\n  AfterViewInit,\r\n  Renderer2,\r\n  ChangeDetectorRef\r\n  } from '@angular/core';\r\nimport { DEFAULT_OUTLINE_PREFIX, DEFAULT_PREFIX, DEFAULT_PRETTY_CLASS_NAME } from '../model/params';\r\nimport { NgxPrettyHoverComponent } from './ngx-pretty-hover.component';\r\nimport { NgxPrettyIconDirective } from '../directives/ngx-pretty-icon.directive';\r\nimport { NgxPrettyImageDirective } from '../directives/ngx-pretty-image.directive';\r\nimport { NgxPrettyIndeterminateComponent } from './ngx-pretty-Indeterminate.component';\r\nimport { NgxPrettySvgDirective } from '../directives/ngx-pretty-svg.directive';\r\nimport { NgxPrettyToggleComponent } from './ngx-pretty-toggle.component';\r\nimport {\r\n  PrettyCheckboxAnimation,\r\n  PrettyCheckBoxChange,\r\n  PrettyCheckboxColor,\r\n  PrettyCheckboxShape,\r\n  PrettyCheckboxStroke\r\n  } from '../model/interfaces';\r\nimport { NgxPrettyHoverWillChangeComponent } from './ngx-pretty-hover-will-change.component';\r\nimport { NgxPrettyIndeterminateWillChangeComponent } from './ngx-pretty-Indeterminate-will-change.component';\r\nimport { NgxPrettyToggleWillChangeComponent } from './ngx-pretty-toggle-will-change.component';\r\nimport { strToBoolean } from '../utility';\r\n// tslint:disable:use-host-property-decorator\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'ngx-pretty-checkbox:not([will-change]), p-checkbox:not([will-change])',\r\n  template: `\r\n    <input\r\n      #inputElem\r\n      type=\"checkbox\"\r\n      [value]=\"value\"\r\n      [checked]=\"checked\"\r\n      [disabled]=\"disabled\"\r\n      (change)=\"_onChange($event, inputElem.checked, inputElem.value)\"/>\r\n\r\n    <div #stateElem *ngIf=\"!_isToggle\" class=\"state\">\r\n\r\n      <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n      <label><ng-content></ng-content></label>\r\n\r\n    </div>\r\n\r\n    <ng-content select=\"ngx-p-indeterminate, p-indeterminate, ngx-p-hover, p-hover, ngx-p-toggle, p-toggle\"></ng-content>\r\n  `,\r\n  // changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    'class': DEFAULT_PRETTY_CLASS_NAME\r\n  },\r\n  exportAs: 'ngxPrettyCheckbox'\r\n})\r\nexport class NgxPrettyCheckboxComponent implements AfterViewInit {\r\n\r\n  public readonly _prefix = DEFAULT_PREFIX;\r\n  public readonly _outlinePrefix = DEFAULT_OUTLINE_PREFIX;\r\n\r\n\r\n  @Input() checked = false;\r\n  @Input() disabled = false;\r\n  @Input() value;\r\n\r\n\r\n  @HostBinding(`class.${DEFAULT_PREFIX}locked`)\r\n  @Input() lock = false;\r\n\r\n\r\n  @ViewChild('inputElem', { static: true }) private _inputElem: ElementRef;\r\n  @ViewChild('stateElem', { static: false }) private _stateElem: ElementRef;\r\n\r\n  @Output() change = new EventEmitter<PrettyCheckBoxChange>();\r\n\r\n\r\n  @ContentChild(NgxPrettyIconDirective, {static: false}) private _iconDir: NgxPrettyIconDirective;\r\n  @ContentChild(NgxPrettySvgDirective, {static: false}) private _svgDir: NgxPrettySvgDirective;\r\n  @ContentChild(NgxPrettyImageDirective, {static: false}) private _imgDir: NgxPrettyImageDirective;\r\n\r\n  @ContentChild(NgxPrettyHoverComponent, {static: false}) private _hoverDir: NgxPrettyHoverComponent;\r\n  @ContentChild(NgxPrettyHoverWillChangeComponent, {static: false}) private _hoverWillChangeDir: NgxPrettyHoverWillChangeComponent;\r\n\r\n  @ContentChild(NgxPrettyIndeterminateComponent, {static: false}) private _indeterminateDir: NgxPrettyIndeterminateComponent;\r\n  @ContentChild(NgxPrettyIndeterminateWillChangeComponent, {static: false}) private _indeterminateWillChangeDir: NgxPrettyIndeterminateWillChangeComponent;\r\n\r\n  @ContentChildren(NgxPrettyToggleComponent) public _toggleComps: QueryList<NgxPrettyToggleComponent>;\r\n  @ContentChildren(NgxPrettyToggleWillChangeComponent) public _toggleWillChangeComps: QueryList<NgxPrettyToggleWillChangeComponent>;\r\n\r\n  constructor (\r\n    private renderer: Renderer2,\r\n    private el: ElementRef,\r\n    private cd: ChangeDetectorRef,\r\n\r\n    @Attribute('stroke')      private _stroke: PrettyCheckboxStroke,\r\n    @Attribute('shape')       private _shape: PrettyCheckboxShape,\r\n    @Attribute('animation')   private _animation: PrettyCheckboxAnimation,\r\n    @Attribute('isSwitch')    private _isSwitch = false,\r\n    @Attribute('bigger')      private _bigger = false,\r\n    @Attribute('enableFocus') private _enableFocus = false,\r\n    @Attribute('plain')       private _plain = false,\r\n\r\n    @Attribute('outline') private _outline = false,\r\n    @Attribute('color')   private _color: PrettyCheckboxColor,\r\n  ) {\r\n      this._isSwitch    = strToBoolean(this._isSwitch);\r\n      this._bigger      = strToBoolean(this._bigger);\r\n      this._enableFocus = strToBoolean(this._enableFocus);\r\n      this._plain       = strToBoolean(this._plain);\r\n      this._outline     = strToBoolean(this._outline);\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    const el = this.el.nativeElement;\r\n\r\n    if (this._isSwitch)    { this.renderer.addClass(el, `${DEFAULT_PREFIX}switch`); }\r\n    if (this._bigger)      { this.renderer.addClass(el, `${DEFAULT_PREFIX}bigger`); }\r\n    if (this._enableFocus) { this.renderer.addClass(el, `${DEFAULT_PREFIX}has-focus`); }\r\n    if (this._plain)       { this.renderer.addClass(el, `${DEFAULT_PREFIX}plain`); }\r\n\r\n    if (this._stroke)     { this.renderer.addClass(el, `${DEFAULT_PREFIX}${this._stroke}`); }\r\n    if (this._shape)      { this.renderer.addClass(el, `${DEFAULT_PREFIX}${this._shape}`); }\r\n    if (this._animation)  { this.renderer.addClass(el, `${DEFAULT_PREFIX}${this._animation}`); }\r\n\r\n    if (this._iconDir)          { this.renderer.addClass(el, `${DEFAULT_PREFIX}icon`); }\r\n    if (this._svgDir)           { this.renderer.addClass(el, `${DEFAULT_PREFIX}svg`); }\r\n    if (this._imgDir)           { this.renderer.addClass(el, `${DEFAULT_PREFIX}image`); }\r\n\r\n    if (this._hoverDir || this._hoverWillChangeDir) {\r\n      this.renderer.addClass(el, `${DEFAULT_PREFIX}has-hover`);\r\n    }\r\n\r\n    if (this._indeterminateDir || this._indeterminateWillChangeDir) {\r\n      this.renderer.addClass(el, `${DEFAULT_PREFIX}has-indeterminate`);\r\n    }\r\n\r\n    if (this._isToggle) { this.renderer.addClass(el, `${DEFAULT_PREFIX}toggle`); }\r\n\r\n    if (!this._isSwitch && !this._iconDir && !this._svgDir && !this._imgDir) {\r\n      this.renderer.addClass(el, `${DEFAULT_PREFIX}default`);\r\n    }\r\n\r\n    // STATE ELEM\r\n    if (this._color && !this._isToggle) {\r\n      this.renderer.addClass(this._stateElem.nativeElement,\r\n        `${DEFAULT_PREFIX}${this._color}${this._outline ? DEFAULT_OUTLINE_PREFIX : ''}`\r\n      );\r\n    }\r\n\r\n  }\r\n\r\n\r\n  // ---------- PRIVATE METHODS ---------\r\n  public _onChange(event: Event, checked: boolean, value: string) {\r\n    // I stop propagation on the change event.\r\n    // Otherwise the change event, from the input element, will bubble up and\r\n    event.stopPropagation();\r\n    this.checked = checked;\r\n    this.change.emit({ value, checked, event });\r\n  }\r\n\r\n  public get _isToggle() { return this._toggleComps.length === 2 || this._toggleWillChangeComps.length === 2; }\r\n\r\n  // ---------- PUBLIC METHODS ---------\r\n  public setIndeterminate(value = true) {\r\n    this._inputElem.nativeElement.indeterminate = value;\r\n  }\r\n\r\n  public forceCheck(check: boolean) {\r\n    this.checked = check;\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n}\r\n","import {\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  Output,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef\r\n  } from '@angular/core';\r\nimport { DEFAULT_OUTLINE_PREFIX, DEFAULT_PREFIX, DEFAULT_PRETTY_CLASS_NAME } from '../model/params';\r\nimport { NgxPrettyHoverComponent } from './ngx-pretty-hover.component';\r\nimport { NgxPrettyIconDirective } from '../directives/ngx-pretty-icon.directive';\r\nimport { NgxPrettyImageDirective } from '../directives/ngx-pretty-image.directive';\r\nimport { NgxPrettyIndeterminateComponent } from './ngx-pretty-Indeterminate.component';\r\nimport { NgxPrettySvgDirective } from '../directives/ngx-pretty-svg.directive';\r\nimport { NgxPrettyToggleComponent } from './ngx-pretty-toggle.component';\r\nimport {\r\n  PrettyCheckboxAnimation,\r\n  PrettyCheckBoxChange,\r\n  PrettyCheckboxColor,\r\n  PrettyCheckboxShape,\r\n  PrettyCheckboxStroke,\r\n  } from '../model/interfaces';\r\nimport { NgxPrettyHoverWillChangeComponent } from './ngx-pretty-hover-will-change.component';\r\nimport { NgxPrettyToggleWillChangeComponent } from './ngx-pretty-toggle-will-change.component';\r\nimport { NgxPrettyIndeterminateWillChangeComponent } from './ngx-pretty-Indeterminate-will-change.component';\r\n// tslint:disable:use-host-property-decorator\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'ngx-pretty-checkbox[will-change], p-checkbox[will-change]',\r\n  template: `\r\n    <input\r\n      #inputElem\r\n      type=\"checkbox\"\r\n      [value]=\"value\"\r\n      [checked]=\"checked\"\r\n      [disabled]=\"disabled\"\r\n      (change)=\"_onChange($event, inputElem.checked, inputElem.value)\"/>\r\n\r\n    <div *ngIf=\"!_isToggle\" class=\"state\"\r\n        [ngClass]=\"[ color ? _prefix + color + (outline ? _outlinePrefix : '') : '' ]\">\r\n\r\n        <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n        <label><ng-content></ng-content></label>\r\n    </div>\r\n\r\n    <ng-content select=\"ngx-p-indeterminate, p-indeterminate, ngx-p-hover, p-hover, ngx-p-toggle, p-toggle\"></ng-content>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    'class': DEFAULT_PRETTY_CLASS_NAME\r\n  },\r\n  exportAs: 'ngxPrettyCheckboxWillChange'\r\n})\r\nexport class NgxPrettyCheckboxWillChangeComponent {\r\n\r\n  constructor(private cd: ChangeDetectorRef) {}\r\n\r\n  public readonly _prefix = DEFAULT_PREFIX;\r\n  public readonly _outlinePrefix = DEFAULT_OUTLINE_PREFIX;\r\n\r\n  @ViewChild('inputElem', { static: true }) private _inputElem: ElementRef;\r\n  @Output() change = new EventEmitter<PrettyCheckBoxChange>();\r\n\r\n\r\n  // ---------- INPUTS ----------\r\n  @Input() stroke: PrettyCheckboxStroke;\r\n  @Input() shape: PrettyCheckboxShape;\r\n  @Input() animation: PrettyCheckboxAnimation;\r\n  @Input() color: PrettyCheckboxColor;\r\n  @Input() outline = false; // COLOR . Can be used as Solid ( p-primary ) or Outline ( p-primary-o ).\r\n\r\n  @Input() checked = false;\r\n  @Input() disabled = false;\r\n  @Input() value;\r\n\r\n\r\n  // ----- INPUTS AND BINDING ------\r\n  // SWITCH\r\n  @HostBinding(`class.${DEFAULT_PREFIX}switch`)\r\n  @Input() isSwitch = false;\r\n\r\n  //  LOCK\r\n  @HostBinding(`class.${DEFAULT_PREFIX}locked`)\r\n  @Input() lock = false;\r\n\r\n  //  BIGGER\r\n  @HostBinding(`class.${DEFAULT_PREFIX}bigger`)\r\n  @Input() bigger = false;\r\n\r\n  //  FOCUS\r\n  @HostBinding(`class.${DEFAULT_PREFIX}has-focus`)\r\n  @Input() enableFocus = false;\r\n\r\n  //  PLAIN\r\n  @HostBinding(`class.${DEFAULT_PREFIX}plain`)\r\n  @Input() plain = false; // To remove the border ( when checkbox is checked ) \r\n\r\n\r\n  // ---------- STROKE ----------\r\n  // Fill\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxStroke.Fill}`)\r\n  get _isFill() { return this.stroke === PrettyCheckboxStroke.Fill; }\r\n\r\n  // Slim\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxStroke.Slim}`)\r\n  get _isSlim() { return this.stroke === PrettyCheckboxStroke.Slim; }\r\n\r\n  // Thick\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxStroke.Thick}`)\r\n  get _isThick() { return this.stroke === PrettyCheckboxStroke.Thick; }\r\n\r\n\r\n  // ---------- SHAPE ----------\r\n  // Curve\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxShape.Curve}`)\r\n  get _isCurve() { return this.shape === PrettyCheckboxShape.Curve; }\r\n\r\n  // Round\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxShape.Round}`)\r\n  get _isRound() { return this.shape === PrettyCheckboxShape.Round; }\r\n\r\n\r\n  // ---------- ANIMATION ----------\r\n  // Smooth\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxAnimation.Smooth}`)\r\n  get _isSmooth() { return this.animation === PrettyCheckboxAnimation.Smooth; }\r\n\r\n  // Jelly\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxAnimation.Jelly}`)\r\n  get _isJelly() { return this.animation === PrettyCheckboxAnimation.Jelly; }\r\n\r\n  // Tada\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxAnimation.Tada}`)\r\n  get _isTada() { return this.animation === PrettyCheckboxAnimation.Tada; }\r\n\r\n  // Rotate\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxAnimation.Rotate}`)\r\n  get _isRotate() { return this.animation === PrettyCheckboxAnimation.Rotate; }\r\n\r\n  // Pulse\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxAnimation.Pulse}`)\r\n  get _isPulse() { return this.animation === PrettyCheckboxAnimation.Pulse; }\r\n\r\n\r\n  // ---------- BINDING ----------\r\n  // Toggle\r\n  @ContentChildren(NgxPrettyToggleComponent) _toggleComp: QueryList<NgxPrettyToggleComponent>;\r\n  @ContentChildren(NgxPrettyToggleWillChangeComponent) _toggleWillChangeComp: QueryList<NgxPrettyToggleWillChangeComponent>;\r\n\r\n  @HostBinding(`class.${DEFAULT_PREFIX}toggle`)\r\n  get _isToggle() { return this._toggleComp.length === 2 || this._toggleWillChangeComp.length === 2; }\r\n\r\n  // DEFAULT\r\n  @HostBinding(`class.${DEFAULT_PREFIX}default`)\r\n  get _isDefault() { return !this.isSwitch && !this._iconElem && !this._svgElem && !this._imageElem; }\r\n\r\n\r\n\r\n  // ----- CHILD SELECTOR AND BINDING -----\r\n  // ICON\r\n  @HostBinding(`class.${DEFAULT_PREFIX}icon`)\r\n  @ContentChild(NgxPrettyIconDirective, {static: false}) _iconElem: NgxPrettyIconDirective;\r\n\r\n  // SVG\r\n  @HostBinding(`class.${DEFAULT_PREFIX}svg`)\r\n  @ContentChild(NgxPrettySvgDirective, {static: false}) _svgElem: NgxPrettySvgDirective;\r\n\r\n  // IMAGE\r\n  @HostBinding(`class.${DEFAULT_PREFIX}image`)\r\n  @ContentChild(NgxPrettyImageDirective, {static: false}) _imageElem: NgxPrettyImageDirective;\r\n\r\n  // HOVER\r\n  @ContentChild(NgxPrettyHoverWillChangeComponent, {static: false}) _hoverWillChangeDir: NgxPrettyHoverWillChangeComponent;\r\n  @ContentChild(NgxPrettyHoverComponent, {static: false}) _hoverComp: NgxPrettyHoverComponent;\r\n\r\n  @HostBinding(`class.${DEFAULT_PREFIX}has-hover`)\r\n  get _isHover() { return this._hoverComp || this._hoverWillChangeDir; }\r\n\r\n  // Indeterminate\r\n  @ContentChild(NgxPrettyIndeterminateComponent, {static: false}) _indeterminateComp: NgxPrettyIndeterminateComponent;\r\n  @ContentChild(NgxPrettyIndeterminateWillChangeComponent, {static: false}) _indeterminateWillChangeComp: NgxPrettyIndeterminateWillChangeComponent;\r\n\r\n  @HostBinding(`class.${DEFAULT_PREFIX}has-indeterminate`)\r\n  get _isIndeterminate() { return this._indeterminateComp || this._indeterminateWillChangeComp; }\r\n\r\n\r\n  // ---------- PRIVATE METHODS ---------\r\n  public _onChange(event: Event, checked: boolean, value: string) {\r\n    // I stop propagation on the change event.\r\n    // Otherwise the change event, from the input element, will bubble up and\r\n    event.stopPropagation();\r\n    this.checked = checked;\r\n    this.change.emit({ value, checked, event });\r\n  }\r\n\r\n  // ---------- PUBLIC METHODS ---------\r\n  public setIndeterminate(value = true) {\r\n    this._inputElem.nativeElement.indeterminate = value;\r\n  }\r\n\r\n  public forceCheck(check: boolean) {\r\n    this.checked = check;\r\n    this.cd.markForCheck();\r\n  }\r\n}\r\n\r\n\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NgxPrettyRadioService {\r\n\r\n  public name: string;\r\n\r\n  constructor() { }\r\n}\r\n","import { Directive, Output, EventEmitter } from '@angular/core';\r\nimport { NgxPrettyRadioService } from '../ngx-pretty-checkbox.service';\r\nimport { GROUP_NAME } from '../model/params';\r\nimport { PrettyRadioChange } from '../model/interfaces';\r\n\r\nlet nextId = 1;\r\n\r\n@Directive({\r\n  selector: 'ngx-pretty-radio-group, p-radio-group',\r\n  providers: [NgxPrettyRadioService],\r\n  exportAs: 'ngxRadioGroup'\r\n})\r\nexport class NgxPrettyRadioGroupDirective {\r\n\r\n  public name = GROUP_NAME + nextId++;\r\n\r\n  @Output() change = new EventEmitter<PrettyRadioChange>();\r\n\r\n  constructor() {}\r\n\r\n  _emitChange(event: PrettyRadioChange) {\r\n    this.change.emit(event);\r\n  }\r\n\r\n}\r\n","import {\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  Output,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  Attribute,\r\n  AfterViewInit,\r\n  Renderer2,\r\n  Optional,\r\n  OnInit\r\n  } from '@angular/core';\r\nimport { DEFAULT_OUTLINE_PREFIX, DEFAULT_PREFIX, DEFAULT_PRETTY_CLASS_NAME } from '../model/params';\r\nimport { NgxPrettyHoverComponent } from './ngx-pretty-hover.component';\r\nimport { NgxPrettyIconDirective } from '../directives/ngx-pretty-icon.directive';\r\nimport { NgxPrettyImageDirective } from '../directives/ngx-pretty-image.directive';\r\nimport { NgxPrettySvgDirective } from '../directives/ngx-pretty-svg.directive';\r\nimport { NgxPrettyToggleComponent } from './ngx-pretty-toggle.component';\r\nimport {\r\n  PrettyCheckboxAnimation,\r\n  PrettyCheckboxColor,\r\n  PrettyCheckboxShape,\r\n  PrettyCheckboxStroke,\r\n  PrettyRadioChange\r\n  } from '../model/interfaces';\r\nimport { NgxPrettyHoverWillChangeComponent } from './ngx-pretty-hover-will-change.component';\r\nimport { NgxPrettyToggleWillChangeComponent } from './ngx-pretty-toggle-will-change.component';\r\nimport { NgxPrettyRadioGroupDirective } from './ngx-pretty-radio-group.component';\r\nimport { strToBoolean } from '../utility';\r\n// tslint:disable:use-host-property-decorator\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'ngx-pretty-radio:not([will-change]), p-radio:not([will-change])',\r\n  template: `\r\n    <input\r\n      #inputElem\r\n      type=\"radio\"\r\n      [name]=\"_name\"\r\n      [value]=\"value\"\r\n      [checked]=\"checked\"\r\n      [disabled]=\"disabled\"\r\n      (change)=\"_onChange($event, inputElem.checked, inputElem.value)\"/>\r\n\r\n    <div #stateElem *ngIf=\"!_isToggle\" class=\"state\">\r\n\r\n      <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n      <label><ng-content></ng-content></label>\r\n\r\n    </div>\r\n\r\n    <ng-content select=\"ngx-p-hover, p-hover, ngx-p-toggle, p-toggle\"></ng-content>\r\n  `,\r\n  // changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    'class': DEFAULT_PRETTY_CLASS_NAME\r\n  },\r\n  exportAs: 'ngxPrettyRadio'\r\n})\r\nexport class NgxPrettyRadioComponent implements AfterViewInit {\r\n\r\n  public readonly _prefix = DEFAULT_PREFIX;\r\n  public readonly _outlinePrefix = DEFAULT_OUTLINE_PREFIX;\r\n\r\n\r\n  @Input() checked = false;\r\n  @Input() disabled = false;\r\n  @Input() value;\r\n\r\n  @HostBinding(`class.${DEFAULT_PREFIX}locked`)\r\n  @Input() lock = false;\r\n\r\n\r\n  @ViewChild('inputElem', { static: true }) private _inputElem: ElementRef;\r\n  @ViewChild('stateElem', { static: false }) private _stateElem: ElementRef;\r\n\r\n  @Output() change = new EventEmitter<PrettyRadioChange>();\r\n\r\n\r\n  @ContentChild(NgxPrettyIconDirective, {static: false}) private _iconDir: NgxPrettyIconDirective;\r\n  @ContentChild(NgxPrettySvgDirective, {static: false}) private _svgDir: NgxPrettySvgDirective;\r\n  @ContentChild(NgxPrettyImageDirective, {static: false}) private _imgDir: NgxPrettyImageDirective;\r\n\r\n  @ContentChild(NgxPrettyHoverComponent, {static: false}) private _hoverDir: NgxPrettyHoverComponent;\r\n  @ContentChild(NgxPrettyHoverWillChangeComponent, {static: false}) private _hoverWillChangeDir: NgxPrettyHoverWillChangeComponent;\r\n\r\n  @ContentChildren(NgxPrettyToggleComponent) public _toggleComps: QueryList<NgxPrettyToggleComponent>;\r\n  @ContentChildren(NgxPrettyToggleWillChangeComponent) public _toggleWillChangeComps: QueryList<NgxPrettyToggleWillChangeComponent>;\r\n\r\n  constructor (\r\n    private renderer: Renderer2,\r\n    private el: ElementRef,\r\n    @Optional() private radioGroup: NgxPrettyRadioGroupDirective,\r\n\r\n    @Attribute('stroke')      private _stroke: PrettyCheckboxStroke,\r\n    @Attribute('shape')       private _shape: PrettyCheckboxShape,\r\n    @Attribute('animation')   private _animation: PrettyCheckboxAnimation,\r\n    @Attribute('isSwitch')    private _isSwitch = false,\r\n    @Attribute('bigger')      private _bigger = false,\r\n    @Attribute('enableFocus') private _enableFocus = false,\r\n    @Attribute('plain')       private _plain = false,\r\n\r\n    @Attribute('outline') private _outline = false,\r\n    @Attribute('color')   private _color: PrettyCheckboxColor,\r\n    @Attribute('name')   public _name: string,\r\n    ) {\r\n      if (!this._name && this.radioGroup) {\r\n        this._name = this.radioGroup.name;\r\n      }\r\n\r\n      this._isSwitch    = strToBoolean(this._isSwitch);\r\n      this._bigger      = strToBoolean(this._bigger);\r\n      this._enableFocus = strToBoolean(this._enableFocus);\r\n      this._plain       = strToBoolean(this._plain);\r\n      this._outline     = strToBoolean(this._outline);\r\n    }\r\n\r\n\r\n  ngAfterViewInit(): void {\r\n    const el = this.el.nativeElement;\r\n\r\n    if (this._isSwitch)    { this.renderer.addClass(el, `${DEFAULT_PREFIX}switch`); }\r\n    if (this._bigger)      { this.renderer.addClass(el, `${DEFAULT_PREFIX}bigger`); }\r\n    if (this._enableFocus) { this.renderer.addClass(el, `${DEFAULT_PREFIX}has-focus`); }\r\n    if (this._plain)       { this.renderer.addClass(el, `${DEFAULT_PREFIX}plain`); }\r\n\r\n    if (this._stroke)     { this.renderer.addClass(el, `${DEFAULT_PREFIX}${this._stroke}`); }\r\n    if (this._shape)      { this.renderer.addClass(el, `${DEFAULT_PREFIX}${this._shape}`); }\r\n    if (this._animation)  { this.renderer.addClass(el, `${DEFAULT_PREFIX}${this._animation}`); }\r\n\r\n    if (this._iconDir)          { this.renderer.addClass(el, `${DEFAULT_PREFIX}icon`); }\r\n    if (this._svgDir)           { this.renderer.addClass(el, `${DEFAULT_PREFIX}svg`); }\r\n    if (this._imgDir)           { this.renderer.addClass(el, `${DEFAULT_PREFIX}image`); }\r\n\r\n    if (this._hoverDir || this._hoverWillChangeDir) {\r\n      this.renderer.addClass(el, `${DEFAULT_PREFIX}has-hover`);\r\n    }\r\n\r\n    if (this._isToggle) { this.renderer.addClass(el, `${DEFAULT_PREFIX}toggle`); }\r\n\r\n    if (!this._isSwitch && !this._iconDir && !this._svgDir && !this._imgDir) {\r\n      this.renderer.addClass(el, `${DEFAULT_PREFIX}default`);\r\n    }\r\n\r\n    // STATE ELEM\r\n    if (this._color && !this._isToggle) {\r\n      this.renderer.addClass(this._stateElem.nativeElement,\r\n        `${DEFAULT_PREFIX}${this._color}${this._outline ? DEFAULT_OUTLINE_PREFIX : ''}`\r\n      );\r\n    }\r\n\r\n  }\r\n\r\n\r\n  // ---------- METHODS ---------\r\n  public _onChange(event: Event, checked: boolean, value: string) {\r\n    // I stop propagation on the change event.\r\n    // Otherwise the change event, from the input element, will bubble up and\r\n    event.stopPropagation();\r\n    this.change.emit({ value, checked, event });\r\n\r\n    if (this.radioGroup) {\r\n      this.radioGroup._emitChange({ value, checked, event });\r\n    }\r\n  }\r\n\r\n  public get _isToggle() { return this._toggleComps.length === 2 || this._toggleWillChangeComps.length === 2; }\r\n}\r\n","import {\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  Output,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  Optional\r\n  } from '@angular/core';\r\nimport { DEFAULT_OUTLINE_PREFIX, DEFAULT_PREFIX, DEFAULT_PRETTY_CLASS_NAME } from '../model/params';\r\nimport { NgxPrettyHoverComponent } from './ngx-pretty-hover.component';\r\nimport { NgxPrettyIconDirective } from '../directives/ngx-pretty-icon.directive';\r\nimport { NgxPrettyImageDirective } from '../directives/ngx-pretty-image.directive';\r\nimport { NgxPrettyIndeterminateComponent } from './ngx-pretty-Indeterminate.component';\r\nimport { NgxPrettySvgDirective } from '../directives/ngx-pretty-svg.directive';\r\nimport { NgxPrettyToggleComponent } from './ngx-pretty-toggle.component';\r\nimport {\r\n  PrettyCheckboxAnimation,\r\n  PrettyCheckBoxChange,\r\n  PrettyCheckboxColor,\r\n  PrettyCheckboxShape,\r\n  PrettyCheckboxStroke,\r\n  } from '../model/interfaces';\r\nimport { NgxPrettyHoverWillChangeComponent } from './ngx-pretty-hover-will-change.component';\r\nimport { NgxPrettyToggleWillChangeComponent } from './ngx-pretty-toggle-will-change.component';\r\nimport { NgxPrettyIndeterminateWillChangeComponent } from './ngx-pretty-Indeterminate-will-change.component';\r\nimport { NgxPrettyRadioGroupDirective } from './ngx-pretty-radio-group.component';\r\n// tslint:disable:use-host-property-decorator\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'ngx-pretty-radio[will-change], p-radio[will-change]',\r\n  template: `\r\n    <input\r\n      #inputElem\r\n      type=\"radio\"\r\n      [name]=\"name || radioGroupName\"\r\n      [value]=\"value\"\r\n      [checked]=\"checked\"\r\n      [disabled]=\"disabled\"\r\n      (change)=\"_onChange($event, inputElem.checked, inputElem.value)\"/>\r\n\r\n    <div *ngIf=\"!_isToggle\" class=\"state\"\r\n        [ngClass]=\"[ color ? _prefix + color + (outline ? _outlinePrefix : '') : '' ]\">\r\n\r\n        <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n        <label><ng-content></ng-content></label>\r\n    </div>\r\n\r\n    <ng-content select=\"ngx-p-indeterminate, p-indeterminate, ngx-p-hover, p-hover, ngx-p-toggle, p-toggle\"></ng-content>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    'class': DEFAULT_PRETTY_CLASS_NAME\r\n  },\r\n  exportAs: 'ngxPrettyRadio'\r\n})\r\nexport class NgxPrettyRadioWillChangeComponent {\r\n\r\n  constructor(@Optional() private radioGroup: NgxPrettyRadioGroupDirective) {\r\n    if (radioGroup) {\r\n      this.radioGroupName = radioGroup.name;\r\n    }\r\n  }\r\n\r\n  public readonly _prefix = DEFAULT_PREFIX;\r\n  public readonly _outlinePrefix = DEFAULT_OUTLINE_PREFIX;\r\n\r\n  @ViewChild('inputElem', { static: true }) private _inputElem: ElementRef;\r\n  @Output() change = new EventEmitter<PrettyCheckBoxChange>();\r\n\r\n\r\n  // ---------- INPUTS ----------\r\n  @Input() stroke: PrettyCheckboxStroke;\r\n  @Input() shape: PrettyCheckboxShape;\r\n  @Input() animation: PrettyCheckboxAnimation;\r\n  @Input() color: PrettyCheckboxColor;\r\n  @Input() outline = false; // COLOR . Can be used as Solid ( p-primary ) or Outline ( p-primary-o ).\r\n\r\n  @Input() checked = false;\r\n  @Input() disabled = false;\r\n  @Input() value;\r\n\r\n  public radioGroupName: string;\r\n  @Input() name: string;\r\n\r\n\r\n  // ----- INPUTS AND BINDING ------\r\n  // SWITCH\r\n  @HostBinding(`class.${DEFAULT_PREFIX}switch`)\r\n  @Input() isSwitch = false;\r\n\r\n  //  LOCK\r\n  @HostBinding(`class.${DEFAULT_PREFIX}locked`)\r\n  @Input() lock = false;\r\n\r\n  //  BIGGER\r\n  @HostBinding(`class.${DEFAULT_PREFIX}bigger`)\r\n  @Input() bigger = false;\r\n\r\n  //  FOCUS\r\n  @HostBinding(`class.${DEFAULT_PREFIX}has-focus`)\r\n  @Input() enableFocus = false;\r\n\r\n  //  PLAIN\r\n  @HostBinding(`class.${DEFAULT_PREFIX}plain`)\r\n  @Input() plain = false; // To remove the border ( when checkbox is checked )\r\n\r\n\r\n  // ---------- STROKE ----------\r\n  // Fill\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxStroke.Fill}`)\r\n  get _isFill() { return this.stroke === PrettyCheckboxStroke.Fill; }\r\n\r\n  // Slim\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxStroke.Slim}`)\r\n  get _isSlim() { return this.stroke === PrettyCheckboxStroke.Slim; }\r\n\r\n  // Thick\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxStroke.Thick}`)\r\n  get _isThick() { return this.stroke === PrettyCheckboxStroke.Thick; }\r\n\r\n\r\n  // ---------- SHAPE ----------\r\n  // Curve\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxShape.Curve}`)\r\n  get _isCurve() { return this.shape === PrettyCheckboxShape.Curve; }\r\n\r\n  // Round\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxShape.Round}`)\r\n  get _isRound() { return this.shape === PrettyCheckboxShape.Round; }\r\n\r\n\r\n  // ---------- ANIMATION ----------\r\n  // Smooth\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxAnimation.Smooth}`)\r\n  get _isSmooth() { return this.animation === PrettyCheckboxAnimation.Smooth; }\r\n\r\n  // Jelly\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxAnimation.Jelly}`)\r\n  get _isJelly() { return this.animation === PrettyCheckboxAnimation.Jelly; }\r\n\r\n  // Tada\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxAnimation.Tada}`)\r\n  get _isTada() { return this.animation === PrettyCheckboxAnimation.Tada; }\r\n\r\n  // Rotate\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxAnimation.Rotate}`)\r\n  get _isRotate() { return this.animation === PrettyCheckboxAnimation.Rotate; }\r\n\r\n  // Pulse\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxAnimation.Pulse}`)\r\n  get _isPulse() { return this.animation === PrettyCheckboxAnimation.Pulse; }\r\n\r\n\r\n  // ---------- BINDING ----------\r\n  // Toggle\r\n  @ContentChildren(NgxPrettyToggleComponent) _toggleComp: QueryList<NgxPrettyToggleComponent>;\r\n  @ContentChildren(NgxPrettyToggleWillChangeComponent) _toggleWillChangeComp: QueryList<NgxPrettyToggleWillChangeComponent>;\r\n\r\n  @HostBinding(`class.${DEFAULT_PREFIX}toggle`)\r\n  get _isToggle() { return this._toggleComp.length === 2 || this._toggleWillChangeComp.length === 2; }\r\n\r\n  // DEFAULT\r\n  @HostBinding(`class.${DEFAULT_PREFIX}default`)\r\n  get _isDefault() { return !this.isSwitch && !this._iconElem && !this._svgElem && !this._imageElem; }\r\n\r\n\r\n\r\n  // ----- CHILD SELECTOR AND BINDING -----\r\n  // ICON\r\n  @HostBinding(`class.${DEFAULT_PREFIX}icon`)\r\n  @ContentChild(NgxPrettyIconDirective, {static: false}) _iconElem: NgxPrettyIconDirective;\r\n\r\n  // SVG\r\n  @HostBinding(`class.${DEFAULT_PREFIX}svg`)\r\n  @ContentChild(NgxPrettySvgDirective, {static: false}) _svgElem: NgxPrettySvgDirective;\r\n\r\n  // IMAGE\r\n  @HostBinding(`class.${DEFAULT_PREFIX}image`)\r\n  @ContentChild(NgxPrettyImageDirective, {static: false}) _imageElem: NgxPrettyImageDirective;\r\n\r\n  // HOVER\r\n  @ContentChild(NgxPrettyHoverWillChangeComponent, {static: false}) _hoverWillChangeDir: NgxPrettyHoverWillChangeComponent;\r\n  @ContentChild(NgxPrettyHoverComponent, {static: false}) _hoverComp: NgxPrettyHoverComponent;\r\n\r\n  @HostBinding(`class.${DEFAULT_PREFIX}has-hover`)\r\n  get _isHover() { return this._hoverComp || this._hoverWillChangeDir; }\r\n\r\n\r\n  // ---------- METHODS ---------\r\n  public _onChange(event: Event, checked: boolean, value: string) {\r\n    // I stop propagation on the change event.\r\n    // Otherwise the change event, from the input element, will bubble up and\r\n    event.stopPropagation();\r\n    this.change.emit({ value, checked, event });\r\n\r\n    if (this.radioGroup) {\r\n      this.radioGroup._emitChange({ value, checked, event });\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { NgxPrettyCheckboxComponent } from './components/ngx-pretty-checkbox.component';\r\nimport { NgxPrettyIconDirective } from './directives/ngx-pretty-icon.directive';\r\nimport { NgxPrettySvgDirective } from './directives/ngx-pretty-svg.directive';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgxPrettyImageDirective } from './directives/ngx-pretty-image.directive';\r\nimport { NgxPrettyHoverComponent } from './components/ngx-pretty-hover.component';\r\nimport { NgxPrettyIndeterminateComponent } from './components/ngx-pretty-Indeterminate.component';\r\nimport { NgxPrettyToggleComponent } from './components/ngx-pretty-toggle.component';\r\nimport { NgxPrettyHoverWillChangeComponent } from './components/ngx-pretty-hover-will-change.component';\r\nimport { NgxPrettyCheckboxWillChangeComponent } from './components/ngx-pretty-checkbox-will-change.component';\r\nimport { NgxPrettyIndeterminateWillChangeComponent } from './components/ngx-pretty-Indeterminate-will-change.component';\r\nimport { NgxPrettyToggleWillChangeComponent } from './components/ngx-pretty-toggle-will-change.component';\r\nimport { NgxPrettyRadioGroupDirective } from './components/ngx-pretty-radio-group.component';\r\nimport { NgxPrettyRadioComponent } from './components/ngx-pretty-radio.component';\r\nimport { NgxPrettyRadioWillChangeComponent } from './components/ngx-pretty-radio-will-change.component';\r\n\r\nconst DECLARATIONS = [\r\n  NgxPrettyCheckboxComponent,\r\n  NgxPrettyCheckboxWillChangeComponent,\r\n\r\n  NgxPrettyIconDirective,\r\n  NgxPrettySvgDirective,\r\n  NgxPrettyImageDirective,\r\n\r\n  NgxPrettyToggleComponent,\r\n  NgxPrettyToggleWillChangeComponent,\r\n\r\n  NgxPrettyHoverComponent,\r\n  NgxPrettyHoverWillChangeComponent,\r\n\r\n  NgxPrettyIndeterminateComponent,\r\n  NgxPrettyIndeterminateWillChangeComponent,\r\n\r\n  NgxPrettyRadioGroupDirective,\r\n  NgxPrettyRadioComponent,\r\n  NgxPrettyRadioWillChangeComponent\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule\r\n  ],\r\n  declarations: [ DECLARATIONS ],\r\n  exports: [ DECLARATIONS ]\r\n})\r\nexport class NgxPrettyCheckboxModule { }\r\n"],"names":[],"mappings":"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"}