/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable:use-host-property-decorator
import { Input, ElementRef, Component, HostBinding, Renderer2, ChangeDetectionStrategy } from '@angular/core';
import { PrettyCheckboxColor, PrettyCheckBoxToggleType } from '../model/interfaces';
import { DEFAULT_PREFIX } from '../model/params';
import { getColorClassName } from '../utility';
export class NgxPrettyToggleWillChangeComponent {
    /**
     * @param {?} el
     * @param {?} renderer
     */
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.outline = false;
    }
    /**
     * @return {?}
     */
    get isToggleOn() { return this.type === PrettyCheckBoxToggleType.On; }
    /**
     * @return {?}
     */
    get isToggleOff() { return this.type === PrettyCheckBoxToggleType.Off; }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.color || changes.outline) {
            /** @type {?} */
            const oldClass = getColorClassName(changes.color ? changes.color.previousValue : this.color, changes.outline ? changes.outline.previousValue : null);
            /** @type {?} */
            const newClass = getColorClassName(changes.color ? changes.color.currentValue : this.color, changes.outline ? changes.outline.currentValue : null);
            this.renderer.removeClass(this.el.nativeElement, oldClass);
            this.renderer.addClass(this.el.nativeElement, newClass);
        }
    }
}
NgxPrettyToggleWillChangeComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-p-toggle[will-change], p-toggle[will-change]',
                template: `
    <ng-content select="[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]"></ng-content>
    <label><ng-content></ng-content></label>
  `,
                host: {
                    class: 'state'
                },
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
NgxPrettyToggleWillChangeComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
NgxPrettyToggleWillChangeComponent.propDecorators = {
    type: [{ type: Input }],
    isToggleOn: [{ type: HostBinding, args: [`class.${DEFAULT_PREFIX}on`,] }],
    isToggleOff: [{ type: HostBinding, args: [`class.${DEFAULT_PREFIX}off`,] }],
    color: [{ type: Input }],
    outline: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NgxPrettyToggleWillChangeComponent.prototype.type;
    /** @type {?} */
    NgxPrettyToggleWillChangeComponent.prototype.color;
    /** @type {?} */
    NgxPrettyToggleWillChangeComponent.prototype.outline;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyToggleWillChangeComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyToggleWillChangeComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXByZXR0eS10b2dnbGUtd2lsbC1jaGFuZ2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXByZXR0eS1jaGVja2JveC8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL25neC1wcmV0dHktdG9nZ2xlLXdpbGwtY2hhbmdlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUVBLE9BQU8sRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQTRCLFNBQVMsRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4SSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNwRixPQUFPLEVBQUUsY0FBYyxFQUEwQixNQUFNLGlCQUFpQixDQUFDO0FBQ3pFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLFlBQVksQ0FBQztBQWEvQyxNQUFNLE9BQU8sa0NBQWtDOzs7OztJQWM3QyxZQUFvQixFQUFjLEVBQVUsUUFBbUI7UUFBM0MsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVc7UUFGdEQsWUFBTyxHQUFHLEtBQUssQ0FBQztJQUUwQyxDQUFDOzs7O0lBVnBFLElBQ0ksVUFBVSxLQUFLLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyx3QkFBd0IsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDOzs7O0lBRXRFLElBQ0ksV0FBVyxLQUFLLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyx3QkFBd0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDOzs7OztJQVF4RSxXQUFXLENBQUMsT0FBc0I7UUFDaEMsSUFBSSxPQUFPLENBQUMsS0FBSyxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUU7O2tCQUU5QixRQUFRLEdBQ1osaUJBQWlCLENBQ2YsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQ3hELE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQ3ZEOztrQkFFRyxRQUFRLEdBQ1osaUJBQWlCLENBQ2YsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQ3ZELE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQ3REO1lBRUgsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDM0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDekQ7SUFDSCxDQUFDOzs7WUE3Q0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxrREFBa0Q7Z0JBQzVELFFBQVEsRUFBRTs7O0dBR1Q7Z0JBQ0QsSUFBSSxFQUFFO29CQUNKLEtBQUssRUFBRSxPQUFPO2lCQUNmO2dCQUNELGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2FBQ2hEOzs7O1lBZmUsVUFBVTtZQUFvRCxTQUFTOzs7bUJBa0JwRixLQUFLO3lCQUVMLFdBQVcsU0FBQyxTQUFTLGNBQWMsSUFBSTswQkFHdkMsV0FBVyxTQUFDLFNBQVMsY0FBYyxLQUFLO29CQUl4QyxLQUFLO3NCQUNMLEtBQUs7Ozs7SUFWTixrREFBd0M7O0lBU3hDLG1EQUFvQzs7SUFDcEMscURBQXlCOzs7OztJQUViLGdEQUFzQjs7Ozs7SUFBRSxzREFBMkIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0c2xpbnQ6ZGlzYWJsZTp1c2UtaG9zdC1wcm9wZXJ0eS1kZWNvcmF0b3JcclxuXHJcbmltcG9ydCB7IElucHV0LCBFbGVtZW50UmVmLCBDb21wb25lbnQsIEhvc3RCaW5kaW5nLCBTaW1wbGVDaGFuZ2VzLCBPbkNoYW5nZXMsIFJlbmRlcmVyMiwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgUHJldHR5Q2hlY2tib3hDb2xvciwgUHJldHR5Q2hlY2tCb3hUb2dnbGVUeXBlIH0gZnJvbSAnLi4vbW9kZWwvaW50ZXJmYWNlcyc7XHJcbmltcG9ydCB7IERFRkFVTFRfUFJFRklYLCBERUZBVUxUX09VVExJTkVfUFJFRklYIH0gZnJvbSAnLi4vbW9kZWwvcGFyYW1zJztcclxuaW1wb3J0IHsgZ2V0Q29sb3JDbGFzc05hbWUgfSBmcm9tICcuLi91dGlsaXR5JztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnbmd4LXAtdG9nZ2xlW3dpbGwtY2hhbmdlXSwgcC10b2dnbGVbd2lsbC1jaGFuZ2VdJyxcclxuICB0ZW1wbGF0ZTogYFxyXG4gICAgPG5nLWNvbnRlbnQgc2VsZWN0PVwiW3BJY29uXSwgW3AtaWNvbl0sIFtwU3ZnXSwgW3Atc3ZnXSwgW3BJbWFnZV0sIFtwLWltYWdlXVwiPjwvbmctY29udGVudD5cclxuICAgIDxsYWJlbD48bmctY29udGVudD48L25nLWNvbnRlbnQ+PC9sYWJlbD5cclxuICBgLFxyXG4gIGhvc3Q6IHtcclxuICAgIGNsYXNzOiAnc3RhdGUnXHJcbiAgfSxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmd4UHJldHR5VG9nZ2xlV2lsbENoYW5nZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XHJcblxyXG4gIEBJbnB1dCgpIHR5cGU6IFByZXR0eUNoZWNrQm94VG9nZ2xlVHlwZTtcclxuXHJcbiAgQEhvc3RCaW5kaW5nKGBjbGFzcy4ke0RFRkFVTFRfUFJFRklYfW9uYClcclxuICBnZXQgaXNUb2dnbGVPbigpIHsgcmV0dXJuIHRoaXMudHlwZSA9PT0gUHJldHR5Q2hlY2tCb3hUb2dnbGVUeXBlLk9uOyB9XHJcblxyXG4gIEBIb3N0QmluZGluZyhgY2xhc3MuJHtERUZBVUxUX1BSRUZJWH1vZmZgKVxyXG4gIGdldCBpc1RvZ2dsZU9mZigpIHsgcmV0dXJuIHRoaXMudHlwZSA9PT0gUHJldHR5Q2hlY2tCb3hUb2dnbGVUeXBlLk9mZjsgfVxyXG5cclxuXHJcbiAgQElucHV0KCkgY29sb3I6IFByZXR0eUNoZWNrYm94Q29sb3I7XHJcbiAgQElucHV0KCkgb3V0bGluZSA9IGZhbHNlO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmLCBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHsgfVxyXG5cclxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XHJcbiAgICBpZiAoY2hhbmdlcy5jb2xvciB8fCBjaGFuZ2VzLm91dGxpbmUpIHtcclxuXHJcbiAgICAgIGNvbnN0IG9sZENsYXNzID1cclxuICAgICAgICBnZXRDb2xvckNsYXNzTmFtZShcclxuICAgICAgICAgIGNoYW5nZXMuY29sb3IgPyBjaGFuZ2VzLmNvbG9yLnByZXZpb3VzVmFsdWUgOiB0aGlzLmNvbG9yLFxyXG4gICAgICAgICAgY2hhbmdlcy5vdXRsaW5lID8gY2hhbmdlcy5vdXRsaW5lLnByZXZpb3VzVmFsdWUgOiBudWxsXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgIGNvbnN0IG5ld0NsYXNzID1cclxuICAgICAgICBnZXRDb2xvckNsYXNzTmFtZShcclxuICAgICAgICAgIGNoYW5nZXMuY29sb3IgPyBjaGFuZ2VzLmNvbG9yLmN1cnJlbnRWYWx1ZSA6IHRoaXMuY29sb3IsXHJcbiAgICAgICAgICBjaGFuZ2VzLm91dGxpbmUgPyBjaGFuZ2VzLm91dGxpbmUuY3VycmVudFZhbHVlIDogbnVsbFxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUNsYXNzKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgb2xkQ2xhc3MpO1xyXG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgbmV3Q2xhc3MpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuIl19