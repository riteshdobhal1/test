/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable:use-host-property-decorator
import { ElementRef, Component, Renderer2, ChangeDetectionStrategy, Attribute } from '@angular/core';
import { PrettyCheckboxColor, PrettyCheckBoxToggleType } from '../model/interfaces';
import { DEFAULT_PREFIX, DEFAULT_OUTLINE_PREFIX } from '../model/params';
export class NgxPrettyToggleComponent {
    /**
     * @param {?} el
     * @param {?} renderer
     * @param {?=} _outline
     * @param {?=} _color
     * @param {?=} _type
     */
    constructor(el, renderer, _outline = false, _color, _type) {
        this.el = el;
        this.renderer = renderer;
        this._outline = _outline;
        this._color = _color;
        this._type = _type;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this._color) {
            this.renderer.addClass(this.el.nativeElement, `${DEFAULT_PREFIX}${this._color}${this._outline ? DEFAULT_OUTLINE_PREFIX : ''}`);
        }
        this.renderer.addClass(this.el.nativeElement, `${DEFAULT_PREFIX}${this._type}`);
    }
}
NgxPrettyToggleComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-p-toggle:not([will-change]), p-toggle:not([will-change])',
                template: `
    <ng-content select="[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]"></ng-content>
    <label><ng-content></ng-content></label>
  `,
                host: {
                    class: 'state'
                },
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
NgxPrettyToggleComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: undefined, decorators: [{ type: Attribute, args: ['outline',] }] },
    { type: PrettyCheckboxColor, decorators: [{ type: Attribute, args: ['color',] }] },
    { type: PrettyCheckBoxToggleType, decorators: [{ type: Attribute, args: ['type',] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxPrettyToggleComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyToggleComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyToggleComponent.prototype._outline;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyToggleComponent.prototype._color;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyToggleComponent.prototype._type;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXByZXR0eS10b2dnbGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXByZXR0eS1jaGVja2JveC8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL25neC1wcmV0dHktdG9nZ2xlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUVBLE9BQU8sRUFBUyxVQUFVLEVBQUUsU0FBUyxFQUFpQixTQUFTLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNILE9BQU8sRUFBRSxtQkFBbUIsRUFBRSx3QkFBd0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3BGLE9BQU8sRUFBRSxjQUFjLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQWN6RSxNQUFNLE9BQU8sd0JBQXdCOzs7Ozs7OztJQUVuQyxZQUNVLEVBQWMsRUFDZCxRQUFtQixFQUNHLFdBQVcsS0FBSyxFQUNoQixNQUEyQixFQUM1QixLQUErQjtRQUpwRCxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQ2QsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUNHLGFBQVEsR0FBUixRQUFRLENBQVE7UUFDaEIsV0FBTSxHQUFOLE1BQU0sQ0FBcUI7UUFDNUIsVUFBSyxHQUFMLEtBQUssQ0FBMEI7SUFDMUQsQ0FBQzs7OztJQUVMLGVBQWU7UUFDYixJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDZixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFDMUMsR0FBRyxjQUFjLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQ2hGLENBQUM7U0FDSDtRQUVELElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLEdBQUcsY0FBYyxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQ2xGLENBQUM7OztZQTdCRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLDhEQUE4RDtnQkFDeEUsUUFBUSxFQUFFOzs7R0FHVDtnQkFDRCxJQUFJLEVBQUU7b0JBQ0osS0FBSyxFQUFFLE9BQU87aUJBQ2Y7Z0JBQ0QsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07YUFDaEQ7Ozs7WUFmZSxVQUFVO1lBQTRCLFNBQVM7NENBcUIxRCxTQUFTLFNBQUMsU0FBUztZQXBCZixtQkFBbUIsdUJBcUJ2QixTQUFTLFNBQUMsT0FBTztZQXJCUSx3QkFBd0IsdUJBc0JqRCxTQUFTLFNBQUMsTUFBTTs7Ozs7OztJQUpqQixzQ0FBc0I7Ozs7O0lBQ3RCLDRDQUEyQjs7Ozs7SUFDM0IsNENBQThDOzs7OztJQUM5QywwQ0FBeUQ7Ozs7O0lBQ3pELHlDQUE0RCIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRzbGludDpkaXNhYmxlOnVzZS1ob3N0LXByb3BlcnR5LWRlY29yYXRvclxyXG5cclxuaW1wb3J0IHsgSW5wdXQsIEVsZW1lbnRSZWYsIENvbXBvbmVudCwgQWZ0ZXJWaWV3SW5pdCwgUmVuZGVyZXIyLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQXR0cmlidXRlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFByZXR0eUNoZWNrYm94Q29sb3IsIFByZXR0eUNoZWNrQm94VG9nZ2xlVHlwZSB9IGZyb20gJy4uL21vZGVsL2ludGVyZmFjZXMnO1xyXG5pbXBvcnQgeyBERUZBVUxUX1BSRUZJWCwgREVGQVVMVF9PVVRMSU5FX1BSRUZJWCB9IGZyb20gJy4uL21vZGVsL3BhcmFtcyc7XHJcbmltcG9ydCB7IGdldENvbG9yQ2xhc3NOYW1lIH0gZnJvbSAnLi4vdXRpbGl0eSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ25neC1wLXRvZ2dsZTpub3QoW3dpbGwtY2hhbmdlXSksIHAtdG9nZ2xlOm5vdChbd2lsbC1jaGFuZ2VdKScsXHJcbiAgdGVtcGxhdGU6IGBcclxuICAgIDxuZy1jb250ZW50IHNlbGVjdD1cIltwSWNvbl0sIFtwLWljb25dLCBbcFN2Z10sIFtwLXN2Z10sIFtwSW1hZ2VdLCBbcC1pbWFnZV1cIj48L25nLWNvbnRlbnQ+XHJcbiAgICA8bGFiZWw+PG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PjwvbGFiZWw+XHJcbiAgYCxcclxuICBob3N0OiB7XHJcbiAgICBjbGFzczogJ3N0YXRlJ1xyXG4gIH0sXHJcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcclxufSlcclxuZXhwb3J0IGNsYXNzIE5neFByZXR0eVRvZ2dsZUNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsXHJcbiAgICBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsXHJcbiAgICBAQXR0cmlidXRlKCdvdXRsaW5lJykgcHJpdmF0ZSBfb3V0bGluZSA9IGZhbHNlLFxyXG4gICAgQEF0dHJpYnV0ZSgnY29sb3InKSAgIHByaXZhdGUgX2NvbG9yOiBQcmV0dHlDaGVja2JveENvbG9yLFxyXG4gICAgQEF0dHJpYnV0ZSgndHlwZScpICAgcHJpdmF0ZSBfdHlwZTogUHJldHR5Q2hlY2tCb3hUb2dnbGVUeXBlLFxyXG4gICkgeyB9XHJcblxyXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgIGlmICh0aGlzLl9jb2xvcikge1xyXG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuZWwubmF0aXZlRWxlbWVudCxcclxuICAgICAgICBgJHtERUZBVUxUX1BSRUZJWH0ke3RoaXMuX2NvbG9yfSR7dGhpcy5fb3V0bGluZSA/IERFRkFVTFRfT1VUTElORV9QUkVGSVggOiAnJ31gXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsIGAke0RFRkFVTFRfUFJFRklYfSR7dGhpcy5fdHlwZX1gKTtcclxuICB9XHJcblxyXG59XHJcbiJdfQ==