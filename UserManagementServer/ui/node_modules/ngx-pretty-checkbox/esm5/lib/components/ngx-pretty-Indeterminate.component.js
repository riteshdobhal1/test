/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable:use-host-property-decorator
import { Component, ElementRef, Renderer2, ChangeDetectionStrategy, Attribute } from '@angular/core';
import { DEFAULT_PREFIX, DEFAULT_OUTLINE_PREFIX } from '../model/params';
import { PrettyCheckboxColor } from '../model/interfaces';
var NgxPrettyIndeterminateComponent = /** @class */ (function () {
    function NgxPrettyIndeterminateComponent(el, renderer, _outline, _color) {
        if (_outline === void 0) { _outline = false; }
        this.el = el;
        this.renderer = renderer;
        this._outline = _outline;
        this._color = _color;
    }
    /**
     * @return {?}
     */
    NgxPrettyIndeterminateComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this._color) {
            this.renderer.addClass(this.el.nativeElement, "" + DEFAULT_PREFIX + this._color + (this._outline ? DEFAULT_OUTLINE_PREFIX : ''));
        }
    };
    NgxPrettyIndeterminateComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-p-indeterminate:not([will-change]), p-indeterminate:not([will-change])',
                    template: "\n    <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\n    <label><ng-content></ng-content></label>\n  ",
                    host: {
                        class: "state " + DEFAULT_PREFIX + "is-indeterminate"
                    },
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    NgxPrettyIndeterminateComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: undefined, decorators: [{ type: Attribute, args: ['outline',] }] },
        { type: PrettyCheckboxColor, decorators: [{ type: Attribute, args: ['color',] }] }
    ]; };
    return NgxPrettyIndeterminateComponent;
}());
export { NgxPrettyIndeterminateComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxPrettyIndeterminateComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyIndeterminateComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyIndeterminateComponent.prototype._outline;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyIndeterminateComponent.prototype._color;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXByZXR0eS1JbmRldGVybWluYXRlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1wcmV0dHktY2hlY2tib3gvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9uZ3gtcHJldHR5LUluZGV0ZXJtaW5hdGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsT0FBTyxFQUFFLFNBQVMsRUFBUyxVQUFVLEVBQUUsU0FBUyxFQUFpQix1QkFBdUIsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0gsT0FBTyxFQUFFLGNBQWMsRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3pFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRTFEO0lBYUUseUNBQ1UsRUFBYyxFQUNkLFFBQW1CLEVBQ0csUUFBZ0IsRUFDaEIsTUFBMkI7UUFEM0IseUJBQUEsRUFBQSxnQkFBZ0I7UUFGdEMsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUNkLGFBQVEsR0FBUixRQUFRLENBQVc7UUFDRyxhQUFRLEdBQVIsUUFBUSxDQUFRO1FBQ2hCLFdBQU0sR0FBTixNQUFNLENBQXFCO0lBQ3ZELENBQUM7Ozs7SUFFTCx5REFBZTs7O0lBQWY7UUFDRSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDZixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFDMUMsS0FBRyxjQUFjLEdBQUcsSUFBSSxDQUFDLE1BQU0sSUFBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFFLENBQ2hGLENBQUM7U0FDSDtJQUNILENBQUM7O2dCQTFCRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLDRFQUE0RTtvQkFDdEYsUUFBUSxFQUFFLHNKQUdUO29CQUNELElBQUksRUFBRTt3QkFDSixLQUFLLEVBQUUsV0FBUyxjQUFjLHFCQUFrQjtxQkFDakQ7b0JBQ0QsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQ2hEOzs7O2dCQWQwQixVQUFVO2dCQUFFLFNBQVM7Z0RBb0IzQyxTQUFTLFNBQUMsU0FBUztnQkFsQmYsbUJBQW1CLHVCQW1CdkIsU0FBUyxTQUFDLE9BQU87O0lBWXRCLHNDQUFDO0NBQUEsQUE3QkQsSUE2QkM7U0FsQlksK0JBQStCOzs7Ozs7SUFHeEMsNkNBQXNCOzs7OztJQUN0QixtREFBMkI7Ozs7O0lBQzNCLG1EQUE4Qzs7Ozs7SUFDOUMsaURBQXlEIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHNsaW50OmRpc2FibGU6dXNlLWhvc3QtcHJvcGVydHktZGVjb3JhdG9yXHJcblxyXG5pbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBFbGVtZW50UmVmLCBSZW5kZXJlcjIsIEFmdGVyVmlld0luaXQsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBBdHRyaWJ1dGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgREVGQVVMVF9QUkVGSVgsIERFRkFVTFRfT1VUTElORV9QUkVGSVggfSBmcm9tICcuLi9tb2RlbC9wYXJhbXMnO1xyXG5pbXBvcnQgeyBQcmV0dHlDaGVja2JveENvbG9yIH0gZnJvbSAnLi4vbW9kZWwvaW50ZXJmYWNlcyc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ25neC1wLWluZGV0ZXJtaW5hdGU6bm90KFt3aWxsLWNoYW5nZV0pLCBwLWluZGV0ZXJtaW5hdGU6bm90KFt3aWxsLWNoYW5nZV0pJyxcclxuICB0ZW1wbGF0ZTogYFxyXG4gICAgPG5nLWNvbnRlbnQgc2VsZWN0PVwiW3BJY29uXSwgW3AtaWNvbl0sIFtwU3ZnXSwgW3Atc3ZnXSwgW3BJbWFnZV0sIFtwLWltYWdlXVwiPjwvbmctY29udGVudD5cclxuICAgIDxsYWJlbD48bmctY29udGVudD48L25nLWNvbnRlbnQ+PC9sYWJlbD5cclxuICBgLFxyXG4gIGhvc3Q6IHtcclxuICAgIGNsYXNzOiBgc3RhdGUgJHtERUZBVUxUX1BSRUZJWH1pcy1pbmRldGVybWluYXRlYFxyXG4gIH0sXHJcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcclxufSlcclxuZXhwb3J0IGNsYXNzIE5neFByZXR0eUluZGV0ZXJtaW5hdGVDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGVsOiBFbGVtZW50UmVmLFxyXG4gICAgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyLFxyXG4gICAgQEF0dHJpYnV0ZSgnb3V0bGluZScpIHByaXZhdGUgX291dGxpbmUgPSBmYWxzZSxcclxuICAgIEBBdHRyaWJ1dGUoJ2NvbG9yJykgICBwcml2YXRlIF9jb2xvcjogUHJldHR5Q2hlY2tib3hDb2xvcixcclxuICApIHsgfVxyXG5cclxuICBuZ0FmdGVyVmlld0luaXQoKSB7XHJcbiAgICBpZiAodGhpcy5fY29sb3IpIHtcclxuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsXHJcbiAgICAgICAgYCR7REVGQVVMVF9QUkVGSVh9JHt0aGlzLl9jb2xvcn0ke3RoaXMuX291dGxpbmUgPyBERUZBVUxUX09VVExJTkVfUFJFRklYIDogJyd9YFxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcblxyXG59XHJcbiJdfQ==