// AppCtrl - Responsible for holding the app-level info such as current page, profile options.
angular.module('gbApp.controllers', ['gbApp', 'gbApp.services', 'gbApp.globals']).controller('AppCtrl', ['$rootScope', '$scope', '$localStorage', 'session', 'metaDataService', 'SectionsMetaService', 'MenuService', 'AppService', 'NavigationService', 'ErrorService', '$cookieStore', '$cookies', '$location', 'GlobalService', '$sce', '$timeout', 'ModalService', 'InstanceHandler', 'FileUploader', 'UserTrackingService', 'DefaultFilterService', '$filter', 'WorkbenchService', '$window', '$interval', '$modal', '$controller', 'ExplorerService', 'LogVaultService', 'ConfigDiffService', 'RulesService',
function($rootScope, $scope, $localStorage, session, metaDataService, SectionsMetaService, MenuService, AppService, NavigationService, ErrorService, $cookieStore, $cookies, $location, GlobalService, $sce, $timeout, ModalService, InstanceHandler, FileUploader, UserTrackingService, DefaultFilterService, $filter, WorkbenchService, $window, $interval, $modal, $controller, ExplorerService, LogVaultService, ConfigDiffService, RulesService) {
	var appCtrl = this;
	appCtrl.info = {};
	appCtrl.info.currentToken = '';
	appCtrl.updateUserSuccessLogin = function(){
	
		 AppService.updateUserSuccessLogin().then(function(response) {
                                console.log(response)
                        })

	}		
	appCtrl.addPushToken = function(){
		console.log(Notification.permission);
		if(appCtrl.info.currentToken.length){
			var payload = {
				"username": metaDataService.getUserEmail(),
				"device_token": appCtrl.info.currentToken,
				"app_type": 1,
				"app_id": ""
			}
			console.log(payload)
			AppService.addPushToken(payload).then(function(response) {
				console.log(response)
			})
		}
		
	}

	appCtrl.removePushToken = function(){
		console.log(Notification.permission);
		if(appCtrl.info.currentToken.length){
			var payload = {
				"username": metaDataService.getUserEmail(),
				"device_token": appCtrl.info.currentToken,
				"app_type": 1,
				"app_id": ""
			}
			console.log(payload)
			AppService.removePushToken(payload).then(function(response) {
				console.log(response)
			})
		}
	}
	if ('permissions' in navigator) {
		navigator.permissions.query({ name: 'notifications' }).then(function (notificationPerm) {
			notificationPerm.onchange = function () {
				console.log("User decided to change his settings. New permission: " + notificationPerm.state);
				if (notificationPerm.state == "granted") {
					//call add token api
					appCtrl.addPushToken()
				}
				else if (notificationPerm.state == "denied" || notificationPerm.state == "prompt") {
					//call remove token api
					appCtrl.removePushToken()
				}
			};
		});
	}
	var milliseconds = (new Date).getTime();

	appCtrl.noSummaryDashboardMsg = GlobalService.getVal('noSummaryDashboardMsg');
	session.then(function() {
		if (!!GlobalService.getVal('invalidProjectLoaded')) {
			var modalInstance = ModalService.alertBox({
				msgKey : 'gbstudio_invalid_project'
			});
			modalInstance.result.then(function(response) {
				loadDefaultProduct();
			}, function(response) {
				loadDefaultProduct();
			});
		}

		if(!!GlobalService.getVal('projectListMsg')) {
			ModalService.alertBox({msgKey : 'projectListMsg'});
		}

		function loadDefaultProduct() {
			angular.forEach(appCtrl.domainList, function(value, key) {
				if (key == appCtrl.defaultProduct) {
					appCtrl.changeProduct(value, key);
				}
			});
		}

		appCtrl.showHelpModal = function(showBox) {
			if (!$localStorage.hideModal) {
				$modal.open({
					templateUrl : 'partials/show_info_modal.html',
					windowClass : 'show-info-modal',
					backdrop : 'static',
					controller : 'ShowInfoController as showInfoCtrl',
					resolve : {
						showCheckbox : function() {
							return showBox;
						}
					}
				});
			} else {
				delete $localStorage.hideModal;
			}
		};
		//appCtrl.updateUserSuccessLogin();
		var domainMetaObj = metaDataService.getDomain();
		var featureMetaObj = metaDataService.getFeatures();
		var userMetaObj = metaDataService.getUser();
		var infoserverDomain = GlobalService.getVal('infoserverDomain');
		appCtrl.showGlobalNotification = false;
		appCtrl.showGlobalNotificationMsg = GlobalService.getVal('apiCallCancelMsg');

		var manufacturer = GlobalService.getVal('manufacturer');
		var product = GlobalService.getVal('product');
		var schema = GlobalService.getVal('schema');
		if ($location.absUrl().match(/serialNumber=(.*)/)) {
			var dserialNumber = $location.absUrl().match(/serialNumber=(.*)/)[1];
			dserialNumber = unescape(dserialNumber);
			GlobalService.setSessionCookies("serialNumber=" + dserialNumber);
		}
		var feedbackButtonEnabled = !!GlobalService.getVal('feedbackButtonEnabled');
		// Holds application info
		
		appCtrl.info.hideWorkbench = false;
		appCtrl.info.loaded = false;
		appCtrl.domainList = {};
		appCtrl.projectsList = {};
		appCtrl.info.showStudio = GlobalService.getVal('showStudio');
		appCtrl.info.showLogStatus = GlobalService.getVal('logstatusEnabled');
		appCtrl.currentDomain = GlobalService.getVal('primaryDomain');
		appCtrl.currentDomainFullName = $location.host();
		appCtrl.gbHelpManualLink = GlobalService.getVal('help_link_2');
		appCtrl.appsVersion = GlobalService.getVal('appsVersion');
		appCtrl.info.mdvizFullIframe = true;
		appCtrl.info.explorerDataRestriction = metaDataService.getExplorerDataDuration();
		appCtrl.info.explorerDataRestrictionMsg = '';
		appCtrl.hideInfoPanel = function(){
			return (GlobalService.gbAPI.length > 0);
		};
		if(appCtrl.info.explorerDataRestriction !== ''){
			var msg = GlobalService.getVal('data_restriction_msg');
            appCtrl.info.explorerDataRestrictionMsg = msg.replace("${val}", appCtrl.info.explorerDataRestriction);
		}
		if(GlobalService.getVal('feature_label') === null || GlobalService.getVal('feature_label') === "" || GlobalService.getVal('feature_label').length === 0 || GlobalService.getVal('feature_label')[0] === "" || GlobalService.getVal('feature_label')[0] === "NA"){
		
			appCtrl.nav = {
							navExplorer : GlobalService.getVal('navExplorer'),
							navApps : GlobalService.getVal('navApps'),
							navWorkbench : GlobalService.getVal('navWorkbench'),
							navSupport : GlobalService.getVal('navSupport'),
							navHealth : GlobalService.getVal('navHealth'),
							navDashboards : GlobalService.getVal('navDashboards'),
							navRules : GlobalService.getVal('navRules'),
							navLog : GlobalService.getVal('navLog'),
							navUpload : GlobalService.getVal('navUpload'),
							mdViz: GlobalService.getVal('mdViz')
					};
		
						
	
			}else{
			appCtrl.nav = {
				navExplorer : GlobalService.getVal('feature_label')[0],
				navApps : GlobalService.getVal('navApps'),
				navWorkbench : GlobalService.getVal('feature_label')[1],
				navSupport : GlobalService.getVal('navSupport'),
				navHealth : GlobalService.getVal('feature_label')[2],
				navDashboards : GlobalService.getVal('feature_label')[3],
				navRules : GlobalService.getVal('feature_label')[4],
				navLog : GlobalService.getVal('feature_label')[5],
				navUpload : GlobalService.getVal('feature_label')[6],
				mdViz: GlobalService.getVal('mdViz')
			};
	
			}	
		appCtrl.info.showFeedback = false;

		if (!!feedbackButtonEnabled) {
			appCtrl.info.feedbackPluginOptions = {
				ajaxURL : infoserverDomain + "/feedback/" + manufacturer + "/" + product + "/" + schema,
				html2canvasURL : GlobalService.getVal('html2canvasUrl'),
				initialBox : true,
				postHTML : false,
				initButtonText : "Feedback",
				feedbackButton : ".feedback-button",
				"tpl.description" : "<div id='feedback-welcome' class='card'>                                 <div class='card-title input-field'>                                     <i class='material-icons left prefix feedback-icon'>feedback</i>                                     <div class='prefixed-header'>Feedback</div>                                 </div>                                 <p>Help us improve Glassbeam Studio by reporting issues, providing new feature ideas and/or suggestions to make your experience better.</p>                                 <textarea id='feedback-note-tmp' placeholder='Please add a description to your feedback'></textarea>                                 <p>Next, please help us identify areas of the page related to your description.</p>                                 <button id='feedback-welcome-next' class='btn-flat feedback-next-btn feedback-btn-gray' type='button'>Next</button>                                 <div id='feedback-welcome-error'>Please enter a description.</div>                                 <div class='feedback-wizard-close'>                                     <i class='material-icons waves-effect waves-red'>close</i>                                 </div>                             </div>",
				"tpl.highlighter" : "<div id='feedback-highlighter' class='card'>                                 <div class='card-title input-field'>                                     <i class='material-icons left prefix feedback-icon'>feedback</i>                                     <div class='prefixed-header'>Feedback</div>                                 </div>                                 <p>Please use the 'HIGHLIGHT' and 'BLACKOUT' tools to help us focus on the feature you would like to report.</p>                                 <p>You can drag this dialog box if it overlaps an area you want to focus/hide.</p>                                 <button class='btn waves-effect feedback-sethighlight feedback-active' type='button'>                                     <i class='material-icons left'>highlight</i>                                     <span>Highlight</span>                                 </button>                                 <label class='passive-text'>Highlight areas relevant to your feedback.</label>                                 <button class='btn waves-effect waves-light feedback-setblackout' type='button'>                                     <i class='material-icons left'>content_cut</i>                                     <span>Blackout</span>                                 </button>                                 <label class='passive-text lower'>Black out any personal information.</label>                                 <div class='feedback-buttons'>                                     <button id='feedback-highlighter-next' class='btn-flat feedback-next-btn feedback-btn-gray' type='button'>Next</button>                                     <button id='feedback-highlighter-back' class='btn-flat feedback-back-btn feedback-btn-gray left' type='button'>Back</button>                                 </div>                                 <div class='feedback-wizard-close'>                                     <i class='material-icons waves-effect waves-red'>close</i>                                 </div>                             </div>",
				"tpl.overview" : "<div id='feedback-overview' class='card'>                                 <div class='card-title input-field'>                                     <i class='material-icons left prefix feedback-icon'>feedback</i>                                     <div class='prefixed-header'>Feedback Overview</div>                                 </div>                                 <div id='feedback-overview-description'>                                     <div id='feedback-overview-description-text'>                                         <h3>Description</h3>                                     </div>                                 </div>                                 <div id='feedback-overview-screenshot'>                                     <h3>Screenshot</h3>                                 </div>                                 <div class='feedback-buttons'>                                     <button id='feedback-submit' class='btn-flat feedback-submit-btn feedback-btn-blue' type='button'>Submit</button>                                     <button id='feedback-overview-back' class='btn-flat feedback-back-btn feedback-btn-gray left' type='button'>Back</button>                                 </div>                                 <div id='feedback-overview-error'>Please enter a description.</div>                                 <div class='feedback-wizard-close'>                                     <i class='material-icons waves-effect waves-red'>close</i>                                 </div>                             </div>",
				"tpl.submitSuccess" : "<div id='feedback-submit-success' class='card'>                                 <div class='card-title input-field'>                                     <i class='material-icons left prefix feedback-icon'>feedback</i>                                     <div class='prefixed-header'>Feedback</div>                                 </div>                                     <p>Thank you for your feedback.</p>                                     <p>Please know that we appreciate your effort in helping us improve the application.</p>                                     <button class='btn-flat feedback-close-btn feedback-btn-gray' type='button'>OK</button>                                     <div class='feedback-wizard-close'>                                         <i class='material-icons waves-effect waves-red'>close</i>                                     </div>                                 </div>",
				"tpl.submitError" : "<div id='feedback-submit-error' class='card'>                                 <div class='card-title input-field'>                                     <i class='material-icons left prefix feedback-icon'>feedback</i>                                     <div class='prefixed-header'>Feedback</div>                                 </div>                                 <p>Sadly an error occured while sending your feedback. Please try again.</p>                                 <button class='btn-flat feedback-close-btn feedback-btn-gray' type='button'>OK</button>                                 <div class='feedback-wizard-close'>                                     <i class='material-icons waves-effect waves-red'>close</i>                                 </div>                             </div>"
			};

			$timeout(function() {
				appCtrl.info.showFeedback = true;
			}, 200);
		}

		appCtrl.hideLeftNav = false;
		$scope.firstTimeLoading = false;
		appCtrl.info.mps = manufacturer + "/" + product + "/" + schema;
		appCtrl.info.manufacturer = manufacturer;
		// Holds the greeting message.
		appCtrl.info.greeting = 'Welcome ';
		// Holds the valid logout link
		//check for SSO and normal user and do the necessary changes
		if ($cookies.loginurl) {
			appCtrl.info.logoutLink = $cookies.loginurl;
		} else {
			///appCtrl.info.logoutLink = GlobalService.getVal('redirect_login_url'); //removing gbapps login page to be logouturl 
			appCtrl.info.logoutLink = GlobalService.getVal('session_redirect_url');
		}

		var domain = GlobalService.getVal('primaryDomain');

		var cookieLogoutUrl;
		if (metaDataService.getSsoUser()) {
			if (metaDataService.getSsoLogoutUrl()) {
				cookieLogoutUrl = metaDataService.getSsoLogoutUrl();
			} else {
				cookieLogoutUrl = GlobalService.getVal('session_redirect_url').replace(/\?.*/, '');
			}

		} else {
			cookieLogoutUrl = appCtrl.info.logoutLink.replace(/\?.*/, '');
		}
		
		var landingPage = document.location.href.split("&");
		var landingPageUrl = landingPage[0];

		document.cookie = 'logouturl=' + cookieLogoutUrl + ";domain=" + domain + ";path=/";
		document.cookie = 'landingPageUrl=' + landingPageUrl + ";domain=" + domain + ";path=/";
		document.cookie = 'adminAddUserDefUrl='+window.location.pathname.replace('/', '');

		// Holds the help guide link for explorer help guide.
		if ($cookies.globalLogin == 0) {
			appCtrl.info.helpLink = GlobalService.getVal('help_link_local');
		} else {
			appCtrl.info.helpLink = GlobalService.getVal('help_link_global');
		}

		// Holds the user name of the user.
		appCtrl.info.user = metaDataService.getUserEmail();
		appCtrl.info.userName = metaDataService.getUserName();
		appCtrl.info.is_external = metaDataService.getUserType();
		if(appCtrl.info.is_external){
		    document.cookie = 'sessionRedirectUrl=' + GlobalService.getVal('session_redirect_url') + ";domain=" + domain + ";path=/";
		}
		appCtrl.info.external_logo = '/apps/app/img/' + metaDataService.getLogo();
		appCtrl.info.external_logourl = 'https://' + metaDataService.getlogourl();
		// appCtrl.info.internal_logo = metaDataService.getInternalLogo() ? '/apps/app/img/' + metaDataService.getInternalLogo() : '/apps/app/img/glassbeam.png';
		// appCtrl.info.showPoweredBy = metaDataService.getInternalLogo() ? true : false;
		var val = metaDataService.getInternalLogo();
		document.cookie = 'internal_logo=' + val + ";domain=" + domain + ";path=/";
		if(val && val !=='NA'){
			appCtrl.info.showPoweredBy = true;
			appCtrl.info.internal_logo = '/apps/app/img/' + metaDataService.getInternalLogo()
		}else{
			appCtrl.info.showPoweredBy = false;
			appCtrl.info.internal_logo = '/apps/app/img/glassbeam.png'
		}
		// Defines whether sso user or not ??
		appCtrl.info.ssoUser = metaDataService.getSsoUser();
		appCtrl.info.infoserverDomain = infoserverDomain;
		appCtrl.info.userOrg = metaDataService.getUserOrg();
		infoserverDomain = appCtrl.info.infoserverDomain;
		// Defines whether File Upload should be old or new
		// Defines the completion of authentication
		appCtrl.info.complete = false;
		appCtrl.info.dashboards_url = GlobalService.getVal('dashboards');
		appCtrl.info.analytics_url = GlobalService.getVal('analytics');
		appCtrl.info.health_check_dashboards_url = GlobalService.getVal('health_check_dashboards');
		//Set for features
		appCtrl.info.features = metaDataService.getFeatures();
		var userInfo = metaDataService.getUser();
		appCtrl.info.powerUser = ((appCtrl.info.features['admin']) ? true : false);
		appCtrl.info.loaded = true;
		var loadPage = metaDataService.getDefaultFeature();
		document.cookie = 'default_feature=' + loadPage + ";domain=" + domain + ";path=/";
		var freshLanding = true;
		var username = userInfo['email'];
		username = username?username.toLowerCase():'';
		if(appCtrl.info.ssoUser){

                var urlParams = new URLSearchParams(window.location.search);
                var mps = urlParams.get('mps');
		if(!$cookies.mps){	
                	document.cookie = "mps=" + mps + ";domain=" + domain + ";path=/";
		   }	
                }


		if (userInfo['show_info'] == true) {
			appCtrl.showHelpModal(true);
		}
		document.cookie = 'username=' + username + ";domain=" + domain + ";path=/";
		
		if (!!appCtrl.info.features['workbench'] && (userInfo['wb_user_name'] == "NA" || !userInfo['wb_user_name'])) {
			// fix for BG-8715
			// appCtrl.info.features['workbench'] = false;
			if (loadPage === 'workbench') {
				loadPage = 'dashboards';
			}
		}

		if (AppService.hideWorkbenchTab()) {
			appCtrl.info.hideWorkbench = true;
			if (loadPage === 'workbench') {
				loadPage = 'dashboards';
			}
		}

		if (!!appCtrl.info.features['workbench']) {
			if(GlobalService.getVal('createDataSourcePemission')){
				document.cookie = 'createDataSource=' + 1 + ";domain=" + domain + ";path=/";	
			}else{
				document.cookie = 'createDataSource=' + 0 + ";domain=" + domain + ";path=/";
			}
			document.cookie = 'gb_hide_options=' + 1 + ";domain=" + domain + ";path=/";
			if (userInfo['email'] !== WorkbenchService.getTableauUser() && userInfo['role'] !== 'glassbeam') {
				document.cookie = 'show_tableau_save_options=' + 0 + ";domain=." + domain + ";path=/";
			} else {
				document.cookie = 'show_tableau_save_options=' + 1 + ";domain=." + domain + ";path=/";
			}
		}

		$window.updateLogiTracking = function() {
        	UserTrackingService.standard_user_tracking('application', appCtrl.nav["navDashboards"], "logi_tracking", JSON.stringify({details: "logi"})).then(handleLogPortalSuccess, handleLogPortalError);
        };
		$window.tableauUserTracking = function() {
        	UserTrackingService.standard_user_tracking('application', appCtrl.nav["navDashboards"], "tableau_tracking", JSON.stringify({details: "tableau"})).then(handleLogPortalSuccess, handleLogPortalError);
        };
		$window.scratchpadUserTracking = function() {
                UserTrackingService.standard_user_tracking('application', 'scratchpad', "scratchpad_tracking", JSON.stringify({details: "scratchpad"})).then(handleLogPortalSuccess, handleLogPortalError);
		};
		
		$window.resizeIframeHeight = function(height){
			appCtrl.info.mdvizFullIframe = false;
			var iframe = $(window.top.document).find("#gb-mdviz-iframe");
			iframe.height(height+'px');
		}
		
		$window.notificationClick = function(data){
			console.log(data)
			//window.open(url, '_blank').focus();
		}
		var firstLoad = true;



		$window.moveToApplication = function(params) {
			if (params.app == "rules_and_alerts") {
				InstanceHandler.setVisible(false);
				//broadcast events with selected bundle
				$scope.$broadcast('bundleListFromLogVault');
				appCtrl.changeCurrentPage(params.app, null, true);
			}else if (params.app == "logvault") {
				LogVaultService.setLoadView(params);
				InstanceHandler.setVisible(false);
				appCtrl.changeCurrentPage(params.app, null, true);
			} else if (params.app == "explorer") {
				ExplorerService.setLoadView(params);
				InstanceHandler.setVisible(false);
				appCtrl.changeCurrentPage(params.app, null, true);
			} else if (params.app == "apps") {
				var result = {
					obs_url : params.observation,
					namespace_id : $filter('bundleName')(params.observation) + '-0',
					serial_num : params.sysid1,
					obs_date : params.obs_date
				};
				if(params['bundle_type']){
					result['bundle_type'] = params['bundle_type'];
				}
				var instance = {
					"type" : 'apps',
					"title" : 'View section/config diff',
					"name" : $filter('bundleName')(result.obs_url),
					"module" : getApplicationForTracking('dashboards'),
					"data" : {
						"result" : result,
						"bundle" : $filter('bundleName')(result.obs_url),
						"sysId" : params.sysid1,
						"sysId2" : params.sysid2,
						'observation' : result.obs_date
					}
				};
				if(params.type == 'savedView'){
					instance.data['view'] = params.view;
				}
				InstanceHandler.addInstance(instance);
				/*var dashboardView = params;
				if (params.sub_app == "section") {
					GlobalService.setVal("default_landing_page", "sectionview");
					GlobalService.setVal("default_landing_label", "Section View");
				} else if (params.sub_app == "config") {
					GlobalService.setVal("default_landing_page", "configdiff");
					GlobalService.setVal("default_landing_label", "Config Diff");
					ConfigDiffService.setLoadView(params);
					$timeout(function() {
						$scope.$broadcast('LoadConfigDiffView');
					}, 1000);
				}
				var instances = InstanceHandler.getInstances();
				var found = false;
				for (var i = 0; i < instances.length; i++) {
					if (instances[i].type == 'apps') {
						InstanceHandler.removeInstance(instances[i]);
						found = true;
						break;
					}
				}*/

				/*$timeout(function() {
					DefaultFilterService.setDefaultSysId({
						sys_id : instance.data["sysId"]
					});
					ConfigDiffService.setClusterId(instance.data["sysId"]);
					var bundle_name = instance.data.result["obs_url"];
					var obs_time = instance.data.result["obs_date"];
					var obs_url = instance.data.result["obs_url"];
					DefaultFilterService.setSelectedObservation({
						'bundle_name' : bundle_name,
						'obs_time' : obs_time,
						'obs_url' : obs_url
					});
					DefaultFilterService.setDefaultObservation({
						'bundle_name' : bundle_name,
						'obs_time' : obs_time,
						'obs_url' : obs_url
					});
					NavigationService.setUrl(GlobalService.getVal("default_landing_page"));
					MenuService.setCurrentLabel(GlobalService.getVal("default_landing_label"));
					SectionsMetaService.clearSectionView();
					//clear selected section
	                var sections = ConfigDiffService.getSections();
	                for (var i in sections) {
	                    sections[i]['selected'] = false;
	                    sections[i]['default'] = false;
	                    sections[i]['count'] = 2;
	                    ConfigDiffService.resetFilter(sections[i]);
	                }
	                ConfigDiffService.setSections(sections);
					ConfigDiffService.setAppliedView(null);
					UserTrackingService.getAllConfig().then(function(response) {
						var responseData = response.data.Data;
						if(AppService.isGbStudioApp()) {
				            responseData['config'] = !!responseData['default_config'] ? responseData['default_config'] : responseData['config'];
				        }
						metaDataService.setGbConfig(responseData['config']);
						InstanceHandler.addInstance(instance);
						var loadTimeout = !!firstLoad || params.sub_app == 'config' ? 5000 : 0;
						firstLoad = false;
						$timeout(function() {
							SectionsMetaService.getS2().then(function(response) {
								DefaultFilterService.setSubSys(response.data.Data);
								if(params.sub_app == 'section') {
									if(dashboardView.type == "custom") {
					                    var view = dashboardView.view;
					                    view.view_name = "Select View";
					                    $timeout(function() {
					                    	SectionsMetaService.applyView(view);
						                    SectionsMetaService.setSelectedView(view);
						                    SectionsMetaService.setSectionLoading(false);
					                    }, loadTimeout);

					                } else if (dashboardView.type == "savedView") {
					                    SectionsMetaService.getAllViews().then(function(response) {
					                        var view = $filter('filter')(response.data.Data, {view_name: dashboardView.view}, true) || [];
					                        if(view.length == 1) {
					                            $timeout(function() {
					                            	SectionsMetaService.loadView(view[0])
									                    .then(function (response) {
									                        SectionsMetaService.setSectionLoading(false);
									                        var appliedView;
									                        appliedView = response.data.Data[0];
									                        if (!!appliedView) {
									                            SectionsMetaService.applyView(appliedView);
									                            SectionsMetaService.setSelectedView(view[0]);
									                            // Applying the view that is fetched.
									                            UserTrackingService.standard_user_tracking(getApplicationForTracking('logvault'), 'Section View', 'Apply View', "{\'" + view[0]['view_name'] + "\'}")
									                                .then(successHandler, handleLogPortalError);
									                        } else {
									                            SectionsMetaService.setSectionLoading(false);
									                            ModalService.alertBox({msg: 'No Applied View'});
									                        }
									                    }, handleLogPortalError);
					                            }, loadTimeout);
					                        } else {
					                            SectionsMetaService.setSectionLoading(false);
					                            ModalService.alertBox({msg: "View not found"});
					                        }
					                    }, function(response) {
					                        SectionsMetaService.setSectionLoading(false);
					                        ModalService.alertBox({msg: "View not found"});
					                    });
					                }
								}
							}, function(response) {
								DefaultFilterService.setSubSys([]);
							});
						}, 500);
					}, function() {
					});
				}, 500);*/
			}
		};

		// Check whether a given feature is enabled or not
		$scope.isFeatureEnable = function(feature) {
			return appCtrl.info.features[feature];
		};
		//Get values from url
		$scope.getQueryVariable = function(variable) {
			var query = $window.location.search.substring(1);
			var vars = query.split("&");
			for (var i = 0; i < vars.length; i++) {
				var pair = vars[i].split("=");
				if (decodeURIComponent(pair[0]) == decodeURIComponent(variable)) {
					return decodeURIComponent(pair[1]);
				}
			}
		}
		//Get values from locastorage
		$scope.getQueryLocalstorage = function(LStorage, variable) {
			var query = LStorage;
			var vars = query.split("&");
			for (var i = 0; i < vars.length; i++) {
				var pair = vars[i].split("=");
				if (decodeURIComponent(pair[0]) == decodeURIComponent(variable)) {
					return decodeURIComponent(pair[1]);
				}
			}
		}
		//Read value from url if this is new tab view for section viewer and config diff
		var tabview = $localStorage.tabview;
		// $scope.getQueryVariable('tabview');
		var searchView = $scope.getQueryVariable('Log Bundle');
		if (tabview) {
			loadPage = "apps";
			freshLanding = false;
			var selsysid = $scope.getQueryLocalstorage(tabview, 'selsysid');
			var defaultSysId = eval("(" + selsysid + ")");
			DefaultFilterService.setDefaultSysId(defaultSysId);
			var selobservation = $scope.getQueryLocalstorage(tabview, 'selobservation');
			var selectedObservation = eval("(" + selobservation + ")");
			DefaultFilterService.setSelectedObservation(selectedObservation);

			var selobsgroup = $scope.getQueryLocalstorage(tabview, 'selobsgroup');
			DefaultFilterService.setSelectedObsGrp(selobsgroup);

			var selendcustomer = $scope.getQueryLocalstorage(tabview, 'selendcustomer');
			DefaultFilterService.setDefaultEndCust(eval("(" + selendcustomer + ")"));
			var tabType = $scope.getQueryLocalstorage(tabview, 'tabview')
			if (tabType === 'config') {
				GlobalService.setVal('default_landing_label', 'Config Diff');
				GlobalService.setVal('default_landing_page', 'configdiff');
			} else {
				GlobalService.setVal('default_landing_label', 'Section View');
				GlobalService.setVal('default_landing_page', 'sectionview');
			}
			var defaultObservation = defaultSysId["observations"][0];
			DefaultFilterService.setDefaultObservation(defaultObservation);
			//clear local storage one read it
			$localStorage.$reset();

		} else if (searchView) {
			loadPage = "explorer";
			freshLanding = false;
			var bundleData = {};

			bundleData['Log Bundle'] = searchView;
			bundleData['bundlename'] = $scope.getQueryVariable('bundlename');
			bundleData['bundle_id'] = $scope.getQueryVariable('bundle_id');
			ExplorerService.setBundleData(bundleData);
		}
		$scope.$on('changePageEvent', function(event, page) {
			appCtrl.changeCurrentPage(page, null, true);
		});
		// Changes the current page
		appCtrl.changeCurrentPage = function(page, bundleName, reload) {
			var domain = GlobalService.getVal('primaryDomain');
			document.cookie = 'currentApp=' + page + ";domain=" + domain + ";path=/";
			// $cookies.currentApp = page;
			if(sessionStorage.getItem("dash_mode") == "true"){
				if(metaDataService.getFeatures().dashboards!=undefined && metaDataService.getFeatures().dashboards==true){
					page = "dashboards";
				}else {
					sessionStorage.setItem("dash_mode","false");
					var adminEmail = GlobalService.getVal('dashmodeadminemail');
					ModalService.alertBox({msg : 'Error! You do not have access to dashboard page. Please contact <a href="mailto:'+adminEmail+'">'+adminEmail+'</a>.'});
				}
			}
			if(sessionStorage.getItem("clin_mode") == "true"){
				if(metaDataService.getFeatures().healthcheck!=undefined && metaDataService.getFeatures().healthcheck==true){
					page = "healthcheck";
				}else {
					sessionStorage.setItem("clin_mode","false");
					var adminEmail = GlobalService.getVal('dashmodeadminemail');
					ModalService.alertBox({msg : 'Error! You do not have access to healthcheck page. Please contact <a href="mailto:'+adminEmail+'">'+adminEmail+'</a>.'});
				}
			}
			metaDataService.setCurrentPage(page);
			if (bundleName) {
				reload = true;
				if (!bundleName.page) {
					DefaultFilterService.setLoadPage('sectionview');
				} else {
					if (bundleName.page == "section") {
						DefaultFilterService.setLoadPage('sectionview');
					} else if (bundleName.page == "config") {
						DefaultFilterService.setLoadPage('configdiff');
					}
				}

				DefaultFilterService.setLoadSysId(bundleName.sysid);
				DefaultFilterService.setLoadObservation(bundleName.obs_url);
				DefaultFilterService.setSelectedObsGrp('Last N');
				NavigationService.setUrl(GlobalService.getVal('default_landing_label'));
				if (MenuService.getAppsLoaded()) {
					if (!bundleName.page) {
						NavigationService.setUrl('sectionview');
						MenuService.setCurrentLabel('Section View');
					} else {
						if (bundleName.page == "section") {
							NavigationService.setUrl('sectionview');
							MenuService.setCurrentLabel('Section View');
						} else if (bundleName.page == "config") {
							NavigationService.setUrl('configdiff');
							MenuService.setCurrentLabel('Config Diff');
						}
					}
				}
				// if(angular.element(document.getElementById("sysIdDiv")).scope()) {
				// angular.element(document.getElementById("sysIdDiv")).scope().init();
				// }
				SectionsMetaService.setReady(false);
				var details = {
					'System ID' : bundleName.sysid,
					'Bundle Name' : $filter('bundleName')(bundleName.obs_url)
				};
				UserTrackingService.standard_user_tracking(getApplicationForTracking('logvault'), getApplicationForTracking('logvault'), "Switch to " + getApplicationForTracking('apps'), JSON.stringify(details)).then(handleLogPortalSuccess, handleLogPortalError);
			} else if (!freshLanding) {
				if (!!ExplorerService.getBundleData()) {
					UserTrackingService.standard_user_tracking(getApplicationForTracking('logvault'), getApplicationForTracking('logvault'), "Switch to " + getApplicationForTracking('explorer'), JSON.stringify(ExplorerService.getBundleData())).then(handleLogPortalSuccess, handleLogPortalError);
				} else {
					UserTrackingService.standard_user_tracking(getApplicationForTracking(page), getApplicationForTracking(page), "landing", JSON.stringify({})).then(handleLogPortalSuccess, handleLogPortalError);
				}
			}
			appCtrl.info.current = page;
			// if (page === 'dashboards') {
			// 	WorkbenchService.updateWorkbooks();
			// }
			//Show page loader
			angular.element(document.getElementById("gb-tab-loader")).css('display', 'block');
			//hide page gb-apps-body
			angular.element(document.getElementById("gb-tab-cntr")).css('display', 'none');
			$scope.$broadcast('AppLoadEvent-' + page, reload);
		};
		// Shows the modal for file upload.
		appCtrl.showUpload = function() {
			ErrorService.clearErrors('fileupload');
			UserTrackingService.getAllConfig().then(function(response) {
				// if (response.data.Msg.match(/timeout/)) {
				// $window.location.href = GlobalService.getVal('logout_url');
				// }

				if (!userInfo['is_external']) {
					$modal.open({
						templateUrl : 'partials/upload_popup.html',
						windowClass : false,
						backdrop : 'static',
						controller : 'FileUploadController as fileUploadCtrl',
						resolve : {
							fileUploadData : function() {
								return response.data.Data.file_upload_config;
							}
						}
					});
				} else {
					AppService.setFileUploadData(response.data.Data.file_upload_config);
					appCtrl.changeCurrentPage('file_upload');
				}

				UserTrackingService.standard_user_tracking(appCtrl.nav.navUpload, appCtrl.nav.navUpload, 'View', "{\'\'}").then(handleLogPortalSuccess, handleLogPortalError);
			}, handleLogPortalError);
		};

		appCtrl.showScratchpad = function() {
			appCtrl.info.mdvizFullIframe = true;
			metaDataService.setCurrentPage('scratchpad');
			appCtrl.info.current = 'scratchpad';
		};

		appCtrl.reloadIframe = function(){
			document.getElementById('gb-mdviz-iframe').src = './MDViz/index.html';
			appCtrl.info.mdvizFullIframe = true;
		}

		function getApplicationForTracking(page) {
			var application;
			if (page == 'logvault' || page == 'apps') {
				application = appCtrl.nav.navLog;
			} else if (page == 'explorer') {
				application = appCtrl.nav.navExplorer;
			} else if (page == 'rules_and_alerts') {
				application = appCtrl.nav.navRules;
			} else if (page == 'dashboards') {
				application = appCtrl.nav.navDashboards;
			} else if (page == 'healthcheck') {
				application = appCtrl.nav.navHealth;
			} else if (page == 'workbench') {
				application = appCtrl.nav.navWorkbench;
			} else if (page == 'file_upload') {
				application = appCtrl.nav.navUpload;
			} else {
				application = page;
			}
			return application;
		}

		if (loadPage == 'file_upload') {
			appCtrl.showUpload();
		} else {
			appCtrl.changeCurrentPage(loadPage);
		}

		if (freshLanding) {
			var module = "";
			if (loadPage == "apps") {
				module = GlobalService.getVal('default_landing_label');
			} else if (loadPage == "rules_and_alerts") {
				module = "Rules list";
			} else {
				module = getApplicationForTracking(loadPage);
			}
			delete $cookies.prevApplication;
			freshLanding = false;
			UserTrackingService.standard_user_tracking(getApplicationForTracking(loadPage), module, 'Default landing', "{\'\'}").then(handleLogPortalSuccess, handleLogPortalError);
		}

		GlobalService.setVal('features', appCtrl.info.features);
		appCtrl.info.complete = true;
		// Stores whether session is timed out or not
		appCtrl.info.sessionTimedOut = false;
		// Returns true or false based on whether or not to show the help link
		appCtrl.showHelp = function() {
			var bool = false;
			if (appCtrl.info.current === 'explorer' || appCtrl.info.current === 'apps' || appCtrl.info.current === 'dashboards' || appCtrl.info.current === 'logvault') {
				bool = true;
			}
			return bool;
		};

		appCtrl.logShowHelp = function() {
			UserTrackingService.standard_user_tracking(getApplicationForTracking(appCtrl.info.current), getApplicationForTracking(appCtrl.info.current), 'Show help', "{}").then(handleLogPortalSuccess, handleLogPortalError);
		};
		//HACK
		AppService.setAuthorized(true);
		AppService.setInfoServerUp(true);
		appCtrl.complete = true;
		appCtrl.dashboards_url = GlobalService.getVal('dashboards');
		appCtrl.analytics_url = GlobalService.getVal('analytics');

		//Get product list to display on man page
		AppService.getUserDomain(userInfo['role']).then(function(response) {
			if (response.data.Data) {
				var tempDomains = response.data.Data.domains;
				var domainList = {};
				angular.forEach(tempDomains, function(value, key) {
					if (!!key.length && key != "-") {
						domainList[key] = value;
					}
				});
				appCtrl.domainsCount = Object.keys(domainList).length;
				var realm_mps = response.data.Data.mps_uidomain;

				var filteredList = {};
				//filter this list with current product
				//var currentProduct = metaDataService.getManufacturer();
				//if(currentProduct) {
				for (var key in domainList) {
					var mps = domainList[key];
					/* var product = "";
					if(mps.indexOf(":") != -1){
					mps = mps.split(":");
					if(mps){
					product = mps[1];
					}
					}else if(mps.indexOf("/") != -1){
					mps = mps.split("/");
					if(mps){
					product = mps[1];
					}

					}*/
					//if(currentProduct == product) {
					if (appCtrl.info.mps == mps && !AppService.isGbStudioApp()) {
						appCtrl.currentProduct = key;
						//filteredList[key] = domainList[key];
					}
					if (userInfo['mps_def'] == mps) {
						appCtrl.defaultProduct = key;
					}
					/* else
					{
					filteredList[key] = domainList[key];
					} */
					//  }
				}
				appCtrl.domainList = domainList;
				appCtrl.realm_mps = realm_mps;
			}
		}, function(error) {
				appCtrl.domainList = [];
				appCtrl.realm_mps = '';
		});

		if (GlobalService.getVal('showStudio')) {
			appCtrl.projectsList = GlobalService.getVal('projectsList');
			angular.forEach(appCtrl.projectsList, function(value, key) {
				if (AppService.isGbStudioApp() && key == GlobalService.getVal('projectname')) {
					appCtrl.currentProduct = key;
				}
			});
		}

		appCtrl.showMultipleDomainList = function() {
			var productKeys = Object.keys(appCtrl.domainList) || [];
			var projectKeys = Object.keys(appCtrl.projectsList) || [];

			if ((productKeys.length + projectKeys.length) > 0) {
				return true;
			}
			return false;
		}
		appCtrl.changeProduct = function(mps, url) {
			var url = appCtrl.realm_mps[mps];
			//var curUrl = $location.absUrl().replace(/\?.*/, '');
			var curUrl = $location.absUrl();
			if(appCtrl.info.ssoUser){
				curUrl = $location.absUrl().replace(/\?.*/, '');
			}
			if (mps) {
				document.cookie = "mps=" + mps + ";domain=" + appCtrl.currentDomain + ";path=/";
				if (!!userInfo['show_info']) {
					$localStorage.hideModal = true;
				}
				UserTrackingService.standard_user_tracking(getApplicationForTracking(appCtrl.info.current), getApplicationForTracking(appCtrl.info.current), 'Switch product', JSON.stringify({
					'URL' : url,
					'MPS' : mps
				})).then(handleLogPortalSuccess, handleLogPortalError);
				$timeout(function() {
					if(appCtrl.info.ssoUser){
						$window.open(curUrl.replace($location.host(), url) + '?mps=' + mps, '_self');
					}else{
						$window.open(curUrl.replace($location.host(), url), '_self');
					}
				}, 200);
			}
		};
		appCtrl.changeProject = function(mps, project) {
			var curUrl = $location.absUrl().replace(/\?.*/, '');
			var url = $location.absUrl().replace(/\?.*/, '') + "?mps=" + mps + "&projectname=" + project;
			if (mps) {
				$timeout(function() {
					$window.open(url.replace($location.host(), GlobalService.getVal('role_details')['mps_uidomain'][GlobalService.getVal("gb_studio_apps_realm")]), '_self');
				}, 200);
			}
		};
		appCtrl.trackFeedback = function() {
			UserTrackingService.standard_user_tracking(getApplicationForTracking(appCtrl.info.current), getApplicationForTracking(appCtrl.info.current), 'Feedback', JSON.stringify({})).then(handleLogPortalSuccess, handleLogPortalError);
		};
		appCtrl.setDefaultDomain = function(mps, url) {
			var newUrl = appCtrl.realm_mps[mps];
			var urlDef = $window.location.pathname;
			urlDef = urlDef.replace(/^\//, "");
			var param = {
				realm_def : newUrl,
				url_def : urlDef,
				mps_def : mps
			};
			AppService.setDefaultDomain(param).then(function(response) {
				ModalService.alertBox({
					msg : 'Default domain set as \'' + url + '\''
				});
				appCtrl.defaultProduct = url;
			}, function(error) {
				ModalService.alertBox({
					msg : 'Failed!'
				});
			});
		};
		appCtrl.logoutUser = function() {
			localStorage.clear();
			AppService.logoutInfoserver(getApplicationForTracking(appCtrl.info.current)).then(handleLogoutInfoserver, handleLogoutInfoserver);

		};
		// Returns the trusted compiled html template from the given html snippet.
		$scope.renderHtml = function(html) {
			return $sce.trustAsHtml(html);
		};
		// Gets the values from the globals based on the given key.
		appCtrl.getValue = function(key) {
			return GlobalService.getVal(key);
		};

		// Returns the url for given feature
		appCtrl.getURL = function(key) {
			if (appCtrl.info.current == key && !appCtrl.info[key]) {
				appCtrl.info[key] = GlobalService.getVal(key);
			}
			return appCtrl.info[key];
		};
		// Defines whether the instance viewer is full screen or not.
		appCtrl.instanceViewerFullscreen = function() {
			return (InstanceHandler.isVisible());
		};

		// Defines whether instance viewer is active or not.
		appCtrl.isThereInstanceViewer = function() {
			return (InstanceHandler.getNumberOfInstances());
		};

		appCtrl.changePassword = function() {
			$modal.open({
				templateUrl : 'partials/changepassword.html',
				controller : 'ChangePasswordCtrl as changePswdCtrl',
				resolve : {
					application : function() {
						return getApplicationForTracking(appCtrl.info.current);
					}
				}
			})
		};
		appCtrl.loadGBStudio = function() {
			if (GlobalService.getVal('studioDown')) {
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[5]);
				ModalService.alertBox({
					msgKey : 'studio_down_message'
				});
			} else {
				$window.open(GlobalService.getVal('gb_studio_protocol') + "://" + GlobalService.getVal('studioSPLURL'), "gbstudio_tab");
			}
		};

		appCtrl.loadAdminConsole = function() {
			var adminUrl = GlobalService.getVal('umsDomain').replace('/v1','');
                        document.cookie = "adminClick=1;domain=" + domain + ";path=/";
			$window.open(adminUrl);
		};

		appCtrl.loadLogStatusConsole = function() {
			$window.open(GlobalService.getVal('logStatusUrl')+"?"+milliseconds, "logstatus_tab");
		};

		appCtrl.createRuleFromText = function() {
			InstanceHandler.setVisible(false);
			RulesService.loadExplorerRules();
			appCtrl.changeCurrentPage('rules_and_alerts');
		};
		$interval(function(){
			if(AppService.getRequestFromApps()){
				appCtrl.createRuleFromText();
				AppService.setRequestFromApps(false);
			}
		}, 1000);
		$scope.createRuleFromExplorer = function() {
			appCtrl.createRuleFromText();
		};

		function handleLogPortalSuccess() {

		}

		function handleLogPortalError(response) {
			if (!appCtrl.info.sessionTimedOut && response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/timeout/)) {
				appCtrl.info.sessionTimedOut = true;
				ModalService.sessionTimeout();
				return;
			}
		}

		function handleLogoutInfoserver() {
			/*
			*  clear cookies for current domain
			*/

			//Get all cookies for the current domain
			var theCookies = document.cookie.split(';');
			var cookiesList = [],
			    cookiesNameValue,
			    cookiesName;
			for (var i = 1; i <= theCookies.length; i++) {
				cookiesNameValue = theCookies[i - 1];
				cookiesName = cookiesNameValue.split("=")[0];
				cookiesName = cookiesName.trim();
				cookiesList.push(cookiesName);
			}

			//Set post date to expiry date fo all cookie
			for (var i = 0; i < cookiesList.length; i++) {
				cookiesName = cookiesList[i];
				document.cookie = cookiesName + "=;expires=Thu, 01 Jan 1970 00:00:00 GMT;domain=" + appCtrl.currentDomain + ";path=/";
			}
			//clear local storage
			$localStorage.$reset();
			var adminUrl = GlobalService.getVal('umsDomain').replace('/v1','');
                        //$window.open(adminUrl,'_self');

			//Redirect to login page
			
			$window.location.href = cookieLogoutUrl;

			//$window.open(cookieLogoutUrl, '_self');
			// $window.location.href = GlobalService.getVal('logout_url');
		}
		appCtrl.APICallWait = function() {
			GlobalService.APICallWait();
		};
		appCtrl.cancelHTTPCall = function() {
			//$window.location.reload();
			GlobalService.APICallCancel();
			appCtrl.showGlobalNotification = true;
		};
		appCtrl.closeGlobalNotification = function(){
			appCtrl.showGlobalNotification = false;
		};

		appCtrl.openSystemInfoPopup = function(){
			$modal.open({
				templateUrl : 'partials/systemInfo.html',
				controller : 'SystemInfoCtrl',
				resolve : {
					application : function() {
						return getApplicationForTracking(appCtrl.info.current);
					}
				},
				size: 'lg',
				backdrop: 'static'
			})
		}

		//Hide page loader
		if(sessionStorage.getItem("dash_mode") != "true"){
			document.getElementById("gb-full-page-loader").style.display = 'none';
		}
		//remove bpdytransparent from body
		document.body.className = document.body.className.replace('gb-bg-trasparent', '')
		//show page gb-apps-body
		document.getElementById("gb-apps-body").style.display = 'block';

		// BO: Inline help code
		$scope.enableContextualHelp = false;
		
		$scope.loadHelpContent = function(){
			$scope.enableContextualHelp = !$scope.enableContextualHelp;
			if($scope.enableContextualHelp){
				gbInlineHelp.showContextualIcon();
			}else{
				gbInlineHelp.hideContextualIcon();
			}
		}
		var rules_and_alerts_templates_inline_help = ['rules_list', 'add_rule', 'add_edit_template', 'add_edit_API_template', 'api_admin_config'];
		$scope.$on("$includeContentLoaded", function(event, templateName){
			var template = templateName.split('/');
			var page = template[template.length - 1].split(".")[0];
			if(rules_and_alerts_templates_inline_help.indexOf(page) >= 0 && $scope.enableContextualHelp){
				$timeout(function() {
					gbInlineHelp.resetRulesInlineHelp();
					gbInlineHelp.showContextualIcon();
					return;
				});
			}else{
				$timeout(function() {
					if($scope.enableContextualHelp){
						gbInlineHelp.showContextualIcon();
					}
				});
			}
		});

		// EO: Inline help code

		

		
		
		//service worker reristration
		appCtrl.info.currentToken = '';
		if ('serviceWorker' in navigator && 'PushManager' in window) {
			//console.log('Service Worker and Push is supported');
			var swRegistration = null;
			//initialize firebase app
			firebase.initializeApp(metaDataService.getFirebaseConfig().firebaseConfig);

			//initialize firebase messenging
			var messaging = firebase.messaging();

			//register the service worker
			navigator.serviceWorker.register("../../../../firebase-messaging-sw.js").then(function (swReg) {
				//console.log('Service Worker is registered', swReg);
				swRegistration = swReg;

				//check for the notification status
				if (Notification.permission == "default" || Notification.permission == "granted") {
					messaging.getToken({ vapidKey: metaDataService.getFirebaseConfig().vapidKey, serviceWorkerRegistration: swRegistration })
						.then(function (currentToken) {
							appCtrl.info.currentToken = currentToken;
							if (currentToken) {
								//console.log('current token for client: ', currentToken);
								appCtrl.addPushToken();
							} else {
								//console.log('No registration token available. Request permission to generate one.');

								// shows on the UI that permission is required 
							}
						}).catch(function (err) {
							//console.log('An error occurred while retrieving token. ', err);
							// catch error while creating client token
						});
				}
				//appCtrl.initializeFirebase(swRegistration)
			})
				.catch(function (error) {
					//console.error('Service Worker Error', error);
				});
			messaging.onMessage(function (payload) {
				console.log('foreground notification received. ', payload);

				//sampleNotification data
				// {
				// 	"data": {
				// 	  "rule_name": "Rule_1605009445897",
				// 	  "serial_number": "CT50059"
				// 	},
				// 	"from": "238274278844",
				// 	"priority": "normal",
				// 	"notification": {
				// 	  "title": "GDI rule triggered Subscription template 7.3",
				// 	  "body": "Updated-The rulename Rule_1605009445897 with name GDI notification rule & with priority EMERGENCY got triggered"
				// 	}
				//   }

				var notificationOptions = {
					body: payload.notification.body,
					icon: '/apps/dist/img/clinsight_resize2.png',
					data: payload.data
				};
				swRegistration.showNotification(payload.notification.title, notificationOptions);

				//broadcast event to healthcheck to call update the unread count
				if (appCtrl.info.current == 'healthcheck') {
					$timeout(function () {
						$scope.$broadcast('updateUnreadCount');
					}, 1000);
				}

			});
		} else {
			console.log('Push messaging is not supported');
			
		}
	});

	

}])

// ChangePasswordCtrl - Responsible for everything related to changing the password.
.controller('ChangePasswordCtrl', ['$modalInstance', 'PasswordService', 'GlobalService', 'metaDataService', 'UserTrackingService',
function($modalInstance, PasswordService, GlobalService, metaDataService, UserTrackingService) {
	var changePswdCtrl = this;
	changePswdCtrl.form = {
		visible : true,
		message : "",
		character_limit : GlobalService.getVal('passwd_maxlimit')
	};
	changePswdCtrl.getValue = function(key) {
		return GlobalService.getVal(key);
	}
	// Returns the whether the two new passwords matches each other or not.
	changePswdCtrl.matchPassword = function() {
		return changePswdCtrl.form.new_passwd !== changePswdCtrl.form.renew_passwd;
	};
	changePswdCtrl.maxLimit = function() {
		if (changePswdCtrl.form.new_passwd != undefined && changePswdCtrl.form.renew_passwd != undefined) {
			return changePswdCtrl.form.new_passwd.length > changePswdCtrl.form.character_limit || changePswdCtrl.form.renew_passwd.length > changePswdCtrl.form.character_limit;
		} else {
			return true;
		}

	};
	changePswdCtrl.checkPasswordValid = function(){
		var regex = /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[^\w\s]).{6,}$/;
        return regex.test(changePswdCtrl.form.new_passwd);
	}
	// Submits the form for changing the password.
	changePswdCtrl.submitForm = function(form) {
		if (form.userForm.$valid && !changePswdCtrl.matchPassword() && !changePswdCtrl.maxLimit() && changePswdCtrl.checkPasswordValid()) {
			// XHR to change the password.
			PasswordService.change(changePswdCtrl.form.new_passwd, metaDataService.getUserEmail()).then(successHandler, errorHandler);
		}
	};
	// Ok button click handler to close the modal.
	changePswdCtrl.ok = function() {
		$modalInstance.close("Ok");
	};
	// Cancel button click handler to close the modal.
	changePswdCtrl.cancel = function() {
		$modalInstance.dismiss("Dismissed");
	};
	function successHandler(response) {
		var application="ChangePassword";
		if (response.data == 'ERR_6') {
			changePswdCtrl.form.message = GlobalService.getVal('invalid_old_passwd');
		} else {
			changePswdCtrl.form.message = GlobalService.getVal('passwd_change_success');
			UserTrackingService.standard_user_tracking(application, application, "Change Password", "{}");
		}
		changePswdCtrl.form.visible = false;
	}

	function errorHandler(error) {
		changePswdCtrl.form.visible = false;
		changePswdCtrl.form.message = GlobalService.getVal('passwd_change_failure');
	}

}]).controller('SessionController', ['$modalInstance', 'GlobalService', 'AppService',
function($modalInstance, GlobalService, AppService) {
	var sessionCtrl = this;
	sessionCtrl.msg = GlobalService.getVal('session_timeout_msg');
	sessionCtrl.ok = function() {
		sessionTimeout();
		$modalInstance.close("Ok");
	};
	function sessionTimeout() {
		AppService.logoutSessionTimeout();
	}

	function badrequest() {

	}

}]).controller('AbortUploadController', ['$modalInstance', 'GlobalService',
function($modalInstance, GlobalService) {
	var abortCtrl = this;
	abortCtrl.msg = GlobalService.getVal('abort_upld');
	abortCtrl.hideAbortUpload = function() {
		$modalInstance.dismiss("cancel");
	};
	abortCtrl.abortUpload = function() {
		$modalInstance.close("ok");
	};
}]).controller('AlertController', ['$modalInstance', 'GlobalService', 'items', '$sce',
function($modalInstance, GlobalService, items, $sce) {
	var alertCtrl = this;
	if (items.msg) {
		alertCtrl.msg = items.msg
	} else {
		alertCtrl.msg = GlobalService.getVal(items.msgKey);
	}
	alertCtrl.ok = function() {
		$modalInstance.close("ok");
	};
	alertCtrl.renderHtml = function(html) {
		return $sce.trustAsHtml(html);
	};
}]).controller('ConfirmationController', ['$modalInstance', 'GlobalService', '$sce', 'titleObj', 'msgObj', 'successText', 'cancelText',
function($modalInstance, GlobalService, $sce, titleObj, msgObj, successText, cancelText) {
	var confirmationCtrl = this;
	if (titleObj.msg) {
		confirmationCtrl.title = titleObj.msg
	} else {
		confirmationCtrl.title = GlobalService.getVal(titleObj.msgKey);
	}
	if (msgObj.msg) {
		confirmationCtrl.msg = msgObj.msg
	} else {
		confirmationCtrl.msg = GlobalService.getVal(msgObj.msgKey);
	}
	confirmationCtrl.ok = function() {
		$modalInstance.close("ok");
	};
	confirmationCtrl.successText = successText;
	confirmationCtrl.cancelText = cancelText;
	confirmationCtrl.cancel = function() {
		$modalInstance.dismiss("cancel");
	};
	confirmationCtrl.renderHtml = function(html) {
		return $sce.trustAsHtml(html);
	};
}]).controller('FileUploadController', ['$modalInstance', 'FileUploader', 'GlobalService', 'ErrorService', 'ModalService', 'UserTrackingService', 'AppService', '$filter', 'fileUploadData', '$interval', '$sce',
function($modalInstance, FileUploader, GlobalService, ErrorService, ModalService, UserTrackingService, AppService, $filter, fileUploadData, $interval, $sce) {
	var fileUploadCtrl = this;
	fileUploadCtrl.uploadForm = {};
	fileUploadCtrl.info = {};
	fileUploadCtrl.fadeUploadModal = false;
	fileUploadCtrl.info.showCancelAllConfirmBox = false;
	fileUploadCtrl.info.mandatoryLabel = GlobalService.getVal('fileupload_mandatory_label');
	fileUploadCtrl.info.showMandatoryLabel = false;
	if (!fileUploadData || fileUploadData === 'NA') {
		AppService.hidePanelLoading();
		fileUploadData = AppService.getFileUploadData();
	}
	fileUploadCtrl.info.uploadData = fileUploadData.json_form ? JSON.parse(fileUploadData.json_form) : fileUploadData.json_form;
	for (i in fileUploadCtrl.info.uploadData) {
                if(fileUploadCtrl.info.uploadData[i]['mandatory'])
                        fileUploadCtrl.info.showMandatoryLabel = true;
        }

	fileUploadCtrl.info.uploadDataMaxSize = fileUploadData.max_upload_size;
	var infoserverDomain = GlobalService.getVal('infoserverDomain');
	var manufacturer = GlobalService.getVal('manufacturer');
	var product = GlobalService.getVal('product');
	var schema = GlobalService.getVal('schema');
	// Uploader object for file upload.
	fileUploadCtrl.info.uploader = new FileUploader({
		url : infoserverDomain + '/fileupload/uploadfile/' + manufacturer + '/' + product + '/' + schema,
		queueLimit : GlobalService.getVal('file_upld_limit'),
		filters : [{
			name : 'extensionFilter',
			fn : function(item) {
				var match = false,
				    i,
				    extList = fileUploadData.allowed_extension.split(', ');
				for (i in extList) {
					if (item.name.endsWith(extList[i])) {
						match = true;
					}
				}

				return match;
			}
		}],
		onAfterAddingFile : function(item) {
			checkSizeLimit();
		},
		onWhenAddingFileFailed : function(item, filter, options) {
			if (filter.name == 'queueLimit') {
				ErrorService.setError('fileupload', GlobalService.getVal('file_upld_limit_exceeded'));
			} else {
				ErrorService.setError('fileupload', GlobalService.getVal('file_upld_unsupported'));
			}
		},
		onErrorItem : function(item, response, status, headers) {
			if (!fileUploadCtrl.info.sessionTimedOut && response && response.hasOwnProperty('Msg') && response.Msg.match(/timeout/)) {
				if (!!$modalInstance) {
					$modalInstance.close("Ok");
				}
				fileUploadCtrl.info.sessionTimedOut = true;
				ModalService.sessionTimeout();
				return;
			}
		},
		onBeforeUploadItem : function(item) {
			var t_obj;
			angular.forEach(fileUploadCtrl.uploadForm, function(value, key) {
				t_obj = {};
				t_obj[key] = value.nodeVal;
				item.formData.push(t_obj);
				// console.info(item.formData);
			});
			fileUploadCtrl.info.uploadDone = false;
		},
		onCompleteAll : function() {
			var i,
			    success = false,
			    failure = false,
			    cancel = false,
			    details;
			details = {};
			for (i in fileUploadCtrl.uploadForm)
			if (fileUploadCtrl.uploadForm.hasOwnProperty(i)) {
				details[i] = fileUploadCtrl.uploadForm[i]['nodeVal'];
			}
			details['files'] = [];
			for (i in fileUploadCtrl.info.uploader.queue) {
				if (fileUploadCtrl.info.uploader.queue[i].isSuccess) {
					success = true;
					details['files'].push(fileUploadCtrl.info.uploader.queue[i]['file']['name']);
				} else if (fileUploadCtrl.info.uploader.queue[i].isCancel) {
					cancel = true;
				} else {
					failure = true;
				}
			}

			if (details['files'].length > 0) {
				UserTrackingService.standard_user_tracking(GlobalService.getVal('navUpload'), GlobalService.getVal('navUpload'), 'Upload', "{\'" + JSON.stringify(details) + "\'}").then(handleLogPortalSuccess, handleLogPortalError);
			}

			checkSizeLimit();
			if ((success && cancel && failure) || (success && cancel && !failure)) {
				ErrorService.setError('fileupload', GlobalService.getVal('file_upld_partial'));
			} else if (!success && cancel && !failure) {
				ErrorService.setError('fileupload', GlobalService.getVal('file_upld_cancel'));
			} else if (success && !cancel && !failure) {
				fileUploadCtrl.info.uploadDone = true;
			} else if ((!success && !cancel && failure) || (!success && cancel && failure) || (success && !cancel && failure)) {
				ErrorService.setError('fileupload', GlobalService.getVal('file_upld_fail'));
			} else {

			}
		}
	});
	
	fileUploadCtrl.beginUpload = function() {
		var i,
		    empty,
		    upload = true;
		checkSizeLimit();
		for (i in fileUploadCtrl.info.uploadData) {
			try {
				if (!!fileUploadCtrl.info.uploadData[i]['required']) {
					if (!!fileUploadCtrl.info.uploadData[i]['mandatory']) {
						if (fileUploadCtrl.uploadForm[fileUploadCtrl.info.uploadData[i]['name']].nodeVal == undefined || fileUploadCtrl.uploadForm[fileUploadCtrl.info.uploadData[i]['name']].nodeVal == "") {
							fileUploadCtrl.uploadForm[fileUploadCtrl.info.uploadData[i]['name']].error = true;
							empty = true;
						} else {
							fileUploadCtrl.uploadForm[fileUploadCtrl.info.uploadData[i]['name']].error = false;
						}
					}
				}
			} catch (e) {
				fileUploadCtrl.uploadForm[fileUploadCtrl.info.uploadData[i]['name']] = {};
				fileUploadCtrl.uploadForm[fileUploadCtrl.info.uploadData[i]['name']].error = true;
				empty = true;
			}

		}
		if (empty)
			upload = false;
		if (ErrorService.getErrors('fileupload').length == 0 && upload) {
			fileUploadCtrl.info.uploader.uploadAll();
		}
	};
	// Clears the upload queue
	fileUploadCtrl.removeAll = function() {
		fileUploadCtrl.info.uploadDone = false;
		fileUploadCtrl.info.uploader.clearQueue();
		ErrorService.clearErrors('fileupload');
	};
	// fileUploadCtrl.cancelAllUploads = function () {
	// var items = fileUploadCtrl.info.uploader.getNotUploadedItems().filter(function (item) {
	// return item.isUploading;
	// });
	// if (items.length > 0) {
	// fileUploadCtrl.info.showCancelAllConfirmBox = true;
	// }
	// }
	// fileUploadCtrl.cancelAllUploadsYES = function () {
	// fileUploadCtrl.info.showCancelAllConfirmBox = false;
	// cancelAll();
	// }
	// fileUploadCtrl.cancelAllUploadsNO = function () {
	// fileUploadCtrl.info.showCancelAllConfirmBox = false;
	// }
	// Removes the file from the queue.
	fileUploadCtrl.removeFile = function(item) {
		item.remove();
		checkSizeLimit();
		if (fileUploadCtrl.info.uploader.queue.length == 0) {
			fileUploadCtrl.info.uploadDone = false;
		}
	};
	// Returns all the file upload errors
	fileUploadCtrl.getUploadErrors = function() {
		return ErrorService.getErrors('fileupload');
	};
	fileUploadCtrl.closeUploadModal = function() {
		if (fileUploadCtrl.info.uploader.isUploading) {
			var modalInstance = ModalService.abortUpload();
			modalInstance.result.then(function() {
				cancelAll();
				cancelUpload();
			});
			fileUploadCtrl.fadeUploadModal = true;
		} else {
			cancelUpload();
		}
	};
	// Returns the trusted compiled html template from the given html snippet.
	fileUploadCtrl.renderHtml = function(html) {
		return $sce.trustAsHtml(html);
	};
	// Gets the values from the globals based on the given key.
	fileUploadCtrl.getValue = function(key) {
		return GlobalService.getVal(key);
	};
	// Clears the upload queue
	function cancelAll() {
		var uploadTimer = $interval(function() {
			var items = fileUploadCtrl.info.uploader.getNotUploadedItems().filter(function(item) {
				return item.isUploading;
			});
			if (items.length == 0) {
				$interval.cancel(uploadTimer);
				fileUploadCtrl.info.showCancelAllConfirmBox = false;
			}
			angular.forEach(items, function(item) {
				item.cancel && item.cancel();
			});
		}, 100);
	}

	function cancelUpload() {
		fileUploadCtrl.info.uploader.clearQueue();
		for (var i in fileUploadCtrl.uploadForm)
		if (fileUploadCtrl.uploadForm.hasOwnProperty(i)) {
			fileUploadCtrl.uploadForm[i].nodeVal = "";
			fileUploadCtrl.uploadForm[i].error = false;
		}
		ErrorService.clearErrors('fileupload');
		$modalInstance.close("Ok");
		fileUploadCtrl.info.uploadDone = false;
		fileUploadCtrl.fadeUploadModal = false;
	}

	// Checks the file size limit
	function checkSizeLimit() {
		var i,
		    sum = 0;
		for (i in fileUploadCtrl.info.uploader.queue) {
			sum += fileUploadCtrl.info.uploader.queue[i].file.size;
		}
		ErrorService.clearErrors('fileupload');
		if (sum > fileUploadCtrl.info.uploadDataMaxSize) {
			ErrorService.setError('fileupload', GlobalService.getVal('file_upld_maxsize') + '<span title="' + fileUploadCtrl.info.uploadDataMaxSize + ' B">' + $filter('fileSize')(fileUploadCtrl.info.uploadDataMaxSize) + '</span>');
		}
	}

	function handleLogPortalSuccess() {

	}

	function handleLogPortalError(response) {
		if (!fileUploadCtrl.info.sessionTimedOut && response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/timeout/)) {
			fileUploadCtrl.info.sessionTimedOut = true;
			ModalService.sessionTimeout();
			return;
		}
	}

}]).controller('InstanceCtrl', ['$scope', '$filter', 'InstanceHandler', 'GlobalService', '$timeout', '$sce', 'WorkbenchService', '$window', 'AppService', 'ExplorerService', 'ModalService',
function($scope, $filter, InstanceHandler, GlobalService, $timeout, $sce, WorkbenchService, $window, AppService, ExplorerService, ModalService) {

	$scope.selectedSections = {};
	$scope.delay = false;
	$scope.info = {};
	$scope.info.application = 'Explorer';
	// Stores whether session is timed out or not
	$scope.info.sessionTimedOut = false;
	$window.dashboardLoadingDone = function(event) {
		if(!event || !event.target) return;
		var instanceMd5 = event.target.className.match(/idashboard\-[^\s]*/)[0].replace("idashboard-", "");
		if(instanceMd5.indexOf("}}") == -1) {
			var instance = InstanceHandler.getInstanceByMD5(instanceMd5);
			if(!instance.iframeLoadingCheck){
				instance.iframeLoadingCheck = 1;
			}else{
				instance.iframeLoadingCheck++;				
			}
			$scope.checkIframeLoader(instance, instanceMd5);
		};
		/*if (((count - 2) % 2 == 0 && count > 2) && (navigator.userAgent.match(/Chrome/) || navigator.userAgent.match(/Safari/)) || navigator.userAgent.match(/Firefox/) || navigator.userAgent.match(/Edge/)) {
			$scope.checkIframeLoader(instanceMd5);
		}*/
	};
	$scope.checkIframeLoader = function(instance, instanceMd5){
		if (angular.element('#idashboard-iframe-div-' + instanceMd5 + '.gb-opacity-50-per')) {
			angular.element('#idashboard-iframe-div-' + instanceMd5 + '.gb-opacity-50-per').removeClass("gb-opacity-50-per").addClass("gb-opacity-100-per");
		}
		if (angular.element('#dashboard-content-loader-' + instanceMd5 + '.gb-show')) {
			angular.element('#dashboard-content-loader-' + instanceMd5 + '.gb-show').removeClass("gb-show").addClass("gb-hide");
		}
		if (!!instance) {
			delete instance.loading;
			InstanceHandler.updateInstanceByMD5(instanceMd5, instance);
			$scope.$apply();
		}
	}
	$scope.getDefaultTab = function() {
		return InstanceHandler.getDefaultTab();
	};
	$scope.setDefaultTab = function(tab, instance) {
		if (tab == 'changes') {
			if (instance.getNumberofSelectedSection() > 10) {
				ModalService.alertBox({
					msgKey : 'instance_view_max_section'
				});
				return;
			}
		}
		if (instance) {
			if (InstanceHandler.getDefaultTab() != tab) {
				instance.applyFilter(tab);
			}
		}
		InstanceHandler.setDefaultTab(tab);
	};

	$scope.showDisabledMsgViewChangesTab = function(tab) {
		InstanceHandler.showDisabledMsgViewChangesTab(tab);
	};

	$scope.getInstances = function() {
		return InstanceHandler.getInstances();
	};
	$scope.isVisible = function() {
		return !!InstanceHandler.getNumberOfInstances();
	};

	$scope.addInstance = function(instance, dname, d_id) {
		InstanceHandler.addInstance(instance, dname, d_id);
	};
	$scope.removeInstance = function(instance) {
		InstanceHandler.removeInstance(instance);
	};
	$scope.showInstance = function(instance) {
		InstanceHandler.showInstance(instance);
	};

	$scope.isViewerVisible = function() {
		return InstanceHandler.isVisible();
	};

	$scope.setViewerVisible = function(bool) {
		return InstanceHandler.setVisible(bool);
	};
	
	$scope.getiTabId = function(instance){
		return instance.md5+"-gb-instance-viewer-tab";
	};
	$scope.secureURL = function(url) {
		return $sce.trustAsResourceUrl(url);
	};

	// Returns the dynamic id generate to handle scrolling in section viewer.
	$scope.getId = function(section, md5) {
		if (!!section) {
			return section.namespace_id.split('-').pop() + md5 + '-section-content';
		} else {
			return "";
		}
	};

	// To refresh the dashboards
	$scope.getRefreshCount = function() {
		return InstanceHandler.getRefreshCount();
	};

	// Filter out the sections and subsections
	$scope.filterSections = function(sections, key) {
		var i,
		    result = {};
		if (key && key.length) {
			for (i in sections)
			if (sections.hasOwnProperty(i) && i != 'label') {
				if (sections[i].label.toUpperCase().indexOf(key.toUpperCase()) != -1) {
					result[i] = sections[i];
				}
			}
			return result;
		} else {
			return sections;
		}
	};

	$scope.getURL = function(type) {
		if (type == "event") {
			return GlobalService.getVal('intanceviewer_event');
		}

		if (type == "section") {
			return GlobalService.getVal('intanceviewer_section');
		}
	};

	// Generates the URL needed to download the bundle from instance viewer.
	$scope.generateUrlForBundle = function() {
		var i,
		    url = "",
		    tempUrl = "";
		if (arguments.length) {
			tempUrl = arguments[0].obs_url;
			tempUrl = tempUrl.split("/");
			tempUrl = tempUrl[tempUrl.length - 1];
			url += "obs_url=" + tempUrl;
		} else {
			for (i in $scope.bundleList) {
				if (url != "") {
					url += "&";
				}
				tempUrl = $scope.bundleList[i].obs_url;
				tempUrl = tempUrl.split("/");
				tempUrl = tempUrl[tempUrl.length - 1];
				url += "obs_url=" + tempUrl;
			}
		}
		return url;
	};
	// Returns the string for download of single file.
	$scope.generateUrlForFile = function(bundle, file, result) {
		if (result && result.bundleList && result.bundleList.bundles) {
			var bundlesList = result.bundleList.bundles;
			var filePath = "";
			for (var k = 0; k < bundlesList.length; k++) {
				if (($filter('bundleName')(bundlesList[k])) == result.file) {
					filePath = bundlesList[k];
					file = filePath;
					break;
				}
			}
		}
		var url = {},
		    t_bundle = {};
		t_bundle['bundle_name'] = bundle;
		t_bundle['files'] = [];
		t_bundle['files'].push(file);
		url['bundles'] = [];
		url['bundles'].push(t_bundle);
		url['download_type'] = "files";
		return JSON.stringify(url);
	};

	// Checks whether logged in user owns the given dashboard.
	$scope.isOwner = function(instance) {
		// console.info(instance.data.view.owner);
		return WorkbenchService.getUserId() === instance.owner;
	};

	// Takes the user to edit mode of tableau within instance viewer
	$scope.goToEdit = function(instance) {
		instance.data.mode = 'editor';
		instance.delay = false;
	};

	// Takes the user back to view mode within Instance Viewer
	$scope.goToView = function(instance) {
		instance.data.mode = 'viewer';
		instance.delay = false;
	};

	$scope.renderHtml = function(html) {
		return $sce.trustAsHtml(html);
	};

	$scope.unescape = function(content) {
		if (!content) {
			return;
		}
		return content.replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&#39;/g, '\'').replace(/&quot;/g, '"');
	};
}]).controller('ShowInfoController', ['$modalInstance', 'GlobalService', 'showCheckbox', 'AppService', '$filter',
function($modalInstance, GlobalService, showCheckbox, AppService, $filter) {
	var showInfoCtrl = this;

	showInfoCtrl.openedOnStartup = showCheckbox;
	showInfoCtrl.modalElements = $filter('filter')(GlobalService.getVal('startupModalFields'), {
		enabled : true
	}) || [];

	if (!!GlobalService.getVal('showVersionOnHelpModal')) {
		showInfoCtrl.appsVersion = GlobalService.getVal('appsVersion');
	}

	showInfoCtrl.close = function() {
		if (!!showInfoCtrl.startupModalCheckbox) {
			AppService.disableStartupModal();
		}
		$modalInstance.close('ok');

	};
}]).controller('SystemInfoCtrl', ['$modalInstance', 'GlobalService', 'RulesService', '$scope', '$cookies',
function($modalInstance, GlobalService, RulesService, $scope, $cookies) {
	$scope.info = {};
	$scope.info.sysPageSize = 200;
	$scope.info.sysidSearchObj = { "search": {} };
	$scope.info.sysIdList = [];
	$scope.loading = false;

	$scope.info.sysidPagination = {
		pageSiz: $scope.info.sysPageSize,
		startIndex: 0,
		endIndex: $scope.info.sysPageSize - 1,
		noOfPages: 0,
		currentPage: 1,
		paginationText: ''
	};

	$scope.init = function(){
		$scope.info.loading = true;
		$scope.info.colsLoading = true;
		RulesService.getSysidColList().then(function(response){
			$scope.info.sysIdAttributeList = response.data.Data.cols;
			$scope.info.colsLoading = false;
			$scope.getInitialSysidList();
		})
	}

	$scope.cancel = function() {
		$modalInstance.dismiss("cancel");
	};

	$scope.getInitialSysidList = function(){
		RulesService.getSysidList($scope.info.sysidPagination.startIndex, $scope.info.sysidPagination.endIndex + 1, $scope.info.sysidSearchObj, $cookies.username).then(function (response) {
			$scope.info.totalSysidCount = parseInt(response.data.Count);
			$scope.info.sysIdList = response.data.Data;
			$scope.info.loading = false;
			$scope.getPages();
		})
	}

	$scope.getSysId = function () {
		$scope.info.sysIdList = []
		$scope.info.loading = true;
		RulesService.getSysidList($scope.info.sysidPagination.startIndex, $scope.info.sysidPagination.endIndex, $scope.info.sysidSearchObj, $cookies.username).then(function (response) {
			$scope.info.totalSysidCount = parseInt(response.data.Count);
			$scope.info.sysIdList = response.data.Data;
			// $scope.info.shouldCallLoadPages && $scope.getPages();
			var endIndex = $scope.info.totalSysidCount <= $scope.info.sysidPagination.endIndex ? $scope.info.totalSysidCount : $scope.info.sysidPagination.endIndex + 1;
			$scope.info.sysidPagination.paginationText = 'Showing ' + ($scope.info.sysidPagination.startIndex + 1) + ' to ' + endIndex + ' of ' + $scope.info.totalSysidCount;
			$scope.info.loading = false
			// $scope.info.shouldCallLoadPages = false

		},function (response) {
			console.error("Unable to load ");
			if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
				
			}else{

			}
			handleSessionTimeout(response);
			$scope.info.sysIdList = []
		})
	}

	//getpage label
	$scope.getPageLabel = function (total, pageSiz, pageNo) {
		var start = Math.max($scope.getPageStart(pageSiz, pageNo), 0);
		var end = Math.min($scope.getPageStart(pageSiz, pageNo + 1), total);
		var obj = {};
		obj.startIndex = start;
		obj.endIndex = (end === $scope.info.totalSysidCount) ? $scope.info.totalSysidCount : end - 1;
		return obj;
	}

	//get page start
	$scope.getPageStart = function (pageSiz, pageNo) {
		return pageSiz * pageNo;
	}

	$scope.loadNextSet = function () {
		$scope.info.sysidPagination.currentPage = $scope.info.sysidPagination.currentPage + 1;
		var page = $scope.info.pages[$scope.info.sysidPagination.currentPage - 1];
		$scope.info.sysidPagination.startIndex = page.startIndex;
		$scope.info.sysidPagination.endIndex = page.endIndex;
		$scope.getSysId();

	}

	$scope.loadPrevSet = function () {
		$scope.info.sysidPagination.currentPage = $scope.info.sysidPagination.currentPage - 1;
		var page = $scope.info.pages[$scope.info.sysidPagination.currentPage - 1];
		$scope.info.sysidPagination.startIndex = page.startIndex;
		$scope.info.sysidPagination.endIndex = page.endIndex;
		$scope.getSysId();
	}

	$scope.resetPagination = function () {
		$scope.info.sysidPagination = {
			pageSiz: $scope.info.sysPageSize,
			startIndex: 0,
			endIndex: $scope.info.sysPageSize - 1,
			noOfPages: 0,
			currentPage: 1,
			paginationText: ''
		}
	}

	$scope.getPages = function () {
		$scope.resetPagination();
		$scope.info.sysidPagination.noOfPages = Math.ceil($scope.info.totalSysidCount / $scope.info.sysidPagination.pageSiz);
		$scope.info.pages = Array.from({ length: $scope.info.sysidPagination.noOfPages }, function (_, i) {
			return $scope.getPageLabel($scope.info.totalSysidCount, $scope.info.sysidPagination.pageSiz, i);
		});
	}

	$scope.init();
}])

angular.module('gbApp.services', []).factory('Authenticate', ['$http', '$cookies', '$location',
    function ($http, $cookies, $location) {
        return {
            authorize: function () {

            }
        };
    }]);
angular.module('gbApp.services').factory('ModalService', ['$modal', '$cookies',
    function ($modal, $cookies) {
        return {
            openModal: function (url, scope, myStyle, backdrop, escapeKey) {
                return $modal.open({
                    templateUrl: url,
                    windowClass: myStyle ? myStyle : '',
                    backdrop: backdrop ? backdrop : false,
                    keyboard  : !escapeKey?true:false,
                    scope: scope
                });
            },
            sessionTimeout: function () {

                delete $cookies.prevApplication;
		
                return $modal.open({
                    templateUrl: 'partials/session_timeout.html',
                    windowClass: false,
                    backdrop: 'static',
                    controller: 'SessionController as sessionCtrl'
                });
            },
            abortUpload: function () {
                return $modal.open({
                    templateUrl: 'partials/abort_upload.html',
                    windowClass: false,
                    backdrop: 'static',
                    controller: 'AbortUploadController as abortCtrl'
                });
            },
            alertBox: function (msgObj, backdrop) {
                return $modal.open({
                    templateUrl: 'partials/alert_box.html',
                    windowClass: false,
                    backdrop: backdrop === false?false: true,
                    controller: 'AlertController as alertCtrl',
                    resolve: {
                        items: function () {
                            return msgObj;
                        }
                    }
                });
            },
            confirmationBox: function (titleObj, msgObj, successText, cancelText) {
                return $modal.open({
                    templateUrl: 'partials/confirmation_box.html',
                    windowClass: false,
                    backdrop: true,
                    controller: 'ConfirmationController as confirmationCtrl',
                    resolve: {
                        titleObj: function () {
                            return titleObj;
                        },
                        msgObj: function () {
                            return msgObj;
                        },
                        successText: function () {
                            return successText;
                        },
                        cancelText: function () {
                            return cancelText;
                        }
                    }
                });
            }
        };
    }]);
angular.module('gbApp.services').factory('metaDataService', ['$modal', '$cookies', 'GlobalService', '$location', 'RulesTestWithLogvault',
function($modal, $cookies, GlobalService, $location, RulesTestWithLogvault) {
    var domain = {};
    var feature = {};
    var user = {};
    var config = {};
    var gbconfig = {};
    var explorerDataDuration = "";
    var currentPage = "", dashboardtype = "", raACurrentPage="";
    var firebaseConfig = {};
    var clinsightReportUrl = "";
    function gbTrim(str) {
        return str.replace(/^\s+|\s+$/g, '');
    }
    return {
        setCurrentPage : function(page){
            currentPage = page;
        },
        getCurrentPage : function(page){
            return currentPage;
        },
        setDashboardType : function(type){
            dashboardtype = type;
        },
        getDashboardType : function(){
            return dashboardtype;
        },
        setRaACurrentPage : function(page){
            raACurrentPage = page;
            RulesTestWithLogvault.setCurrentPage(page);
        },
        getRaACurrentPage : function(){
            return raACurrentPage;
        },
        setDomain : function(domainInfo) {
            domain = domainInfo;
            GlobalService.setVal('feature_label', domain["feature_label"]);
            GlobalService.setVal('ssoLogoutUrl', domain["sso_logout_url"]);
        },
        setFeature : function(featuresInfo) {
            feature = featuresInfo;
        },
        setUser : function(userInfo) {
            user = userInfo;
            GlobalService.setVal('userSso', user.sso);
        },
        setExplorerDataDuration : function(duration) {
            explorerDataDuration = duration;
        },
        getExplorerDataDuration : function() {
            return explorerDataDuration;
        },
        getDomain : function(){
            return domain;
        },
        getDefaultFeature : function(){
           return !!user.is_external ? domain["def_feature_external"] : domain["def_feature_internal"];
        },
        getUser : function() {
            return user;
        },
        //DOMAIN INFO -GETTER
        getManufacturer : function() {
            return domain.mfr;
        },
        getProduct : function() {
            return domain.prod;
        },
        getSchema : function() {
            return domain.sch;
        },
        getNsrEnabled : function() {
            return domain["nsr_enabled"];         
        },
        getNsrType : function() {
            return domain["nsr_type"];            
        },
        getSsoIdpId : function() {
            return domain["sso_idp_id"];          
        },
        getSsoLoginUrl : function() {
            return domain["sso_login_url"];           
        },
        getSsoLogoutUrl : function() {
            return domain["sso_logout_url"];          
        },
        getSsoParams : function() {
            return domain["sso_params"];          
        },
        getSsoParamsSfdc : function() {
            return domain["sso_params_sfdc"];         
        },
        getSsoRoles : function() {
            return domain["sso_roles"];           
        },
        getEndCustomer : function() {
            return domain["ec"];          
        },
        getFeedbackApiKey: function() {
            return domain["feedback_api_key"];            
        },
        getFeedbackBtn : function() {
            return domain["feedback_button"];         
        },
        getLogo : function() {
            return domain["logo"];            
        },
        getInternalLogo : function() {
            return domain["logo_internal"];          
        },
        getlogourl : function() {
            return domain["logo_url"];            
        },
        //FEATURES INFO -GETTER
        getFeatures : function() {
            var mps = null;
            if(!!GlobalService.getVal('showStudio') && GlobalService.getVal('role_details').mps_uidomain[GlobalService.getVal('gb_studio_apps_realm')] == $location.host()) {
                mps = this.getStudioMPS().replace(/\//g, ":");
            } else {
                mps = GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema');
            }
            
            if(feature) {
                var tabList = [];
                /*for(var key in feature["features"]) {
                    tabList = feature["features"][key];
                    break;
                }*/
                for(var key in feature) {
						
					if(key == mps)
					{ 
                    tabList = feature[key];
                    break;
					}
                }
                if(tabList && tabList.split) {
                    tabList = tabList.split(',');
                    //trim white sapaces
                    for(var i = 0; i < tabList.length; i++) {
                        tabList[i] = gbTrim(tabList[i]);
                    }
                }else{
                    return {};
                }
                var  jsonObj = {};
                for(var i = 0; i < tabList.length; i++) {
                    jsonObj[tabList[i]] = true;
                }
                return jsonObj;
            }
        },
        //GET USER INFO
        getUserEmail : function() {
            return user.email;
        },
	    getUserType : function() {
            return user.is_external;
        },
        getUserFirstName : function() {
            return user.first_name;
        },
        getUserLastName : function() {
            return user.last_name;
        },
        getDashAdmin : function() {
            return user.dashboard_admin;
        },
        getUserName : function() {
            if((!user.first_name && !user.last_name) || (user.first_name == 'NA' && user.last_name == 'NA')){
                return user.email;
            }
            return (user.first_name != 'NA' ? (user.first_name + " ") : '') + (user.last_name != 'NA'? user.last_name : '');
        },
        getUserRole : function() {
            return user.role;
        },

        getUserEndCustomer: function () {
            return user.end_customer;
        },
        getUserOrgType : function() {
            return user.org_type;
        },
        getUserOrg : function() {
            return user.org;
        },
        getSsoUser : function() {
            return user.sso;
        },
        //UI Config
        setUiConfig : function(uiconfig){
            config = uiconfig;
        },
        getUiConfig : function(uiconfig){
            return config;
        },
        //GB Config
        setGbConfig : function(config){
            gbconfig = config;
        },
        getGbConfig : function(uiconfig){
            return gbconfig;
        },
        isSysid2Enable : function(){
            if(gbconfig['filter_columns'] && gbconfig['filter_columns'].length && gbconfig['filter_columns'].length > 0){
                if(gbconfig['filter_columns'].indexOf('sysid2') != -1){
                    return true;
                }
            }
            return false;
        },
        getStudioURL : function(){
            if(GlobalService.getVal('role_details')){
                var roleDetails = GlobalService.getVal('role_details');
                var studioUrl = roleDetails['mps_uidomain'][GlobalService.getVal('gb_studio_apps_realm')];
                return studioUrl;
            }else{
                return null;
            }
            
        },
        getStudioMPS : function(){
            return GlobalService.getVal('gbstudio_manufacturer')+"/"+GlobalService.getVal('gbstudio_product')+"/"+GlobalService.getVal('gbstudio_schema');
        },
        getStringToDate : function(str){
            return moment(str, 'YYYY-MM-DD HH:mm:ss').toDate();
        },
        getTodayDate : function(){
            return moment(moment.utc().format('YYYY-MM-DD HH:mm:ss'), 'YYYY-MM-DD HH:mm:ss').toDate();
        },
        //firebase Config
        setFirebaseConfig : function(fobj){
            firebaseConfig = fobj;
        },
        getFirebaseConfig : function(){
            return firebaseConfig;
        }
    };
}]);
angular.module('gbApp.services').factory('AppService', ['$http', '$window', 'GlobalService', '$cookies', '$location', 'metaDataService', 'WorkbenchService',
    function ( $http, $window, GlobalService, $cookies, $location, metaDataService, WorkbenchService) {
        var info_srv_up = false, authorized = false, uploadData, requestFromApps = false;

        return {
            getRequestFromApps: function(){
                return requestFromApps;
            },
            setRequestFromApps: function(value){
                requestFromApps = value;
            },
            logOutUrl: function() {
                $window.location.href = (getCookie("loginurl") ? getCookie("loginurl") : GlobalService.getVal('session_redirect_url')).replace(/\?.*/, '');
            },
            isInfoServerUp: function () {
                return info_srv_up;
            },
            setInfoServerUp: function (bool) {
                info_srv_up = bool;
            },
            setAuthorized: function (bool) {
                authorized = bool;
            },
            setFileUploadData: function(data) {
                uploadData = data;
            },
            getFileUploadData: function() {
                return uploadData;
            },
            isAuthorized: function () {
                return authorized;
            },
            getUploadData: function () {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                return $http.get(infoserverDomain + '/fileupload/jsonform/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'),
                    {cache: true}
                );
            },
            logoutUser: function (protocol, domain, username, cust_id, cgi_sess_id) {
                // return $http.get(protocol + '://' + domain + '/gb/ui/prod/redirect_logout.cgi?username=' + username + '&cust_id=' + cust_id + '&CGISESSID=' + cgi_sess_id);
            },
            logoutInfoserver: function (application) {
                var umsDomain = GlobalService.getVal('umsDomain');
                delete $cookies.prevApplication;
                return $http.get(umsDomain + '/aa/logout?mps='+GlobalService.getVal('manufacturer')+':'+GlobalService.getVal('product')+':'+GlobalService.getVal('schema')+'&feature='+application);
            },
	    updateUserSuccessLogin: function (){
		var umsDomain = GlobalService.getVal('umsDomain');    
		return $http.post(umsDomain + '/aa/updateloginsuccess');
	    }, 
            logoutSessionTimeout: function () {
                localStorage.clear();
                this.logoutInfoserver()
                    .then(this.logOutUrl, this.logOutUrl);
            },
            hidePanelLoading: function () {                
                //Show page loader
                angular.element(document.getElementById("gb-tab-loader")).css('display', 'none');
                //hide page gb-apps-body
                angular.element(document.getElementById("gb-tab-cntr")).css('display', 'block');
            },
            getUserDomain: function (role) {
                var umsDomain = GlobalService.getVal('umsDomain');
                return $http.get(umsDomain + '/admin/role/domains/'+ (!!this.isGbStudioApp() ? GlobalService.getVal('gbstudio_manufacturer') : GlobalService.getVal('manufacturer')) + '/' + role);
            },
            getGBStudioProjects: function() {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                return $http.get(infoserverDomain + "/studio/user/projects");
            },
            setDefaultDomain: function (params) {
                var umsDomain = GlobalService.getVal('umsDomain');
                return $http.post(umsDomain + "/user/update/defaults/" + GlobalService.getVal('manufacturer') , params);
            },
            refreshMeta: function() {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                return $http.get(infoserverDomain + "/meta/refresh/" + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'));
            },
            getMPS : function(gbstudio){
                var mps = $cookies.mps;
                //For GB studion app
                if(this.isGbStudioApp()){
                    //read mps from query parameter and set it into cookies
                    mps = this.getMPSfromQueryParam();
                    return mps;
                }
                //for SSO case
                if(!mps || mps == 'null' || mps == 'Null'){
                    mps = this.getMPSfromQueryParam();
                }else{
                    mps = mps.replace(/:/g,'/');
                }
                return mps;
            },
            isGbStudioApp : function(){
                var gbStudioURL = metaDataService.getStudioURL();
                return(gbStudioURL == $location.host());
            },
            getMPSfromQueryParam: function(){                
                //check if url have mps as parameter; for SSO case
                var regex = new RegExp("(?:[?&]+mps=)([^&]*)?", "i");
                var match = regex.exec($window.location.href);
                var mps =  match === null ? match : match[1];        
                mps = unescape(mps);
                mps = mps.replace(/:/g,'/');                    
                //get domain name from url
                // var domain = $location.host().split(/\.(.+)?/)[1];
                // document.cookie = "mps="+mps.replace(/\//g, ":")+";domain="+domain+";path=/";  
                return mps;
            },

            isDemoUser : function(){
		var demo_realms = GlobalService.getVal('gb_demo_apps_realms');
		
		for(var i=0; i < demo_realms.length ;i++){
		  if(GlobalService.getVal('role_details').mps_uidomain[demo_realms[i]] == $location.host()){
			return true;
		   }
		}
		return false;
	    },	

            hideWorkbenchTab: function() {
            	if((metaDataService.getUser()['email'] == WorkbenchService.getTableauUser()) || (metaDataService.getUser()['org_type'] == GlobalService.getVal('gbUserOrgType')) || (metaDataService.getUser()['org_type'] == GlobalService.getVal('studioUserOrgType') && this.isGbStudioApp()) || (metaDataService.getUser()['org_type'] == GlobalService.getVal('wbUserOrgType')) && this.isDemoUser()) {
            		return false;
            	}
            	return true;
            },
            disableStartupModal: function() {
            	var umsDomain = GlobalService.getVal('umsDomain');
            	return $http.post(umsDomain + "/user/disable/info/" + GlobalService.getVal('manufacturer'));
            },
            
            addPushToken: function(payload) {
            	var umsDomain = GlobalService.getVal('umsDomain');
            	return $http.post(umsDomain + "/user_info/update/device_info", payload)
            },

            removePushToken: function(payload) {
            	var umsDomain = GlobalService.getVal('umsDomain');
            	return $http.post(umsDomain + "/user_info/delete/device_info", payload)
            },

            //get clinsight report url if present else ""
            getClinsightUrl: function(payload) {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
            	return $http.get(infoserverDomain + "/dashboards/healthcheckreport/" + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'))
            },
        };
    }]);

angular.module('gbApp.services').factory('PasswordService', ['$http', 'GlobalService',
    function ($http, GlobalService) {
        return {
            change: function (new_passwd, email) {
                var umsDomain = GlobalService.getVal('umsDomain');
                return $http.post(umsDomain + "/user/change/passwd/" + GlobalService.getVal('manufacturer') , {
                    email: email,
                    token_id : "",
                    passwd: new_passwd
                });
            }
        };
    }]);

angular.module('gbApp.services').factory('UtilService',  [ 'ModalService',
    function (ModalService) {
        return {
            parseDate: function (datestr) {
                return new Date(datestr.replace(/-/g, "/").replace('T', ' ').substring(0, 19));
            },
            localPagination: function(){
                return {
                    currentPage : 1,
                    pageSize : 10,
                    totalPages : 1,
                    totalRecs : 0,
                    firstBtn : false,
                    prevBtn : false,
                    nextBtn :  false,
                    lastBtn :  false,
                    data : [],
                    currentRecordsSet : [],
                    startIndex:0,
                    endIndex:0,
                    msg : "",
                    next : function(){
                        this.firstBtn = true;
                        this.prevBtn = true;
                        this.currentPage++;
                        if(this.currentPage >= this.totalPages){
                            this.nextBtn =  false;
                            this.lastBtn =  false;
                            this.currentPage = this.totalPages;
                        }else{
                            if(this.endIndex > this.totalRecs){
                                this.endIndex = this.totalRecs;
                                this.nextBtn =  false;
                                this.lastBtn =  false;
                            }else{
                                this.nextBtn =  true;
                                this.lastBtn =  true;
                            }
                        }
                        this.startIndex = (this.currentPage - 1)*this.pageSize;
                        this.endIndex = this.currentPage * this.pageSize;
                        if(this.endIndex > this.totalRecs){
                            this.endIndex = this.totalRecs;
                            this.nextBtn =  false;
                            this.lastBtn =  false;
                        }
                        this.process(true);
                    },
                    prev : function(){
                        this.nextBtn = true;
                        this.lastBtn = true;
                        this.currentPage--;
                        if(this.currentPage <= 1){
                        this.currentPage = 1;
                        this.firstBtn = false;
                        this.prevBtn = false;
                        this.startIndex = 0;
                        this.endIndex = this.pageSize;
                        }else{
                        this.firstBtn = true;
                        this.prevBtn = true;
                        }
                        this.startIndex = (this.currentPage - 1)*this.pageSize;
                        this.endIndex = this.currentPage * this.pageSize;
                        this.process(true);
                    },
                    first : function(){
                        this.firstBtn = false;
                        this.prevBtn = false;
                        this.nextBtn =  true;
                        this.lastBtn =  true;
                        this.currentPage = 1;
                        this.startIndex = 0;
                        this.endIndex = this.pageSize;
                        this.process(true);
                    },
                    last : function(){
                        this.firstBtn = true;
                        this.prevBtn = true;
                        this.nextBtn =  false;
                        this.lastBtn =  false;
                        this.currentPage = this.totalPages;
                        this.startIndex = (this.currentPage - 1)*this.pageSize;
                        this.endIndex = this.totalRecs;
                        this.process(true);
                    },
                    init : function(data){
                        this.data = data;
                        this.firstBtn = false;
                        this.prevBtn = false;
                        this.nextBtn =  false;
                        this.lastBtn =  false;
                        this.currentPage = 1;
                        this.totalRecs = this.data.length;
                        this.currentRecordsSet = [];
                        if(this.totalRecs && this.totalRecs > this.pageSize){
                        this.totalPages = Math.ceil(this.totalRecs/this.pageSize);
                        this.startIndex = 0;
                        this.endIndex = this.pageSize;
                        this.nextBtn =  true;
                        this.lastBtn =  true;
                        this.msg = "1-"+this.pageSize+" of "+ this.totalRecs;
                        }else{
                        this.msg = "1-"+this.totalRecs+" of "+ this.totalRecs;
                        this.startIndex = 0;
                        this.endIndex = this.totalRecs;
                        }
                        this.process(false);
                    },
                    process : function(msg){
                        this.currentRecordsSet = angular.copy(this.data.slice(this.startIndex, this.endIndex));
                        if(msg === true){
                        this.msg = (this.startIndex+1) + " - "+this.endIndex+" of "+ this.totalRecs;
                        }
                    }
                }
            },
            downloadCSV : function (csv, filename) {
                var csvFile, downloadLink;
                // CSV file
                csvFile = new Blob([csv], {type: "text/csv"});
                // Download link
                downloadLink = document.createElement("a");
                // File name
                downloadLink.download = filename;
                // Create a link to the file
                downloadLink.href = window.URL.createObjectURL(csvFile);
                // Hide download link
                downloadLink.style.display = "none";
                // Add the link to DOM
                document.body.appendChild(downloadLink);
                // Click download link
                downloadLink.click();
            },
            compareFirstWithSecondList: function (list1, list2) {
                var found = false;
                var result = [];
                for(var i=0;i<list2.length;i++){
                    found = false;
                    for(var j=0;j<list1.length;j++){
                        if(list2[i].split(".")[0] == list1[j].split(".")[0]){
                            found = true;
                            break;
                        }
                    }
                    if(!found){
                        result.push(list2[i].split(".")[0]);
                    }
                }
                return result;
            },
            showModal: function(msg) {
                var modalInstance = ModalService.alertBox({
                    msg : msg
                });
            }
        };
    }]);

angular.module('gbApp.services').factory('ErrorService', [
    function () {
        var errors = {};
        errors['gbApp'] = [];
        return {
            setError: function (appName, errmsg) {
                if (!!!errors[appName]) {
                    errors[appName] = [];
                }
                if (errors[appName].indexOf(errmsg) == -1) {
                    errors[appName].push(errmsg);
                }
            },
            getErrors: function (appName) {
                if (errors['gbApp'].length > 0) {
                    return errors['gbApp'];
                }
                if (errors[appName]) {
                    return errors[appName];
                }
                return [];
            },
            getFeatureErrors: function (appName) {
                if (errors[appName]) {
                    return errors[appName];
                }
                return [];
            },
            clearErrors: function (appName) {
                if (errors[appName]) {
                    errors[appName].length = 0;
                }
            }
        };
    }]);

angular.module('gbApp.services').factory('InstanceHandler', ['UserTrackingService', 'ExplorerService', 'SectionsMetaService', '$filter', '$location', 'GlobalService', 'ModalService', 'WorkbenchService', 'ConfigDiffService', 'DefaultFilterService', '$sce', 'metaDataService', '$timeout', 'AppService', '$modal',
    function (UserTrackingService, ExplorerService, SectionsMetaService, $filter, $location, GlobalService, ModalService, WorkbenchService, ConfigDiffService, DefaultFilterService, $sce, metaDataService, $timeout, AppService, $modal) {
        var openInstances = [], rCount = 0;
        var viewerVisible = false;

        var eventBuckets = function(){
            var bucket = [];
            var size = GlobalService.getVal('eventViewerBucketSize');
            var pageSize = 0;
            var lastRecord = null;
            var position = null;
            var addTop = function(records){
                lastRecord = bucket[0];
                bucket = records.concat(bucket);
                position = 'top';
            };
            var addButtom = function(records){
                lastRecord = bucket[(bucket.length - 1)];
                bucket = bucket.concat(records); 
                position = 'bottom'; 
            };                        
            var trimFromTop = function(){
                if(bucket.length > 0){
                    var sizeToTrim = bucket.length - size;
                    bucket.splice(0, sizeToTrim);
                }
            };
            var trimFromButtom = function(){
                if(bucket.length > 0){
                    var sizeToTrim = bucket.length - size;
                    var stIndex = bucket.length - sizeToTrim;
                    bucket.splice(stIndex, bucket.length);
                }
            };
            var clear = function(){
                if(bucket.length > 0){
                    bucket.splice(0, bucket.length);
                }
            };
            var setPageSize = function(){
            };
            return {
                clear: function(){
                    clear();
                },
                lastRecord: function(){
                    return lastRecord;
                },
                getPosition: function(){
                    return position;
                },
                first: function(){
                    return bucket[0];
                },
                last: function(){
                    return bucket[bucket.length -1];
                },
                get: function (){
                    return bucket;             
                },
                add: function (records, offset, direction){
                    if(offset){
                        pageSize = offset;
                    }
                    if(direction == 'up'){
                        addTop(records);
                    }else if(direction == 'down'){
                        addButtom(records);
                    }else if(direction == 'default'){
                        clear();
                        bucket = records;
                    }else{
                        clear();
                        bucket = records;
                    }
                    if(bucket.length > size){
                        if(direction == 'up'){
                            trimFromButtom(records);
                        }else if(direction == 'down'){
                            trimFromTop(records);
                        }else if(direction == 'default'){
                            bucket = records;
                        }
                    }
                }
            };
        }
        return {
            defaultTab: 'section',
            isVisible: function () {
                return viewerVisible;
            },
            setVisible: function (bool) {
                viewerVisible = bool;
            },
            setRefreshCount: function (val) {
                rCount = val;
            },
            getRefreshCount: function () {
                return rCount;
            },
            setDefaultTab: function (tab) {
                this.defaultTab = tab;
            },
            showDisabledMsgViewChangesTab: function(){
                ModalService.alertBox({msgKey: 'instance_view_changes_disabled_msg'});
            },
            getDefaultTab: function () {
                return this.defaultTab;
            },
            addInstance: function (instance, scope, owner) {
                var c_instance, instanceConfig;
                var instanceHandler = this;
                instance.md5 = CryptoJS.MD5(angular.toJson(instance)).toString();
                c_instance = this.getInstanceByMD5(instance.md5);
                if (instance.defaultTab) {
                    this.setDefaultTab(instance.defaultTab);
                } else {
                    this.setDefaultTab('section');
                }
                //if sysId2 is there the set it to defaultservices
                if (instance.data.sysId2) {
                    DefaultFilterService.setSysId2(instance.data.sysId2);
                }

                if (!c_instance) {
                    if (openInstances.length >= GlobalService.getVal('instance_limit')) {
                        ModalService.alertBox({ msgKey: 'instance_limit_msg' });
                    } else {
                        if (GlobalService.getVal('intanceviewer_iframe_apps').indexOf(instance.type) != -1) {
                            instance.loading = true;
                            openInstances.push(instance);
                            this.showInstance(instance);
                            var domain = GlobalService.getVal('primaryDomain');
                            var userInfo = metaDataService.getUser();
                            if ((metaDataService.getUser()['email'] == WorkbenchService.getTableauUser()) || (metaDataService.getUser()['org_type'] == GlobalService.getVal('gbUserOrgType')) || (metaDataService.getUser()['org_type'] == GlobalService.getVal('studioUserOrgType') && this.isGbStudioApp()) || (metaDataService.getUser()['org_type'] == GlobalService.getVal('wbUserOrgType'))) {
                                document.cookie = 'show_tableau_save_options=' + 1 + ";domain=." + domain + ";path=/";
                            }
                            else {
                                document.cookie = 'show_tableau_save_options=' + 0 + ";domain=." + domain + ";path=/";
                            }
                            /* if(userInfo['email'] !== WorkbenchService.getTableauUser() && userInfo['role'] !== 'glassbeam') {
                                document.cookie = 'show_tableau_save_options=' + 0 + ";domain=." + domain + ";path=/";
                            } else {
                                document.cookie = 'show_tableau_save_options=' + 1 + ";domain=." + domain + ";path=/";
                            } */
                        } else {
                            instanceConfig = {
                                'type': instance.type,
                                'instanceHandler': instanceHandler,
                                'isGbStudio': AppService.isGbStudioApp(),
                                'showEventsAcrossSources': true,
                                'name': instance.title,
                                'id': instance.md5,
                                'md5': instance.md5,
                                'app': instance.app,
                                'module': instance.module,
                                'selectAllSections': false,
                                'filterBatchPageSize': GlobalService.getVal('instance_filter_section_page_size'),
                                'filterBatchCurrentPageNo': 1,
                                'filterBatchTotalCount': 0,
                                'MAXED_OUT': false,
                                'Max_Limit': 0,
                                'Max_Totalrecords': 0,
                                'eventSourcesDuplicate': [],
                                'loadingState': {
                                    section: false,
                                    event: false,
                                    diff: false
                                },
                                'timefilter': {
                                    'currentValue': '1 minute',
                                    'totalRecords': 0,
                                    'startIndex': 0,
                                    'endIndex': 0,
                                    'scrolldirection': 'default',
                                    'baseIndex': 0,
                                    'offset': 0,
                                    'applied': false,
                                    'quickFilters': [
                                        '1 minute',
                                        '5 minutes',
                                        '15 minutes',
                                        '30 minutes',
                                        '1 hour',
                                        '4 hours',
                                        '8 hours',
                                        'Custom time'
                                    ],
                                    'customFilter': {
                                        'fromDate': {
                                            'gDate': new Date(),
                                            'hr': 00,
                                            'min': 00,
                                            'sec': 00
                                        },
                                        'toDate': {
                                            'gDate': new Date(),
                                            'hr': 00,
                                            'min': 00,
                                            'sec': 00
                                        }
                                    }
                                },
                                'event30Buckets': new eventBuckets(),
                                'event60Buckets': new eventBuckets(),
                                'data': {
                                    'loading': true,
                                    'sessionTimedOut': false,
                                    'sysId': instance.data.sysId,
                                    'bundle': instance.data.bundle,
                                    'file': instance.data.file,
                                    'instanceDisplay': instance.data.instanceDisplay,
                                    'eventSource': instance.data.eventSource,
                                    'fileDiffAttr': instance.data.fileDiffAttr,
                                    'content': [],
                                    'isContentLoading': {
                                        'loading1': true
                                    },
                                    'content30': [],
                                    'content60': [],
                                    'observation': instance.data.observation,
                                    'observationStr': instance.data.observationStr,
                                    "facetStr": instance.data.facetStr,
                                    "result": instance.data.result,
                                    'sections': {}, //section tree
                                    'bundleList': {
                                        'bundles': [],
                                        'filter': "",
                                        'isLoading': true
                                    },
                                    'sectionsData': [],
                                    'diffSections': [],
                                    'noDiffSections': [],
                                    'observationList': [],
                                    'selectedSections': [],
                                    'sectionFilterList': {},
                                    "sectionFilterValue": "",
                                    'sectionDiffMsg': "",
                                    'sectionDiffError': false,
                                    'sectionDiffUrl': "",
                                    'sectionLogUrl': "",
                                    'currentObs': ""
                                },
                                'isEventExpanded' : false,
                                'severityFilter': instance.data.severityFilter,
                                'severityFilterApplied': false,
                                'filterLoader': false,
                                'severityPayload': "" ,
                                'expandAll':false,
                                handleSessionTimeout: function (response) {
                                    if (!instanceConfig.data.sessionTimedOut && response && response.hasOwnProperty('Msg') && response.Msg.match(/timeout/)) {
                                        instanceConfig.data.sessionTimedOut = true;
                                        instanceHandler.setVisible(false);
                                        ModalService.sessionTimeout();
                                    }
                                },
                                logSectionData: function (sections) {
                                    var activity = "Section Viewer";
                                    var details = {
                                        "Serial Number": instanceConfig.data.sysId,
                                        "Bundle": instanceConfig.data.bundle,
                                        "File": instanceConfig.data.file,
                                        "Observation": instanceConfig.data.observationStr,
                                        "Sections Selected": sections
                                    };
                                    if (!!sections.length) {
                                        UserTrackingService.standard_user_tracking(instanceConfig.app, instanceConfig.module, activity, JSON.stringify(details)).then(function (response) {
                                        }, instanceConfig.handleSessionTimeout);
                                    }
                                },
                                getAllSectionsListForAFile: function (data) {
                                    var result = data.result;
                                    var params = {};
                                    params['ts'] = result.obs_date;
                                    params['bundle'] = data.bundle;
                                    params['ns'] = result.namespace;
                                    instanceConfig.data.loading = true;
                                    ExplorerService.getSectionsContent(params).then(function (response) {
                                        var sectionData = response.data.Data;
                                        instanceConfig.data.loading = false;
                                        if (sectionData) {
                                            instanceConfig.data.sectionsData = sectionData;
                                        }
                                        if (instanceConfig.data.sectionsData && instanceConfig.data.sectionsData.length && instanceConfig.data.sectionsData.length == 0) {
                                            instanceConfig.data.sectionsData = [];
                                        }
                                        //if its a gbStdio app don't call bundle api or load diff
                                        if (!instanceConfig.isGbStudio) {
                                            //get file diff
                                            instanceConfig.logSectionData(result.namespace);
                                            instanceConfig.data.result.currentNS = params['ns'];
                                            if (instanceConfig.data.observationList.length == 0) {
                                                instanceConfig.getObservations(result);
                                            } else {
                                                instanceConfig.getFileDiffSection(result);
                                            }
                                        }
                                    }, function (response) {
                                        console.log("Error:" + response);
                                        instanceConfig.handleSessionTimeout(response);
                                    });
                                },
                                sectionLoading: function () {
                                    var cntr, child;
                                    if (instanceConfig.data.loading) {
                                        return true;
                                    } else {
                                        cntr = document.getElementById(this.md5 + '-section-container');
                                        child = document.getElementById(this.id + this.md5 + '-section-content');
                                        if (child) {
                                            cntr.scrollTop = child.offsetTop;
                                        }
                                        return false;
                                    }
                                },
                                getObservations: function (result) {
                                    instanceConfig.data.loading = true;
                                    var sysid1 = result.sysid1 ? result.sysid1 : result.sysid;
                                    var sysid2 = result.sysid2 ? result.sysid2 : '';
                                    ExplorerService.getAllBundles(sysid1, sysid2).then(function (response) {
                                        instanceConfig.data.loading = false;
                                        var observationList = response.data.Data;
                                        instanceConfig.data.observationList = [];
                                        if (observationList && observationList.length && observationList.length > 0) {
                                            angular.forEach(observationList, function (obs) {
                                                if ($filter('utcDate')(obs.obs_ts) < $filter('utcDate')(instanceConfig.data.observation)) {
                                                    instanceConfig.data.observationList.push(obs);
                                                }
                                            });
                                            if (instanceConfig.data.observationList.length && instanceConfig.data.observationList.length > 0) {
                                                instanceConfig.data.currentObs = instanceConfig.data.observationList[0];
                                            }
                                        }
                                        instanceConfig.getFileDiffSection(result);
                                    }, function (response) {
                                        console.log("Error:" + response);
                                        instanceConfig.handleSessionTimeout(response);
                                    });
                                },
                                getFileDiffSection: function (result) {
                                    var infoserverDomain = GlobalService.getVal('infoserverDomain');
                                    if (!(instanceConfig.data.observationList && instanceConfig.data.observationList.length > 0)) {
                                        instanceConfig.data.sectionDiffError = true;
                                        instanceConfig.data.loading = false;
                                        instanceConfig.data.sectionDiffMsg = GlobalService.getVal("section_ErrorMsg1");
                                        instanceConfig.data.loading = false;
                                        return;
                                    }
                                    var srcts = instanceConfig.data.currentObs.obs_ts;
                                    var tgtts = result.obs_date;
                                    var params = {
                                        srcbundle: $filter('bundleName')(instanceConfig.data.currentObs.bundle_name),
                                        tgtbundle: instanceConfig.data.bundle,
                                        ns: []
                                    };
                                    var sectionNameMap = {};
                                    if (instanceConfig.data.selectedSections.length == 0) {
                                        params.ns.push(result.namespace);
                                    } else {
                                        angular.forEach(instanceConfig.data.selectedSections, function (section) {
                                            params.ns.push(instanceConfig.data.sections[parseInt(section)].name);
                                            sectionNameMap[instanceConfig.data.sections[parseInt(section)].name] = instanceConfig.data.sections[parseInt(section)].label;
                                        });
                                    }

                                    instanceConfig.data.loading = true;
                                    instanceConfig.data.diffSections = [];
                                    instanceConfig.data.noDiffSections = [];
                                    instanceConfig.data.sectionDiffError = false;
                                    instanceConfig.loadingState.diff = true;
                                    ExplorerService.getFileDiffSection(srcts, tgtts, params).then(function (response) {
                                        instanceConfig.data.loading = false;
                                        instanceConfig.loadingState.diff = false;
                                        var responseData = response.data.Data;
                                        if (responseData.hasOwnProperty('gb_error')) {
                                            instanceConfig.data.sectionDiffError = true;
                                            switch (responseData.gb_error) {
                                                case 'ERR_9':
                                                    instanceConfig.data.sectionDiffMsg = GlobalService.getVal("section_ErrorMsg6");
                                                    break;
                                            }
                                        } else {
                                            angular.forEach(responseData, function (value, key) {
                                                var section = {};
                                                section.name = sectionNameMap[key];
                                                var noDiff = false;
                                                switch (value) {
                                                    case 'MSG_1':
                                                        section.error = true;
                                                        instanceConfig.data.noDiffSections.push(section);
                                                        section.errorMsg = GlobalService.getVal("section_ErrorMsg2");
                                                        noDiff = true;
                                                        break;
                                                    case 'MSG_2':
                                                        section.error = true;
                                                        section.errorMsg = GlobalService.getVal("section_ErrorMsg3");
                                                        break;
                                                    case 'MSG_3':
                                                        section.error = true;
                                                        section.errorMsg = GlobalService.getVal("section_ErrorMsg4");
                                                        break;
                                                    case 'MSG_7':
                                                        section.error = true;
                                                        section.errorMsg = GlobalService.getVal("section_ErrorMsg5");
                                                        break;
                                                    case 'ERR_1':
                                                        section.error = true;
                                                        section.errorMsg = GlobalService.getVal("section_ErrorMsg6");
                                                        break;
                                                    case 'ERR_0':
                                                        section.error = true;
                                                        section.errorMsg = GlobalService.getVal("section_ErrorMsg7");
                                                        break;
                                                    case 'ERR_7':
                                                        section.error = true;
                                                        section.errorMsg = GlobalService.getVal("section_ErrorMsg8");
                                                        break;
                                                    default:
                                                        section.error = false;
                                                        section.URL = $sce.trustAsResourceUrl(infoserverDomain + '/explorer/sectiondiff/view/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + value);
                                                }
                                                if (!noDiff) {
                                                    instanceConfig.data.diffSections.push(section);
                                                }
                                            });
                                        }
                                        var activity = "Section Viewer Changes";
                                        var details = {
                                            "Serial Number": instanceConfig.data.sysId,
                                            "Bundle": instanceConfig.data.bundle,
                                            "File": instanceConfig.data.file,
                                            "Observation": $filter('utcDate')(srcts) + " -- " + $filter('utcDate')(tgtts),
                                            "Sections Selected": params.ns
                                        };
                                        UserTrackingService.standard_user_tracking(instanceConfig.app, instanceConfig.module, activity, JSON.stringify(details)).then(function (response) {
                                        }, instanceConfig.handleSessionTimeout);

                                    }, function (response) {
                                        instanceConfig.data.diffSections = [];
                                        instanceConfig.data.noDiffSections = [];
                                        instanceConfig.data.loading = false;
                                        instanceConfig.data.sectionDiffError = true;
                                        instanceConfig.data.sectionDiffMsg = GlobalService.getVal("section_ErrorMsg6");
                                        console.log("Error:" + response);
                                        instanceConfig.handleSessionTimeout(response);
                                    });
                                },
                                getMyConfig: function () {
                                    return instanceConfig;
                                },
                                isContentLoading: function () {
                                    var me = this, cntrId, dataPositon = 'top', targetRec = null, currLine = null, recId = null, cntr = null;
                                    if (!me.data.isContentLoading.loading1) {
                                        cntrId = me.id + "-main-container";
                                        cntr = document.getElementById(cntrId);

                                        if (instanceConfig.timefilter.scrolldirection == 'default') {
                                            if (instanceConfig.showEventsAcrossSources) {
                                                currLine = document.getElementById("test-with-source");
                                            } else {
                                                currLine = document.getElementById(me.id + "-with-out-source");
                                            }
                                            dataPositon = null;
                                        } else {
                                            if (instanceConfig.showEventsAcrossSources) {
                                                targetRec = instanceConfig.event60Buckets.lastRecord();
                                                dataPositon = instanceConfig.event60Buckets.getPosition();
                                            } else {
                                                targetRec = instanceConfig.event30Buckets.lastRecord();
                                                dataPositon = instanceConfig.event60Buckets.getPosition();
                                            }
                                            if (targetRec) {
                                                recId = targetRec['scrollId'];
                                                currLine = document.getElementById(recId);
                                            } else {
                                                currLine = null;
                                            }
                                        }
                                        if (cntr && (currLine != null) && !me.loadingState.event) {
                                            if (cntr.scrollTop != currLine.offsetTop) {
                                                $timeout(function () {
                                                    me.loadingState.event = true;
                                                    if (dataPositon == 'top') {
                                                        if ((currLine.offsetTop - 20)) {
                                                            cntr.scrollTop = currLine.offsetTop - 20;
                                                        } else {
                                                            cntr.scrollTop = currLine.offsetTop;
                                                        }
                                                    } else if (dataPositon == 'bottom') {
                                                        var cntrHeight = $('#' + cntrId).height();
                                                        if ((currLine.offsetTop - (cntrHeight - 50))) {
                                                            cntr.scrollTop = currLine.offsetTop - (cntrHeight - 50);
                                                        } else {
                                                            cntr.scrollTop = currLine.offsetTop;
                                                        }
                                                    } else {
                                                        cntr.scrollTop = currLine.offsetParent.offsetTop
                                                        // cntr.scrollTop = currLine.offsetTop;
                                                    }

                                                }, 1000, me);
                                            }
                                        }
                                        if (instanceConfig.timefilter.sourceFilter) {
                                            return true;
                                        }
                                        return false;
                                    }//
                                    return true;
                                },
                                getAllSection: function (data) {
                                    instanceConfig.data.sectionsLoading = true;
                                    ExplorerService.getSectionViewerSections()
                                        .then(function (response) {
                                            var sections = $filter('filter')(response.data.Data, { namespace_type: '!EVENT' });
                                            sections = $filter('filter')(sections, { namespace_type: '!UNPARSED' });
                                            sections = $filter('orderBy')(sections, "label");
                                            instanceConfig.data.sections = sections;
                                            instanceConfig.data.sectionsLoading = false;
                                        }, function (response) {
                                            console.log("Error:" + response);
                                            instanceConfig.handleSessionTimeout(response);
                                        });
                                },
                                selectedSectionsChange: function (section, key) {
                                    if (typeof section === 'string' && section.toLowerCase() == 'all') {
                                        var sections = this.getAllSectionOnUI(this.data.sections, this.data.sectionFilterValue);
                                        if (this.selectAllSections) {
                                            //select all sections
                                            this.selectedAllSections(sections);
                                            var selectedSections = instanceConfig.data.sectionFilterList;
                                            this.filterBatchTotalCount = Object.keys(selectedSections).length;
                                            this.applyFilter('all');

                                        } else {
                                            //unselect all sections
                                            this.unselectedAllSections(sections);
                                            var selectedSections = instanceConfig.data.sectionFilterList;
                                            this.filterBatchTotalCount = Object.keys(selectedSections).length;
                                            this.clearFilter(this.data.section);
                                        }
                                        return;
                                    }
                                    //unselect all option
                                    this.selectAllSections = false;

                                    if (!!section.selected) {
                                        instanceConfig.data.sectionFilterList[key] = section.label;
                                    } else {
                                        if (instanceConfig.data.sectionFilterList[key]) {
                                            delete instanceConfig.data.sectionFilterList[key];
                                        }
                                    }

                                    var selectedSections = instanceConfig.data.sectionFilterList;
                                    this.filterBatchTotalCount = Object.keys(selectedSections).length;
                                },
                                //get all section with filtered by sectionFilterValue
                                getAllSectionOnUI: function (sections, key) {
                                    var i, result = {};
                                    if (key && key.length) {
                                        for (i in sections)
                                            if (sections.hasOwnProperty(i) && i != 'label') {
                                                if (sections[i].label.toUpperCase().indexOf(key.toUpperCase()) != -1) {
                                                    result[i] = sections[i];
                                                }
                                            }
                                        return result;
                                    } else {
                                        return sections;
                                    }
                                },
                                selectedAllSections: function (sections) {
                                    var section = "", subsection = "";
                                    for (var sectionkey in sections) {
                                        if (sections.hasOwnProperty(sectionkey)) {
                                            section = sections[sectionkey];
                                            section.selected = true;
                                            this.data.sectionFilterList[sectionkey] = section.label;
                                        }
                                        for (var subsectionkey in section) {
                                            if (sections.hasOwnProperty(subsectionkey)) {
                                                subsection = sections[subsectionkey];
                                                subsection.selected = true;
                                                this.data.sectionFilterList[subsectionkey] = subsection.label;
                                            }

                                        }
                                    }
                                },
                                unselectedAllSections: function (sections) {
                                    var section = "", subsection = "";
                                    for (var sectionkey in sections) {
                                        if (sections.hasOwnProperty(sectionkey)) {
                                            section = sections[sectionkey];
                                            section.selected = false;
                                            if (this.data.sectionFilterList[sectionkey]) {
                                                delete this.data.sectionFilterList[sectionkey];
                                            }
                                        }
                                        for (var subsectionkey in section) {
                                            if (sections.hasOwnProperty(subsectionkey)) {
                                                subsection = sections[subsectionkey];
                                                subsection.selected = false;
                                                if (this.data.sectionFilterList[subsectionkey]) {
                                                    delete this.data.sectionFilterList[subsectionkey];
                                                }
                                            }

                                        }
                                    }
                                },
                                getNumberofSelectedSection: function () {
                                    return Object.keys(instanceConfig.data.sectionFilterList).length;
                                },
                                unselectSection: function (sectionLabel, allsections, selKey) {
                                    for (var section in allsections) {
                                        if ((allsections.hasOwnProperty(section)) && (allsections[section].label == sectionLabel)) {
                                            allsections[section].selected = false;
                                        }
                                        for (var subsection in allsections[section]) {
                                            if (allsections[section][subsection] && allsections[section][subsection].ns_label == sectionLabel) {
                                                allsections[section][subsection].selected = false;
                                            }
                                        }
                                    }
                                    delete instanceConfig.data.sectionFilterList[selKey];
                                },
                                applyFilter: function (tab) {
                                    //get selected section
                                    var selectedSections = instanceConfig.data.sectionFilterList;
                                    instanceConfig.data.selectedSections = [];
                                    for (var key in selectedSections) {
                                        instanceConfig.data.selectedSections.push(key);
                                    }
                                    var selectedSectionsNo = Object.keys(selectedSections).length;
                                    if (selectedSectionsNo == 0) {
                                        return;
                                    }
                                    var startDate = instance.data.start_time;
                                    var endDate = instance.data.end_time;
                                    var params = {};
                                    params['ts'] = instanceConfig.data.result.obs_date;
                                    params['bundle'] = instanceConfig.data.bundle;
                                    params['ns'] = [];
                                    //get namespace for selected sections
                                    instanceConfig.filterBatchCurrentPageNo = 1;
                                    //clear section data and config diff data for UI
                                    instanceConfig.data.sectionsData = [];
                                    params['ns'] = instanceConfig.getNamespaceOfSelectedSection(selectedSections);
                                    /* for (var key in selectedSections) {
                                         var section = instanceConfig.data.sections[parseInt(key)];
                                         params['ns'].push(section.name);
                                     }*/
                                    if (!tab) {
                                        return;
                                    }
                                    if (tab == 'section') {
                                        instanceConfig.data.loading = true;
                                        instanceConfig.apiGetSectionsConten(params);
                                    }
                                    else if (tab == 'changes') {
                                        if (selectedSectionsNo <= GlobalService.getVal('instance_selected_sections_limit')) {
                                            instanceConfig.data.loading = true;
                                            instanceConfig.getFileDiffSection(instance.data.result);
                                        } else {
                                            ModalService.alertBox({ msgKey: 'instance_view_max_section' });
                                        }
                                    } else {
                                        instanceConfig.data.loading = true;
                                        instanceConfig.apiGetSectionsConten(params);
                                    }
                                },
                                apiGetSectionsConten: function (params) {
                                    instanceConfig.loadingState.section = true;
                                    ExplorerService.getSectionsContent(params).then(function (response) {
                                        var sectionData = response.data.Data;
                                        instanceConfig.data.loading = false;
                                        instanceConfig.loadingState.section = false;
                                        if (sectionData) {
                                            instanceConfig.data.sectionsData = instanceConfig.data.sectionsData.concat(sectionData);
                                        }
                                        if (instanceConfig.data.sectionsData && instanceConfig.data.sectionsData.length && instanceConfig.data.sectionsData.length == 0) {
                                            instanceConfig.data.sectionsData = [];
                                        }
                                        instanceConfig.logSectionData(params['ns']);
                                        instanceConfig.data.result.currentNS = params['ns'];
                                        angular.element('#' + instanceConfig.md5 + '-section-container').scrollTop(50000);
                                    }, function (response) {
                                        console.log("Error:" + response);
                                        instanceConfig.handleSessionTimeout(response);
                                        instanceConfig.loadingState.section = false;
                                    });
                                },
                                getNamespaceOfSelectedSection: function (selectedSections) {
                                    var params = [], count, start = 0, end, totalPages = 0, me = instanceConfig;
                                    count = 0;
                                    totalPages = Math.ceil(me.filterBatchTotalCount / me.filterBatchPageSize);
                                    if (totalPages == 0) {
                                        return [];
                                    }
                                    if (me.filterBatchCurrentPageNo == 1) {
                                        start = 0;
                                        end = me.filterBatchPageSize;
                                    } else {
                                        start = (me.filterBatchCurrentPageNo - 1) * me.filterBatchPageSize;

                                        if (me.filterBatchCurrentPageNo > totalPages) {
                                            end = me.filterBatchTotalCount;
                                        } else {
                                            end = me.filterBatchCurrentPageNo * me.filterBatchPageSize;
                                            if (end > me.filterBatchTotalCount) {
                                                end = me.filterBatchTotalCount;
                                            }
                                        }
                                    }
                                    for (var key in selectedSections) {
                                        count++;
                                        if (count > start) {
                                            var section = instanceConfig.data.sections[parseInt(key)];
                                            params.push(section.name);
                                        }
                                        if (count >= end) {
                                            break;
                                        }
                                    }
                                    return params;
                                },
                                scrollInfinite: function (scrollElm) {
                                    var elemId = instanceConfig.md5 + '-section-container';
                                    var scrollElm = angular.element(document.getElementById(elemId));
                                    if (scrollElm[0] && scrollElm[0].scrollHeight) {
                                        var maxScrollHeight = scrollElm[0].scrollHeight - 1100;
                                    } else {
                                        return;
                                    }

                                    if (scrollElm.scrollTop() < maxScrollHeight) {
                                        return;
                                    }
                                    //don't call API if it is loading data for the previouse request
                                    if (instanceConfig.loadingState.section) {
                                        return;
                                    }
                                    //get selected section
                                    var selectedSections = instanceConfig.data.sectionFilterList;
                                    instanceConfig.data.selectedSections = [];
                                    for (var key in selectedSections) {
                                        instanceConfig.data.selectedSections.push(key);
                                    }
                                    if (Object.keys(selectedSections).length == 0) {
                                        return;
                                    }

                                    instanceConfig.filterBatchCurrentPageNo++;
                                    //instanceConfig.data.loading = true;
                                    var startDate = instance.data.start_time;
                                    var endDate = instance.data.end_time;
                                    var params = {};
                                    params['ts'] = instanceConfig.data.result.obs_date;
                                    params['bundle'] = instanceConfig.data.bundle;
                                    params['ns'] = [];
                                    //get namespace for selected sections
                                    params['ns'] = instanceConfig.getNamespaceOfSelectedSection(selectedSections);
                                    //Don't call API for data id namespace list is empty
                                    if (Array.isArray(params['ns']) && params['ns'].length == 0) {
                                        return;
                                    }
                                    instanceConfig.apiGetSectionsConten(params);
                                    //instanceConfig.getFileDiffSection(instance.data.result);
                                },
                                resetObservation: function (sections) {
                                    instanceConfig.clearFilter(sections);
                                },
                                clearFilter: function (allsections) {
                                    //clear filter objext lst
                                    instanceConfig.data.loading = true;
                                    instanceConfig.data.sectionFilterList = {};
                                    instanceConfig.data.selectedSections = [];
                                    instanceConfig.data.diffSections = [];
                                    instanceConfig.data.noDiffSections = [];
                                    instanceConfig.data.sectionsData = [];
                                    instanceConfig.selectAllSections = false;
                                    for (var section in allsections) {
                                        allsections[section]['selected'] = false;
                                        for (var subsection in allsections[section]) {
                                            try {
                                                allsections[section][subsection]['selected'] = false;
                                            } catch (e) {
                                                allsections[section]['selected'] = false;
                                            }
                                        }
                                    }
                                    if (instanceConfig.data.result.namespace == "random.namespace.by.apps") {
                                        instanceHandler.setDefaultTab("section");
                                    }
                                    this.getAllSectionsListForAFile(instanceConfig.data);
                                    //this.getFileDiffSection(instanceConfig.data.result);
                                },
                                changeObservation: function () {
                                    instanceConfig.getFileDiffSection(instance.data.result);
                                },
                                getEventSources: function () {
                                    instanceConfig.eventSourcesAll = true;
                                    instanceConfig.eventSourcesFilter = "";
                                    /*SectionsMetaService.getSectionsFilteredByByndleType(instanceConfig.data.result.bundle_type)
                                    .then(function (response) {
                                        var eventsections = $filter('filter')(response.data.Data, {namespace_type: 'EVENT'});
                                        var sessionsections = $filter('filter')(response.data.Data, {namespace_type: 'SESSION'});
                                        if(!eventsections) eventsections = [];
                                        if(!sessionsections) sessionsections = [];
                                        var sections = eventsections.concat(sessionsections);
                                        sections = $filter('orderBy')(sections, "label");
                                        angular.forEach(sections, function(item){
                                            item.checked = true;
                                        });
                                        instanceConfig.eventSources = sections;
                                        instanceConfig.eventSourcesDuplicate = angular.copy(instanceConfig.eventSources);
                                    });*/

                                    ExplorerService.getEventSources().then(function (response) {
                                        var responseData = response.data.Data;
                                        angular.forEach(responseData, function (item) {
                                            item.checked = true;
                                        });
                                        instanceConfig.eventSources = responseData;
                                        instanceConfig.eventSourcesDuplicate = angular.copy(instanceConfig.eventSources);
                                    });
                                },
                                logEventData: function () {
                                    var activity = 'Event Viewer';
                                    var details = {};
                                    var key = !!instanceConfig.showEventsAcrossSources ? 'Show events across sources' : 'Show events in a file';
                                    var value = {
                                        "Serial Number": instanceConfig.data.sysId,
                                        "Bundle": instanceConfig.data.bundle,
                                        "File": instanceConfig.data.file,
                                        "Observation": instanceConfig.data.observationStr,
                                        "Timefilter": instanceConfig.timefilter.currentValue
                                    };
                                    details[key] = value;
                                    UserTrackingService.standard_user_tracking(instanceConfig.app, instanceConfig.module, activity, JSON.stringify(details)).then(function (response) {
                                    }, instanceConfig.handleSessionTimeout);
                                },
                                getTimeRangeForEventContent: function (obs_date) {
                                    var dateRange = {
                                        sDate: "",
                                        eDate: ""
                                    };
                                    if (!obs_date) {
                                        obs_date = new Date();
                                    }
                                    var cTime = new Date(obs_date);
                                    var st = new Date(obs_date), et = new Date(obs_date);
                                    //set custom date n time filter
                                    //instanceConfig.timefilter.customFilter.fromDate.gDate = cTime;
                                    //instanceConfig.timefilter.customFilter.toDate.gDate = cTime;
                                    if (instanceConfig.timefilter.currentValue == '1 minute') {
                                        st.setMinutes(cTime.getMinutes() - 1);
                                        et.setMinutes(cTime.getMinutes() + 1);
                                    } else if (instanceConfig.timefilter.currentValue == '5 minutes') {
                                        st.setMinutes(cTime.getMinutes() - 5);
                                        et.setMinutes(cTime.getMinutes() + 5);
                                    } else if (instanceConfig.timefilter.currentValue.indexOf(15) != -1) {
                                        st.setMinutes(cTime.getMinutes() - 15);
                                        et.setMinutes(cTime.getMinutes() + 15);
                                    } else if (instanceConfig.timefilter.currentValue.indexOf(30) != -1) {
                                        st.setMinutes(cTime.getMinutes() - 30);
                                        et.setMinutes(cTime.getMinutes() + 30);
                                    } else if (instanceConfig.timefilter.currentValue.indexOf(1) != -1) {
                                        st.setHours(cTime.getHours() - 1);
                                        et.setHours(cTime.getHours() + 1);
                                    } else if (instanceConfig.timefilter.currentValue.indexOf(4) != -1) {
                                        st.setHours(cTime.getHours() - 4);
                                        et.setHours(cTime.getHours() + 4);
                                    } else if (instanceConfig.timefilter.currentValue.indexOf(8) != -1) {
                                        st.setHours(cTime.getHours() - 8);
                                        et.setHours(cTime.getHours() + 8);
                                    } else if (instanceConfig.timefilter.currentValue.indexOf('Custom') != -1) {
                                        // st = $filter('date')(instanceConfig.timefilter.customFilter.fromDate.gDate, 'yyyy-MM-dd');
                                        // et = $filter('date')(instanceConfig.timefilter.customFilter.toDate.gDate, 'yyyy-MM-dd');
                                        st = moment(instanceConfig.timefilter.customFilter.fromDate.gDate).format('YYYY-MM-DD');
                                        et = moment(instanceConfig.timefilter.customFilter.toDate.gDate).format('YYYY-MM-DD');

                                        var hr = instanceConfig.timefilter.customFilter.fromDate.hr;
                                        var min = instanceConfig.timefilter.customFilter.fromDate.min;
                                        var sec = instanceConfig.timefilter.customFilter.fromDate.sec;

                                        var sTime = (hr > 10 ? hr : ('0' + hr)) + ":" + (min > 10 ? min : ('0' + min)) + ":" + (sec > 10 ? sec : ('0' + sec));
                                        var hr = instanceConfig.timefilter.customFilter.toDate.hr;
                                        var min = instanceConfig.timefilter.customFilter.toDate.min;
                                        var sec = instanceConfig.timefilter.customFilter.toDate.sec;
                                        var eTime = (hr > 10 ? hr : ('0' + hr)) + ":" + (min > 10 ? min : ('0' + min)) + ":" + (sec > 10 ? sec : ('0' + sec));
                                        // st = new Date(st + " " + sTime);
                                        // et = new Date(et + " " + eTime);
                                        dateRange.sDate = st + "T" + sTime + "Z";
                                        dateRange.eDate = et + "T" + eTime + "Z";
                                        return dateRange;
                                    }
                                    dateRange.sDate = st.toISOString();
                                    dateRange.eDate = et.toISOString();
                                    return dateRange;
                                },
                                eventScrollUp: function () {
                                    var bucketRef;
                                    if (instance.showEventsAcrossSources) {
                                        bucketRef = instanceConfig.event60Buckets;
                                    } else {
                                        bucketRef = instanceConfig.event30Buckets;
                                    }

                                    if (bucketRef.get().length == 0 || (instanceConfig.timefilter.offset >= instanceConfig.timefilter.totalRecords)) {
                                        return false;
                                    }
                                    if (instanceConfig.timefilter.request) {
                                        return false;
                                    };
                                    instanceConfig.timefilter.request = false;
                                    //read topmost record and read index of that
                                    instanceConfig.timefilter.endIndex = bucketRef.first()['index'];
                                    //if(instanceConfig.timefilter.endIndex == 0){return false;}
                                    instanceConfig.timefilter.startIndex = instanceConfig.timefilter.endIndex - instanceConfig.timefilter.offset;

                                    instanceConfig.timefilter.scrolldirection = 'scroll';
                                    /*instanceConfig.timefilter.startIndex = instanceConfig.timefilter.endIndex - instanceConfig.timefilter.offset;*/
                                    if (instanceConfig.timefilter.startIndex <= 0) {
                                        instanceConfig.timefilter.startIndex = 0;
                                    }
                                    if (instanceConfig.timefilter.endIndex >= instanceConfig.timefilter.totalRecords) {
                                        instanceConfig.timefilter.endIndex = instanceConfig.timefilter.totalRecords;
                                    }
                                    this.eventFilterSources('up');
                                },
                                eventScrollDown: function () {
                                    var bucketRef;
                                    if (instance.showEventsAcrossSources) {
                                        bucketRef = instanceConfig.event60Buckets;
                                    } else {
                                        bucketRef = instanceConfig.event30Buckets;
                                    }
                                    if (bucketRef.get().length == 0 || (instanceConfig.timefilter.offset >= instanceConfig.timefilter.totalRecords)) {
                                        return false;
                                    }
                                    if (instanceConfig.timefilter.request) {
                                        return false;
                                    };
                                    instanceConfig.timefilter.request = false;
                                    //get last record index
                                    instanceConfig.timefilter.startIndex = bucketRef.last()['index'];

                                    if (instanceConfig.timefilter.startIndex >= (instanceConfig.timefilter.totalRecords - 1)) {
                                        return false;
                                    }
                                    instanceConfig.timefilter.scrolldirection = 'scroll';
                                    instanceConfig.timefilter.endIndex = instanceConfig.timefilter.startIndex + instanceConfig.timefilter.offset;

                                    if (instanceConfig.timefilter.endIndex >= instanceConfig.timefilter.totalRecords) {
                                        instanceConfig.timefilter.endIndex = instanceConfig.timefilter.totalRecords;
                                    }
                                    this.eventFilterSources('down');
                                },
                                eventContentApplyFilter: function () {
                                    if (instanceConfig.timefilter.currentValue.indexOf('Custom') != -1) {
                                        var cTime = this.getTimeRangeForEventContent();
                                        var st = cTime.sDate;
                                        var et = cTime.eDate;
                                        if (et === st) {
                                            instanceConfig.timefilter.request = false;
                                            instanceConfig.data.isContentLoading.loading1 = false;
                                            instanceConfig.loadingState.event = false;
                                            instanceConfig.timefilter.applied = false;
                                            return;
                                        };
                                    } else {
                                        //reset custom time tilter
                                        instanceConfig.eventResetCustomFilter();
                                    }
                                    instanceConfig.timefilter.applied = true;
                                    this.eventResetPaginationInfo();
                                    instanceConfig.getEventContent(instance.data);
                                },
                                eventResetPaginationInfo: function () {
                                    instanceConfig.timefilter.startIndex = 0;
                                    instanceConfig.timefilter.endIndex = 0;
                                    instanceConfig.timefilter.baseIndex = 0;
                                    instanceConfig.timefilter.totalRecords = 0;
                                    instanceConfig.timefilter.scrolldirection = 'default';

                                    var bucketRef;
                                    if (instance.showEventsAcrossSources) {
                                        bucketRef = instanceConfig.event60Buckets;
                                    } else {
                                        bucketRef = instanceConfig.event30Buckets;
                                    }
                                    bucketRef.clear();
                                },
                                changeEventAcrossSources: function (instanceData) {
                                    if (instanceConfig.showEventsAcrossSources) {
                                        instanceConfig.eventSourceSelectAll();
                                    }
                                    if (instanceConfig.timefilter.currentValue.indexOf('Custom') != -1) {
                                        var cTime = this.getTimeRangeForEventContent();
                                        var st = cTime.sDate;
                                        var et = cTime.eDate;
                                        if (et === st) {
                                            instanceConfig.timefilter.currentValue = instanceConfig.timefilter.quickFilters[0];
                                            //reset custom time tilter
                                            instanceConfig.eventResetCustomFilter();
                                        } else {
                                            if (!instanceConfig.timefilter.applied) {
                                                instanceConfig.timefilter.currentValue = instanceConfig.timefilter.quickFilters[0];
                                                //reset custom time tilter
                                                instanceConfig.eventResetCustomFilter();
                                            }
                                        }
                                    }
                                    instanceConfig.logEventData();
                                    instanceConfig.eventResetPaginationInfo();
                                    instanceConfig.getEventContent(instanceData);
                                },
                                eventResetCustomFilter: function () {
                                    //reset custom time tilter
                                    var cTime = new Date(instance.data.result.obs_date);
                                    cTime.setHours("0");
                                    cTime.setMinutes("0");
                                    cTime.setSeconds("0");
                                    instanceConfig.timefilter.customFilter.fromDate['hr'] = 00;
                                    instanceConfig.timefilter.customFilter.fromDate['min'] = 00;
                                    instanceConfig.timefilter.customFilter.fromDate['sec'] = 00;
                                    instanceConfig.timefilter.customFilter.toDate['hr'] = 00;
                                    instanceConfig.timefilter.customFilter.toDate['min'] = 00;
                                    instanceConfig.timefilter.customFilter.toDate['sec'] = 00;
                                    instanceConfig.timefilter.customFilter.fromDate.gDate = cTime;
                                    instanceConfig.timefilter.customFilter.toDate.gDate = cTime;
                                },
                                eventScrollUpEnd: function () {
                                    if (instanceConfig.isContentLoading()) return false;
                                    if (instanceConfig.timefilter.request) return false;
                                    if (instanceConfig.timefilter.startIndex == 0) return false;
                                    var bucketRef;
                                    if (instance.showEventsAcrossSources) {
                                        bucketRef = instanceConfig.event60Buckets;
                                    } else {
                                        bucketRef = instanceConfig.event30Buckets;
                                    }
                                    if (bucketRef.get().length == 0 || (instanceConfig.timefilter.offset >= instanceConfig.timefilter.totalRecords)) {
                                        return false;
                                    }
                                    instanceConfig.timefilter.startIndex = bucketRef.first()['index'];
                                    var up = (instanceConfig.timefilter.startIndex > 1);
                                    return up;
                                },
                                evetScrollDownEnd: function () {
                                    if (instanceConfig.isContentLoading()) return false;
                                    if (instanceConfig.timefilter.request) return false;
                                    //if(instanceConfig.timefilter.endIndex == 0) return false;                                   
                                    var bucketRef;
                                    if (instance.showEventsAcrossSources) {
                                        bucketRef = instanceConfig.event60Buckets;
                                    } else {
                                        bucketRef = instanceConfig.event30Buckets;
                                    }
                                    if (bucketRef.get().length == 0 || (instanceConfig.timefilter.offset >= instanceConfig.timefilter.totalRecords)) {
                                        return false;
                                    }
                                    instanceConfig.timefilter.endIndex = bucketRef.last()['index'];
                                    var totalRecords = instanceConfig.timefilter.totalRecords;
                                    totalRecords--;
                                    var down = (instanceConfig.timefilter.endIndex < totalRecords);
                                    return down;
                                },
                                eventPaginationToolbar: function () {
                                    var bucketRef;
                                    if (instance.showEventsAcrossSources) {
                                        bucketRef = instanceConfig.event60Buckets;
                                    } else {
                                        bucketRef = instanceConfig.event30Buckets;
                                    }
                                    var totalRecords = instanceConfig.timefilter.totalRecords;
                                    var startIndex = bucketRef.first() ? bucketRef.first()['index'] : '0';
                                    var endIndex = bucketRef.last() ? bucketRef.last()['index'] : '0';
                                    startIndex = parseInt(startIndex) + 1;
                                    endIndex = parseInt(endIndex) + 1;
                                    return startIndex + " - " + endIndex + " of " + totalRecords;
                                },
                                eventGetSelectedSources: function () {
                                    var ns = [];
                                    for (var i = 0; i < instanceConfig.eventSourcesDuplicate.length; i++) {
                                        var obj = instanceConfig.eventSourcesDuplicate[i];
                                        if (obj.checked) {
                                            ns.push(obj.namespace_actual);
                                            instanceConfig.eventSources[i].checked = true;
                                        } else {
                                            instanceConfig.eventSources[i].checked = false;
                                        }
                                    }
                                    return ns;
                                },
                                eventFilterSources: function (direction) {
                                    if (!direction) {
                                        instanceConfig.timefilter.startIndex = 0;
                                        instanceConfig.timefilter.endIndex = instanceConfig.timefilter.offset;
                                        instanceConfig.timefilter.sourceFilter = true;
                                        instanceConfig.timefilter.scrolldirection = 'scroll';
                                        instanceConfig.event60Buckets.clear();
                                    }
                                    if (direction == 'default') {
                                        var list = this.eventGetSelectedSources(), found = false;
                                        for (var i = 0; i < list.length; i++) {
                                            if (list[i] == instanceConfig.timefilter.defaultNS) {
                                                found = true;
                                                break;
                                            }
                                        }
                                        instanceConfig.timefilter.endIndex = 0;
                                        // if (found) {
                                        //     instanceConfig.timefilter.endIndex = 1;
                                        //     // instanceConfig.timefilter.scrolldirection = 'default';
                                        // } else {
                                        //     instanceConfig.timefilter.endIndex = instanceConfig.timefilter.offset;
                                        //     // instanceConfig.timefilter.scrolldirection = 'scroll';
                                        // }
                                        instanceConfig.timefilter.startIndex = 0;
                                        instanceConfig.timefilter.sourceFilter = true;
                                        instanceConfig.event60Buckets.clear();
                                    }
                                    this.getEventContent(instance.data, direction);
                                },
                                eventResetSourceSelection: function () {
                                    instanceConfig.eventSourcesFilter = "";
                                    for (var i = 0; i < instanceConfig.eventSources.length; i++) {
                                        if (instanceConfig.eventSources[i].checked) {
                                            instanceConfig.eventSourcesDuplicate[i].checked = true;
                                        } else {
                                            instanceConfig.eventSourcesDuplicate[i].checked = false;
                                        }
                                    }
                                },
                                eventSelectAllSources: function () {
                                    if (this.eventSourcesAll) {
                                        angular.forEach(instanceConfig.eventSourcesDuplicate, function (item) {
                                            item.checked = true;
                                        })
                                    } else {
                                        angular.forEach(instanceConfig.eventSourcesDuplicate, function (item) {
                                            item.checked = false;
                                        })
                                    }
                                },
                                eventIsSelectAllOption: function () {
                                    for (var i = 0; i < instanceConfig.eventSourcesDuplicate.length; i++) {
                                        if (!instanceConfig.eventSourcesDuplicate[i].checked) {
                                            this.eventSourcesAll = false;
                                            return false;
                                        }
                                    }
                                    this.eventSourcesAll = true;
                                    return true;
                                },
                                eventSourceSelectAll: function () {
                                    if (instanceConfig.showEventsAcrossSources) {
                                        angular.forEach(instanceConfig.eventSourcesDuplicate, function (item) {
                                            item.checked = true;
                                        })
                                    }
                                },
                                eventClearSourceSelection: function () {
                                    for (var i = 0; i < instanceConfig.eventSources.length; i++) {
                                        if (instanceConfig.eventSources[i].checked) {
                                            instanceConfig.eventSources[i].checked = false;
                                        }
                                    }
                                },
                                showPagination: function () {
                                    var eScope = 'bundle'; //instanceConfig.showEventsAcrossSources ? 'bundle' : 'file';
                                    if ((instanceConfig.data.content30.length == 0 && (eScope == 'file')) || (instanceConfig.data.content60.length == 0 && (eScope == 'bundle'))) {
                                        return false;
                                    }
                                    return true;
                                },
                                getEventContent: function (data, direction) {
                                    instanceConfig.filterLoader = true;
                                    instanceConfig.expandAll = false;
                                    if(direction){
                                        instanceConfig.timefilter.scrolldirection = direction === 'default' ? 'default' : 'scroll';
                                    }
                                    if (instanceConfig.timefilter.scrolldirection == 'default') {
                                        instanceConfig.timefilter.request = true;
                                        instanceConfig.data.isContentLoading.loading1 = true;
                                        //instanceConfig.loadingState.event = true;
                                    } else {
                                        instanceConfig.timefilter.request = true;
                                    }
                                    var cTime = this.getTimeRangeForEventContent(data.result.obs_date);
                                    var eScope = 'bundle'; // instanceConfig.showEventsAcrossSources ? 'bundle' : 'file';

                                    var params = "", nslist = "";
                                    params = 'ns_id=' + data.result.namespace_id;
                                    params = params + '&filename=' + encodeURIComponent(data.result.filename);
                                    if (eScope == 'bundle') {
                                        var ns = this.eventGetSelectedSources();
                                        if (ns && ns.length && ns.length > 0) {
                                            for (var i = 0; i < ns.length; i++) {
                                                if (i == 0) {
                                                    nslist = 'ns=' + ns[i];
                                                } else {
                                                    nslist = nslist + '&ns=' + ns[i];
                                                }
                                            }
                                        } else {
                                            nslist = 'ns=' + data.result.namespace;
                                        }
                                    } else {
                                        nslist = 'ns=' + data.result.namespace;
                                    }
                                    // Do not send nslist in payload if all events have been selected.
                                    if(!this.eventIsSelectAllOption()){
                                        params = params + '&' + nslist;
                                    }

                                    // if(!!instanceConfig.data.facetStr){
                                    //     params = params + '&filter='+ encodeURIComponent(instanceConfig.data.facetStr);
                                    // }

                                    var scrolldirection = instanceConfig.timefilter.scrolldirection;
                                    instanceConfig.timefilter.startIndex++;
                                    var sr = instanceConfig.timefilter.startIndex;
                                    var er = instanceConfig.timefilter.endIndex;
                                    var st = cTime.sDate;
                                    var et = cTime.eDate;
                                    var sp = instanceConfig.severityPayload;
                                    ExplorerService.getEventsContent(data.result.obs_date, params, eScope, st, et, scrolldirection, sr, er,sp).then(function (response) {
                                        var responseData = response.data.Data;

                                        var tmpData = [];
                                        instanceConfig.timefilter.request = false;
                                        instanceConfig.data.content60 = [];
                                        //create unique id
                                        var uniqueId = new Date() - new Date("2000-01-01 00:00:00");
                                        //instanceConfig.event60Buckets.clear();
                                        angular.forEach(responseData.event60, function (evt) {
                                            angular.forEach(evt, function (value, key) {
                                                var tmpEvent = value;
                                                if(tmpEvent.severity == 'NA' || !tmpEvent.severity_color ){
                                                    tmpEvent.severity_color = '#ffffff00'
                                                }
                                                tmpEvent.display = true;
                                                tmpEvent.isExpanded = false;
                                                //tmpEvent.isSourceExpanded = false;
                                                tmpEvent.namespace_id = key;
                                                if (scrolldirection == 'default' && tmpEvent.highlight && tmpEvent.highlight == "true") {
                                                    if (tmpEvent.ns_index) {
                                                        instanceConfig.timefilter.baseIndex = tmpEvent.ns_index;
                                                    }
                                                    if (tmpEvent.num_of_rows) {
                                                        instanceConfig.timefilter.offset = tmpEvent.num_of_rows;
                                                    }
                                                    instanceConfig.timefilter.defaultNS = tmpEvent.namespace;
                                                } else if (instanceConfig.timefilter.currentValue.indexOf('Custom') != -1) {
                                                    if (tmpEvent.ns_index) {
                                                        instanceConfig.timefilter.baseIndex = tmpEvent.ns_index;
                                                    }
                                                } else {
                                                    if (tmpEvent.ns_index) {
                                                        instanceConfig.timefilter.baseIndex = tmpEvent.ns_index;
                                                    }
                                                }
                                                instanceConfig.timefilter.endIndex = tmpEvent.index;
                                                if (tmpEvent.totalRows) {
                                                    instanceConfig.timefilter.totalRecords = tmpEvent.totalRows;
                                                }
                                                tmpEvent['scrollId'] = uniqueId + '-' + tmpEvent['index'];
                                                tmpData.push(tmpEvent);
                                            });
                                        });
                                        if (!instanceConfig.timefilter.offset) {
                                            instanceConfig.timefilter.offset = 200;
                                        }

                                        instanceConfig.event60Buckets.add(tmpData, instanceConfig.timefilter.offset, (scrolldirection == 'default' ? 'default' : direction));
                                        instanceConfig.data.content60 = instanceConfig.event60Buckets.get();
                                        //instanceConfig.severityFilterApplied && instanceConfig.applySeverityFilter();
                                        instanceConfig.data.content30 = [];


                                        //instanceConfig.event30Buckets.clear();
                                        angular.forEach(responseData.event30, function (evt) {
                                            angular.forEach(evt, function (value, key) {
                                                var tmpEvent = value;
                                                if(tmpEvent.severity == 'NA'){
                                                    tmpEvent.severity_color = '#ffffff00'
                                                }
                                                tmpEvent.namespace_id = key;
                                                if (scrolldirection == 'default' && tmpEvent.highlight && tmpEvent.highlight == "true") {

                                                    if (tmpEvent.ns_index) {
                                                        instanceConfig.timefilter.baseIndex = tmpEvent.ns_index;
                                                    }
                                                    if (tmpEvent.num_of_rows) {
                                                        instanceConfig.timefilter.offset = tmpEvent.num_of_rows;
                                                    }
                                                } else if (instanceConfig.timefilter.currentValue.indexOf('Custom') != -1) {
                                                    if (tmpEvent.ns_index) {
                                                        instanceConfig.timefilter.baseIndex = tmpEvent.ns_index;
                                                    }
                                                }
                                                if (tmpEvent.totalRows) {
                                                    instanceConfig.timefilter.totalRecords = tmpEvent.totalRows;
                                                }
                                                instanceConfig.timefilter.endIndex = tmpEvent.index;
                                                tmpEvent['scrollId'] = uniqueId + '-' + tmpEvent['index'];
                                                tmpData.push(tmpEvent);
                                            });
                                        });
                                        if (!instanceConfig.timefilter.offset) {
                                            instanceConfig.timefilter.offset = 200;
                                        }
                                        instanceConfig.event30Buckets.add(tmpData, instanceConfig.timefilter.offset, (scrolldirection == 'default' ? 'default' : direction));
                                        instanceConfig.data.content30 = instanceConfig.event30Buckets.get();
                                        instanceConfig.data.isContentLoading.loading1 = false;
                                        instanceConfig.timefilter.sourceFilter = false;
                                        instanceConfig.logEventData();
                                        instanceConfig.loadingState.event = false;
                                        instanceConfig.filterLoader = false;
                                        // $timeout(function() {
                                        //     instanceConfig.expandAll && instnceConfig.expandAllEvents();
                                        //     // This code runs after the DOM renders
                                        // },1000);
                                        
                                    }, function (response) {
                                        if (response.data.Msg.match(/SURROUNDING_EVENTS_MAXED_OUT/)) {
                                            instanceConfig.Max_Limit = response.data.Data.limit;
                                            instanceConfig.Max_Totalrecords = response.data.Data.totalRecords;
                                            instanceConfig.handleSessionTimeout(response);
                                            instanceConfig.data.isContentLoading.loading1 = false;
                                            instanceConfig.loadingState.event = false;
                                            instanceConfig.timefilter.sourceFilter = false;
                                            instanceConfig.timefilter.request = false;
                                            instanceConfig.MAXED_OUT = true;
                                            console.log(instanceConfig.MAXED_OUT);
                                            // instanceConfig.MAXED_OUT_MSG = responseMsg;
                                        }
                                        else {
                                            console.log("Error:" + response.status + "and" + response.Msg);
                                            instanceConfig.handleSessionTimeout(response);
                                            instanceConfig.data.isContentLoading.loading1 = false;
                                            instanceConfig.loadingState.event = false;
                                            instanceConfig.timefilter.sourceFilter = false;
                                            instanceConfig.timefilter.request = false;
                                        }
                                    });
                                },
                                isOverflowing: function (item, e) {
                                    var element = e.currentTarget;
                                    if (item.isExpanded) {
                                        item.isExpanded = false;
                                    }
                                    else if (element.scrollWidth > element.offsetWidth) {
                                        item.isExpanded = true;
                                    }
                                },
                                // isSourceOverflowing: function (item, e) {
                                //     var element = e.currentTarget;
                                //     if (item.isSourceExpanded) {
                                //         item.isSourceExpanded = false;
                                //     }
                                //     else if (element.scrollWidth > element.offsetWidth) {
                                //         item.isSourceExpanded = true;
                                //     }
                                // },
                                isFilterApplied: function () {
                                    var unselected = instanceConfig.severityFilter.filter(function(e){
                                    return !e.selected
                                    })
                                    if(unselected.length > 0 && instanceConfig.severityFilter.length != unselected.length){
                                        return true;
                                    }
                                    else{
                                        return false;
                                    }
                                },
                                getFilterArr: function () {
                                    return instanceConfig.severityFilter.reduce(function (a, c) {
                                        if (c.selected) {
                                            a.push(c.label);
                                        }
                                        return a
                                    }, [])
                                },
                                showpre: function (cnt) {
                                    var filter = instanceConfig.getFilterArr() || [];
                                    if (instanceConfig.severityFilterApplied) {
                                        if (instanceConfig.severityFilterApplied && (cnt.highlight == 'true' && filter.includes(cnt.severity)) || instanceConfig.severityFilterApplied && (cnt.highlight == 'false' && filter.includes(cnt.severity))) {
                                            return true;
                                        } else if (instanceConfig.severityFilterApplied && (cnt.highlight == 'true' && !filter.includes(cnt.severity))) {
                                            return false
                                        }
                                    } else {
                                        return true;
                                    }

                                },
                                createSeverityPayload: function(){
                                   return instanceConfig.isFilterApplied() ?  instanceConfig.severityFilter.reduce(function (a, c) {
                                        // a += c.selected ? ('~' + c.label) : '';
                                        a += c.selected ? (a.length === 0 ? c.label : '~' + c.label) : '';
                                        return a;
                                    }, "") : "";
                                },
                                applySeverityFilter: function () {
                                    instanceConfig.severityPayload = instanceConfig.createSeverityPayload();
                                    this.eventResetPaginationInfo();
                                    instanceConfig.getEventContent(instance.data);
                                    
                                    // instanceConfig.isFilterApplied();instanceConfig.filterLoader = true;
                                    // instanceConfig.filterLoader = true;
                                    // var filter = instanceConfig.getFilterArr() || [];
                                    // if (filter.length) {
                                    //     instanceConfig.data.content60.forEach(function (cnt) {
                                    //         if (!(cnt.highlight == 'true')) {
                                    //             if (filter.includes(cnt.severity)) {
                                    //                 cnt.display = true;
                                    //             } else {
                                    //                 cnt.display = false;
                                    //             }
                                    //         }
                                    //     })
                                    // } else {
                                    //     instanceConfig.data.content60.forEach(function (cnt) {
                                    //         cnt.display = true;
                                    //     })
                                    // }
                                    // setTimeout(function () {
                                    //     instanceConfig.filterLoader = false;
                                    // }, 0)

                                },
                                clearSeverityFilter: function () {
                                    instanceConfig.filterLoader = true;
                                    instanceConfig.severityFilter.forEach(function (cnt) {
                                        cnt.selected = false;
                                    })
                                    instanceConfig.applySeverityFilter();
                                },
                                expandAllEvents: function () {
                                    var list = instanceConfig.expandAll ?  document.getElementsByClassName("noflow"): document.getElementsByClassName("yesFlow") 
                                    for (var i = 0; i < list.length; i++) {
                                        instanceConfig.isOverflowingElement(list[i], angular.element(list[i]).scope().cnt);
                                    }
                                },
                                isOverflowingElement: function (e, item) {
                                 
                                        var element = e

                                        if (item.isExpanded) {
                                            item.isExpanded = false;
                                        }
                                        else if (element.scrollWidth > element.offsetWidth) {
                                            item.isExpanded = true;
                                        }
                                    

                                },
                            };
                            if (instance.type == "event") {
                                instanceConfig.getEventContent(instance.data);
                                instanceConfig.getEventSources();
                                var cTime = new Date(instance.data.result.obs_date);
                                instanceConfig.timefilter.customFilter.fromDate.gDate = cTime;
                                instanceConfig.timefilter.customFilter.toDate.gDate = cTime;
                                instanceConfig.timefilter.customFilter.todayDate = scope.todayDate != undefined ? scope.todayDate : cTime;
                                instanceConfig.timefilter.customFilter.MinDate = scope.info.MinDate != undefined ? scope.info.MinDate : cTime;
                            } else if (instance.type == "app") {

                            } else if (instance.type == "EVENT_GROUP") {

                            } else {
                                instanceConfig.getAllSection(instance.data);
                                instanceConfig.getAllSectionsListForAFile(instance.data);
                            }
                            openInstances.push(instanceConfig);
                            this.showInstance(instanceConfig);
                        }
                    }
                } else {
                    this.showInstance(c_instance);
                }
            },
            getInstanceByMD5: function (md5) {
                var i;
                for (i in openInstances) {
                    if (openInstances[i].md5 === md5) {
                        return openInstances[i];
                    }
                }
                return null;
            },
            updateInstanceByMD5: function(md5, instance) {
            	var i;
                for (i in openInstances) {
                    if (openInstances[i].md5 === md5) {
                        openInstances[i] = instance;
                    }
                }
            },
            showInstance: function (cur_instance) {
                for (var i in openInstances) {
                    if (openInstances[i].md5 == cur_instance.md5) {
                        openInstances[i].visible = true;
                    } else {
                        openInstances[i].visible = false;
                    }
                }
                this.setVisible(true);
            },
            getInstances: function () {
                return openInstances;
            },
            removeInstance: function (instance) {
                if(instance.type == "dashboard" || instance.type == "tableau"){
                    if(localStorage.getItem("rid")){
                        var tempRidList = localStorage.getItem("rid").split(',');
                        var tempDidList = localStorage.getItem("did").split(',');
                        for(i=0;i<tempRidList.length;i++){
                            if(instance.data.view){
                                if(instance.data.view.id == tempRidList[i]){
                                    tempRidList.splice(i,1);
                                    tempDidList.splice(i,1);
                                    i--;
                                }
                            }else {
                                if(instance.data.report.r_id == tempRidList[i]){
                                    tempRidList.splice(i,1);
                                    tempDidList.splice(i,1);
                                    i--;
                                }
                            }
                        }
                    }
                }
                if(instance.type == "dashboard" || instance.type == "tableau"){
                    if(localStorage.getItem("rid")!=null){
                        localStorage.setItem("rid",tempRidList.toString());
                        localStorage.setItem("did",tempDidList.toString());
                    }
                }
                for (var i in openInstances) {
                    if (openInstances[i].md5 === instance.md5) {
                        openInstances.splice(i, 1);
                        return;
                    }
                }
               /* this.modalInstance = $modal.open({
                    //'scope': scope,
                    'templateUrl': 'partials/instance_tab_change_confirmation.html'
                });*/
            },
            yesRemoveInstance: function(){                
                for (var i in openInstances) {
                    if (openInstances[i].md5 === instance.md5) {
                        openInstances.splice(i, 1);
                        return;
                    }
                }
            },
            noRemoveInstance: function(){ 
                this.modalInstance.close(); 
            },
            getNumberOfInstances: function () {
                return openInstances.length;
            } 
        };
    }]);

angular.module('gbApp.services').factory('UserTrackingService', ['$http', 'GlobalService', '$q', '$cookies', '$timeout', 'AppService', 'metaDataService',
    function ($http, GlobalService, $q, $cookies, $timeout, AppService, metaDataService) {
        var setConfig = false;
        var config = null;
        return {
            standard_user_tracking: function (application, module, activity, details, solrQuery) {
                var umsDomain = GlobalService.getVal('umsDomain');
		var usertrackingDetailsLimit = GlobalService.getVal('usertracking_details_limit');
                var url;
		var result = {};
		
		//if(activity == "Log View" || activity == "Table View" || activity == "Diff")
		//{			
		 try{	
			var detailsJsonObj = JSON.parse(details);
			if(Object.keys(detailsJsonObj).length > usertrackingDetailsLimit){
	
				for (var index=0;index < usertrackingDetailsLimit;index ++){
					var key = Object.keys(detailsJsonObj)[index];
					result[key] = detailsJsonObj[key]
					}
					details = JSON.stringify(result);
				}
		}catch(err){}

		//} 
                var params = {};
                if($cookies.prevApplication && $cookies.prevApplication != application) {
                    params['switched_feature'] = $cookies.prevApplication;
                }
                url = umsDomain + '/user_tracking/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + application + '/' + module + '/' + activity;
                $cookies.prevApplication = application;
                return $http.post(url, {
                    "details": details,
                    "solr_query": !!solrQuery ? solrQuery : ""
                }, {params: params});
            },
            custom_user_tracking: function (d_id, r_id) {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                return $http.get(infoserverDomain + '/user_tracking/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + d_id + '/' + r_id);
            },
            getAllConfig: function () {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                if (!setConfig) {
                    setConfig = true;
                    config = $http.get(infoserverDomain + '/uimeta/config/' + GlobalService.getVal('manufacturer') + '/' +  GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'), {
                        cache: true
                    });
                }
                return config;
            }
        };
    }]);
angular.module('gbApp.services').factory('RulesTestWithLogvault', [
    function () {
        var gbObjs = function(){
            var self = this;
            self.page = null;
            self.rules = [];
            self.setCurrentPage = function(page){
                self.page = page;
                if(self.page != "test_rule_history"){
                    self.rules = [];
                }
            };
            self.getCurrentPage = function(){
                return self.page;
            }
            self.setRulesSelected = function(rule){
                self.rules = rule;
            };
            self.getRulesSelected = function(){
                return self.rules;
            };
        }
        var pageObj = new gbObjs();
        return pageObj;
    }]);


/* Filters */

angular.module('gbApp.filters', [])

// Custom Filter to splice url to extract the bundle name in the last part of the input
    .filter('bundleName', [
        function () {
            return function (input) {
                if (input === undefined || input === null || input === 'NA') {
                    return "";
                }
                return input.split('/')[input.split('/').length - 1].replace(/\.gz$/, '');
            };
        }])

    .filter('bundleNameWithTimeStamp', [
        function () {
            return function (input) {
                if (input === undefined || input === null || input === 'NA') {
                    return "";
                }
                var bundleName = input.split('/')[input.split('/').length - 1].replace(/\.gz$/, '');
                bundleName = bundleName.split("_");
                bundleName.reverse();
                bundleName.pop();
                bundleName.reverse();
                bundleName = bundleName.join("");

                return bundleName;
            };
        }])

    .filter('filterRules', [
        function () {
            return function (data, filter) {
                if (Object.keys(filter).length === 0) {
                    return data;
                }
                var newData = [];
                var filterKeys = Object.keys(filter);
                for (var i in data) {
                    var found = true;
                    for (var j in filterKeys) {
                        if (filterKeys[j] === 'label_display' || filterKeys[j] === 'description' || filterKeys[j] === 'author' || filterKeys[j] === 'rule_name') {
                            var re = new RegExp(filter[filterKeys[j]], "i");
                            if (data[i][filterKeys[j]].search(re) === -1) {
                                found = false;
                                break;
                            }
                        } 
                        else if (filterKeys[j] === 'created_ts' || filterKeys[j] === 'modified_ts') {
                            var timeFilterObj = filter[filterKeys[j]][0];
                            // BG-7052
                            // var st = new Date(timeFilterObj.startTime);
                            // var et = new Date(timeFilterObj.endTime);
                            // var currentDataTimeStr = new Date(data[i][filterKeys[j]]);
                            var st = moment(timeFilterObj.startTime, "YYYY-MM-DD HH:mm:ss").toDate();
                            var et = moment(timeFilterObj.endTime, "YYYY-MM-DD HH:mm:ss").toDate();
                            var currentDataTimeStr = moment(data[i][filterKeys[j]], "YYYY-MM-DD HH:mm:ss").toDate();
                            var range = moment(currentDataTimeStr).isBetween(st, et);
                            if (!range) {
                                found = false;
                                break;
                            }
                        } 
                        else if(filterKeys[j] === 'tags'){
                            var foundOne = false;
                            for (var k in filter[filterKeys[j]]) {
                                if (data[i][filterKeys[j]] && data[i][filterKeys[j]].map(function(cur){ return cur.tag_name}).indexOf(filter[filterKeys[j]][k]) != -1 ) {
                                    foundOne = true;
                                    break;
                                }
                            }
                            if (!foundOne) {
                                found = false;
                                break;
                            }
                        }                    
                        
                        else {
                            var foundOne = false;
                            for (var k in filter[filterKeys[j]]) {
                                if (data[i][filterKeys[j]] && data[i][filterKeys[j]] === filter[filterKeys[j]][k]) {
                                    foundOne = true;
                                    break;
                                }
                            }
                            if (!foundOne) {
                                found = false;
                                break;
                            }
                        }                                             
                    }
                    if (found) {
                        newData.push(data[i]);
                    }
                }
                return newData;
            };
        }])
    .filter('filterSavedView', [
        function () {
            return function (data, filter) {
                if (!filter) {
                    return data;
                }
                filter = filter.toLowerCase();
                var newData = [];

                for (var i =0;i<data.length;i++) {
                    if(((unescape(data[i]['view_name']).toLowerCase()).indexOf(filter) != -1) || ((unescape(data[i]['desc']).toLowerCase()).indexOf(filter) != -1) || ((data[i]['created_by'].toLowerCase()).indexOf(filter) != -1)){
                        newData.push(data[i]);
                    }
                }
                return newData;
            };
        }])
    .filter('filterTemplates', [
        function () {
            return function (data, filter) {
                if (Object.keys(filter).length === 0) {
                    return data;
                }
                var newData = [];
                var filterKeys = Object.keys(filter);
                for (var i in data) {
                    var found = true;
                    for (var j in filterKeys) {
                        var re = new RegExp(filter[filterKeys[j]], "i");
                        if (data[i][filterKeys[j]].search(re) === -1) {
                            found = false;
                            break;
                        }
                    }
                    if (found) {
                        newData.push(data[i]);
                    }
                }
                return newData;
            };
        }])
    
    .filter('filterBooks', [
        function() {
            return function(data, filter) {
                if(!filter) {
                    return data;
                }
                var newData = [];
                for(var i in data) {
                    var found = false;
                    //data[i].expand = false;
                    if(data[i].name && data[i].name.toLowerCase().indexOf(filter.toLowerCase()) > -1) {
                        found = true;
                    }else if(data[i].dname && data[i].dname.toLowerCase().indexOf(filter.toLowerCase()) > -1) {
                         found = true;
                    }

                    if(!found && data[i].tags) {
                        for(var j in data[i].tags) {
                            if(data[i].tags[j].toLowerCase().indexOf(filter.toLowerCase()) > -1) {
                                found = true;
                                break;
                            }
                        }
                    }
                    if(!found && data[i].tag) {
                        for(var j in data[i].tag) {
                            if(data[i].tag[j].toLowerCase().indexOf(filter.toLowerCase()) > -1) {
                                found = true;
                                break;
                            }
                        }
                    }
                    //search for sub-report
                    if(!found && data[i].reports && data[i].reports.length > 0){
                        for(var j in data[i].reports) {                            
                            if(data[i].reports[j]["rname"].toLowerCase().indexOf(filter.toLowerCase()) > -1) {
                                found = true;
                                data[i].expand = true;
                                break;
                            }
                        }
                    }
                    if(!found && data[i].f_views && data[i].f_views.length > 0){
                        for(var j in data[i].f_views) {                            
                            if(data[i].f_views[j]["name"].toLowerCase().indexOf(filter.toLowerCase()) > -1) {
                                found = true;
                                data[i].expand = true;
                                break;
                            }
                        }
                    }

                    if(found) {
                        newData.push(data[i]);
                    }
                }
                return newData;
            };
        }])
        
     .filter('filterDashboards', [
        function() {
            return function(data, filter) {
                if(!filter) {
                    return data;
                }
                var newData = [];
                
                for(var i in data) {
                    if(data[i].rdesc.toLowerCase().indexOf(filter.toLowerCase()) > -1 || data[i].rname.toLowerCase().indexOf(filter.toLowerCase()) > -1) {
                        newData.push(data[i]);
                    }
                }
                return newData;
            };
        }])

    .filter('filterMultiples', [
        function () {
            return function (data, filter) {
                if (Object.keys(filter).length === 0) {
                    return data;
                }
                var newData = [];
                var filterKeys = Object.keys(filter);
                for (var i in data) {
                    var found = true;
                    var foundOne = false;
                    for (var j in filterKeys) {
                        for (var k in filter[filterKeys[j]]) {
                            if (data[i][filterKeys[j]] === filter[filterKeys[j]][k]) {
                                foundOne = true;
                                break;
                            }
                        }
                        if (!foundOne) {
                            found = false;
                            break;
                        }
                    }

                    if (found) {
                        newData.push(data[i]);
                    }
                }
                return newData;
            };
        }])

// Custom Filter to splice url to extract the bundle name with s3:// and extention /gzin the last part of the input
    .filter('svFileName', [
        function () {
            return function (input, filter) {
                if (input === undefined || input === null || input === 'NA') {
                    return "";
                }
                var fileName = input.split('/')[input.split('/').length - 1];
                var s3 = input.split('/')[0];
                if (s3 !== "s3:") {
                    var fileNameArr = fileName.split('.');
                    fileNameArr.pop();
                    fileName = fileNameArr.join('.');
                }
                return fileName;
            };
        }])
// Custom Filter to splice url to extract the bundle name without file extension in the last part of the input
    .filter('bundleLessExt', [function () {
        return function (input) {
            var x;
            if (input === undefined || input === null || input === 'NA') {
                return "";
            }
            x = input.split('/')[input.split('/').length - 1].split('.');
            x.pop();
            if (x.join('.').endsWith('tar')) {
                x.pop();
            }
            return x.join('.');
        };
    }])

// Custom Filter to display the given time in the desired format.
    .filter('toTimeStr', [
        function () {
            return function (input) {
                if (input) {
                    return input.replace(/T/g, ' ').replace(/Z/g, '');
                } else {
                    return '';
                }

            };
        }])

// Custom Filter to convert the bytes into KB, MB or B based on the value.
    .filter('fileSize', [
        function () {
            return function (input) {
                if (parseInt(input) >= 1024 * 1024) {
                    return (input / 1024 / 1024).toFixed(2) + ' MB (Approx.)';
                } else if (parseInt(input) < (1024 * 1024) && parseInt(input) > 1024) {
                    return (input / 1024).toFixed(2) + ' KB (Approx.)';
                } else {
                    return input + ' B';
                }
            };
        }])

// Custom filter to cut the string to a max limit
    .filter('cut', [
        function () {
            return function (value, wordwise, max, tail) {
                if (!value) return '';
                max = parseInt(max, 10);
                if (!max) return value;
                if (value.length <= max) return value;
                value = value.substr(0, max);
                if (wordwise) {
                    var lastspace = value.lastIndexOf(' ');
                    if (lastspace != -1) {
                        value = value.substr(0, lastspace);
                    }
                }
                return value + (tail || '…');
            };
        }])

// Custom filter add support for greater than, less than for numeric filtering and boolean filtering
    .filter('numberFilter', ['$filter',
        function ($filter) {
            return function (input, filter) {
                if (input && filter) {
                    var i, j, k, t_keys, t_input, t_filter, keys = Object.keys(filter);
                    for (i = 0; i < keys.length; i++) {
                        if (filter[keys[i]].type == 'boolean') {
                            // console.info("Boolean Pending");
                        } else if (filter[keys[i]].type == 'number') {
                            if (filter[keys[i]].value != null && String(filter[keys[i]].value).length) {
                                t_input = [];
                                for (j in input) {
                                    t_keys = Object.keys(input[j]);
                                    for (k in t_keys) {
                                        if (t_keys[k] == filter[keys[i]].field) {
                                            switch (filter[keys[i]].operator) {
                                                case '>' :
                                                    if (input[j][t_keys[k]] > filter[keys[i]].value) {
                                                        t_input.push(input[j]);
                                                    }
                                                    break;
                                                case '<' :
                                                    if (input[j][t_keys[k]] < filter[keys[i]].value) {
                                                        t_input.push(input[j]);
                                                    }
                                                    break;
                                                case '=' :
                                                    if (input[j][t_keys[k]] == filter[keys[i]].value) {
                                                        t_input.push(input[j]);
                                                    }
                                                    break;
                                            }
                                        }
                                    }
                                }
                                input = t_input;
                            }
                        } else {
                            t_filter = {};
                            t_filter[filter[keys[i]].field] = filter[keys[i]].value;
                            input = $filter('filter')(input, t_filter);
                        }
                    }
                    return input;
                } else {
                    return null;
                }
            };
        }])

// To display fixed precision for numbers
    .filter('numberFixedLen', function () {// 1e32 is enogh for working with 32-bit
        // 1e8 for 8-bit (100000000)
        // in your case 1e4 (aka 10000) should do it

        return function (a, b) {
            return (1e4 + a + "").slice(-b);
        };
    })
// To extract the substring on length x from the given string.
    .filter('subStringToX', function () {// substring to x charater
        return function (a, b) {
            if (a && a.length > b) {
                a = a.substring(0, b) + "...";
            }
            return a;
        };
    })
// format date
    .filter('utcDate', function () {// substring to x charater
        return function (myDate) {
            if (myDate) {
                myDate = new Date(myDate);
                myDate = myDate.getFullYear() + "-" + (myDate.getMonth() + 1) + "-" + myDate.getDate() + " " + myDate.getHours() + ":" + myDate.getMinutes() + ":" + myDate.getSeconds();
            }
            return myDate;
        };
    })
// format date
    .filter('utcDateTZ', function () {// substring to x charater
        return function (myDate) {
            if (myDate) {
                myDate = new Date(myDate);
                myDate = myDate.getUTCFullYear() + "-" + parseInt(myDate.getUTCMonth() + 1) + "-" + myDate.getUTCDate() + "T" + myDate.getUTCHours() + ":" + myDate.getUTCMinutes() + ":" + myDate.getUTCSeconds() + "Z";

            }
            return myDate;
        };
    })

// Expects an array and returns the comma seperated string of tag labels
    .filter('tags', function () {
        return function (tagsArr) {
            if (tagsArr === undefined) {
                return "";
            }
            // console.info(tagsArr);
            var i, tagstr = "";
            if (Array.isArray(tagsArr)) {
                for (i in tagsArr) {
                    if (tagstr.length) {
                        tagstr += ", ";
                    }
                    tagstr += tagsArr[i]['_label'];
                }
                return tagstr;
            } else {
                return tagsArr['_label'];
            }
        };
    })

// 
    .filter('gbunescape', function () {
        return function (value) {
            return unescape(value);
        };
    })


// format date
    .filter('unixDateTime', function () {// substring to x charater
        return function (myDate) {
            var dt = new Date(myDate);
            var ts = Math.round(dt.getTime() / 1000);
            return ts;
        };
    })

    .filter('internalDashboards',function () {// substring to x charater
        return function (dashboards) {
	    var internalDashboards = [];
	    for (var i = 0; i < dashboards.length; i++) {
		if(dashboards[i]['d_type'] === "Internal" || (dashboards[i]['d_type'] === "Summary" && dashboards[i]['typ'] === "Internal")){
			internalDashboards.push(dashboards[i]);
		}	
		 	
	    }	    	
            return internalDashboards;

        };
    })

    .filter('removeDup', function () {
         return function (arr) {
		var newArr = [];
		angular.forEach(arr, function(value, key) {
		var exists = false;
		angular.forEach(newArr, function(val2, key) {
			if(angular.equals(value.rule_name, val2.rule_name)){ exists = true }; 
		});
		if(exists == false && value.rule_name != "") { newArr.push(value); }
	});

  		return newArr;
        };
    })
// remove duplicates with ng-repeat
    .filter('unique', function () {
        return function (collection, keyname) {
            var output = [],
                keys = [];
            angular.forEach(collection, function (item) {
                var key = item[keyname];
                if (keys.indexOf(key) === -1) {
                    keys.push(key);
                    output.push(item);
                }
            });
            return output;
        };
    })
    .filter('filterArrayItems', function () {
        return function (items, type, filterItem) {
          var filtered = [];
          for (var i = 0; i < items.length; i++) {
            var item = items[i];
            if (filterItem === item[type]) {
              filtered.push(item);
            }
          }
          return filtered;
        };
      });

angular.module('gbApp.controllers.explorer', ['gbApp.services', 'gbApp.services.explorer', 'gbApp.globals']).controller('ExplorerCtrl', ['$scope', '$cookies', '$sce', '$filter', 'ErrorService', 'ModalService', 'ExplorerService', 'InstanceHandler', 'GlobalService', 'AppService', '$timeout', '$window', '$q', 'UserTrackingService', 'metaDataService', '$interval',
function($scope, $cookies, $sce, $filter, ErrorService, ModalService, ExplorerService, InstanceHandler, GlobalService, AppService, $timeout, $window, $q, UserTrackingService, metaDataService, $interval) {
    // Holder for all the app info
    //var htmconst_data = [];
    var htmconst_url = "../config/constants/explorer_constants.json";
    $.get(htmconst_url, function (response, status) {
        $scope.explorerconstants = response;
    });
    $scope.info = {};
    $scope.$parent.justforflag.stillloading = true;
    $scope.nographmarks = false;
    $scope.exportCsvTitle = GlobalService.getVal('exportCsvTitle');
    $scope.bottom10Title = GlobalService.getVal('bottom10Title');
    $scope.top10Title = GlobalService.getVal('top10Title');
    $scope.enableFacetStats = GlobalService.getVal('enableFacetStats');
    $scope.noOfRecordsLbl = GlobalService.getVal('noOfRecordsLbl');
    $scope.fromPageLbl = GlobalService.getVal('fromPageLbl');
    $scope.minNoOFRecords = GlobalService.getVal('minNoOFRecords');
    $scope.maxNoOFRecords = GlobalService.getVal('maxNoOFRecords');
    $scope.limitFacet = GlobalService.getVal('limitFacet');
    $scope.limitFacetTotal = GlobalService.getVal('limitFacetTotal');
    $scope.events_export_limit = GlobalService.getVal('events_export_limit');
    $scope.show_more_characters_limit = GlobalService.getVal('show_more_characters_limit');
    $scope.gbStore = {
        fromDate: "",
        toDate: ""
    };
    $scope.timelineGraphDrilDown = [];
    $scope.ctrlId = $scope.$parent.activeTab.id;
    $scope.todayDate = metaDataService.getTodayDate();
    $scope.csvpage = [];
    $scope.csvpage.pagevalue = "current";
    if($scope.events_export_limit == undefined || $scope.events_export_limit == 0) {
        $scope.csvpage.noOfRecordsCsv = 1;
    }else {
        $scope.csvpage.noOfRecordsCsv = $scope.events_export_limit;
    }
    $scope.csvdownloaderror = false;
    $scope.noOfRecordsCsv = "";

    // Defines the completion of initial load.
    // $scope.info.init = false;

    // Defines the uploaded_by field for out of the box filters.
    $scope.info.uploadedBy = null;

    // Defines whether the customer has events and sections or not.
    $scope.info.hasSections = false;
    $scope.info.hasEvents = false;
    // Holds the start date.
    $scope.info.fromDate = null;

    // Holds the end date.
    $scope.info.toDate = null;

    // Holds the start time.
    $scope.info.fromTime = {};
    $scope.info.refCount = 0;

    // Holds the end time.
    $scope.info.toTime = {};

    // Holds all the facets data.
    $scope.facets = [];

    // Holds the selected facets.
    $scope.selectedFacets = {};

    // Holds the current chart level
    $scope.info.chartLevel = "YEAR";

    // Holds the default level for the chart based on default days.
    $scope.info.defaultLevel = "YEAR";

    // Holds the event attributes
    $scope.info.selectedEvtAttribs = [];

    // Temporarily holds the event attributes
    $scope.info.tSelectedEvtAttribs = [];

    // Holds all the event attributes
    $scope.info.evtAttribs = [];

    // Holds the name of selected saved filter
    $scope.info.selectedFilterName = "Select View";

    //Defines whether search dropdown should be visible or not
    $scope.info.showDropdown = false;

    //Defines whether auto-open is on or off
    $scope.info.autoOpen = true;

    $scope.defaultFacet = null;

    $scope.d3Attr = {
        height: 180,
        width: 800
    };

    // Defines the sort order selection on the UI.
    $scope.info.sortOrder = {
        "label" : "Latest",
        "val" : "desc"
    };

    // Defines the page object for pagination.
    $scope.info.page = {
        "total" : 0,
        "current" : 0,
        "pages" : 0,
        "count" : 10
    };

    // Holds the url list for linked attributes
    $scope.info.urlList = {};

    //Defines which user's filter is on
    $scope.info.filterBtn = 'all';

    //Defines initial state of saved filters
    $scope.savedFiltersList = [];

    //Initially, flag for saved filter not found is set to false
    $scope.savedFiltersListNotFound = false;

    //Defines all users info
    $scope.allUsersInfo = [];

    //Inintializes current User ID
    $scope.currentUserId = null;

    //Intializes the export url to null
    $scope.exportUrl = null;

    // Holds all the facetCharts.
    $scope.info.facetCharts = [];

    // Defines whether explorer is in pristine state or not ??
    $scope.info.pristine = true;

    // Defines the text that is being displayed if customDateFilter is false.
    $scope.dateRangeFilterName = GlobalService.getVal('customdate');

    // Defines whether facets are being loaded ??
    $scope.info.facetLoading = true;

    // Defines whether the results are being loaded ??
    $scope.info.resultLoading = true;

    // Defines whether the data are being loaded ??
    $scope.info.dataLoading = true;

    // Defines whether explorer is in default state
    $scope.info.defaultState = true;

    // Specifies the ID of current View
    $scope.info.currentViewID = null;
    
    // Holds the default fields to be displayed in the results.
    $scope.info.fields = [];

    // Specifies whether event or section selection is in default state
    $scope.info.eventSectionSelection = true;

    // Specifies what is the default search text
    $scope.info.defaultSearchText = '*';

    $scope.info.facetLimit = GlobalService.getVal('facets_limit');
    
    $scope.info.allConfigLoading = true;

    $scope.toggleChartCnt = true;

    // Initial empty response object which will eventually be filled with results.
    $scope.info.response = {
        docs : [],
        numFound : 0
    };

    //Sets default filter operation fields
    $scope.info.setDefaultFilterOperation = {
        filterId : null,
        statusCode : 0
    };

    //Sets change filter accessibility operation fields
    $scope.info.changeFilterAccesibilityOperation = {
        filterId : null,
        statusCode : 0
    };

    $scope.saveModal = {};
    $scope.form = {};

    $scope.info.filterSuggest = '*';
    $scope.info.filterSuggestApply = false;
    $scope.info.filterSuggestLoading = false;
    $scope.info.filterSuggestions = [{
        error:{
            label : 'Start typing to get suggestions.',
            dataType : 'none'
        }
    }];
    $scope.info.filterSuggestionsSectionsList = [];
    $scope.info.filterSuggestionsAttriList = [];
    $scope.info.filterSuggestLatest = "";
    $scope.info.filterSuggestItem = "";
    $scope.info.filterSavedFilterRemote = [];
    $scope.info.filterSuggestType = 'sections';
    $scope.info.filterSuggestSelectedSection = null;
    $scope.savedFiltersListNotLoaded = true;

    $scope.facetLoadingGradually = false;

    $scope.facetGradualFillingCount = 0;
    
    $scope.facetDataLocally = [];

    // Stores whether session is timed out or not
    $scope.info.sessionTimedOut = false;

    $scope.info.eventGroupsLabel = GlobalService.getVal("event_group_tab_label");

    //Used fot statistics data
    $scope.info.statistics = {
        loading : false
    };
    
    $scope.d3Data = [];
    
    $scope.info.application = GlobalService.getVal('navExplorer');
    
    $scope.info.rnaEnabled = metaDataService.getFeatures()['rules_and_alerts'];

    $scope.info.dataRestrictionMsg = "";
    $scope.info.initialDatesSaved = false;
    $scope.info.callRefreshIfFromDateInRange = true;
    $scope.info.callRefreshIfToDateInRange = true;

    $scope.reloadGraph = function(data) {
        var fdata = [], chartLabel = "";
        if(!data || !data['obs_date'] || !data['obs_date'].counts || data['obs_date'].counts.length == 0) { 
            $scope.d3Data = [];
            data = {'obs_date':{'end': "2018-07-24T04:00:04Z",'gap': "+1YEAR/YEAR", 'start': "2013-01-31T04:00:04Z", counts:[]}};
            
            //return;
        }
        if (data['obs_date']['gap'].indexOf("YEAR") >= 0) {            
            chartLabel = "Year View (UTC)";
            for ( i = 0; i < data['obs_date'].counts.length / 2; ++i) {
                t_data = {};
                t_date = new Date(data['obs_date'].counts[(i * 2)].replace(/-/g, "/").replace('T', ' ').substring(0, 19));
                t_data['name'] = t_date.getFullYear().toString();
                t_data['actDate'] = t_date;
                t_data['value'] = data['obs_date'].counts[(i * 2) + 1];
                t_data['link'] = "j-drillDown-" + data['obs_date'].counts[(i * 2)];
                t_data['title'] = chartLabel;
                fdata.push(t_data);
            }
        }else if (data['obs_date']['gap'].indexOf("MONTH") >= 0) {
            chartLabel = "Month View (UTC)";
            for ( i = 0; i < data['obs_date'].counts.length / 2; ++i) {
                t_data = {};
                t_date = new Date(data['obs_date'].counts[(i * 2)].replace(/-/g, "/").replace('T', ' ').substring(0, 19));
                t_data['name'] = t_date.getFullYear() + "-" + t_date.getMonthName().substring(0, 3);
                t_data['actDate'] = t_date;
                t_data['value'] = data['obs_date'].counts[(i * 2) + 1];
                t_data['link'] = "j-drillDown-" + data['obs_date'].counts[(i * 2)];
                t_data['title'] = chartLabel;
                fdata.push(t_data);
            }
        }else if (data['obs_date']['gap'].indexOf("DAY") >= 0) {
            chartLabel = "Day of Month View (UTC)";
            for ( i = 0; i < data['obs_date'].counts.length / 2; ++i) {
                t_data = {};
                t_date = new Date(data['obs_date'].counts[(i * 2)].replace(/-/g, "/").replace('T', ' ').substring(0, 19));
                t_data['name'] = (t_date.getDate() > 9 ? t_date.getDate() : "0" + t_date.getDate()) + " " + t_date.getMonthName().substring(0, 3);
                t_data['actDate'] = t_date;
                t_data['value'] = data['obs_date'].counts[(i * 2) + 1];
                t_data['link'] = "j-drillDown-" + data['obs_date'].counts[(i * 2)];
                t_data['title'] = chartLabel;
                fdata.push(t_data);
            }
        }else if (data['obs_date']['gap'].indexOf("HOUR") >= 0) {
            chartLabel = "Hours View (UTC) (HH:MM Month-Date)";
            for ( i = 0; i < data['obs_date'].counts.length / 2; ++i) {
                t_data = {};
                var strDate = data['obs_date'].counts[(i * 2)].replace(/-/g, "/").replace('T', ' ').replace('Z', '');
                t_date = new Date(strDate);
                t_data['name'] = (t_date.getHours() > 9 ? t_date.getHours() : "0" + t_date.getHours()) + ":" + (t_date.getMinutes() > 9 ? t_date.getMinutes() : "0" + t_date.getMinutes()) + " " + t_date.getMonthNameShort() + " " + t_date.getDate();
                t_data['actDate'] = t_date;
                t_data['value'] = data['obs_date'].counts[(i * 2) + 1];
                t_data['link'] = "j-drillDown-" + data['obs_date'].counts[(i * 2)];
                t_data['title'] = chartLabel;
                fdata.push(t_data);
            }
        }else if (data['obs_date']['gap'].indexOf("MINUTES") >= 0) {
            chartLabel = "Minutes View (UTC) (HH:MM)";
            for ( i = 0; i < data['obs_date'].counts.length / 2; ++i) {
                t_data = {};
                var strDate = data['obs_date'].counts[(i * 2)].replace(/-/g, "/").replace('T', ' ').replace('Z', '');
                t_date = new Date(strDate);                
                var d_name = (t_date.getHours() > 9 ? t_date.getHours() : "0" + t_date.getHours()) + ":" + (t_date.getMinutes() > 9 ? t_date.getMinutes() : "0" + t_date.getMinutes());
                t_data['name'] = d_name;
                t_data['actDate'] = t_date;
                t_data['value'] = data['obs_date'].counts[(i * 2) + 1];
                t_data['link'] = "j-drillDown-" + data['obs_date'].counts[(i * 2)];
                t_data['title'] = chartLabel;
                fdata.push(t_data);
            }
        } else if (data['obs_date']['gap'].indexOf("SECONDS") >= 0) {
            chartLabel = "Seconds View (UTC) (MM:SS)";
            for ( i = 0; i < data['obs_date'].counts.length / 2; ++i) {
                t_data = {};
                var strDate = data['obs_date'].counts[(i * 2)].replace(/-/g, "/").replace('T', ' ').replace('Z', '');
                t_date = new Date(strDate);                
                var d_name = t_date.getMinutes()+":"+t_date.getSeconds();                
                t_data['name'] = d_name;
                t_data['actDate'] = t_date;
                t_data['value'] = data['obs_date'].counts[(i * 2) + 1];
                t_data['title'] = chartLabel;
                fdata.push(t_data);
            }
        }else {
             chartLabel = "Year View (UTC)";
            for ( i = 0; i < data['obs_date'].counts.length / 2; ++i) {
                t_data = {};
                t_date = new Date(data['obs_date'].counts[(i * 2)].replace(/-/g, "/").replace('T', ' ').substring(0, 19));
                t_data['name'] = t_date;
                t_data['actDate'] = t_date;
                t_data['value'] = data['obs_date'].counts[(i * 2) + 1];
                t_data['link'] = "j-drillDown-" + data['obs_date'].counts[(i * 2)];
                t_data['title'] = chartLabel;
                fdata.push(t_data);
            }
        }        
        //reverse it for asceding oredr
        fdata.reverse();
         
        $scope.d3Data = fdata;
        
        var stop =  $interval(function(){
             var cntrHeight = d3.select("#explorerTab_"+$scope.$parent.activeTab.id+" .d3-chart-container-explorer").node().getBoundingClientRect().height;
             if(cntrHeight){
                $interval.cancel(stop);
                $scope.d3BarRender();
             }
        }, 100);
        $window.onresize = function() {
            $scope.svg.selectAll("rect").remove();
            return $scope.d3BarRender();
        };
    };
  
    $scope.d3BarRender = function() {
        var data = $scope.d3Data;
        if(ExplorerService.getDrillDown()){
            $scope.svg.selectAll("#explorerTab_"+$scope.$parent.activeTab.id+" rect").remove();
        }
        if($scope.svg === undefined){
            d3v4.selectAll("#explorerTab_"+$scope.$parent.activeTab.id+" .d3-chart-container-explorer svg").remove();
            $scope.d3margin = {top: 30, right: 30, bottom: 20, left: 80},
            $scope.d3width = d3v4.select("#explorerTab_"+$scope.$parent.activeTab.id+" .d3-chart-container-explorer").node().getBoundingClientRect().width - $scope.d3margin.left - $scope.d3margin.right,
            $scope.d3height = d3v4.select("#explorerTab_"+$scope.$parent.activeTab.id+" .d3-chart-container-explorer").node().getBoundingClientRect().height - $scope.d3margin.bottom - $scope.d3margin.top;
            $scope.svg = d3v4.select("#explorerTab_"+$scope.$parent.activeTab.id+" .d3-chart-container-explorer")
            
            .append("svg")
                .attr("width", $scope.d3width + $scope.d3margin.left + $scope.d3margin.right)
                .attr("height", $scope.d3height + $scope.d3margin.top + $scope.d3margin.bottom)
            .append("g")
                .attr("transform",
                    "translate(" + $scope.d3margin.left + "," + $scope.d3margin.top + ")");
            // Initialize the X axis
            $scope.x = d3v4.scaleBand()
                .range([ 0, $scope.d3width ])
                .padding(0.2);
            $scope.xAxis = $scope.svg.append("g")
                .attr("transform", "translate(0," + $scope.d3height + ")").attr("class", "myXaxis");
            $scope.svg.append("text")
            .attr("text-anchor", "end")
            .attr("transform", "rotate(-90)")
            .attr("y", -$scope.d3margin.left+15)
            .attr("x", -$scope.d3margin.top)
            .text("Count")
            .style("font-size", "10px")

            
            // Initialize the Y axis
            $scope.y = d3v4.scaleLinear()
                .range([ $scope.d3height, 0]);
            $scope.yAxis = $scope.svg.append("g")
                .attr("class", "myYaxis")
        }
        if(data.length === 0 && !$scope.facetLoadingGradually) {
            d3v4.selectAll("#explorerTab_"+$scope.$parent.activeTab.id+" .d3-chart-container-explorer svg").remove();
            $scope.svg = undefined;
            d3v4.select("#explorerTab_"+$scope.$parent.activeTab.id+" .d3-chart-container-explorer")
            .append("svg")
                .attr("width", $scope.d3width + $scope.d3margin.left + $scope.d3margin.right)
                .attr("height", $scope.d3height + $scope.d3margin.top + $scope.d3margin.bottom)
            .append("g")
                .attr("transform",
                    "translate(" + $scope.d3margin.left + "," + $scope.d3margin.top + ")")
            .append("text")
                .attr("x", ($scope.d3width / 2))             
                .attr("y", ($scope.d3height / 2)) 
                .style("font-size", "12px") 
                .text("No Data Found");
        }else{
            $scope.updateGraphData(data);
        }
    };
    $scope.updateGraphData = function(data) {
        var maxY = d3v4.max(data, function(d) {
            return d.value;
        });
        if($scope.graphtooltip === undefined){
            $scope.graphtooltip = d3.select("body").append("div").attr("class", "graphtoolTip");
        }
        $scope.svg.attr("class", "chartlevel-"+$scope.info.chartLevel);
        d3v4.selectAll("#explorerTab_"+$scope.ctrlId+" .chartTitle").remove();
        // Update the X axis
      $scope.x.domain(data.map(function(d) { return d.name; }));
      if($scope.x.domain().length <= 10) {
        $scope.xAxis.call(d3v4.axisBottom($scope.x)).selectAll("text").attr("x","0");
      }else if($scope.x.domain().length > 10 && $scope.x.domain().length < 50) {
        $scope.xAxis.call(d3v4.axisBottom($scope.x).tickValues($scope.x.domain().filter(function(d,i){ return !(i%4)}))).selectAll("text").attr("x","0");
      }else {
        $scope.xAxis.call(d3v4.axisBottom($scope.x).tickValues($scope.x.domain().filter(function(d,i){ return !(i%11)}))).selectAll("text").attr("x","0");   
      }
      $scope.svg.append("text")
        .attr("x", ($scope.d3width / 2))             
        .attr("y", 0 - ($scope.d3margin.top / 2)) 
        .style("font-size", "12px")
        .attr("class","chartTitle") 
        .text(data[0].title);
    
      // Update the Y axis
      $scope.y.domain([-(maxY * .02), d3v4.max(data, function(d) { return d.value }) ]);
      $scope.yAxis.transition().duration(1000).call(d3v4.axisLeft($scope.y).tickValues([0, d3v4.max(data, function(d) { return d.value }) - (d3v4.max(data, function(d) { return d.value })*0.6666), d3v4.max(data, function(d) { return d.value }) - (d3v4.max(data, function(d) { return d.value })*0.3333), d3v4.max(data, function(d) { return d.value })]));
      // Create the u variable
      var u = $scope.svg.selectAll("rect").data(data)
      u
        .enter()
        .append("rect").on("click", function(d) {
            if($scope.info.chartLevel != 'SECONDS'){
                $scope.graphtooltip.remove();
                $scope.graphtooltip = undefined;
                expDrillDown(d.link);
            }
        }) // Add a new rect for each new elements
        .merge(u) // get the already existing elements as well
        .on("mousemove", function(d){
            $scope.graphtooltip
              .style("left", d3v4.event.pageX - 50 + "px")
              .style("top", d3v4.event.pageY - 70 + "px")
              .style("display", "inline-block")
              .html("<small>"+ (d.name) + "</small><br><b>" + (d.value) +"</b>");
            })
            .on("mouseout", function(d){ $scope.graphtooltip.style("display", "none");})
            .attr("x", function(d) { return ($scope.x.bandwidth() + $scope.x(d.name))*-1; })
            .attr("transform","rotate(180)")
            .attr("y", $scope.y(-(maxY * .02))*-1)
            .attr("title", function(d){ return d.value})
        .transition() // and apply changes to all of them
        .duration(1000)
          .attr("width", $scope.x.bandwidth())
          .attr("height", function(d) { if(d.value === 0){return 0} else {return $scope.d3height - $scope.y(d.value)}; })
          .attr("fill", "#0079c1");
    
      // If less group in the new dataset, I delete the ones not in use anymore
      u
        .exit()
        .remove()
        $scope.svg.selectAll("rect").attr("class", "cursor-pointer");
        $scope.svg.selectAll("circle").attr("class", "cursor-pointer");
    }
    $scope.hideFacets = function() {
        d3v4.select("#explorerTab_"+$scope.$parent.activeTab.id+" .d3-chart-container-explorer").selectAll("*").remove();
        $timeout(function() {
            $scope.svg = undefined;
            $scope.d3BarRender();
        }, 500);
    }
    // Get the config data for explorer.
    ExplorerService.getAllConfig().then(function(response) {
        var fDate,
            tDate,
            bundleName,
            logBundle,
            key,
            responseData = response.data.Data;
        if(responseData && responseData.ec_sysid_map){
            if(responseData.ec_sysid_map.sysid1 == ""){
                responseData.ec_sysid_map.sysid1 ="sysid1";
            }
        }
        // Setting custom date range
        $scope.customDateFilter = true;
        $scope.customDateFilterApplied = true;

        $scope.info.linkedAttribute = responseData;
        metaDataService.setGbConfig(responseData['config']);
        $scope.info.sysId = responseData['ec_sysid_map']['sysid1'];
        if(AppService.isGbStudioApp()) {
            responseData['config'] = !!responseData['default_config'] ? responseData['default_config'] : responseData['config'];
        }
        // Copying config
        $scope.info.config = responseData.config;
        $scope.info.max_days_in_sec = responseData['config']['MAX_DAY_RANGE_ALLOWED'] * (24 * 60 * 60 );
        //$scope.info.default_days = !!responseData['config']['DEFAULT_PERIOD_IN_SEC'] && responseData['config']['DEFAULT_PERIOD_IN_SEC'] < $scope.info.max_days_in_sec ? responseData['config']['DEFAULT_PERIOD_IN_SEC'] : $scope.info.max_days_in_sec;
        $scope.info.default_days = responseData['config']['DEFAULT_PERIOD_IN_SEC'];
        $scope.info.explorerDataDuration = metaDataService.getExplorerDataDuration();
        //convert seconds to milliseconds
        if($scope.info.default_days) $scope.info.default_days = 1000 * $scope.info.default_days;
        $scope.info.max_days_allowed = responseData['config']['MAX_DAY_RANGE_ALLOWED'];
        $scope.info.MinDate = new Date(metaDataService.getTodayDate());
        $scope.info.MinDate.setDate(metaDataService.getTodayDate().getDate() - $scope.info.max_days_allowed) 

        // Copying section content
        $scope.info.sectionsContent = responseData.sections_content;
       
        $scope.info.evtAttribsDefault = [];

        // Copying event attributes.
        angular.forEach(responseData.event_columns, function(value, key) {
            if (key != "evt_date_str" && key != "evt_text") {
                value['key'] = key;
                $scope.info.evtAttribs.push(value);
                $scope.info.evtAttribsDefault.push(value);
            }
        });

        // Populating default selected event attributes
        $scope.info.tSelectedEvtAttribs.push({
            "key" : "evt_date_str",
            "dataType" : "STRING",
            "label" : "Date",
            "default" : true
        });
        $scope.info.tSelectedEvtAttribs.push({
            "key" : "evt_text",
            "dataType" : "STRING",
            "label" : "Event Text",
            "default" : true
        });
        $scope.info.selectedEvtAttribs.push({
            "key" : "evt_date_str",
            "dataType" : "STRING",
            "label" : "Date",
            "default" : true
        });
        $scope.info.selectedEvtAttribs.push({
            "key" : "evt_text",
            "dataType" : "STRING",
            "label" : "Event Text",
            "default" : true
        });

        // Populating facets map.
        angular.forEach(responseData.facet_label_map, function(facet) {
            angular.forEach(facet, function(label, key) {
                var f = {};
                f['key'] = key;
                f['label'] = label;
                f['data'] = [];
                f['expanded'] = false;
                $scope.facets.push(f);
                $scope.selectedFacets[key] = [];
            });
        });

        // Deciding whether events or sections is available or not.
        angular.forEach(responseData.sections_content, function(value) {
            if (value['nsType'] == 'EVENT' || value['nsType'] == 'SESSION') {
                $scope.info.hasEvents = true;
                // Adding event source to facets list.
            } else if (value['nsType'] == 'SECTION') {
                $scope.info.hasSections = true;
            }
        });
        
        $scope.sectionsContent = responseData.sections_content;

        if ($scope.info.hasEvents) {
            $scope.facets.push({
                key : 'events',
                label : 'Event Source',
                data : [],
                expanded : false
            });
            $scope.selectedFacets['events'] = [];
        }

        if ($scope.info.config['DEFAULT_VIEW'] == 'EVENT') {
            $scope.info.eventsection = "event";
            $scope.info.events = true;
            $scope.info.sections = false;
        } else {
            $scope.info.eventsection = "section";
            $scope.info.sections = true;
            $scope.info.events = false;
        }
        
        if(AppService.isGbStudioApp()) {
        	if($scope.info.config['DEFAULT_VIEW'] == 'EVENT') {
        		if(!$scope.info.hasEvents && !!$scope.info.hasSections) {
        			$scope.info.eventsection = "section";
		            $scope.info.sections = true;
		            $scope.info.events = false;
        		}
        	} else {
        		if(!$scope.info.hasSections && !!$scope.info.hasEvents) {
	        		$scope.info.eventsection = "event";
		            $scope.info.events = true;
		            $scope.info.sections = false;
	        	}
        	}
        }

        keys = Object.keys(responseData['config']['fields']);
        for (i in keys) {
            field = {};
            field['key'] = keys[i];
            field['label'] = responseData['config']['fields'][keys[i]];
            $scope.info.fields.push(field);
        }
        // Setting the initial view to list view
        $scope.info.listView = true;

        ExplorerService.getStats().then(function(response) {
            var utcCurrentTime =  metaDataService.getTodayDate();//moment(moment.utc().format('YYYY-MM-DD HH:mm:ss'), 'YYYY-MM-DD HH:mm:ss').toDate();
            if (response.data.Data) {
                $scope.info.statistics.obs_min = response.data.Data.obs_min;
                $scope.info.statistics.obs_max = response.data.Data.obs_max;
                var obsMin = $scope.info.statistics.obs_min.replace("T", " ");
                obsMin = obsMin.replace("Z","");
                var obsMax = $scope.info.statistics.obs_max.replace("T", " ");
                obsMax = obsMax.replace("Z","");
                $scope.info.solrEndDate = /^\s*\d{4}\-\d{2}-\d{2}T\d{2}\:\d{2}\:\d{2}Z$/.test($scope.info.statistics.obs_max) && (metaDataService.getStringToDate(obsMax) < utcCurrentTime) ? metaDataService.getStringToDate(obsMax) : utcCurrentTime;
                $scope.info.display_obs_min = metaDataService.getStringToDate(obsMin);
                $scope.info.display_obs_max = metaDataService.getStringToDate(obsMax);
                // Checking for bundle name
                var bundleData = ExplorerService.getBundleData();
                $scope.info.allConfigLoading = false;
                if (!!bundleData) {
                    if(ExplorerService.getLoadView()) {
                        $scope.loadDefaultFilter();
                    } else {
                        //$scope.$parent.activeTab = $scope.$parent.tabList[0];
                        $scope.searchFromLogvault();
                    }
                } 
                else {
                    $scope.loadDefaultFilter();
                }
            }
        }, function(response) {
            $scope.info.statistics.obs_min = "";
            $scope.info.statistics.obs_max = "";
        });
    }, function(response) {
        ErrorService.setError('explorer', GlobalService.getVal('config_fail'));
        handleSessionTimeout(response);
    });

    $scope.updateBreadCrumb = function(fdate, tdate){ 
        $scope.customDateFilterApplied = false;
        $scope.dateRangeFilterName = GlobalService.getVal('customdate');
        $scope.customDateFilter = true;
        $scope.info.drillDown = true;
        $scope.info.quick = 0;
        var utcCurrentTime = metaDataService.getTodayDate();//moment(moment.utc().format('YYYY-MM-DD HH:mm:ss'), 'YYYY-MM-DD HH:mm:ss').toDate()
        //check if there is no hisotry, store from and to date from custome date time - convert it to UTC
        if($scope.timelineGraphDrilDown.length == 0){
            var date = new Date($scope.info.fromDate.getFullYear(), $scope.info.fromDate.getMonth(), $scope.info.fromDate.getDate(), $scope.info.fromTime.hr, $scope.info.fromTime.min, $scope.info.fromTime.sec);
            fdate = moment(date);
            fdate = new Date(fdate.year(), fdate.month(), fdate.date(), fdate.hour(), fdate.minute(), fdate.second());
            var date = new Date($scope.info.toDate.getFullYear(), $scope.info.toDate.getMonth(), $scope.info.toDate.getDate(), $scope.info.toTime.hr, $scope.info.toTime.min, $scope.info.toTime.sec);
            tdate = moment(date);
            tdate = new Date(tdate.year(), tdate.month(), tdate.date(), tdate.hour(), tdate.minute(), tdate.second());
            $scope.timelineGraphDrilDown.push({ts:$scope.info.chartLevel,from: fdate, to: tdate, st:utcCurrentTime.getTime()});
        }else{
            $scope.timelineGraphDrilDown.push({ts:$scope.info.chartLevel,from: fdate, to: tdate, st:utcCurrentTime.getTime()});
        }
    }
    $scope.isShowBreadCrumb = function(){
        return $scope.timelineGraphDrilDown.length;
    }
    $scope.changeBreadCrumb = function(){
        var currentData = $scope.timelineGraphDrilDown.pop();
        $scope.loadDataForBreadCrumb(currentData);
    };
    $scope.breadCrumbHistoryAction =  function(node, index){
        for(var i=0;i<$scope.timelineGraphDrilDown.length;i++){
            if($scope.timelineGraphDrilDown[i].ts == node.ts){
                index = i;
                break;
            }
        }
        $scope.timelineGraphDrilDown.splice(index,1);
        $scope.loadDataForBreadCrumb(node);
    }
    $scope.loadDataForBreadCrumb = function(node){
        var tliData, d, d1;
        $scope.customDateFilterApplied = false;
        $scope.dateRangeFilterName = GlobalService.getVal('customdate');
        $scope.drillDown = true;
        $scope.info.currentFacet = null;
        var currentData = node;
        var chartLevel = currentData.ts;

        tliData = currentData;
        if($scope.timelineGraphDrilDown.length == 0){
            $scope.setFromTo(tliData.from, tliData.to);
            return;
        }
        d = new Date(tliData.from);
        d1 = new Date(tliData.to);
        switch(chartLevel) {
            case 'YEAR' :
                $scope.setFromTo(d, d1);
                break;
            case 'MONTH' :
                d.setMonth(0);
                d.setDate(1);
                d.setHours(0);
                d.setMinutes(0);
                d.setSeconds(0);
                d1.setMonth(12);
                d1.setDate(0);
                d1.setHours(23);
                d1.setMinutes(59);
                d1.setSeconds(59);
                $scope.setFromTo(d, d1);
                break;
            case 'DAY' :
                d.setDate(1);
                d.setHours(0);
                d.setMinutes(0);
                d.setSeconds(0);
                d1.setMonth(d1.getMonth() + 1);
                d1.setDate(0);
                d1.setHours(23);
                d1.setMinutes(59);
                d1.setSeconds(59);
                $scope.setFromTo(d, d1);
                break;
            case 'HOUR' :
                d.setHours(0);
                d.setMinutes(0);
                d.setSeconds(0);
                d1.setHours(23);
                d1.setMinutes(59);
                d1.setSeconds(59);
                $scope.setFromTo(d, d1);
                break;
            case 'MINUTES' :
                d.setMinutes(0);
                d.setSeconds(0);
                d1.setMinutes(59);
                d1.setSeconds(59);
                $scope.setFromTo(d, d1);
                break;
        }        
    }


    function handleSessionTimeout(response) {
        if (!$scope.info.sessionTimedOut && response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/timeout/)) {
            $scope.info.sessionTimedOut = true;
            ModalService.sessionTimeout();
        }
    };
    
    $scope.getFacetName= function(key){
        for(var i=0;i<$scope.facets.length;i++){
            if($scope.facets[i]['key'] == key){
                return $scope.facets[i]['label'];
            }
        }
    }
    $scope.getFacet= function(key){
        for(var i=0;i<$scope.facets.length;i++){
            if($scope.facets[i]['key'] == key){
                return $scope.facets[i];
            }
        }
    }
    var currentType = null;
    var previousType = null;

    $scope.refresh = function(noFacetLoading, drillDown) {
        if(drillDown){
            ExplorerService.setDrillDown(true);
        }else{
            ExplorerService.setDrillDown(false);
        }
		if(AppService.isGbStudioApp()) {
                if($scope.info.config['DEFAULT_VIEW'] == 'EVENT') {
                        if(!$scope.info.hasEvents && !!$scope.info.hasSections) {
                                $scope.info.eventsection = "section";
                            $scope.info.sections = true;
                            $scope.info.events = false;
                        }
                } else {
                        if(!$scope.info.hasSections && !!$scope.info.hasEvents) {
                                $scope.info.eventsection = "event";
                            $scope.info.events = true;
                            $scope.info.sections = false;
                        }
                }
        }
    	previousType = currentType;
        $scope.info.dataTabs = false;
    	currentType = $scope.info.eventsection;
        $scope.info.dataLoading = true;
        $scope.info.refCount++;
        var i,
            selectedFacets = {};
        angular.forEach($scope.selectedFacets, function(facets, key) {
            if (!Array.isArray(selectedFacets[key]) && key != 'events' && key != 'namespace') {
                selectedFacets[key] = [];
            }
            if (key == 'events' || key == 'namespace') {
                for (i in facets) {
                    if (!selectedFacets[key]) {
                        selectedFacets[key] = [];
                    }
                    selectedFacets[key].push(facets[i]['key']);
                }
            } else {
                for (i in facets) {
                    selectedFacets[key].push(facets[i].label);
                }
            }

        });
        // XHR to fetch the results based on the user selection of facets n other parameters on the UI.
        var pageSize = $scope.info.page['count'];
        var startIndex = $scope.info.page['current'] * $scope.info.page['count'];
        var startDate = $scope.getFrom(drillDown);
        var endDate = $scope.getTo(drillDown);
        var sortingOrder = $scope.info.sortOrder['val'];
        var facetStr = "";
        var quickFilter = $scope.info.quick;
        var uploadedBy = $scope.info.uploadedBy;
        var quickFilterName = $scope.dateRangeFilterName;
        var sectionevent = $scope.info.events ? "EVENT" : "SECTION";
        var urlPart = startDate + "/" + endDate + "/" + startIndex + "/" + pageSize + "/" + sectionevent;
        var params = {};
        var compoundSearch = false;
        //check if selected facets are there
        if (!!Object.keys(selectedFacets).length) {
            for (key in selectedFacets) {
                if (selectedFacets[key] && selectedFacets[key].length && selectedFacets[key].length > 0) {
                    if (facetStr != "") {
                        facetStr += " ~||~ ";
                    }
                    for (var fcount = 0; fcount < selectedFacets[key].length; fcount++) {
                        if (facetStr == "") {
                            facetStr = (key == 'events' ? 'namespace' : key) + "=" + "\"" + selectedFacets[key][fcount] + "\"";
                        } else if (fcount == 0) {
                            facetStr += (key == 'events' ? 'namespace' : key) + "=" + "\"" + selectedFacets[key][fcount] + "\"";
                        } else {
                            facetStr = facetStr.replace(/(\")$/g, "");
                            facetStr += ("~" + selectedFacets[key][fcount] + "\"");
                        }
                    }
                }
            }
        }
        if($scope.defaultFacet){
            if(facetStr) {
                facetStr = "obs_url=" + "\"" + $scope.defaultFacet["label"] + "\"" + ' ~||~ ' + facetStr;
            }else{
                facetStr = "obs_url=" + "\"" + $scope.defaultFacet["label"] + "\"";
            }
            
        }
        $scope.facetStr = null;
        if (facetStr) {
            params["filter"] = facetStr;
            $scope.facetStr = facetStr;
        }
        if (quickFilter) {
            params["quick_filter"] = quickFilter;
            if($scope.drillDown == true) {
                params["drill_down"] = true;
            }
        }
        if (sortingOrder) {
            params["sortby"] = "obs_date " + sortingOrder;
        }
        if(uploadedBy) {
            params["uploaded_by"] = uploadedBy;
        }
        
        if ($scope.info.filterSuggest.indexOf('CompoundSearch=') != -1) {
            compoundSearch = true;
            if($scope.info.page.current == 0) {
                params['compound_search'] = 'new';
            } else {
                params['compound_search'] = 'pagination';
            }
        }
        
        // Handling empty text search
        if ($scope.info.filterSuggest == "") {
            $scope.info.filterSuggest = "*";
        }
        //check if filter suggest is there or not
        // to show select all option for facet
        if($scope.info.filterSuggest === "" || $scope.info.filterSuggest === "*"){
            $scope.info.filterSuggestApply = false;
        }else{
            $scope.info.filterSuggestApply = true;
        }
        if(!!$scope.info.viewLoad) {
            $scope.info.viewLoad = false;
        } else {
            $scope.info.selectedFilterName = "Select View";
        }
        $scope.info.queryParam = params;
        ExplorerService.getData(urlPart, params, $scope.info.filterSuggest).then(function(response) {
            $scope.$parent.justforflag.stillloading = false;
            var i,
                j,
                k,
                responseData = response.data.Data;
            $scope.responseMessage = response.data.Msg;
            $scope.info.resultLoading = false;
            $scope.info.dataLoading = false;
           
            var details = {};
            var activity;
            
            if(!$scope.info.clearFilter && !$scope.info.sorting && !$scope.info.changePageSize) {
                var facetDetails = {};
                angular.forEach(selectedFacets, function(value, key) {
                    if(value.length) {
                        angular.forEach(value, function(facet) {
                            if(!facetDetails.hasOwnProperty(key)) {
                                facetDetails[key] = [];
                            }
                            facetDetails[key].push(facet);
                        });
                    }
                });
                
                if(!!Object.keys(facetDetails).length) {
                    details['Facets Selected'] = facetDetails;
                }
                if(!!$scope.dateRangeFilterName) {
                    details['Quick Filter'] = $scope.dateRangeFilterName;
                }
                details['Time Range'] = $scope.getFrom() + ' - ' + $scope.getTo();
                details['Sort Order'] = $scope.info.sortOrder['val'] == 'desc' ? 'Descending' : 'Ascending';
                details['Search Text'] = encodeURIComponent($scope.info.filterSuggest.replace(/\'/g, '%27'));
                details['Search Type'] = sectionevent;
            } else if($scope.info.changePageSize) {
                details['Count'] = $scope.info.page['count'];
            }
            
            if($scope.drillDown == true) {
                activity = 'Drill Down';
                $scope.drillDown = false;
                
            } else if($scope.info.zoomout == true) {
                activity = 'Default Graph View';
                $scope.info.zoomout = false;
            } else if($scope.info.clearFilter == true) {
                activity = 'Clear Filter';
                $scope.info.clearFilter = false;
            } else if($scope.info.sorting == true) {
                activity = 'Sort ' + ($scope.info.sortOrder['val'] == 'desc' ? 'Descending' : 'Ascending');
                $scope.info.sorting = false;
            } else if($scope.info.changePageSize == true) {
                activity = 'Change Page Count';
                $scope.info.changePageSize = false;
            } else if($scope.info.quickFilter == true) {
                activity = $scope.dateRangeFilterName;
                $scope.info.quickFilter = false;
            } else {
                activity = 'filter';
            }
            
            if($scope.info.paginate == true) {
                $scope.info.paginate = false;
            } else {
                UserTrackingService.standard_user_tracking($scope.info.application, $scope.info.events ? "Event" : "Section", activity, JSON.stringify(details), responseData.solr_query).then(userTrackingSuccess, handleSessionTimeout);
            }
            if(compoundSearch) {
                if(responseData.hasOwnProperty('gb_error')) {
                    $scope.reloadGraph(null);
                    $scope.d3BarRender();
                    if (responseData['gb_error'] == 'ERR_3' || responseData['gb_error'] == 'ERR_8' || responseData['gb_error'] == 'ERR_14') {
                        $scope.info.no_result = true;
                        $scope.response = null;
                        $scope.info.err_msg = 1;
                    } else if (responseData['gb_error'] == 'ERR_2') {
                        $scope.info.no_result = true;
                        $scope.response = null;
                        $scope.info.err_msg = 2;
                    } else if (responseData['gb_error'] == 'ERR_13') {
                        $scope.info.no_result = true;
                        $scope.response = null;
                        $scope.info.err_msg = 3;
                    }
                    if(currentType != previousType) {
                    	loadFacets(responseData);
                    }
                    return;
                } else {
                    loadFacets(responseData);    
                }
            }
            
            if (responseData['gb_error'] == 'ERR_3' || responseData['gb_error'] == 'ERR_8' || responseData['gb_error'] == 'ERR_14') {
                $scope.info.no_result = true;
                $scope.response = null;
                $scope.info.err_msg = 1;
            } else if (responseData['gb_error'] == 'ERR_2') {
                $scope.info.no_result = true;
                $scope.response = null;
                $scope.info.err_msg = 2;
            } else if (responseData['gb_error'] == 'ERR_13') {
                $scope.info.no_result = true;
                $scope.response = null;
                $scope.info.err_msg = 3;
            } else if (responseData['gb_error'] == 'ERR_0') {
                $window.location.href = GlobalService.getVal('redirect_login_url');
            } else {
                $scope.info.no_result = false;
                $scope.response = responseData.response;
                if(!noFacetLoading){
                    //$scope.paginator($scope.response.numFound);
                    $scope.loadFacetsGraduallyUpdatePagination(responseData);
                }
                // Copying content for docs.
                i = 0;
                angular.forEach(responseData.response.docs, function(value, key) {
                    var found = false;
                    angular.forEach(responseData.highlighting, function(value, key) {
                        if (key == $scope.response.docs[i]['namespace_id']) {
                            // Temporary fix
                            if (value['content'] && value['content'][0]) {
                                $scope.response.docs[i]['content'] = value['content'][0].replace(/>/g, '\&gt;').replace(/</g, '\&lt;').replace(/&lt;em&gt;/g, '<em>').replace(/&lt;\/em&gt;/g, '</em>').replace(/~~/g, '<br>');
                            }
                        }
                    });

                    i++;
                });
            }
            if(!$scope.response ||!$scope.response.docs || $scope.response.docs.length == 0){
                $scope.info.hideFacets = true;
            }
        }, function(response) {
            if(response.status === 400 && response.data.Status === "Failure"){
                ErrorService.setError('explorer', response.data.Msg);
                $scope.info.err_msg = 9;
		        $scope.info.badRequestMsg = response.data.Msg;
            }else{
                ErrorService.setError('explorer', GlobalService.getVal('data_fail'));
                $scope.info.err_msg = 1;
            }            
            $scope.info.resultLoading = false;
            $scope.info.dataLoading = false;
            $scope.drillDown = false;
            $scope.info.zoomout = false;
            $scope.info.clearFilter = false;
            $scope.info.sorting = false;
            $scope.info.changePageSize = false;
            $scope.info.paginate = false;
            $scope.info.no_result = true;
            $scope.response = null;
            handleSessionTimeout(response);
        });
        if(!noFacetLoading && !compoundSearch) {
            $scope.loadFacetsGradually(urlPart, params, $scope.info.filterSuggest, currentType);
         }
    };
    $scope.loadFacetsGradually = function(urlPart, params, filter, currentType){
        urlPart = urlPart+"?sortby=obs_date desc&facet_collection_head=";
        $scope.facetDataLocally = [];
        $scope.facetLoadingGradually = true;
        $scope.showGradualfillingProgressbar(0);
        if(!$scope.drillDown) {
            $scope.timelineGraphDrilDown = [];
        }
        //cancel prev request
        GlobalService.cancelAllAPIs('/explorer/search/facets/');
        if($scope.loadFacetsGraduallyTimmer)    $timeout.cancel($scope.loadFacetsGraduallyTimmer);

        $scope.info.facetsLoading = true;
        ExplorerService.getFacetsGrdually(urlPart, params, filter).then(function(response) {
            $scope.loadFacetsGraduallySuccessful(response, urlPart, params, filter, currentType);
        }, function(response) {
            if(response.status != -1){
                $scope.loadFacetsGraduallyFailure(response, urlPart, params, filter, currentType);
            }
        });
    }
    $scope.loadFacetsGraduallySuccessful = function(response, urlPart, params, filter, currentType){
        var responseData = response.data.Data;
        $scope.info.facetLoading = false;
        $scope.info.facetsLoading = false;
         if (responseData['gb_error'] == 'ERR_3' || responseData['gb_error'] == 'ERR_8' || responseData['gb_error'] == 'ERR_14') {
            $scope.reloadGraph(null);
            $scope.facetLoadingGradually = false;
            $scope.d3BarRender();
            if(currentType != previousType) {
                loadFacets(responseData);
            }
        } else if (responseData['gb_error'] == 'ERR_2') {
            $scope.facetLoadingGradually = false;
            $scope.reloadGraph(null);
            $scope.d3BarRender();
            if(currentType != previousType) {
                loadFacets(responseData);
            }
        } else if (responseData['gb_error'] == 'ERR_13') {
            $scope.facetLoadingGradually = false;
            $scope.reloadGraph(null);
            $scope.d3BarRender();
            if(currentType != previousType) {
                loadFacets(responseData);
            }
        } else if (responseData['gb_error'] == 'ERR_0') {
            $scope.facetLoadingGradually = false;
            $window.location.href = GlobalService.getVal('redirect_login_url');
        } else {
            loadFacets(responseData, true);
            $scope.facetDataLocally = responseData;
            if(!responseData.done){
                $scope.loadFacetsGraduallyUpdateFacets(responseData, true);
                $scope.loadFacetsGraduallyCallUntillGetCompleteData(urlPart, params, filter, currentType, responseData.next);
            }else{
                $scope.facetLoadingGradually = false;
                //update total
                $scope.loadFacetsGraduallyUpdatePagination(responseData);
            }
        }
    }
    $scope.loadFacetsGraduallyUpdatePagination = function (responseData) {
        if(responseData.facet_counts && responseData.facet_counts.facet_ranges && responseData.facet_counts.facet_ranges.obs_date && responseData.facet_counts.facet_ranges.obs_date.counts){
            var sum = 0;
            var facetsData = responseData.facet_counts.facet_ranges.obs_date.counts;
            for(var j=0;j<facetsData.length;j++){
                if(j%2 === 0){
                    sum = sum + facetsData[j + 1];
                }
            }
            $scope.paginator(sum);
        }else{
            //$scope.paginator(10);
        }
    }
    $scope.loadFacetsGraduallyFailure = function(response, urlPart, params, filter, currentType){
        if(response.status === 400 && response.data.Status === "Failure"){
            $scope.info.err_msg = 9;
            $scope.info.badRequestMsg = response.data.Msg;
        }else{
            $scope.info.err_msg = 1;
        }
        $scope.facetLoadingGradually = false;
        $scope.info.facetLoading = false;
        $scope.info.facetsLoading = false;
        $scope.info.resultLoading = false;
        $scope.info.dataLoading = false;
        $scope.info.no_result = true;
        $scope.reloadGraph(null);
        $scope.d3BarRender();
        handleSessionTimeout(response);
    }
    $scope.loadFacetsGraduallyCallUntillGetCompleteData = function(urlPart, params, filter, currentType, nextParam){
        $scope.loadFacetsGraduallyTimmer = $timeout(function() {
            ExplorerService.getFacetsGrdually(urlPart, params, filter, nextParam).then(function(response) {
                var responseData = response.data.Data;
                $scope.loadFacetsGraduallyUpdateFacets(responseData);
                // if it's not final then call it again
                if(!responseData.done ){
                    $scope.loadFacetsGraduallyCallUntillGetCompleteData(urlPart, params, filter, currentType , responseData.next);
                }else{
                    $scope.facetLoadingGradually = false;
                    //update total
                    //$scope.loadFacetsGraduallyUpdatePagination(responseData);
                }
             }, function(response) {
                handleSessionTimeout(response);
            });
        }, 500);
    };
    $scope.loadFacetsGraduallyUpdateFacets = function(responseData, onfirstTry){
        //update gradual loading in percentage
        if(responseData.percComplete){
            $scope.showGradualfillingProgressbar(responseData.percComplete);
        }
        if(responseData.facet_counts.facet_ranges && responseData.facet_counts.facet_ranges.obs_date && responseData.facet_counts.facet_ranges.obs_date.counts){
            //update facet graph
            if($scope.facetDataLocally['facet_counts'] && $scope.facetDataLocally['facet_counts']['facet_ranges'] && $scope.facetDataLocally['facet_counts']['facet_ranges']['obs_date'] && $scope.facetDataLocally['facet_counts']['facet_ranges']['obs_date']['counts']){
                if(!onfirstTry)
                $scope.facetDataLocally['facet_counts']['facet_ranges']['obs_date']['counts'] = $scope.loadFacetsGraduallyUpdateFacetsGraph($scope.facetDataLocally['facet_counts']['facet_ranges']['obs_date']['counts'], angular.copy(responseData.facet_counts.facet_ranges.obs_date.counts));
                else{
                    $scope.facetDataLocally['facet_counts']['facet_ranges']['obs_date']['counts'] = $scope.loadFacetsGraduallyUpdateFacetsGraph([], angular.copy(responseData.facet_counts.facet_ranges.obs_date.counts));
                    loadFacets($scope.facetDataLocally);
                    return;
                }
            }else{
                if(!$scope.facetDataLocally['facet_counts']){
                    $scope.facetDataLocally['facet_counts'] = {};
                }
                if(!$scope.facetDataLocally['facet_counts']['facet_ranges']){
                    $scope.facetDataLocally['facet_counts']['facet_ranges'] = {};
                }
                if(!$scope.facetDataLocally['facet_counts']['facet_ranges']['obs_date']){
                    $scope.facetDataLocally['facet_counts']['facet_ranges']['obs_date'] = {};
                }
                if(!$scope.facetDataLocally['facet_counts']['facet_ranges']['obs_date']['counts']){
                    $scope.facetDataLocally['facet_counts']['facet_ranges']['obs_date']['counts'] = [];
                }

                $scope.loadFacetsGraduallyUpdateFacetsGraph($scope.facetDataLocally['facet_counts']['facet_ranges']['obs_date']['counts'], angular.copy(responseData.facet_counts.facet_ranges.obs_date.counts));
            
                $scope.facetDataLocally['facet_counts']['facet_ranges'] = angular.copy(responseData.facet_counts.facet_ranges);
            }
        }
        if(responseData.facet_counts && responseData.facet_counts.facet_fields){
            var CurrentFacetFields = $scope.facetDataLocally['facet_counts']['facet_fields'];
            var newFacetFields = angular.copy(responseData.facet_counts.facet_fields);
            for (var key in newFacetFields) {
                if(!CurrentFacetFields[key]) {
                    CurrentFacetFields[key] = newFacetFields[key];
                } else {
                    var tempListNew = newFacetFields[key];
                    var tempListCurrent = CurrentFacetFields[key];
                        for(var newIndex=0;newIndex < tempListNew.length;newIndex++){
                            var found = false;
                            for(var oldIndex=0;oldIndex < tempListCurrent.length;oldIndex++){
                                if(oldIndex % 2 === 0 && newIndex % 2 === 0){
                                    if(tempListCurrent[oldIndex] === tempListNew[newIndex]){
                                        tempListCurrent[oldIndex + 1] = tempListCurrent[oldIndex + 1] + tempListNew[newIndex+1];
                                        found = true;
                                        break;
                                    }
                                }
                            }
                            if(!found && newIndex % 2 === 0){
                                tempListCurrent.push(tempListNew[newIndex]);
                                tempListCurrent.push(tempListNew[newIndex + 1]);
                            }
                    };
                }
            }
        }
        loadFacets($scope.facetDataLocally);
    };
    $scope.loadFacetsGraduallyUpdateFacetsGraph = function(oldData, newData){
        if(oldData.length == 0){
            //oldData = angular.copy(newData);
            var sum = 0;
            for(var i=0;i<newData.length;i++){
                if(i%2 === 0 ){
                    oldData[i] =  newData[i];
                    oldData[i + 1] =  newData[i + 1];
                    sum += oldData[i + 1];
                }
            }
            $scope.paginator(sum);
            return oldData;
        }
        for(var i=0;i<newData.length;i++){
            for(var j=0;j<oldData.length;j++){
                if(i%2 === 0 && j%2 === 0){
                    if(newData[i] === newData[j]){
                        oldData[j + 1] = oldData[j + 1] + newData[i + 1];
                    }
                }
            }
        }
        var sum = 0;
        for(var j=0;j<oldData.length;j++){
            if(j%2 === 0){
                sum = sum + oldData[j + 1];
            }
        }
        $scope.paginator(sum);
        //var percentageOfData = sum/$scope.info.page['total'] * 100;
       // $scope.showGradualfillingProgressbar(percentageOfData);
        return oldData;
    }
    $scope.showGradualfillingProgressbar = function(value) {
        // var bar1 = new ldBar("#gb-explorer-timeline-graph-loaded");
        // bar1.set(value);
        var bar2 = $("#gb-gradualfilling-page-loader .gb-page-loader-gradualfilling-bar");
        //var bar2 = $("#gb-gradualfilling-page-loader");
        bar2.css('width', value+"%");
        $scope.facetGradualFillingCount = value;
    }
    function loadFacets(responseData, firstCall) {
        //reset data for each facet
        $scope.facets.map(function(item){
            if(!($scope.info.currentFacet && $scope.info.currentFacet.label === item.label  && $scope.info.currentFacet.key === item.key)){
                item.data = [];
            }
        });
    	if(responseData.hasOwnProperty('gb_error')) {
    		$scope.info.hideFacets = true;
    		return;
    	} else {
    		$scope.info.hideFacets = false;
    	}
        var strict = false;
        if ($scope.info.notFacetSearch == true) {
            strict = true;
            $scope.info.notFacetSearch = false;
        }
        $scope.facetCounts = responseData.facet_counts; 
        var noSelection = true;
        for (var fctk in $scope.selectedFacets) {
            if ($scope.selectedFacets[fctk].length > 0) {
                noSelection = false;
                break;
            }
        }
        if (noSelection) {
            $scope.info.currentFacet = undefined;
        }
        angular.forEach(responseData.facet_counts.facet_fields, function(value, key) {
            var facet,
                i,
                j,
                k,
                e_facets,
                s_facets;
            if (key == 'namespace' && !($scope.info.currentFacet && ($scope.info.currentFacet.key == 'namespace' || $scope.info.currentFacet.key == 'events'))) {
                for (i in $scope.facets) {
                    if ($scope.facets[i].key == 'namespace') {
                        s_facets = i;
                    }
                    if ($scope.facets[i].key == 'events') {
                        e_facets = i;
                    }
                }
                if (s_facets) {
                    $scope.facets[s_facets].data = [];
                }
                if (e_facets) {
                    $scope.facets[e_facets].data = [];
                }

                for ( i = 0; i < value.length; i += 2) {
                    facet = {};

                    if (!$scope.info.sectionsContent[value[i]])
                        continue;
                    facet['label'] = $scope.info.sectionsContent[value[i]]['description'];
                    facet['value'] = value[i + 1];
                    facet['key'] = value[i];
                    facet['selected'] = false;
                    if (e_facets && ($scope.info.sectionsContent[value[i]]['nsType'] == 'EVENT' || $scope.info.sectionsContent[value[i]]['nsType'] == 'SESSION')) {
                        facet['title'] = 'Event Source';
                        $scope.facets[e_facets].data.push(facet);
                        if(firstCall){
                            $scope.facets[e_facets].expanded = false;
                        }
                    } else {
                        if (s_facets) {
                            facet['title'] = 'Section Name';
                            $scope.facets[s_facets].data.push(facet);
                            if(firstCall){
                                $scope.facets[s_facets].expanded = false;
                            }
                        }
                    }
                }
            } else {
                if($scope.info.currentFacet && $scope.info.currentFacet.data && $scope.info.currentFacet.data.length == 1 && !$scope.info.currentFacet.data[0].selected){
                    $scope.info.currentFacet = undefined;
                }
                
                for ( i = 0; i < $scope.facets.length; ++i) {
                    if ($scope.facets[i].key === key && key != 'namespace' && (strict || !($scope.info.currentFacet && $scope.info.currentFacet.key == key))) {
                        $scope.facets[i].data = [];
                        for ( j = 0; j < value.length; j += 2) {
                            facet = {};
                            facet['title'] = $scope.facets[i].label;
                            facet['label'] = value[j];
                            facet['value'] = value[j + 1];
                            facet['selected'] = false;
                            $scope.facets[i].data.push(facet);
                        }
                        if(firstCall){
                            $scope.facets[i].expanded = false;
                        }
                        break;
                    }
                }
            }
        });
        for (i in $scope.facets) {
            for (j in $scope.selectedFacets[$scope.facets[i].key]) {
                for ( k = 0; k < $scope.facets[i].data.length; ++k) {
                    if ($scope.selectedFacets[$scope.facets[i].key][j].key) {
                        if ($scope.selectedFacets[$scope.facets[i].key][j].key == $scope.facets[i].data[k].key) {
                            $scope.facets[i].data[k].selected = true;
                            $scope.facets[i].expanded = true;
                            break;
                        }
                    } else {
                        if ($scope.selectedFacets[$scope.facets[i].key][j].label == $scope.facets[i].data[k].label) {
                            $scope.facets[i].data[k].selected = true;
                            $scope.facets[i].expanded = true;
                            break;
                        }
                    }
                }
                if (k >= $scope.facets[i].data.length) {
                    $scope.selectedFacets[$scope.facets[i].key][j]['selected'] = true;
                    $scope.facets[i].data.push($scope.selectedFacets[$scope.facets[i].key][j]);                               
                }
            }
        }
        if (responseData.facet_counts.facet_ranges['obs_date']) {
            //set from and date time field with server data(obs_date->end=obs_date->start) 
            var fromDateFromResponse = responseData.facet_counts.facet_ranges.obs_date.start;
            var todateFromResponse = responseData.facet_counts.facet_ranges.obs_date.end;
            if(fromDateFromResponse){
                fromDateFromResponse = fromDateFromResponse.replace("T", " ");
                fromDateFromResponse = fromDateFromResponse.replace("Z","");
                var strLocalFromTime = metaDataService.getStringToDate(fromDateFromResponse);
                var strfromTime =  strLocalFromTime.getTime();
                var stroldTime =  new Date(""+$scope.gbStore.fromDate).getTime();
                if(strfromTime != stroldTime){
                    $scope.info.fromDate = strLocalFromTime;
                    $scope.gbStore.fromDate = strLocalFromTime;
                }
            }
            if(todateFromResponse){
                todateFromResponse = todateFromResponse.replace("T", " ");
                todateFromResponse = todateFromResponse.replace("Z","");
                var strLocalToTime = metaDataService.getStringToDate(todateFromResponse);
                var strtoTime =  strLocalToTime.getTime();
                var stroldTime =  new Date(""+$scope.gbStore.toDate).getTime();
                if(strtoTime != stroldTime){
                    $scope.info.toDate = strLocalToTime;
                    $scope.gbStore.toDate = strLocalToTime;
                }
            }
            $scope.info.fromTime.hr = $scope.info.fromDate.getHours();
            $scope.info.fromTime.min = $scope.info.fromDate.getMinutes();
            $scope.info.fromTime.sec = $scope.info.fromDate.getSeconds();
            $scope.info.toTime.hr = $scope.info.toDate.getHours();
            $scope.info.toTime.min = $scope.info.toDate.getMinutes();
            $scope.info.toTime.sec = $scope.info.toDate.getSeconds();
            $scope.info.chartLevel = responseData.facet_counts.facet_ranges['obs_date']['gap'].split('/')[1];
            $scope.reloadGraph(responseData.facet_counts.facet_ranges);
        }else{
            $scope.reloadGraph([]);
        }
    }

    //return the formatted content for list view
    $scope.showContent = function(text, option) {

        // var lines = text.content.split(/\r\n|\r|\n/);
        // Temporary fix
        if (!text.content) {
            return;
        }
        if (text.content.length <= 150) {
            text.showExpanded = false;
            if ($scope.info.filterSuggest === "*" || $scope.info.filterSuggest === "") {
                return $sce.trustAsHtml(unescape(escape(text.content)));
            } else {
                return $sce.trustAsHtml(text.content.replace(new RegExp($scope.info.filterSuggest.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&"), 'gi'), '<span class="highlight">$&</span>'));
            }
        }
        text.showExpanded = true;
        // var returnString = "";
        if (option == 1) {
            if ($scope.info.filterSuggest === "*" || $scope.info.filterSuggest === "") {
                return $sce.trustAsHtml(text.content.substring(0, 150));
            } else {
                return $sce.trustAsHtml(text.content.substring(0, 150).replace(new RegExp($scope.info.filterSuggest.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&"), 'gi'), '<span class="highlight">$&</span>'));
            }
        } else {
            if ($scope.info.filterSuggest === "*" || $scope.info.filterSuggest === "") {
                return $sce.trustAsHtml(text.content.substring(0, $scope.show_more_characters_limit));
            } else {
                return $sce.trustAsHtml(text.content.substring(0, $scope.show_more_characters_limit).replace(new RegExp($scope.info.filterSuggest.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&"), 'gi'), '<span class="highlight">$&</span>'));
            }
        }
    };

    // Reset from the UI
    $scope.resetFromUI = function() {
        // Reset pagination on clear
        $scope.info.selectedFilterName = "Select View";
        $scope.info.clearFilter = true;
        $scope.customDateFilter = true;
        $scope.customDateFilterApplied = true;
        $scope.info.drillDown = false;
        $scope.info.page['current'] = 0;
        $scope.info.initialDatesSaved = false;
        $scope.info.callRefreshIfFromDateInRange = true;
        $scope.info.callRefreshIfToDateInRange = true;
        $scope.reset(true);
    };

    // Triggered whenever a facet is selected/deselected.
    $scope.checkChange = function(facet, f_data) {
        $scope.info.defaultState = false;
        $scope.info.page['current'] = 0;
        $scope.info.pristine = false;
        $scope.info.drillDown = false;
        if (f_data.selected) {
            $scope.addSelected(facet, f_data);
        } else {
            $scope.removeSelected(facet, f_data);
        }
    };

    $scope.isNoFilteredFacetFound = function(facet){
        var filter = facet.filter;
        if(!filter) return false;
        var list = facet.data.filter(function(item){
            if(!item.label) return false;

            if((item.label.toLowerCase()).indexOf(filter.toLowerCase()) != -1) return true;
            return false;
        })
        return !(list.length > 0);
    }
    $scope.showfacetSelectAllOption = function(facet){
        if(facet.filter) return true;
        else if($scope.info.filterSuggestApply){
             return true;
        }        
        return false;
    }
    $scope.facetSelectAll = function(facet) {
        if(facet.selectAll === undefined){
            facet.selectAll = false;
        }
        $scope.noRefresh = false;
        var limitFacetMsg = GlobalService.getVal('limitFacetMsg');
        var limitFacetMsg1 = GlobalService.getVal('limitFacetMsg1');
        var facetcount = 0;
        $scope.msg = "";
        var multimode = false;
        var f_data = facet.data;
        var filter = facet.filter;
        var unselectAll = facet.selectAll;        
        if(!filter){
            f_data.map(function(item){
                if(!item.label) return false;
                if(!unselectAll){
                    item.selected = true;
                }else{
                    item.selected = false; 
                }
            });
        }else{
            f_data.map(function(item){
                if(!item.label) return false;
                if(item.label.toLowerCase().indexOf(filter.toLowerCase()) != -1){                     
                    if(!unselectAll){
                        item.selected = true;
                    }else{
                        item.selected = false;
                    }
                }
                else { item.selected = false;}
            });
        }
        for(i=0;i<f_data.length;i++){
            if(f_data[i].selected){
                facetcount++;
            }
        }
        for(key in $scope.selectedFacets) {
            if($scope.selectedFacets[key].length > 0){
                if(key != facet.key) {
                    multimode = true;
                }
                facetcount = $scope.selectedFacets[key].length + facetcount;        
            }
        }
        if(multimode && facetcount > $scope.limitFacetTotal) {
            $scope.msg = GlobalService.getVal('limitFacetTotalMsg1')+$scope.limitFacetTotal;
            $scope.modal1 = ModalService.openModal('partials/alert_box_extra.html', $scope, false, true);
            f_data.map(function(item){
                if(!item.label) return false;
                if(!unselectAll){
                    item.selected = false;
                }else{
                    item.selected = true; 
                }
            });
        }else if(!multimode && facetcount > $scope.limitFacet) {
            $scope.msg = GlobalService.getVal('limitFacetMsg1')+$scope.limitFacet;
            $scope.modal1 = ModalService.openModal('partials/alert_box_extra.html', $scope, false, true);
            f_data.map(function(item){
                if(!item.label) return false;
                if(!unselectAll){
                    item.selected = false;
                }else{
                    item.selected = true; 
                }
            });
        }else {
            $scope.facetApplyMultiple(facet,unselectAll);
            facet.selectAll = !facet.selectAll;
        }
    };
    $scope.isAllFacetSelected = function(facet) {
        var f_data = facet.data, flag=true, item;
        for(var i=0;i<f_data.length;i++){
            item = f_data[i];
            if(!item.selected){
                flag = false;
                break;
            }
        }
        return flag;
    };
    $scope.selectAllFacetsLabel = function(facet) {
        facet.selectAll = $scope.isAllFacetSelected(facet);
        return (facet.selectAll?"Unselect all":"Select all");
    };
    $scope.getSelectedFacetData = function(index){
        return $scope.facets[index];
    }
    // Triggered whenever a facet is sseelct all option
    $scope.facetApplyMultiple = function(facet,unselectAll) {
        var filteredFacets = facet.data,f_data,selected_f_data,found;
        var selectedFacetcount = 0;
        if(unselectAll){
            var duplicateFacet_data_selected = filteredFacets.filter(function(f_data){
                if(!f_data.selected){
                    return true
                }
                return false;
            });
            for(var i=0;i<duplicateFacet_data_selected.length;i++){
                selected_f_data = duplicateFacet_data_selected[i];
                $scope.removeSelected(facet, selected_f_data, true);
            }; 
        }else{
            var duplicateFacet_data_selected = filteredFacets.filter(function(f_data){
                if(f_data.selected){
                    return true
                }
                return false;
            });
            for(var i=0;i<duplicateFacet_data_selected.length;i++){
                selected_f_data = duplicateFacet_data_selected[i];
                $scope.addSelected(facet, selected_f_data, true);                
            }; 
        }
        $scope.info.defaultState = false;
        for(var key in $scope.selectedFacets){
            if($scope.selectedFacets[key].length != 0) {
                selectedFacetcount = $scope.selectedFacets[key].length + selectedFacetcount;
            }
        }
        $scope.info.page['current'] = 0;
        $scope.info.pristine = false;
        $scope.info.currentFacet = facet;
        $scope.refresh();
    };
    // Triggered whenever a facet is sseelct all option
    $scope.facetApplyFromMoreWindow = function(facetgroup, list,index) {

        //remove pre. selected facet
        if ($scope.selectedFacets[facetgroup.key]) {
            $scope.selectedFacets[facetgroup.key] = [];
        }
        //re-select original facet
        var tempList = $scope.facets[index].data;
        tempList.map(function(item){
            item.selected = false;
        });

        for(var i=0;i<list.length;i++){
            $scope.addSelected(facetgroup, list[i], true);
        };
        $scope.info.defaultState = false;
        $scope.info.page['current'] = 0;
        $scope.info.pristine = false;
        $scope.info.currentFacet = facetgroup;
        $scope.refresh();
    };
    //Checks if facet should be disabled
    $scope.checkDisabled = function(facet, f_data) {
        for (var i in $scope.selectedFacets[facet.key]) {
            if ($scope.selectedFacets[facet.key][i].label === f_data.label && $scope.selectedFacets[facet.key][i].disabled) {
                f_data.disabled = true;
                return true;
            }
        }
        return false;
    };

    $scope.changeEventSection = function() {
        $scope.toggleChartCnt = true;
        if ($scope.info.eventsection == "section") {
            $scope.info.sections = true;
            $scope.info.events = false;
            $scope.info.selectedFilterName = "Select View";
        } else if ($scope.info.eventsection == "event") {
            $scope.info.sections = false;
            $scope.info.events = true;
            $scope.info.selectedFilterName = "Select View";
        } else {
            return;
        }

        if ($scope.info.filterSuggest.indexOf('CompoundSearch=') != -1 && $scope.info.eventsection == "section") {
            ModalService.alertBox({
                msgKey : 'events_only'
            });
            return;
        }
        //clear facel sections
        $scope.info.currentFacet = undefined;
        //clear facets filter
        $scope.selectedFacets = {};
        if(($scope.info.filterSuggest == '*' || $scope.info.filterSuggest == '') && $scope.dateRangeFilterName == GlobalService.getVal('customdate') && (new Date($scope.info.toDate).getTime()) === (new Date($scope.info.solrEndDate).getTime())) {
            $scope.info.pristine = true;
        }
        $scope.info.page['current'] = 0;
        $scope.refresh();
    };
    $scope.toggleTimelineGraph = function(){
        $scope.toggleChartCnt = !$scope.toggleChartCnt; 
        $scope.logToggleTimeline($scope.toggleChartCnt);
    };
    // $scope.dropDownFixPosition = function(key){
    //     var button = $("#"+key+"DropdownBtn");
    //     var dropdown = $("#"+key+"DropdownMenu")
    //     var dropDownTop = button.offset().top + button.outerHeight();
    //     dropdown.css('position', "fixed");
    //     dropdown.css('top', dropDownTop + "px");
    //     dropdown.css('left', button.offset().left + "px");
    // };
    $scope.isInEvent = function(){
        if($scope.info.eventsection == "event"){
            return true;
        }
        return false;
    }
    // Add the given facet to the selectedFacets list and also sets the same as currentFacet.
    $scope.addSelected = function(facet, f_data, notTorefresh) {
        $scope.info.defaultState = false;
        $scope.info.currentFacet = facet;
        if (!$scope.selectedFacets[facet.key]) {
            $scope.selectedFacets[facet.key] = [];
        }
        if(!$scope.isCheckSelectedFacetExist($scope.selectedFacets[facet.key], f_data)){
            f_data.groupName = f_data.title;
            f_data.groupCount = $scope.selectedFacets[facet.key].length + 1;
            $scope.selectedFacets[facet.key].push(f_data);
            // $scope.selectedFacets[facet.key].groupName = facet.label;
            // $scope.selectedFacets[facet.key].groupCount = $scope.selectedFacets[facet.key].length;
        }        
        $scope.info.pristine = false;
        if(!notTorefresh){
            $scope.refresh();
        }
    };
    $scope.isCheckSelectedFacetExist = function(data,f_data){
        for(var i=0;i<data.length;i++){
            if(data[i].label == f_data.label){
                return true;
            }
        }
        return false;
    };
    // Removes the given facet from the selectedFacets list and also sets the same as the currentFacet.
    $scope.removeSelected = function(facet, f_data, notTorefresh) {
        $scope.info.defaultState = false;
        var i;
        $scope.info.currentFacet = facet;
        for (i in $scope.selectedFacets[facet.key]) {
            if ($scope.selectedFacets[facet.key][i].label === f_data.label) {
                $scope.selectedFacets[facet.key].splice(i, 1);
                break;
            }
        }
        var flag = false;
        for (var i in $scope.selectedFacets) {
            for (var j = 0; j < $scope.selectedFacets[i].length; j++) {
                if (!$scope.selectedFacets[i][j].disabled) {
                    flag = true;
                    break;
                }
            }
        }
        if (flag || !$scope.customDateFilter)
            $scope.info.pristine = false;
        else
            $scope.info.pristine = true;
        
        if(!notTorefresh){
            $scope.refresh();
        }
    };

    // Removes the facet from close icon
    $scope.removeFacet = function(key, facet) {
        $scope.info.defaultState = false;
        $scope.info.page['current'] = 0;
        $scope.info.pristine = false;
        $scope.info.drillDown = false;
        facet.selected = false;
        $scope.info.currentFacet = $scope.getFacet(key);
        //update current facets data to unselect facet
        for(var index = 0;index < $scope.info.currentFacet.data.length;index++){
            if(facet.label === $scope.info.currentFacet.data[index]['label']){
                $scope.info.currentFacet.data[index]['selected'] = false;
            }
        }
        var flag = false;
        $scope.selectedFacets[key].splice($scope.selectedFacets[key].indexOf(facet), 1);
        if($scope.selectedFacets[key].length == 0){
            $scope.selectedFacets[key] = [];
        }        
        for (var i in $scope.selectedFacets) {
            for (var j = 0; j < $scope.selectedFacets[i].length; j++) {
                if (!$scope.selectedFacets[i][j].disabled) {
                    flag = true;
                    break;
                }
            }
        }
        if (flag || !$scope.customDateFilter)
            $scope.info.pristine = false;
        else
            $scope.info.pristine = true;
        $scope.refresh();
    };
    $scope.removeFacetGroup = function(key,facet) {
        $scope.info.defaultState = false;
        $scope.info.currentFacet = null;
        $scope.info.pristine = false;
        facet.selected = false;
        var flag = false;
        var tempCount = $scope.selectedFacets[key].length;
        for(i=0;i<tempCount;i++){
            $scope.selectedFacets[key].splice($scope.selectedFacets[key].indexOf($scope.selectedFacets[key][i]), 1);
        }
        $scope.selectedFacets[key].count = $scope.selectedFacets[key].length;
        if($scope.selectedFacets[key].length == 0){
            $scope.selectedFacets[key] = [];
        }        
        for (var i in $scope.selectedFacets) {
            for (var j = 0; j < $scope.selectedFacets[i].length; j++) {
                if (!$scope.selectedFacets[i][j].disabled) {
                    flag = true;
                    break;
                }
            }
        }
        if (flag || !$scope.customDateFilter)
            $scope.info.pristine = false;
        else
            $scope.info.pristine = true;
        $scope.refresh();
    };
    $scope.removeDefaultFacet = function(){
        $scope.defaultFacet = null;
        var flag = false;
        for (var i in $scope.selectedFacets) {
            for (var j = 0; j < $scope.selectedFacets[i].length; j++) {
                if (!$scope.selectedFacets[i][j].disabled) {
                    flag = true;
                    break;
                }
            }
        }
        if (flag || !$scope.customDateFilter)
            $scope.info.pristine = false;
        else
            $scope.info.pristine = true;
        if($scope.info.explorerDataDuration !== ''){
            $scope.reset();
        }else{
            $scope.refresh();
        }
    }
    // Returns the URL to download the selected data from the explorer.
    $scope.getExportUrl = function(eventStart) {

        var i,
            selectedFacets = {};
        angular.forEach($scope.selectedFacets, function(facets, key) {
            if (!Array.isArray(selectedFacets[key]) && key != 'events' && key != 'namespace') {
                selectedFacets[key] = [];
            }
            if (key == 'events' || key == 'namespace') {
                for (i in facets) {
                    if (!selectedFacets['namespace']) {
                        selectedFacets['namespace'] = [];
                    }
                    selectedFacets['namespace'].push(facets[i]['key']);
                }
            } else {
                for (i in facets) {
                    selectedFacets[key].push(facets[i].label);
                }
            }

        });
        // XHR to fetch the results based on the user selection of facets n other parameters on the UI.
        var pageSize = $scope.csvpage.noOfRecordsCsv;
        var startIndex = eventStart == 1 ? 0 : $scope.info.page['current'] * $scope.info.page['count'];
        var startDate = $scope.getFrom();
        var endDate = $scope.getTo();
        var sortingOrder = $scope.info.sortOrder['val'];
        var facetStr = "";
        var quickFilter = $scope.info.quick;
        var uploadedBy = $scope.info.uploadedBy;
        var quickFilterName = $scope.dateRangeFilterName;
        var sectionevent = $scope.info.events ? "EVENT" : "SECTION";

        var urlPart = startDate + "/" + endDate + "/" + startIndex + "/" + pageSize + "/" + sectionevent;
        var params = {};
        //check if selected facets are there
        if (!!Object.keys(selectedFacets).length) {
            for (key in selectedFacets) {
                if (selectedFacets[key] && selectedFacets[key].length && selectedFacets[key].length > 0) {
                    if (facetStr != "") {
                        facetStr += " ~||~ ";
                    }
                    for (var fcount = 0; fcount < selectedFacets[key].length; fcount++) {
                        if (facetStr == "") {
                            facetStr = key + "=" + "\"" + selectedFacets[key][fcount] + "\"";
                        } else if (fcount == 0) {
                            facetStr += key + "=" + "\"" + selectedFacets[key][fcount] + "\"";
                        } else {
                            facetStr = facetStr.replace(/(\")$/g, "");
                            facetStr += ("~" + selectedFacets[key][fcount] + "\"");
                        }
                    }
                }
            }
        }
        
        if($scope.defaultFacet){
            if(facetStr) {
                facetStr = "obs_url=" + "\"" + $scope.defaultFacet["label"] + "\"" + ' ~||~ ' + facetStr;
            }else{
                facetStr = "obs_url=" + "\"" + $scope.defaultFacet["label"] + "\"";
            }
            
        }

        if (facetStr) {
            params['filter'] = facetStr;
        }
        if (quickFilter) {
            params['quick_filter'] = quickFilter;
        }
        if (sortingOrder) {
            params['sortby'] = "obs_date " + sortingOrder;
        }
        if(uploadedBy) {
            params['uploaded_by'] = uploadedBy;
        }
        if($scope.info.filterSuggest.indexOf('CompoundSearch=') != -1){
            params["compound_search"] = "pagination"
        }
        var gform = document.getElementById("gb-download-bundle-hidden-form");
        gform.action = ExplorerService.getExportUrl(urlPart,params);
        document.getElementById("gb-download-bundle-hidden-form-searchtext").value = $scope.info.filterSuggest;
        gform.submit();
    };
    // Updates the from n to time from the given date objects
    $scope.setFromTo = function(fdate, tdate, drillDown, reload) {
        $scope.info.fromDate = fdate;
        $scope.info.fromTime.hr = fdate.getHours();
        $scope.info.fromTime.min = fdate.getMinutes();
        $scope.info.fromTime.sec = fdate.getSeconds();
        var utcCurrentTime = metaDataService.getTodayDate();//moment(moment.utc().format('YYYY-MM-DD HH:mm:ss'), 'YYYY-MM-DD HH:mm:ss').toDate();
        if (new Date(tdate) > utcCurrentTime) {
            if (!drillDown) {
                $scope.info.bundleToDate = tdate;
            }
        } else {
            $scope.info.bundleToDate = null;
        }
        $scope.info.toDate = tdate;
        $scope.info.toTime.hr = tdate.getHours();
        $scope.info.toTime.min = tdate.getMinutes();
        $scope.info.toTime.sec = tdate.getSeconds();       
        $scope.info.page['current'] = 0;
        if($scope.defaultFacet){
            var isfdateLesser = new Date(fdate).getTime() <= new Date($scope.info.fromDateOfLogVault).getTime();
            if(isfdateLesser){
                $scope.info.dateRestrictionMinDate = fdate;
            }else{
                $scope.info.dateRestrictionMinDate = $scope.info.fromDateOfLogVault;
            }
        }
        if($scope.info.callRefreshIfFromDateInRange || $scope.info.callRefreshIfToDateInRange){
            $scope.refresh(false, drillDown);
        }else{
            $scope.info.no_result = true;
            $scope.response = null;
            $scope.info.err_msg = 0;
            var dataRestrictionMsg = $scope.getValue('data_restriction_savedviews');
            $scope.info.dataRestrictionMsg = dataRestrictionMsg.replace("${val}", $scope.info.explorerDataDuration);
            $scope.info.hideFacets = true;
            $scope.d3Data = [];
            $scope.d3BarRender();
            $scope.info.resultLoading = false;
            $scope.info.dataLoading = false;
            $scope.info.viewLoad = false;
        }
    };

    // Returns the string required for the From time in the XHR query
    $scope.getFrom = function(local) {
        var date = new Date($scope.info.fromDate.getFullYear(), $scope.info.fromDate.getMonth(), $scope.info.fromDate.getDate(), $scope.info.fromTime.hr, $scope.info.fromTime.min, $scope.info.fromTime.sec);
        $scope.info.fromDate = date;
        return date.getFullYear() + "-" + $scope.makeT2DigitValue(parseInt(date.getMonth() + 1)) + "-" + $scope.makeT2DigitValue(date.getDate()) + "T" + $scope.makeT2DigitValue($scope.info.fromTime.hr) + ":" + $scope.makeT2DigitValue($scope.info.fromTime.min) + ":" + $scope.makeT2DigitValue($scope.info.fromTime.sec) + "Z";
       
    };
    $scope.makeT2DigitValue = function(value){
        if(parseInt(value) < 10) return "0"+value;
        return value;
    };;

    $scope.$watch('info.toDate', function() {
        var utcCurrentTime = metaDataService.getTodayDate();// moment(moment.utc().format('YYYY-MM-DD HH:mm:ss'), 'YYYY-MM-DD HH:mm:ss').toDate();
        if (utcCurrentTime < $scope.info.toDate) {
            $scope.info.toDate = utcCurrentTime;
        }
    });
    $scope.$watch('info.resultLoading', function() {
        if(!$scope.info.resultLoading){
            AppService.hidePanelLoading();
        }
    })
    //Event to check when application is ready
     $scope.$on('AppLoadEvent-explorer', function (event, reload) {
        if(!$scope.info.resultLoading){ 
            AppService.hidePanelLoading();
        }
        if(reload){
            console.log($scope.tabContainId);
            if(ExplorerService.getLoadView() && !$scope.info.allConfigLoading) {
                $scope.loadDefaultFilter();
            } else {
                if($scope.tabContainId == $scope.$parent.activeTab.id){
                    $scope.searchFromLogvault();
                }
            }
        }
     });
    
    // Returns the string required for the To time in the XHR query
    $scope.getTo = function(local) {
        var utcCurrentTime = metaDataService.getTodayDate();//moment(moment.utc().format('YYYY-MM-DD HH:mm:ss'), 'YYYY-MM-DD HH:mm:ss').toDate();
        var today = utcCurrentTime;
        today.setHours(0);
        today.setMinutes(0);
        today.setSeconds(0);
        if (!!$scope.defaultFacet && !!$scope.info.bundleToDate && $scope.info.toDate > today) {
            var date = new Date($scope.info.bundleToDate);
        } else {
            var date = new Date($scope.info.toDate.getFullYear(), $scope.info.toDate.getMonth(), $scope.info.toDate.getDate(), $scope.info.toTime.hr, $scope.info.toTime.min, $scope.info.toTime.sec);
        }
        $scope.info.toDate = date;
        // if ($scope.customDateFilter && $scope.customDateFilterApplied) {
            // date.setDate(date.getDate() + 1);
        // }        
        return date.getFullYear() + "-" + $scope.makeT2DigitValue(parseInt(date.getMonth() + 1)) + "-" + $scope.makeT2DigitValue(date.getDate()) + "T" + $scope.makeT2DigitValue($scope.info.toTime.hr) + ":" + $scope.makeT2DigitValue($scope.info.toTime.min) + ":" + $scope.makeT2DigitValue($scope.info.toTime.sec) + "Z";
        
    };

    // Returns the array containing all the explorer errors.
    $scope.getError = function() {
        return ErrorService.getErrors('explorer');
    };

    $scope.getSysErrors = function() {
        return ErrorService.getErrors('gbApp');
    };

    $scope.renderHtml = function(html) {
        return $sce.trustAsHtml(html);
    };

    // Adds the selected attribute to selected attributes
    $scope.addAttrib = function(attrib) {
        if ($scope.info.tSelectedEvtAttribs.length >= GlobalService.getVal('max_evt_attr')) {
            // alert(GlobalService.getVal('max_evt_attr_msg'));
            ModalService.alertBox({
                msgKey : 'max_evt_attr_msg'
            });
        } else {
            $scope.info.evtAttribs.splice($scope.info.evtAttribs.indexOf(attrib), 1);
            $scope.info.tSelectedEvtAttribs.push(attrib);
        }
    };

    // Removes the selected attribute from the selected attributes
    $scope.removeAttrib = function(attrib) {
        if (!attrib['default']) {
            $scope.info.evtAttribs.push(attrib);
            $scope.info.tSelectedEvtAttribs.splice($scope.info.tSelectedEvtAttribs.indexOf(attrib), 1);
        }
    };

    // Removes all the attributes from the selection.
    $scope.removeAllAttrib = function() {
        var i;
        for (i in $scope.info.tSelectedEvtAttribs) {
            if (!$scope.info.tSelectedEvtAttribs[i]['default']) {
                $scope.info.evtAttribs.push($scope.info.tSelectedEvtAttribs[i]);
            }
        }
        $scope.info.tSelectedEvtAttribs.length = 0;
        // Populating default selected event attributes
        $scope.info.tSelectedEvtAttribs.push({
            "key" : "evt_date_str",
            "dataType" : "STRING",
            "label" : "Date",
            "default" : true
        });
        $scope.info.tSelectedEvtAttribs.push({
            "key" : "evt_text",
            "dataType" : "STRING",
            "label" : "Event Text",
            "default" : true
        });
    };

    // Save the event attributes
    $scope.saveEvtAttrib = function() {
        var i;
        $scope.info.selectedEvtAttribs.length = 0;
        for (i in $scope.info.tSelectedEvtAttribs) {
            $scope.info.selectedEvtAttribs[i] = $scope.info.tSelectedEvtAttribs[i];
        }
        $scope.refresh();
    };

    $scope.cancelEvtAttrib = function() {
        $scope.info.evtAttribs = [];
        $scope.info.tSelectedEvtAttribs = [];
        $scope.info.tSelectedEvtAttribs.push({
            "key" : "evt_date_str",
            "dataType" : "STRING",
            "label" : "Date",
            "default" : true
        });
        $scope.info.tSelectedEvtAttribs.push({
            "key" : "evt_text",
            "dataType" : "STRING",
            "label" : "Event Text",
            "default" : true
        });
        var i;
        for (i in $scope.info.evtAttribsDefault) {
            if ($scope.info.selectedEvtAttribs.indexOf($scope.info.evtAttribsDefault[i]) == -1) {
                $scope.info.evtAttribs.push($scope.info.evtAttribsDefault[i]);
            } else {
                $scope.info.tSelectedEvtAttribs.push($scope.info.evtAttribsDefault[i]);
            }
        }
    };

    // Shows the aggreagate chart for the selected event attribute.
    $scope.showAggregate = function(attrib) {
        var i = 0,
            limit = 20,
            aggr,
            sum = 0,
            facetFields = $scope.facetCounts['facet_fields'];

        // Finding the total count for the given attribute.
        if (facetFields[attrib['key']]) {
            $scope.info.aggregateData = {};
            $scope.info.aggregateData['title'] = attrib['label'];
            $scope.info.aggregateData.data = [];

            for ( i = 0; i < facetFields[attrib['key']].length; i += 2) {
                sum += facetFields[attrib['key']][i + 1];
            }
            if (facetFields[attrib['key']].length < 20) {
                limit = facetFields[attrib['key']].length;
            }
            for ( i = 0; i < limit; i += 2) {
                aggr = {};
                aggr['label'] = facetFields[attrib['key']][i];
                aggr['count'] = facetFields[attrib['key']][i + 1];
                aggr['percentage'] = Math.round((facetFields[attrib['key']][i + 1] / sum) * 100);
                $scope.info.aggregateData.data.push(aggr);
            }
            $scope.info.isAggregate = true;
        } else {
            // alert('No Data Found!');
            ModalService.alertBox({
                msg : 'No Data Found!'
            });
            return;
        }

    };
    $scope.addAppsInstance = function(result){
         result.namespace = result['namespace'];//"random.namespace.by.apps";
         result.currentNS = "random.namespace.by.apps";
         result.namespace_id = $filter('bundleName')(result.obs_url) + '-0';
         result.serial_num = result[$scope.info.sysId];
         var instance = {
             "type": 'apps',
             "title": 'View section/config diff',
             "name": $filter('bundleName')(result.obs_url),
             "module" : $scope.info.application,
             "data": {
                 "result": result,
                 "source": 'explorer',
                 "bundle": result.obs_url, // obs url must not be trimmed as we use it to fetch data in instance viewer
                 "sysId": result[$scope.info.sysId],
                 "sysId2": null,
                 "instanceDisplay": $scope.info.fields,
                 "start_time": $scope.getFrom(),
                 "end_time": $scope.getTo(),
                 'observation': result.obs_date,
                 'observationStr': result.obs_date_str
             }
         };
        if(result.sysid2){
            instance.data.sysId2 = result.sysid2;
        }
        UserTrackingService.standard_user_tracking($scope.info.application, "Apps", 'Log View', JSON.stringify(result)).then(userTrackingSuccess, handleSessionTimeout);
        InstanceHandler.addInstance(instance);
    };
    $scope.getSeverityFilter = function() {
        return JSON.parse(JSON.stringify($scope.getFacet('severity').data)).map(function(e) { e.selected = true;return e});
    }
    $scope.addInstance = function(result, details){
        var instance,
            type = $scope.info.sectionsContent[result.namespace]['nsType'],
            title,
            filter;
        if (type == "EVENT" || type == "SESSION") {
            type = "event";
            title = "Event Viewer";
            filter = $scope.getSeverityFilter() || [];  
        } else {
            type = "section";
            title = "Section Viewer";
        }
        instance = {
            "type" : type,
            "title" : title,
            "app" : $scope.info.application,
            "module" : $scope.info.events ? "Event" : "Section",
            "data" : {
                "result" : result,
                "bundle" : $filter('bundleName')(result.obs_url),
                "sysId" : result[$scope.info.sysId],
                "file" : $filter('bundleName')(result.filename),
                "instanceDisplay" : $scope.info.fields,// GlobalService.getVal('instance_viewer_displayfield'),
                "fileDiffAttr" : $scope.info.config.file_diff_key,
                "eventSource" : details.description,
                "start_time" : $scope.getFrom(),
                "end_time" : $scope.getTo(),
                'observation' : result.obs_date,
                'observationStr' : result.obs_date_str,
                "facetStr": $scope.facetStr,
                "severityFilter" : filter
            }
        };

        var details = {
            "Serial Number" : result[$scope.info.sysId],
            "Bundle" : /*$filter('bundleName')*/(result.obs_url),
            "File" : $filter('bundleName')(result.filename),
            "Observation" : result.obs_date_str
        };
        InstanceHandler.addInstance(instance, $scope);
    };
    // Populates the page object with the latest data.
    $scope.paginator = function(count) {
        $scope.info.page['total'] = count;
        $scope.info.page['pages'] = Math.ceil($scope.info.page['total'] / $scope.info.page['count']);
        if ($scope.info.page['current'] >= $scope.info.page['pages']) {
            $scope.info.page['current'] = $scope.info.page['pages'] - 1;
        }
    };

    //Change page size
    $scope.changePageSize = function() {
        $scope.info.page['count'] = parseInt($scope.info.page['count']);
        $scope.info.page['pages'] = Math.ceil($scope.info.page['total'] / $scope.info.page['count']);
        $scope.info.page['current'] = 0;
        $scope.info.changePageSize = true;
        $scope.refresh(true);
    };

    // Navigates to next page of results
    $scope.nextPage = function() {
        if ($scope.info.page['current'] < $scope.info.page['pages'] - 1) {
            $scope.info.page['current'] += 1;
            $scope.info.paginate = true;
            $scope.refresh(true);
        }
    };

    // Navigate to previous page of results
    $scope.prevPage = function() {
        if ($scope.info.page['current'] > 0) {
            $scope.info.page['current'] -= 1;
            $scope.info.paginate = true;
            $scope.refresh(true);
        }
    };

    // Navigate to first page of results
    $scope.firstPage = function() {
        if ($scope.info.page['current'] == 0)
            return;
        $scope.info.page['current'] = 0;
        $scope.info.paginate = true;
        $scope.refresh(true);
    };

    // Navigate to last page of results
    $scope.lastPage = function() {
        if ($scope.info.page['current'] == $scope.info.page['pages'] - 1)
            return;
        $scope.info.page['current'] = $scope.info.page['pages'] - 1;
        $scope.info.paginate = true;
        $scope.refresh(true);
    };

    // Sort results...
    $scope.sortResults = function(order) {
        if (order == 'desc') {
            $scope.info.sortOrder = {
                "label" : "Latest",
                "val" : "desc"
            };
        } else {
            $scope.info.sortOrder = {
                "label" : "Oldest",
                "val" : "asc"
            };
        }
        $scope.drillDown = false;
        $scope.refresh(true);
    };

    $scope.instanceDashboardFullscreen = false;
    $scope.instanceDashboardItems = [{
        name : '(1) Event Viewer'
    }];

    // Reset will remove all the user selection on the UI and brings the UI to default state. Keeps the defaulf filter intact.
    $scope.reset = function(noResetSectionEvent) {
        var d,
            d1,
            i,
            j,
            keys;
        // if ($scope.info.defaultFilterInfo == '' || !Object.keys($scope.info.defaultFilterInfo).length || ($scope.info.defaultFilterInfo['search_type'] == 'OUTOFBOX' && $scope.info.defaultFilterInfo['last_n_log_by_user'] != $scope.info.quick)) {
        $scope.info.quick = 0;
        $scope.info.uploadedBy = null;
        $scope.info.disable_time = false;
        //$scope.defaultFacet = null;
        $scope.info.selectedFilterName = "Select View";
        if(!noResetSectionEvent) {
            if($scope.info.config['DEFAULT_VIEW'] == 'SECTION') {
                $scope.info.eventsection = 'section';
                $scope.info.sections = true;
                $scope.info.events = false;
            } else {
                $scope.info.eventsection = 'event';
                $scope.info.sections = false;
                $scope.info.events = true;
            }
        }
        // }
        for (i in $scope.facets) {
            for (j in $scope.facets[i].data) {
                if ($scope.facets[i].data[j]['disabled'] == undefined || $scope.facets[i].data[j]['disabled'] == false) {
                    $scope.facets[i].data[j]['selected'] = false;
                }
            }
            if($scope.facets[i].filter){
                $scope.facets[i].filter = "";
            }
        }
        keys = Object.keys($scope.selectedFacets);
        for (i in keys) {
            var t_selectedFacets = [];
            for (j in $scope.selectedFacets[keys[i]]) {
                if ($scope.selectedFacets[keys[i]][j]['disabled'] != undefined && $scope.selectedFacets[keys[i]][j]['disabled'] == true) {
                    t_selectedFacets.push($scope.selectedFacets[keys[i]][j]);
                }
            }
            $scope.selectedFacets[keys[i]] = t_selectedFacets;
        }
        $scope.customDateFilter = true;
        $scope.dateRangeFilterName = GlobalService.getVal('customdate');
        d = new Date($scope.info.solrEndDate);
        d1 = new Date($scope.info.solrEndDate);
        if ($scope.info.default_days && ($scope.info.explorerDataDuration === '')) {
            d.setTime(d.getTime() - $scope.info.default_days);
            d.setSeconds(d.getSeconds());
        } else {
            d.setFullYear(d.getFullYear() - 10);
        }
        $scope.info.MinDate = new Date($scope.info.solrEndDate);
        $scope.info.MinDate.setDate($scope.info.solrEndDate.getDate() - $scope.info.max_days_allowed) 
        $scope.info.filterSuggest = $scope.info.defaultSearchText;
        if($scope.info.default_days && ($scope.info.explorerDataDuration !== '')){
            var date = $scope.setInitialDates();
            d = date.fromDate;
            d1 = date.toDate;
        }
        $scope.setFromTo(d, d1);
        $scope.info.pristine = true;
    };

    $scope.setInitialDates = function(){
        var obj = {}
        d = new Date($scope.info.solrEndDate);
        d1 = new Date($scope.info.solrEndDate);
        var DR = $scope.info.explorerDataDuration;
        var default_days_duration = moment.duration($scope.info.default_days, 'milliseconds');
        var default_days = default_days_duration.asDays();
        var currentDate = moment(new Date(), 'DD-MM-YYYY');
        var drRangeStartDate = moment(new Date()).subtract(DR, "days");
        var defaultDate = moment(new Date($scope.info.solrEndDate)).subtract(default_days, "days");
        if(moment(new Date($scope.info.solrEndDate)).isBetween(drRangeStartDate, currentDate, null, [])){
            d1 = new Date($scope.info.solrEndDate);
        }else{
            d1 = new Date(currentDate);
        }

        if(moment(new Date(defaultDate)).isBetween(drRangeStartDate, currentDate, null, [])){
            d = new Date(defaultDate);
        }else{
            d = new Date(drRangeStartDate);
        }
        $scope.info.dateRestrictionMinDate = new Date(drRangeStartDate);
        $scope.info.dateRestrictionMaxDate = new Date(currentDate);
        obj.fromDate = d;
        obj.toDate = d1;
        if(!$scope.info.initialDatesSaved){
            $scope.info.initialFromDate = new Date(drRangeStartDate);
            $scope.info.initialToDate = new Date(d1);
        }
        return obj;
    }

    // Loads a saved view.
    $scope.loadView = function(view) {
        $scope.info.defaultState = false;
        $scope.info.drillDown = false;
        $scope.info.selectedFilterName = view.search_type != "OUTOFBOX" ? view.view_name : $scope.getValue('last' + view.last_n_log_by_user + 'byme');
        $scope.applyView($scope.parseView(view));
        var details = {
            'View Name': $scope.info.selectedFilterName
        };
        UserTrackingService.standard_user_tracking($scope.info.application, $scope.info.events ? "Event" : "Section", 'Apply View', JSON.stringify(details)).then(userTrackingSuccess, handleSessionTimeout);
    };

    // Loads the logs uploaded by me.
    $scope.loadLogsByMe = function(n, def) {
        // if ($scope.info.defaultFilterInfo['search_type'] == 'OUTOFBOX' && $scope.info.defaultFilterInfo['last_n_log_by_user'] == n) {
            // $scope.info.defaultState = true;
        // } else {
            $scope.info.defaultState = false;
        // }
        $scope.info.quick = n;
        $scope.info.pristine = false;
        $scope.info.selectedFilterName = $scope.getValue('last' + $scope.info.quick + 'byme');
        $scope.info.uploadedBy = $scope.getLoggedInUserName();
        $scope.resetFacets();
        if(!def) {
            $scope.refresh();
        } else {
            var d = new Date($scope.info.solrEndDate);
            var d1 = new Date($scope.info.solrEndDate);
            if ($scope.info.default_days) {
                d.setTime(d.getTime() - $scope.info.default_days);
            } else {
                d.setFullYear(d.getFullYear() - 10);
            }
            $scope.info.filterSuggest = $scope.info.defaultSearchText;
            $scope.setFromTo(d, d1);
        }
        var details = {
            'View Name': $scope.getValue('last' + n + 'byme')
        };
        UserTrackingService.standard_user_tracking($scope.info.application, $scope.info.events ? "Event" : "Section", 'Apply View', JSON.stringify(details)).then(userTrackingSuccess, handleSessionTimeout);
    };

    // Resets the facet selection
    $scope.resetFacets = function() {
        var i,
            j;
        for (i in $scope.facets) {
            if (Array.isArray($scope.selectedFacets[$scope.facets[i].key])) {
                $scope.selectedFacets[$scope.facets[i].key].length = 0;
            }
            for (j in $scope.facets[i].data) {
                if ($scope.facets[i].data[j].selected == true) {
                    $scope.facets[i].data[j].selected = false;
                }
            }
        }
    };

    // Removes the out of box filters from the applied filters
    //check with Aswin
    $scope.removeOutOfBox = function() {
        $scope.info.defaultState = false;
        $scope.info.quick = 0;
        // if ($scope.info.config['DEFAULT_VIEW'] == 'BOTH') {
            // if ($scope.info.filterSuggest == "*" && $scope.info.events && $scope.info.sections) {
                // $scope.info.pristine = true;
            // }
        if ($scope.info.config['DEFAULT_VIEW'] == 'EVENT') {
            if ($scope.info.filterSuggest == "*" && $scope.info.events && !$scope.info.sections) {
                $scope.info.pristine = true;
            }
        } else {
            if ($scope.info.filterSuggest == "*" && !$scope.info.events && $scope.info.sections) {
                $scope.info.pristine = true;
            }
        }
        $scope.info.selectedFilterName = "Select View";
        $scope.info.uploadedBy = null;
        $scope.refresh();
    };

    //Checks if any facet is selected or not
    $scope.checkFacets = function() {
        for (var i in $scope.selectedFacets) {
            if ($scope.selectedFacets[i].length > 0) {
                return true;
            }
        }
        if($scope.defaultFacet) {
            return true;
        }
        return false;
    };

    // Applies the given parsed view.
    $scope.applyView = function(p_view) {
        var i,
            j,
            k,
            l,
            m,
            keys = [],
            facet;
            
        $scope.info.viewLoad = true;
        if(p_view['sections'] || p_view['events']) {
            if (!!p_view['facets']) {
                keys = Object.keys(p_view['facets']);
            }
            // if (p_view.default) {
                // $scope.info.defaultSearchText = p_view['search_text'];
            // } else {
                $scope.info.defaultSearchText = '*';
            // }
            $scope.info.filterSuggest = p_view['search_text'];
            $scope.info.sections = p_view['sections'];
            $scope.info.events = p_view['events'];
            if ($scope.info.sections == true) {
                $scope.info.eventsection = "section";
            } else {
                $scope.info.eventsection = "event";
            }
            $scope.resetFacets();
            $scope.info.disable_time = false;
            $scope.info.pristine = false;
            $scope.info.quick = 0;
            $scope.info.uploadedBy = null;
            for (i in keys) {
                for (j in $scope.facets) {
                    if (keys[i] != 'relativetimefilter' && keys[i] === $scope.facets[j].key) {
                        if (!Array.isArray($scope.selectedFacets[keys[i]])) {
                            $scope.selectedFacets[keys[i]] = [];
                        }
                        for ( k = 0; k < p_view['facets'][keys[i]].length; k++) {
                            for ( l = 0; l < $scope.facets[j].data.length; ++l) {
                                if (p_view['facets'][keys[i]][k] == $scope.facets[j].data[l].label) {
                                    if (!!$scope.selectedFacets[keys[i]] && !!$scope.selectedFacets[keys[i]].length) {
                                        for ( m = 0; m < $scope.selectedFacets[keys[i]].length; ++m) {
                                            if ($scope.facets[j].data[l].label == $scope.selectedFacets[keys[i]][m].label) {
                                                $scope.facets[j].data[l].disabled = true;
                                                $scope.selectedFacets[keys[i]][m].disabled = true;
                                                break;
                                            }
                                        }
                                        if (m >= $scope.selectedFacets[keys[i]].length) {
                                            // alert("Facet doesn't exist in selectedFacets, so adding " + $scope.facets[j].data[l].label);
                                            $scope.facets[j].data[l].selected = true;
                                            // if (p_view.default) {
                                                // $scope.facets[j].data[l].disabled = true;
                                            // } else {
                                                $scope.facets[j].data[l].disabled = false;
                                            // }
                                            $scope.selectedFacets[keys[i]].push($scope.facets[j].data[l]);
                                        }
                                    } else {
                                        // alert("No selected facets " + $scope.facets[j].data[l].label);
                                        $scope.facets[j].data[l].selected = true;
                                        // if (p_view.default) {
                                            // $scope.facets[j].data[l].disabled = true;
                                        // } else {
                                            $scope.facets[j].data[l].disabled = false;
                                        // }
                                        // if (!$scope.selectedFacets[keys[i]]) {
                                            // $scope.selectedFacets[keys[i]] = [];
                                        // }
                                        $scope.selectedFacets[keys[i]].push($scope.facets[j].data[l]);
                                    }
                                    break;
                                }
                            }
                            if (l >= $scope.facets[j].data.length) {
                                // alert("Facet doesn't exist in $scope.facets" + p_view['facets'][keys[i]][k]);
                                facet = {};
                                facet['label'] = p_view['facets'][keys[i]][k];
                                if (p_view['facetKeys'].hasOwnProperty(p_view['facets'][keys[i]][k])) {
                                    facet['key'] = p_view['facetKeys'][p_view['facets'][keys[i]][k]];
                                }
                                facet['value'] = 0;
                                facet['selected'] = true;
                                // if (p_view.default) {
                                    // facet['disabled'] = true;
                                // } else {
                                    facet['disabled'] = false;
                                // }
                                $scope.facets[j].data.push(facet);
                                $scope.selectedFacets[keys[i]].push(facet);
                            }
                        }
                    }
                }
            }
            if (keys.indexOf("relativetimefilter") != -1) {
                $scope.changeQuickFilter(p_view['facets']['relativetimefilter'][0]);
                // if (p_view.default) {
                    // $scope.info.defaultState = true;
                // }
            } else {
                $scope.customDateFilter = true;
                $scope.customDateFilterApplied = true;
                var fromDateFromResponse = p_view['start_time'].replace("T", " ");
                fromDateFromResponse = fromDateFromResponse.replace("Z","");
                var toDateFromResponse = p_view['end_time'].replace("T", " ");
                toDateFromResponse = toDateFromResponse.replace("Z","");

                fromDateFromResponse, fromDate = metaDataService.getStringToDate(fromDateFromResponse);//moment(fromDateFromResponse, 'YYYY-MM-DD HH:mm:ss').toDate();
                toDateFromResponse,toDate =  metaDataService.getStringToDate(toDateFromResponse); //moment(toDateFromResponse, 'YYYY-MM-DD HH:mm:ss').toDate();             
                if($scope.info.explorerDataDuration !== ''){
                    $scope.setInitialDates();
                    var fromDate, toDate;
                    // var reloadData = false;
                    var formattedFromDateFromResponse = moment(fromDateFromResponse).format('YYYY-MM-DD');
                    var difference = moment(new Date(toDateFromResponse)).diff(new Date(fromDateFromResponse), 'days');
                    var formattedToDateFromResponse = moment(toDateFromResponse).format('YYYY-MM-DD');
                    var formattedInitialFromDate = moment($scope.info.initialFromDate).format('YYYY-MM-DD');
                    var formattedInitialToDate = moment($scope.info.initialToDate).format('YYYY-MM-DD');
                    if(moment(formattedToDateFromResponse).isBetween(formattedInitialFromDate, formattedInitialToDate, null, [])){
                        toDate = new Date(toDateFromResponse);
                        $scope.info.callRefreshIfFromDateInRange = true;
                    }else{
                        toDate = new Date($scope.info.initialToDate);
                        $scope.info.callRefreshIfFromDateInRange = false;
                    }
                    // var diff = moment(new Date(toDateFromResponse)).subtract(new Date(fromDateFromResponse), "days");
                    var diff = moment(formattedToDateFromResponse).subtract($scope.info.explorerDataDuration, "days");
                    var fromDate = difference < $scope.info.explorerDataDuration ? formattedFromDateFromResponse : diff;
                    if(moment(fromDate).isBetween(formattedInitialFromDate, formattedInitialToDate, null, [])){
                        fromDate = moment(fromDate).toDate();
                        $scope.info.callRefreshIfToDateInRange = true;
                    }else{
                        fromDate = new Date($scope.info.initialFromDate);
                        $scope.info.callRefreshIfToDateInRange = false;
                    }
                }
                $scope.info.MinDate = fromDate;
                $scope.todayDate = toDate;
                $scope.setFromTo(fromDate,toDate,'');
            }
        } else {
            $scope.loadLogsByMe(p_view['lastnbyme'], true);
        }
        
    };

    // Parses the given facets list into JSON.
    $scope.parseView = function(view) {
        var i,
            p_view = {},
            s_facets;
        if (view.facet_filters[0] != "NA") {
            p_view['facets'] = {};
            p_view['facetKeys'] = {};
            s_facets = view.facet_filters[0].match(/`([^`]+)`/g);
            for (i in s_facets) {
                s_facets[i] = s_facets[i].replace(/`/g, '');
                if (!p_view['facets'].hasOwnProperty(s_facets[i].split('^')[0])) {
                    p_view['facets'][s_facets[i].split('^')[0]] = [];
                }
                if (s_facets[i].split('^')[0] == 'namespace' || s_facets[i].split('^')[0] == 'events') {
                    p_view['facets'][s_facets[i].split('^')[0]].push(s_facets[i].split('^')[1]);
                    p_view['facetKeys'][s_facets[i].split('^')[1]] = s_facets[i].split('^')[2];
                } else {
                    p_view['facets'][s_facets[i].split('^')[0]].push(s_facets[i].split('^')[1]);
                }
            }
        }
        if(!!view.extraFacets) {
        	var extraFacetFound = false;
        	angular.forEach(view.extraFacets, function(values, facet) {
        		if(!!p_view['facets'][facet]) {
                    angular.forEach(values, function(value) {
                    	if(facet == 'namespace' && ($scope.sectionsContent[value]["nsType"] == "EVENT" || $scope.sectionsContent[value]["nsType"] == "SESSION")) {
		                    facet = 'events';
		                }
                        if((facet == "namespace" || facet == "events") && p_view['facets'][facet].indexOf($scope.sectionsContent[value]['description']) == -1) {
                    		p_view['facets'][facet].push($scope.sectionsContent[value]['description']);
                    		p_view['facetKeys'][$scope.sectionsContent[value]['description']] = value;
                    		extraFacetFound = true;
                    	} else if(!(facet == "namespace" || facet == "events") && p_view['facets'][facet].indexOf(value) == -1) {
                    		p_view['facets'][facet].push(value);
                    		extraFacetFound = true;
                    	}
                    });	
                } else {
                	p_view['facets'][facet] = [];
            		angular.forEach(values, function(value) {
            			if(facet == 'namespace' && ($scope.sectionsContent[value]["nsType"] == "EVENT" || $scope.sectionsContent[value]["nsType"] == "SESSION")) {
		                    facet = 'events';
		                }
		                if(facet == 'namespace' || facet == 'events') {
		                	p_view['facets'][facet].push($scope.sectionsContent[value]['description']);
		                	p_view['facetKeys'][$scope.sectionsContent[value]['description']] = value;
		                	extraFacetFound = true;
		                } else {
		                	p_view['facets'][facet].push(value);
		                	extraFacetFound = true;
		                }
                    });	
                }
            });
            if(!!extraFacetFound) {
            	$scope.info.selectedFilterName = "Select View";
            }
        }
        p_view['search_text'] = decodeURIComponent(view.search_text).replace(/%27/g, '\'');
        p_view['start_time'] = view.start_ts;
        p_view['end_time'] = view.end_ts;
        p_view['events'] = view.search_type == "EVENT";
        p_view['sections'] = view.search_type == "SECTION";
        p_view['lastn'] = view.last_n_log;
        p_view['lastnbyme'] = view.last_n_log_by_user;
        p_view['default'] = view.default;
        return p_view;
    };

    if (!$cookies.savedFilters) {
        $scope.info.savedFilters = [];
    } else {
        if ($cookies.savedFilters.split("#@#") && $cookies.savedFilters.split("#@#").length && $cookies.savedFilters.split("#@#").length > 0) {
            $scope.info.savedFilters = $cookies.savedFilters.split("#@#");
        }

    }

    //Save view related methods...
    $scope.showSaveFilterModal = function() {
        var currentLoggedUser = $scope.getLoggedInUserName();
        if ($scope.savedFiltersList) {
            var userView = $scope.savedFiltersList.filter(function (view) {
                return view.created_by == currentLoggedUser;
            });

            if (userView.length >= GlobalService.getVal('max_views_limit')) {
                ModalService.alertBox({
                    msgKey: 'max_views_msg'
                });
                return;
            }
        }
        $scope.saveModal = {};
        $scope.saveModal.saveStatus = "initiated";
        $scope.saveModal.message = "";
        $scope.saveModal.filters = "";
        $scope.saveModal.filtersString = "";
        $scope.saveModal.searchQuery = $scope.info.filterSuggest;
        $scope.saveModal.timeRange = $scope.getFrom(true).replace(/T|Z/g, ' ') + "To " + $scope.getTo(true).replace(/T|Z/g, ' ');
        var tmpKey = "";
        if ($scope.customDateFilter == false) {
            $scope.saveModal.timeRange = $scope.dateRangeFilterName;
            $scope.saveModal.filtersString += '`relativetimefilter' + '^' + $scope.dateRangeFilterName + '`';
        }
        var keys = Object.keys($scope.selectedFacets);
        for (var i in keys) {
            for (var j in $scope.selectedFacets[keys[i]]) {
                if ($scope.saveModal.filtersString) {
                    $scope.saveModal.filtersString += ',';
                }
                $scope.saveModal.filtersString += '`' + keys[i] + "^" + $scope.selectedFacets[keys[i]][j].label + ($scope.selectedFacets[keys[i]][j].hasOwnProperty('key') ? "^" + $scope.selectedFacets[keys[i]][j].key : '') + '`';

                if ($scope.saveModal.filters != "") {
                    $scope.saveModal.filters = $scope.saveModal.filters + ', ' + $scope.selectedFacets[keys[i]][j].label;
                } else {
                    $scope.saveModal.filters = $scope.selectedFacets[keys[i]][j].label;
                }
            }
        }
    
        $scope.modal = ModalService.openModal('partials/explorer-save-filter.html', $scope, false, true);
        $scope.form = {
            visible : true,
            message : ""
        };
    };
    $scope.allSavedFiltersList = [];
    $scope.saveModal.viewOverwrite = false;

    $scope.checkViewName = function() {
        $scope.saveModal.viewOverwrite = false;
        if ($scope.savedFiltersList && $scope.savedFiltersList.length && $scope.savedFiltersList.length > 0) {
            var found = false;
            for (var i = 0; i < $scope.savedFiltersList.length; i++) {
                if ($scope.savedFiltersList[i].view_name == $scope.saveModal.filterName) {
                    if ($scope.savedFiltersList[i].currentUser) {
                        $scope.saveModal.viewOverwrite = true;
                        continue;
                    } else {
                        found = true;
                        break;
                    }
                }
            }

            if (found) {
                // mark it as invalid
                $scope.form.saveViewModal.viewName.$setValidity('duplicate', false);
            } else {
                $scope.form.saveViewModal.viewName.$setValidity('duplicate', true);
            }

        } else {
            $scope.getSavedFilters();
        }
    };

    $scope.saveFilter = function() {
        if (!$scope.form.saveViewModal.$valid) {
            return;
        }
        $scope.callSaveViewAPI();

    };

    $scope.callSaveViewAPI = function() {
        var saveParam = {
            "search_string" : encodeURIComponent($scope.saveModal.searchQuery.replace(/\'/g, '%27')),
            "search_type" : $scope.info.sections ? "SECTION" : "EVENT",
            "last_n_log" : $scope.info.quick > 1 ? $scope.info.quick : 0,
            "last_n_log_uploaded_by_me" : $scope.info.quick == 1 ? $scope.info.quick : 0,
            "facet_string" : $scope.saveModal.filtersString,
            "start_time" : $scope.getFrom(),
            "end_time" : $scope.getTo(),
            "search_name" : $scope.saveModal.filterName,
            "search_desc" : escape($scope.saveModal.desc),
            "is_public" : $scope.saveModal.access == 'public' ? true : false,
            "is_default" : $scope.info.defaultFilterInfo.view_name == $scope.saveModal.filterName ? true : false
        };
        $scope.saveModal.saveStatus = "progress";
        ExplorerService.saveFilter(saveParam).then(function(response) {
            var details = {
                "View Name" : $scope.saveModal.filterName,
                "Search Text" : encodeURIComponent($scope.saveModal.searchQuery.replace(/\'/g, '%27')),
                "Facet String" : $scope.saveModal.filtersString,
                "Time Range" : $scope.getFrom() + "--" + $scope.getTo(),
                "Search Type": saveParam.search_type
            };
            UserTrackingService.standard_user_tracking($scope.info.application, $scope.info.events ? "Event" : "Section", 'Save View', "{\'" + JSON.stringify(details) + "\'}").then(userTrackingSuccess, handleSessionTimeout);

            $scope.saveModal.saveStatus = "success";
            $scope.saveModal.message = "View saved successfully.";
            // if($scope.info.defaultFilterInfo.view_name == $scope.saveModal.filterName) {
                // $scope.loadDefaultFilter();
            // }
            $scope.getSavedFilters();
            // $scope.getAllSavedFilter();
        }, function(response) {
            $scope.saveModal.saveStatus = "error";
            $scope.saveModal.message = "Oops! Something went wrong!";
            handleSessionTimeout(response);
        });
    };

    $scope.hideModalPanel = function(type) {
        $scope.saveModal.saveStatus = "initiated";
    }
    $scope.savedFiltersListLoading = true;

    //Gets the saved filters
    $scope.getSavedFilters = function(track) {
        $scope.savedFiltersListNotFound = false;
        $scope.savedFiltersListLoading = true;
        ExplorerService.getSavedFilters().then(function(response) {
            populateSavedViewsList(response, track);
        }, function(response) {
            $scope.savedFiltersListLoading = false;
            $scope.savedFiltersListNotFound = true;
            handleSessionTimeout(response);
        });
    };

    function populateSavedViewsList(response, track) {
        // $scope.savedFiltersList = response.data.Data;
        $scope.savedFiltersList = [];
        $scope.allFilterList = response.data.Data;
        angular.forEach($scope.allFilterList, function(view) {
            if(view.search_type == "SECTION" || view.search_type == "EVENT") {
                $scope.savedFiltersList.push(view);
            }
        });
        var defaultFilterArr = $filter('filter')($scope.allFilterList, {created_by: $scope.getLoggedInUserName(), default: true}) || [];
        $scope.info.defaultFilterInfo = defaultFilterArr.length ? defaultFilterArr[0] : {};
        $scope.savedFiltersListLoading = false;
        if ($scope.savedFiltersList && $scope.savedFiltersList.length > 0) {
            $scope.savedFiltersListNotFound = false;
        } else {
            $scope.savedFiltersListNotFound = true;
        }
        
        var viewsList = [];
        //Process respone and insert field "currentUser" true/false
        for (var i = 0; i < $scope.savedFiltersList.length; i++) {
            $scope.savedFiltersList[i].currentUser = $scope.savedFiltersList[i].created_by == $scope.getLoggedInUserName() ? true : false;
            viewsList.push($scope.savedFiltersList[i].view_name);
        }
        
       
            var details = {
                'Name of views': viewsList
            };
            UserTrackingService.standard_user_tracking($scope.info.application, $scope.info.events ? "Event" : "Section", 'List view', JSON.stringify(details)).then(userTrackingSuccess, handleSessionTimeout);
        
        //check for duplicate name during add a new view
        if ($scope.saveModal.filterName && $scope.form.saveViewModal) {
            var found = false;
            for (var i = 0; i < $scope.savedFiltersList.length; i++) {
                if ($scope.savedFiltersList[i].view_name == $scope.saveModal.filterName) {
                    if ($scope.savedFiltersList[i].currentUser) {
                        $scope.saveModal.viewOverwrite = true;
                        continue;
                    } else {
                        found = true;
                        break;
                    }
                }
            }

            if (found && $scope.form.saveViewModal.viewName) {
                // mark it as invalid
                $scope.form.saveViewModal.viewName.$setValidity('duplicate', false);
            } else {
                $scope.form.saveViewModal.viewName.$setValidity('duplicate', true);
            }
        }
    };

    //Opens dialog box to confirm the deletion of selected filter
    $scope.deleteSavedFilter = function(selectedFilter, event) {
        $scope.modal = ModalService.openModal('partials/explorer_delete_filter.html', $scope, false, true);
        $scope.deleteModal = {};
        $scope.deleteModal.filter = {};
        $scope.deleteModal.filter.name = selectedFilter.view_name;
        $scope.deleteModal.filter.desc = decodeURIComponent(selectedFilter.desc);
        $scope.deleteModal.filter.isDefault = selectedFilter.default;
        $scope.deleteModal.status = "initiated";
        $scope.deleteModal.deleteOperationMsg = "";
    };

    //Changes filter accessibility of selected filter
    $scope.changeFilterAccessibility = function(view) {
        $scope.savedFiltersListLoading = true;
        ExplorerService.changeFilterAccessibility(view).then(function(response) {
            $scope.info.changeFilterAccesibilityOperation.statusCode = 0;
            $scope.getSavedFilters();
            var activity = view.public ? 'Set View Private' : 'Set View Public';
            var details = {
                'View Name': view.view_name
            };
            UserTrackingService.standard_user_tracking($scope.info.application, $scope.info.events ? "Event" : "Section", activity, JSON.stringify(details)).then(userTrackingSuccess, handleSessionTimeout);
        }, function(response) {
            $scope.info.changeFilterAccesibilityOperation.statusCode = -1;
            $scope.savedFiltersListNotFound = true;
            $scope.savedFiltersListLoading = false;
            handleSessionTimeout(response);
        });
    };
    //Changes the default filter for a user
    $scope.changeDefaultFilter = function(view, outOfBox) {
        $scope.savedFiltersListLoading = true;
        if(!outOfBox) {
            ExplorerService.setResetDefaultFilter(view).then(function(response) {
                view.default = !view.default;
                var activity = "";
                if(view.default) {
                    //$scope.loadView(view);
                    activity = "Set Default View";
                } else {
                    if(view.view_name == $scope.info.selectedFilterName) {
                        //$scope.selectedFacets = {};
                        $scope.info.defaultFilterInfo = {};
                        //$scope.reset();
                    }
                    activity = "Reset Default View";
                }
                var details = {
                    'View Name': view.view_name
                };
                UserTrackingService.standard_user_tracking($scope.info.application, $scope.info.events ? "Event" : "Section", activity, JSON.stringify(details)).then(userTrackingSuccess, handleSessionTimeout);
                $scope.getSavedFilters();
                // $scope.getAllSavedFilter();
            }, function(response) {
                $scope.savedFiltersListLoading = false;
                handleSessionTimeout(response);
            });
        } else {
            var viewName = 'last_' + view + '_by_' + $scope.getLoggedInUserName();
            var saveParam = {
                "search_string" : "*",
                "search_type" : "OUTOFBOX",
                "last_n_log" : 0,
                "last_n_log_uploaded_by_me" : view,
                "facet_string" : "",
                "start_time" : $scope.getFrom(),
                "end_time" : $scope.getTo(),
                "search_name" : viewName,
                "search_desc" : "undefined",
                "is_public" : false,
                "is_default" : false
            };
            ExplorerService.saveFilter(saveParam).then(function(response) {
                var views = $filter('filter')($scope.allFilterList, {view_name: viewName}) || [];
                var activity = "";
                var details = {
                    'View Name': $scope.getValue('last' + view + 'byme')
                };
                if((views.length && !views[0].default) || !views.length) {
                    activity = "Set Default View";
                    var tempView = {
                        view_name: viewName,
                        default: false
                    };
                    $scope.info.defaultFilterInfo = {
                        search_type: 'OUTOFBOX',
                        last_n_log_by_user: view
                    };
                    $scope.loadLogsByMe(view, false);
                    ExplorerService.setResetDefaultFilter(tempView).then(function(response) {
                        $scope.getSavedFilters();
                        // $scope.getAllSavedFilter();
                    }, function(response) {
                        $scope.savedFiltersListLoading = false;
                        handleSessionTimeout(response);
                    });
                } else {
                    activity = "Reset Default View";
                    if($scope.getValue('last' + view + 'byme') == $scope.info.selectedFilterName) {
                        $scope.selectedFacets = {};
                        $scope.info.defaultFilterInfo = {};
                        $scope.reset();
                    }
                    $scope.getSavedFilters();
                }
                UserTrackingService.standard_user_tracking($scope.info.application, $scope.info.events ? "Event" : "Section", activity, JSON.stringify(details)).then(userTrackingSuccess, handleSessionTimeout);
            }, function(response) {
                $scope.savedFiltersListLoading = false;
                handleSessionTimeout(response);
            });
        }
    };

    $scope.dateRangeFilterName = GlobalService.getVal('customdate');
    // Applies the quick filter based on the user selection
    $scope.changeQuickFilter = function(item) {
        $scope.info.defaultState = false;
        $scope.info.pristine = false;
        $scope.info.quickFilter = true;
        var d,
            d1;        
        d =  metaDataService.getTodayDate();//moment(moment.utc().format('YYYY-MM-DD HH:mm:ss'), 'YYYY-MM-DD HH:mm:ss').toDate();
        d1 =  metaDataService.getTodayDate();//moment(moment.utc().format('YYYY-MM-DD HH:mm:ss'), 'YYYY-MM-DD HH:mm:ss').toDate();
        $scope.info.page['current'] = 0;
        if (item != 'customdate') {
            $scope.customDateFilter = false;
            $scope.dateRangeFilterName = GlobalService.getVal(item);
            $scope.info.quick = 0;
            $scope.info.uploadedBy = null;
            switch(item) {
            case 'lasthour' :
            case GlobalService.getVal('lasthour') :
                d.setHours(d.getHours() - 1);
                $scope.setFromTo(d, d1);
                $scope.dateRangeFilterName = GlobalService.getVal('lasthour');
                break;
            case 'today' :
            case GlobalService.getVal('today') :
                d.setHours(0);
                d.setMinutes(0);
                d.setSeconds(0);
                $scope.setFromTo(d, d1);
                $scope.dateRangeFilterName = GlobalService.getVal('today');
                break;
            case 'yesterday' :
            case GlobalService.getVal('yesterday') :
                d.setDate(d.getDate() - 1);
                d.setHours(0);
                d.setMinutes(0);
                d.setSeconds(0);
                d1.setDate(d1.getDate() - 1);
                d1.setHours(23);
                d1.setMinutes(59);
                d1.setSeconds(59);
                $scope.setFromTo(d, d1);
                $scope.dateRangeFilterName = GlobalService.getVal('yesterday');
                break;
            case 'thisweek' :
            case GlobalService.getVal('thisweek') :
                d.setDate(d.getDate() - d.getDay() + 1);
                d.setHours(0);
                d.setMinutes(0);
                d.setSeconds(0);
                $scope.setFromTo(d, d1);
                $scope.dateRangeFilterName = GlobalService.getVal('thisweek');
                break;
            case 'thismonth' :
            case GlobalService.getVal('thismonth') :
                d.setDate(1);
                d.setHours(0);
                d.setMinutes(0);
                d.setSeconds(0);
                $scope.setFromTo(d, d1);
                $scope.dateRangeFilterName = GlobalService.getVal('thismonth');
                break;
            case 'last2days' :
            case GlobalService.getVal('last2days') :
                d.setDate(d.getDate() - 2);
                d.setHours(0);
                d.setMinutes(0);
                d.setSeconds(0);
                $scope.setFromTo(d, d1);
                $scope.dateRangeFilterName = GlobalService.getVal('last2days');
                break;
            case 'last7days' :
            case GlobalService.getVal('last7days') :
                d.setDate(d.getDate() - 7);
                d.setHours(0);
                d.setMinutes(0);
                d.setSeconds(0);
                $scope.setFromTo(d, d1);
                $scope.dateRangeFilterName = GlobalService.getVal('last7days');
                break;
            case 'last30days' :
            case GlobalService.getVal('last30days') :
                d.setDate(d.getDate() - 30);
                d.setHours(0);
                d.setMinutes(0);
                d.setSeconds(0);
                $scope.setFromTo(d, d1);
                $scope.dateRangeFilterName = GlobalService.getVal('last30days');
                break;
            case 'mostrecent' :
            case GlobalService.getVal('mostrecent') :
                $scope.info.quick = 1;
                var fDate = new Date($scope.info.solrEndDate);
                if ($scope.info.max_days_allowed) {
                    fDate.setDate(fDate.getDate() - $scope.info.max_days_allowed);
                } else {
                    fDate.setFullYear(fDate.getFullYear() - 10);
                }
                $scope.setFromTo(fDate, new Date($scope.info.solrEndDate));

                // $scope.refresh();
                $scope.dateRangeFilterName = GlobalService.getVal('mostrecent');
                break;
            case 'last5' :
            case GlobalService.getVal('last5') :
                $scope.info.quick = 5;
                var fDate = new Date($scope.info.solrEndDate);
                if ($scope.info.max_days_allowed) {
                    fDate.setDate(fDate.getDate() - $scope.info.max_days_allowed);
                } else {
                    fDate.setFullYear(fDate.getFullYear() - 10);
                }
                $scope.setFromTo(fDate, new Date($scope.info.solrEndDate));
                // $scope.refresh();
                $scope.dateRangeFilterName = GlobalService.getVal('last5');
                break;
            case 'last10' :
            case GlobalService.getVal('last10') :
                $scope.info.quick = 10;
                var fDate = new Date($scope.info.solrEndDate);
                if ($scope.info.max_days_allowed) {
                    fDate.setDate(fDate.getDate() - $scope.info.max_days_allowed);
                } else {
                    fDate.setFullYear(fDate.getFullYear() - 10);
                }
                $scope.setFromTo(fDate, new Date($scope.info.solrEndDate));
                // $scope.refresh();
                $scope.dateRangeFilterName = GlobalService.getVal('last10');
                break;
            default :
                // alert("Nothing");
                ModalService.alertBox({
                    msg : 'Nothing'
                });
                $scope.dateRangeFilterName = GlobalService.getVal('customdate');
                break;
            }
        } else {
            $scope.customDateFilter = true;
            $scope.customDateFilterApplied = true;
            $scope.info.quickFilter = false;
            $scope.info.quick = 0;
            $scope.info.uploadedBy = null;
            $scope.dateRangeFilterName = GlobalService.getVal(item);
        }
    };

    // Gets the values from the globals based on the given key.
    $scope.getValue = function(key) {
        return GlobalService.getVal(key);
    };

    // Closes the modal held by $scope.modal
    $scope.hideModal = function() {
        $scope.modal.close();
    };
    $scope.showEventGroup = function(){
        var flag = GlobalService.getVal('event_group_tab');
        if(!flag){
            return false;
        }
        if(!$scope.defaultFacet || !$scope.defaultFacet.selected || !$scope.response || !$scope.response.docs || !$scope.response.docs.length){
            $scope.info.dataTabs = false;
            return false;
        };
        if($scope.info.eventsection == 'event'){
            return true;
        }
        $scope.info.dataTabs = false;
        return false;
    }
    $scope.breadcrumbYearView=function(){
        var d, d1;
        d = new Date($scope.info.fromDate);
        d1 = new Date($scope.info.toDate);
        d.setFullYear(d.getFullYear() - 10);
        $scope.setFromTo(d, d1);
    }
    $scope.breadcrumbMonthView=function(){
        var d, d1;
        d = $scope.info.fromDate;
        d1 = $scope.info.toDate;
        $scope.setFromTo(d, d1);
    }
    $scope.breadcrumbDayView=function(){
        var d, d1;
        d = new Date($scope.info.solrEndDate);
        d1 = new Date($scope.info.solrEndDate);
        $scope.setFromTo(d, d1);
    }

    //Deletes the selected filter permanently
    $scope.deleteFilterRequest = function(filterName) {
        $scope.deleteModal.status = "progress";
        ExplorerService.deleteSavedFilter(filterName).then(function(response) {
            $scope.deleteModal.status = "success";
            if($scope.info.selectedFilterName == filterName) {
                $scope.info.selectedFilterName = "Select View";
            }
            $scope.deleteModal.deleteOperationMsg = "Deleted successfully";
            var details = {
                "View Name" : $scope.deleteModal.filter.name
            };
            UserTrackingService.standard_user_tracking($scope.info.application, $scope.info.events ? "Event" : "Section", 'Delete View', "{\'" + JSON.stringify(details) + "\'}").then(userTrackingSuccess, handleSessionTimeout);

            if ($scope.deleteModal.filter.isDefault) {
                $scope.info.defaultFilterInfo = "";
                $scope.resetFromUI();
            }
            $scope.getSavedFilters();
        }, function(response) {
            $scope.deleteModal.status = "error";
            $scope.deleteModal.deleteOperationMsg = "Error : " + response.data.msg;
            $scope.savedFiltersListNotFound = true;
            handleSessionTimeout(response);

        });
    };
    
    var firstTimeLoaded = false;
    
    $scope.loadDefaultFilter = function() {
        var dashboardView = ExplorerService.getLoadView();
        if(!!dashboardView) {
            $scope.defaultFacet = null;
            if(dashboardView.type == "custom") {
            	if(dashboardView['view']['facet_filters'].hasOwnProperty("obs_url")) {
            		$scope.defaultFacet = {
			            label : dashboardView['view']['facet_filters']['obs_url'][0],
			            selected : true,
			            title : dashboardView['view']['facet_filters']['obs_url'][0],
			            value : ""
			        };
			        delete dashboardView['view']['facet_filters']['obs_url'];
            	}
                var view = dashboardView['view'];
                view.view_name = 'Select View';
                var facet_filters = "";
                angular.forEach(view.facet_filters, function(values, facet) {
                    angular.forEach(values, function(value) {
                        if(facet == 'namespace' && ($scope.sectionsContent[value]["nsType"] == "EVENT" || $scope.sectionsContent[value]["nsType"] == "SESSION")) {
                            facet = 'events';
                        }
                        var tmpString = "`" + facet + (facet == 'namespace' || facet == 'events' ? "^" + $scope.sectionsContent[value]['description'] : "") + "^" + value + "`";
                        facet_filters += (!!facet_filters.length ? ',' : '') + tmpString;
                    });
                });
                view.facet_filters = [facet_filters];
                firstTimeLoaded = true;
                $scope.loadView(view);
            } else if(dashboardView.type == "savedView") {
                $scope.info.dataLoading = true;
                $scope.info.facetsLoading = true;
                ExplorerService.getSavedFilters().then(function(response) {
                    $scope.info.dataLoading = false;
                    $scope.info.facetsLoading = false;
                    var view = $filter('filter')(response.data.Data, {view_name: dashboardView.view}, true) || [];
                    if(view.length == 1) {
                    	if(!!dashboardView.facets) {
                    		view[0].extraFacets = dashboardView.facets;
                    	}
                        $scope.loadView(view[0]);
                    } else {
                        ModalService.alertBox({msg: "View not found"});
                        if(!firstTimeLoaded) {
                            ExplorerService.setLoadView(null);
                            $scope.loadDefaultFilter();
                        } else {
                            firstTimeLoaded = true;
                        }
                    }
                }, function(response) {
                    $scope.info.dataLoading = false;
                    $scope.info.facetsLoading = false;
                });
            }
            ExplorerService.setLoadView(null);
        }
        ExplorerService.getDefaultFilterInfo().then(function(response) {
            var d,
                d1,
                view_name;
            $scope.info.defaultFilterInfo = response.data.Data;
            if ($scope.info.defaultFilterInfo == '') {
                $scope.info.defaultFilterInfo = {};
                if(!dashboardView) {
                    firstTimeLoaded = true;
                    $scope.reset();
                }
            } else if ( typeof $scope.info.defaultFilterInfo === 'object') {
                if(!dashboardView) {
                    firstTimeLoaded = true;
                    $scope.loadView($scope.info.defaultFilterInfo);
                }
            }
        }, function(response) {
            console.error("Unable to fetch default filter.");
            handleSessionTimeout(response);
        });
        
    };

    //Gets the scope of filters
    $scope.getFilterScope = function(filter) {
        if ($scope.info.filterBtn == 'all') {
            return (filter.currentUser || (!filter.currentUser && filter.public));
        } else if ($scope.info.filterBtn == 'my') {
            return filter.currentUser;
        } else {
            return $scope.getFilterOtherScope(filter);
        }
    };

    $scope.getFilterOtherScope = function(filter) {
        return !filter.currentUser && filter.public;
    };

    //Get current user name i.e logged in user name
    $scope.getLoggedInUserName = function() {
        return metaDataService.getUser()['email'];
    };

    /*
     * Filter dropdown
     */
    $scope.getSearchKey = function(str){
        var gbOperators = [' and ', ' or ', ' not '];
        var lastIndex = 0;
        var currentIndex = 0;
        str = str.toLowerCase();
        for(var i=0; i < gbOperators.length; i++) {
            currentIndex = str.lastIndexOf(gbOperators[i]);
            if(currentIndex > lastIndex) {
                lastIndex = currentIndex;
                if(i == 0 && i == 2){
                    lastIndex = lastIndex + 6;
                }else{
                    lastIndex = lastIndex + 5;
                }
            }
        }
        return str.substr(lastIndex , str.length);        
    }

    $scope.getSearchKeyIndex = function(str){
        var gbOperators = [' and ', ' or ', ' not '];
        var lastIndex = -1;
        var currentIndex = 0;
        str = str.toLowerCase();
        for(var i=0; i < gbOperators.length; i++) {
            currentIndex = str.lastIndexOf(gbOperators[i]);
            if(currentIndex > lastIndex) {
                lastIndex = (currentIndex - 1) + gbOperators[i].length;
            }
        }
        return lastIndex;
    }
    $scope.showAutoSuggestDD = function() {
        $scope.info.showDropdown = true;
    }
    $scope.filterSuggest = function() {
        // if ($scope.info.filterSuggest && ($scope.info.filterSuggest.length > 0) && ($scope.info.filterSuggest.length < 2)){
        //     return false;
        // }
        $scope.showAutoSuggestDD();
        $scope.suggestionData = [];
        if ($scope.info.filterSuggest && ($scope.info.filterSuggest.length > 0)) {
            var str = $scope.info.filterSuggest;
            $scope.info.filterSuggestItem = str;

            $scope.info.filterSuggestLatest = str;
            var tmpStr = str;
            var indexOfSpace = tmpStr.lastIndexOf(" ");

            if (indexOfSpace != -1) {
                tmpStr = tmpStr.substr((indexOfSpace + 1), tmpStr.length);
            }

            var keyword = $scope.getSearchKey(str);

            var attributeStr = "";
            
            $scope.info.filterSuggestLoading = true;
            
            if($scope.info.suggestionsPending) {
                $scope.suggestionsDeferred.resolve();
            }
            
            $scope.suggestionsDeferred = $q.defer();
            $scope.info.suggestionsPending = true;
            //check for section: search for '.' at the end
            //if it does not have '.' then search for section
            var sectionSearch = false,  showAllAtr = false;
            if(keyword.indexOf('.') == -1){
                sectionSearch = true;
            }else{  
                //check the last character is '.' or not
                if(keyword.indexOf('.') == (keyword.length - 1)) {
                    showAllAtr = true;
                }else{
                    //read text after '.'
                    var sIndex = keyword.lastIndexOf('.') + 1;
                    var eIndex = keyword.length;
                    attributeStr = keyword.substring(sIndex, eIndex);
                }
                keyword = $scope.info.filterSuggestSelectedSection["table_name"];
            }
            //Load sectons name
            if(sectionSearch && $scope.info.filterSuggestionsSectionsList.length == 0){
                $scope.loadSectionsListForSuggestion(keyword,sectionSearch,attributeStr);
            }else if(!sectionSearch){
                $scope.loadSectionsListForSuggestion(keyword,sectionSearch,attributeStr);
            }else{
                $scope.loadSectionsListForSuggestionApplyFilter(keyword,sectionSearch,attributeStr);
                $scope.info.suggestionsPending = false;
                $scope.info.filterSuggestLoading = false;
            }
            
            //filter saved filter list and display is as suggested filter
            if($scope.savedFiltersListNotLoaded ){
                $scope.loadSavedFilterForSuggestionDD();
                $scope.savedFiltersListNotLoaded = false;
            }else{
                var localStr = $scope.info.filterSuggestItem.toLowerCase();
                $scope.info.filterSavedFilterRemote = $scope.savedFiltersList.filter(function(data) {
                    var localData = data["view_name"].toLowerCase();
                    if(localData.indexOf(localStr) != -1) {
                        return true;
                    }else{
                        return false;
                    }
                });
            }

        } else {
            
            if($scope.info.suggestionsPending) {
                $scope.suggestionsDeferred.resolve();
                $scope.info.filterSuggestLoading = false;
            }

            $scope.info.filterSuggestions = [{
                error:{
                    label : 'Start typing to get suggestions.',
                    dataType : 'none'
                }}];
        }

    };
    $scope.loadSavedFilterForSuggestionDD = function(){
        ExplorerService.getSavedFilters().then(function(response) {
            var responseData = response.data.Data;
            $scope.applySuggesstedFilterOnAllSavedView(responseData);

        }, handleSessionTimeout);
    }
    $scope.applySuggesstedFilterOnAllSavedView = function(responseData){
        var visibleFilters = [];
        for (var i in responseData) {
            if (responseData[i].created_by == $scope.getLoggedInUserName() || (responseData[i].created_by != $scope.getLoggedInUserName() && responseData[i].public == true)) {
                visibleFilters.push(responseData[i]);
            }
        }

        if (visibleFilters) {
            for (var i = 0; i < visibleFilters.length; i++) {
                var tmpData = visibleFilters[i];
                if (tmpData.desc) {
                    var rs = tmpData.desc;
                    var rt = rs.replace(/&#39;/g, '').replace(/\%20/g, ' ');
                    visibleFilters[i].desc = rt;
                }
            }
            $scope.savedFiltersList = visibleFilters;
            var localStr = $scope.info.filterSuggestItem.toLowerCase();
            $scope.info.filterSavedFilterRemote = visibleFilters.filter(function(data) {
                var localData = data["view_name"].toLowerCase();
                if(localData.indexOf(localStr) != -1) {
                    return true;
                }else{
                    return false;
                }
            });
        }
    }
    $scope.loadSectionsListForSuggestion = function(keyword,sectionSearch, attributeStr){        
        ExplorerService.suggestFilterSearch($scope.info.eventsection, keyword,  sectionSearch, $scope.suggestionsDeferred).then(function(response) {
            $scope.info.suggestionsPending = false;
            $scope.info.filterSuggestLoading = false;
            if (!response.data.Data.length || response.data.Data.hasOwnProperty('gb_error')) {
                $scope.info.filterSuggestions = [{
                    error: {
                        label : 'No matching suggestions.',
                        dataType : 'none'
                    }
                }];
            } else {
                if(response.data.Data.length == 0){
                    $scope.info.filterSuggestions = [{
                        error: {
                            label : 'No matching suggestions.',
                            dataType : 'none'
                        }
                    }];
                }
                if(sectionSearch){
                    $scope.info.filterSuggestionsSectionsList = response.data.Data;
                }else{
                    $scope.info.filterSuggestionsAttriList = response.data.Data;
                }                
                $scope.loadSectionsListForSuggestionApplyFilter(keyword,sectionSearch, attributeStr);
            }

        }, function(response) {
            if(response.status != -1) {
                $scope.info.filterSuggestLoading = false;
            }
            $scope.info.suggestionsPending = false;
            $scope.info.filterSuggestLoading = false;
            handleSessionTimeout(response);
        });
    }
    $scope.loadSectionsListForSuggestionApplyFilter = function(keyword,sectionSearch,attributeStr){
        var tempData;
        if(sectionSearch){
            $scope.info.filterSuggestType = 'sections';
            tempData = $scope.info.filterSuggestionsSectionsList.filter(function(data){
              
                if(!data["namespace_desc"]) {
                    return false;
                }
                var localData = data["namespace_desc"].toLowerCase();
                var localStringData = keyword.toLowerCase();
                if(localData.indexOf(localStringData) != -1){
                    return true;
                }else{
                    return false;
                }
            });
        }else{
            $scope.info.filterSuggestType = 'attributes';            
            tempData = $scope.info.filterSuggestionsAttriList.filter(function(data){
                for(var key in data){
                    var localData = data[key]["attribute_label"].toLowerCase();
                    var localStringData = attributeStr.toLowerCase();
                    if(localData.indexOf(localStringData) != -1){
                        return true;
                    }else{
                        return false;
                    }
                    break;
                }
            });
        }
        if($scope.info.filterSuggestions.length == 0) {
            $scope.info.filterSuggestions = [{
            error: {
                label : 'No matching suggestions.',
                dataType : 'none'
                }
            }];
        }else{
            $scope.suggestionData = tempData;
            if(tempData.length == 0){
                $scope.info.filterSuggestions = [{
                    error: {
                        label : 'No matching suggestions.',
                        dataType : 'none'
                    }
                }];
                $scope.suggestionPaginationReset();
                return;
            }
            $scope.suggestionPaginationReset();
            $scope.suggestionPaginationLoadData();
        }
    }
    $scope.suggestionPagination = {
        pageSize : 50,
        page : 0,
        msg : "",
        visible: false,
        next: function(){
            this.page++;
            if(this.page >= Math.ceil(parseInt($scope.suggestionData.length/this.pageSize))){
                this.page = Math.ceil(parseInt($scope.suggestionData.length/this.pageSize));
            }
            $scope.suggestionPaginationLoadData();
        },
        prev: function(){
            this.page--;
            if(this.page <=0){
                this.page = 0;
            }
            $scope.suggestionPaginationLoadData();
        },
        first: function(){
            this.page = 0;
            $scope.suggestionPaginationLoadData();
        },
        last: function(){
            this.page = Math.ceil(parseInt($scope.suggestionData.length/this.pageSize));
            $scope.suggestionPaginationLoadData();
        }
    };
    $scope.suggestionPaginationReset = function(){
        $scope.suggestionPagination.page = 0;
    }
    $scope.suggestionPaginationLoadData = function(){
        var endIndex = ($scope.suggestionPagination.page + 1) * $scope.suggestionPagination.pageSize;
        var startIndex = endIndex - $scope.suggestionPagination.pageSize;
        if( $scope.suggestionData.length <= endIndex){
            endIndex = $scope.suggestionData.length;
        }
        if($scope.suggestionData.length > $scope.suggestionPagination.pageSize){
            $scope.suggestionPagination.visible = true;
        }else{
            $scope.suggestionPagination.visible = false;
        }
        
        $scope.suggestionPagination.msg = (startIndex + 1) + " - " + endIndex + " of " + $scope.suggestionData.length;
        $scope.info.filterSuggestions = $scope.suggestionData.slice(startIndex, endIndex);
    }
    //filter locally saved filter - most resent saved filter-custom filter
    $scope.getMostRecentQueries = function(){
        var filteredResult = [];
        var localStr = $scope.info.filterSuggestItem.toLowerCase();
        filteredResult = $scope.info.savedFilters.filter(function(data){
            var localData = data.toLowerCase();
            if(localData.indexOf(localStr) != -1) {
                return true;
            }else{
                return false
            }
        });
        return filteredResult;
    }
    $scope.updateMatchingSection = function(suggest) {
        $scope.info.filterSuggestType = 'sections';
        $scope.info.filterSuggestSelectedSection = suggest;
        if (suggest.type == 'none')
            return;

        var tmpStr = $scope.info.filterSuggestLatest;
        var indexOfSpace = $scope.getSearchKeyIndex(tmpStr);// tmpStr.lastIndexOf(" ");
        
        $scope.logMatching('Matching sections', suggest.namespace_desc + "." + suggest.label);

        if (indexOfSpace != -1) {

            var patt = new RegExp(/[^'(.)+'$]/);
            var res = patt.test(tmpStr);
            var tmpStr2 = tmpStr.substr((indexOfSpace + 1), tmpStr.length);
            tmpStr = tmpStr.substr(0, (indexOfSpace + 1));

            if (res && tmpStr2.length > 0) {

                $scope.info.filterSuggest = tmpStr + '\'{' + suggest.namespace_desc + '}.';
            } else {

                $scope.info.filterSuggest = tmpStr;
            }

        } else {

            $scope.info.filterSuggest = '\'{' + suggest.namespace_desc + '}.';
        }
        $scope.filterSuggest();
    };

    $scope.updateMatchingAttr = function(suggest) {
        $scope.info.filterSuggestType = 'attributes';
        if (suggest.dataType == 'none')
            return;

        var tmpStr = $scope.info.filterSuggestLatest;
        var indexOfSpace = tmpStr.lastIndexOf("}");
        
        $scope.logMatching('Matching attributes', $scope.info.filterSuggestSelectedSection.namespace_desc + "." + suggest.attribute_label);

        if (indexOfSpace != -1) {

            var patt = new RegExp(/[^'(.)+'$]/);
            var res = patt.test(tmpStr);
            var tmpStr2 = tmpStr.substr((indexOfSpace + 1), tmpStr.length);
            tmpStr = tmpStr.substr(0, (indexOfSpace + 1));

            if (res && tmpStr2.length > 0) {

                $scope.info.filterSuggest = tmpStr + '.' +suggest.attribute_label + '\'';
            } else {

                $scope.info.filterSuggest = tmpStr;
            }

        } else {

            $scope.info.filterSuggest = '.' + suggest.attribute_label + '\'';
        }

    };

    $scope.$watch('info.filterSuggest', function() {
        $scope.info.filterSuggest = $scope.info.filterSuggest.replace(/&#39;/g, '');
    });

    $scope.checkDateRange = function() {
        //Handling compound search case
        if ($scope.info.filterSuggest.indexOf('CompoundSearch=') != -1 && $scope.info.sections) {
            // alert(GlobalService.getVal('events_only'));
            ModalService.alertBox({
                msgKey : 'events_only'
            });
            return;
        }
        var oneDay = 24 * 60 * 60 * 1000;
        if (Math.round(Math.abs(($scope.info.toDate.getTime() - $scope.info.fromDate.getTime()) / (oneDay))) > $scope.info.max_days_allowed && $scope.info.max_days_allowed > 0) {
            $scope.msg = "Your date range exceeds " + $scope.info.max_days_allowed + " days. Please restrict your queries to " + $scope.info.max_days_allowed + " days or lesser.<br>Click Ok to get data for " + $scope.info.max_days_allowed + " days or click Cancel and change the date range.";
            $scope.modal = ModalService.openModal("partials/date_range_exceeded.html", $scope, false, 'static');
        } else {
            //Check from current date
            var noOfDaysFromCurrentDate = Math.round(Math.abs($scope.info.solrEndDate.getTime() - $scope.info.fromDate.getTime()) / (oneDay));
            if (noOfDaysFromCurrentDate > $scope.info.max_days_allowed && $scope.info.max_days_allowed > 0) {
                $scope.msg = "You are querying data older than " + $scope.info.max_days_allowed + " days, your response will be slower. Are you sure to continue?.";
                $scope.modal = ModalService.openModal("partials/expensive_query.html", $scope, false, 'static');
            } else {
                $scope.setCookiesFrMostRecentSearch();
            }
        }

    };
    
    $scope.confirmDateRangeSelect = function() {
        var oneDay = 24 * 60 * 60 * 1000;
        $scope.info.fromDate = new Date($scope.info.toDate.getTime() - ($scope.info.max_days_allowed * oneDay));
        $scope.setCookiesFrMostRecentSearch();
    };

    $scope.setCookiesFrMostRecentSearch = function() {
        $scope.info.page['current'] = 0;
        if ($scope.customDateFilter) {
            $scope.customDateFilterApplied = true;
        }
        if (!$scope.info.filterSuggest || $scope.info.filterSuggest == "") {
            $scope.refresh();
            return;
        }
        if (!$scope.isDuplicateMostRecentSearch($scope.info.filterSuggest)) {
            if ($cookies.savedFilters) {
                $cookies.savedFilters += "#@#" + $scope.info.filterSuggest;
            } else {
                $cookies.savedFilters = $scope.info.filterSuggest;
            }
            $scope.info.savedFilters = $cookies.savedFilters.split("#@#");
        }
        $scope.info.notFacetSearch = true;
        $scope.refresh();
    };

    $scope.isDuplicateMostRecentSearch = function(val) {
        if (!$scope.info.savedFilters || !$scope.info.savedFilters.length)
            return false;
        var len = $scope.info.savedFilters.length;
        for (var i = 0; i < len; i++) {
            if (val == $scope.info.savedFilters[i]) {
                return true;
            }
        }

        return false;
    };
    
    $scope.createRule = function(namespace) {
    	ExplorerService.setRuleSection(namespace);
    	ExplorerService.setRuleText("");
    	$scope.$parent.createRuleFromExplorer();
    };

    $scope.openExportPopup = function() {
        $scope.info.exportPopupPage = $scope.info.page.current+1;
        $scope.modalInstance = ModalService.openModal('partials/explorer/exportcsv.html', $scope);
    };
    $scope.openFacetStatsPopup = function(facet,index) {
        $scope.facetStats = facet.label;
        var data = [];
        var sumValue = 0;
        $scope.meanFacetValue = 0;
        var sumstdDev = 0;
        for(i=0;i<facet.data.length;i++){
            data.push(facet.data[i]);
            sumValue = sumValue+facet.data[i].value;
        }
        $scope.facetValueSum = sumValue;
        $scope.meanFacetValue = sumValue/facet.data.length;
        for(i=0;i<data.length;i++){
            data[i].perc = (data[i].value*100/sumValue).toFixed(2);
            data[i].stdDev = (data[i].value - $scope.meanFacetValue)*(data[i].value - $scope.meanFacetValue);
        }
        $scope.facetData = data;
        var top10 = data.sort(function(a, b) { return a.value < b.value ? 1 : -1; }).slice(0, 10); 
        var bottom10 = data.sort(function(a, b) { return a.value > b.value ? 1 : -1; }).slice(0, 10);
        for(i=0;i<data.length;i++){
            sumstdDev = Math.floor(sumstdDev + data[i].stdDev);
        }
        $scope.stdDevValue = Math.sqrt(sumstdDev/data.length); 
        $scope.top10facet = top10.sort(function (a, b) {
            return d3.descending(a.value, b.value);
        });
        $scope.bottom10facet = bottom10.sort(function (a, b) {
            return d3.descending(a.value, b.value);
        });
        $scope.maxFacetValue = $scope.top10facet[0].value;
        $scope.minFacetValue = $scope.bottom10facet[0].value;
        UserTrackingService.standard_user_tracking($scope.info.application, $scope.info.events ? "Event" : "Section", "Open facet stats popup", JSON.stringify(facet)).then(userTrackingSuccess, handleSessionTimeout);
        $scope.modalInstance = ModalService.openModal('partials/explorer/facetstats.html', $scope);
    };
    $scope.downloadCsv = function() {
        $scope.info.dataLoading = true;
        if($scope.csvpage.noOfRecordsCsv == 0 || $scope.csvpage.noOfRecordsCsv < GlobalService.getVal("minNoOFRecords") || $scope.csvpage.noOfRecordsCsv > GlobalService.getVal("maxNoOFRecords")) {
            $scope.csvdownloaderror = true;
            $scope.info.dataLoading = false;
        }else {
            ExplorerService.updateLimit($scope.csvpage.noOfRecordsCsv).then(function(response) {
                if($scope.csvpage.pagevalue == "current"){
                    $scope.logExportEvents(false);
                    $scope.getExportUrl(0);
                }else {
                    $scope.logExportEvents(true);
                    $scope.getExportUrl(1);
                }
                UserTrackingService.standard_user_tracking($scope.info.application, "Events", "Download CSV", "Count:"+$scope.csvpage.noOfRecordsCsv);
                setTimeout(function(){$scope.info.dataLoading = false;}, 2000);
                $scope.csvdownloaderror = false;                
                GlobalService.setVal('events_export_limit', $scope.csvpage.noOfRecordsCsv);
                $scope.events_export_limit = GlobalService.getVal('events_export_limit');
                $scope.closeModal();
            });
        }
    };
    
    $scope.logShowTime = function() {
        var details = {};
        var activity = ($scope.info.showOTime ? 'Show' : 'Hide') + ' Original Time';
        UserTrackingService.standard_user_tracking($scope.info.application, $scope.info.events ? "Event" : "Section", activity, JSON.stringify(details)).then(userTrackingSuccess, handleSessionTimeout);
    };
    
    $scope.logExportEvents = function(firstPage) {
        var activity = firstPage ? 'Export CSV from 1st page' : 'Export CSV from current page';
        var details = {};
        UserTrackingService.standard_user_tracking($scope.info.application, $scope.info.events ? "Event" : "Section", activity, JSON.stringify(details)).then(userTrackingSuccess, handleSessionTimeout);
    };
    
    $scope.logStatistics = function() {
        var details = {"oldest data" :  moment($scope.$scope.info.display_obs_min).format("YYYY-MM-DD HH:mm:ss") ,
                        "Newest data": moment($scope.info.display_obs_max).format("YYYY-MM-DD HH:mm:ss")};
        UserTrackingService.standard_user_tracking($scope.info.application, $scope.info.events ? "Event" : "Section", 'Show statistics', JSON.stringify(details)).then(userTrackingSuccess, handleSessionTimeout);
    };
    
    $scope.logShowMoreLess = function(more) {
        var details = {};
        var activity = !!more ? 'Show More' : 'Show Less';
        UserTrackingService.standard_user_tracking($scope.info.application, $scope.info.events ? "Event" : "Section", activity, JSON.stringify(details)).then(userTrackingSuccess, handleSessionTimeout);
    };
    
    $scope.logToggleTimeline = function(showTimeline) {
        var details = {};
        details['Timeline'] = !!showTimeline ? 'Show Timeline' : 'Hide Timeline';
        var activity = 'Toggle Timeline';
        UserTrackingService.standard_user_tracking($scope.info.application, $scope.info.events ? "Event" : "Section", activity, JSON.stringify(details)).then(userTrackingSuccess, handleSessionTimeout);
    };
    
    $scope.logAutoOpen = function(autoOpen) {
        if(!autoOpen) {
            $scope.info.showDropdown = false;
        }
        var details = {};
        var activity = !!autoOpen ? 'Turn On Auto-Open' : 'Turn Off Auto-Open';
        UserTrackingService.standard_user_tracking($scope.info.application, $scope.info.events ? "Event" : "Section", activity, JSON.stringify(details)).then(userTrackingSuccess, handleSessionTimeout);
    };
    
    $scope.logMatching = function(activity, detail) {
        var details = {"Detail": detail};
        UserTrackingService.standard_user_tracking($scope.info.application, $scope.info.events ? "Event" : "Section", activity, JSON.stringify(details)).then(userTrackingSuccess, handleSessionTimeout);
    };
    
    function userTrackingSuccess(response) {
        
    };
    $scope.searchFromLogvault = function(){
        $scope.info.defaultFilterInfo = {};
        $scope.selectedFacets = {};
        //reset view
        $scope.info.pristine = true;        
        $scope.info.selectedFilterName = "Select View";
        $scope.info.clearFilter = true;
        $scope.customDateFilter = true;
        $scope.customDateFilterApplied = true;
        $scope.info.page['current'] = 0;

        //$scope.info.pristine = false;
        // Checking for bundle name
        var bundleData = ExplorerService.getBundleData();
        $scope.defaultFacet = {
            label : bundleData["bundlename"],
            selected : true,
            title : bundleData["bundlename"],
            value : ""
        };
        if(!$scope.info.hasSections){
            $scope.info.events = true;
        }
        //show selected facet                   
        bundleId = bundleData['bundle_id'];
        ExplorerService.getDateRange(bundleId).then(function(response) {
            var responseData = response.data.Data;            
            fDate =  metaDataService.getTodayDate();// moment(moment.utc().format('YYYY-MM-DD HH:mm:ss'), 'YYYY-MM-DD HH:mm:ss').toDate();
            fDate.setYear(responseData.obs_min.split('-')[0]);
            fDate.setMonth(responseData.obs_min.split('-')[1] - 1);
            fDate.setDate(responseData.obs_min.split('-')[2].substring(0, 2));
            fDate.setHours(responseData.obs_min.split('-')[2].substring(3, 5));
            fDate.setMinutes(responseData.obs_min.split('-')[2].substring(6, 8));
            fDate.setSeconds(responseData.obs_min.split('-')[2].substring(9, 11));
            // Setting minus one day.
            fDate.setDate(fDate.getDate() - 1);
            tDate = metaDataService.getTodayDate();//moment(moment.utc().format('YYYY-MM-DD HH:mm:ss'), 'YYYY-MM-DD HH:mm:ss').toDate();
            tDate.setYear(responseData.obs_max.split('-')[0]);
            tDate.setMonth(responseData.obs_max.split('-')[1] - 1);
            tDate.setDate(responseData.obs_max.split('-')[2].substring(0, 2));
            tDate.setHours(responseData.obs_max.split('-')[2].substring(3, 5));
            tDate.setMinutes(responseData.obs_max.split('-')[2].substring(6, 8));
            tDate.setSeconds(responseData.obs_max.split('-')[2].substring(9, 11));
            // Setting plus one day.
            tDate.setDate(tDate.getDate() + 2);
            $scope.info.logBundleSearch = true;
            if($scope.info.explorerDataDuration !== ''){
                $scope.info.fromDateOfLogVault = fDate;
                $scope.info.dateRestrictionMinDate = fDate;
                $scope.info.dateRestrictionMaxDate = $scope.todayDate;
            }
            $scope.setFromTo(fDate, tDate);
        }, function(response) {
            console.error(response);
        });
    }

    $scope.eventGroups = (function(){
        return{
            originalRecors : [],
            records: [],
            currentPageData: [],
            pageSize : [{
                value: 20,
                active: false,
                disabled: false
            },{
                value: 40,
                active: false,
                disabled: true
            },{
                value: 60,
                active: false,
                disabled: true
            },{
                value: 80,
                active: false,
                disabled: true
            },{
                value: 100,
                active: false,
                disabled: true
            }],
            inlineSearchValue : '',
            countColumnSort: '',
            urlPart : '',
            queryParam : '',
            filterSuggest : '',
            loading: false,
            noDataFound: false,
            pagination: {
                offset: 20,
                defaultOffset: 20,
                currentPage: 1,
                totalPages: 1,
                startIndex: 0,
                pages: [{
                    value : 1,
                    active: true
                }]
            },
            api: function(){
                var me = this, isDrillDown= ExplorerService.getDrillDown();
                var startDate = $scope.getFrom(isDrillDown);
                var endDate = $scope.getTo(isDrillDown);
                var totalRec = $scope.info.page['total'];
                var urlPart = startDate + '/' + endDate + '/' + totalRec;
                //if there no change in url param, do nothings
                if(!me.isChanged()){
                    return;
                }
                me.filterSuggest = $scope.info.filterSuggest;
                me.queryParam = $scope.info.queryParam;
                me.urlPart = urlPart;
                me.loading = true;
                ExplorerService.getEventGroups(urlPart, $scope.info.queryParam , $scope.info.filterSuggest).then(function(response) {
                var responseData = response.data.Data;
                    me.set(responseData);
                    me.loading = false;
                    if(!responseData || !responseData.length || responseData.length == 0){
                        me.noDataFound = true;
                    }else{
                        me.noDataFound = false;
                    }
                    me.resetPagination();
                }, function(){
                    me.set([]);
                    me.loading = false;
                    me.noDataFound = true;
                    me.resetPagination();
                });
            },
            isChanged : function(){
                var me = this;
                var startDate = $scope.getFrom();
                var endDate = $scope.getTo();
                var totalRec = $scope.info.page['total'];
                var urlPart = startDate + '/' + endDate + '/' + totalRec;
                //if there no change in url param, do nothings
                if(urlPart === me.urlPart && me.filterSuggest === $scope.info.filterSuggest && me.queryParam === $scope.info.queryParam){
                    return false;
                }
                return true;
            },
            set: function(data){
                var me = this;                
                me.originalRecors = data;
                me.records = data;
            },
            get: function(){
                return this.records;
            },
            applyInlineFilter: function(text){
                var me = this;
                if(text){
                    me.records = me.originalRecors.filter(function(item){
                        if(item['eventType'].toLowerCase().indexOf(text.toLowerCase()) != -1) return true;
                        return false;
                    });
                }else{
                    me.resetInlineFilter();
                }
                me.resetPagination();
            },
            resetInlineFilter: function(){
                var me = this;
                me.records = angular.copy(me.originalRecors);
            },
            resetPagination: function(size){
                var me = this, cPage;
                var totalRows = me.records.length;
                //enable/disabled page size button
                for(var i=0;i<me.pageSize.length;i++){
                    cPage = me.pageSize[i];
                    if(totalRows/cPage.value > 1){
                        cPage.disabled = false;
                    }else{
                        cPage.disabled = true;                        
                    }
                }
                //highlight pagesize button
                if(size){
                    me.pagination.offset = size;
                    for(var i=0;i<me.pageSize.length;i++){
                        if(me.pageSize[i]['value'] == size){
                            me.pageSize[i]['active'] = true;
                        }else{
                            me.pageSize[i]['active'] = false;
                        }
                    }
                }else{
                    //reset page size highlight
                    for(var i=0;i<me.pageSize.length;i++){
                        me.pageSize[i]['active'] = false;
                    }
                    me.pageSize[0].active = true;
                    me.pagination.offset = me.pagination.defaultOffset;
                }
                me.pagination.currentPage = 1;
                //load data
                me.updateDataToShow();
                //reset page numbers
                me.pagination.totalPages = Math.ceil(me.records.length/me.pagination.offset);
                me.pagination.pages = [];
                for(var i=0;i<me.pagination.totalPages;i++){
                    me.pagination.pages.push({value: (i+1), active: false});
                }
                if(me.pagination.pages.length){
                    me.pagination.pages[0]['active'] = true;
                }
            },
            updateDataToShow: function(){
                var me = this, sIndex, eIndex;
                sIndex = (me.pagination.currentPage - 1) * me.pagination.offset;
                eIndex = sIndex + me.pagination.offset;
                if(me.records.length > 0){
                    me.currentPageData = me.records.slice(sIndex,eIndex);
                }
            },
            changePageSize: function(cPage){
                if(cPage.disabled) return false;
                var me = this;
                me.resetPagination(cPage.value);
            },
            changePage: function(page){
                var me = this;
                me.pagination.currentPage = page.value;
                me.updateDataToShow();
                //hightlight page button                
                for(var i=0;i<me.pagination.pages.length;i++){
                    if(me.pagination.pages[i]['value'] == page.value){
                        me.pagination.pages[i]['active'] = true;
                    }else{
                        me.pagination.pages[i]['active'] = false;
                    }
                }

            },
            sortCountColumn: function(){
                var me = this, dir;     
                if(!me.countColumnSort){
                    me.countColumnSort = 'fa-sort-numeric-asc';
                    dir = 'asc';
                }else if(me.countColumnSort == 'fa-sort'){
                    me.countColumnSort = 'fa-sort-numeric-asc';
                    dir = 'asc';
                }else if (me.countColumnSort == 'fa-sort-numeric-desc'){
                    me.countColumnSort = 'fa-sort-numeric-asc';
                    dir = 'asc';
                }else if(me.countColumnSort == 'fa-sort-numeric-asc'){
                    me.countColumnSort = 'fa-sort-numeric-desc';
                    dir = 'desc';
                }
                me.sortData(dir);
            },
            sortData: function(dir){
                var me = this;
                if(!me.records.length) return false;
                me.records.sort(function(item1, item2){
                    if(dir == 'asc'){
                        return (parseInt(item1.count) - parseInt(item2.count));
                    }else{
                        return (parseInt(item2.count) - parseInt(item1.count));                     
                    }
                });
                me.updateDataToShow();
            },
            openInstanceViewer: function(params){
                var instance,title, type;
                type = 'EVENT_GROUP';
                title = GlobalService.getVal("event_group_tab_label");
                instance = {
                    "type" : type,
                    "title" : title,
                    "app" : $scope.info.application,
                    "module" : "Event",
                    "data" : {'result':params}
                };
                InstanceHandler.addInstance(instance, $scope);
            }
        }
    })();
    $scope.logreduceMinLimit= GlobalService.getVal('event_group_tab_confirm_limit_min');
    $scope.logreduceMaxLimit= GlobalService.getVal('event_group_tab_confirm_limit_max');
    $scope.logreduceMaxLimitMsg = GlobalService.getVal('event_group_tab_confirm_limit_min_msg');
    $scope.loadEventGroups= function(){
        if($scope.info.dataTabs) return;
        //check for the limit
        if($scope.info.page['total'] >= $scope.logreduceMinLimit && $scope.info.page['total'] <= $scope.logreduceMaxLimit){
            $scope.showEventGroupChangeConfirmMin();
        }else if($scope.info.page['total'] > $scope.logreduceMaxLimit){
            $scope.showEventGroupChangeConfirmMax();
        }else{
            $scope.initiateLogReduce();
        }
    };
    $scope.initiateLogReduce = function(){
        $scope.info.dataTabs = true;
        $scope.eventGroups.api();
        if($scope.modalInstance){
            $scope.modalInstance.close();
        }
    };
    $scope.showEventGroupChangeConfirmMin = function(){
        $scope.logreduceMaxLimitMsg = GlobalService.getVal('event_group_tab_confirm_limit_min_msg');
        $scope.modalInstance = ModalService.openModal('partials/explorer/event_group_confirmation.html', $scope);
    };
    $scope.showEventGroupChangeConfirmMax = function(){
        $scope.logreduceMaxLimitMsg = GlobalService.getVal('event_group_tab_confirm_limit_max_msg');
        $scope.modalInstance = ModalService.openModal('partials/explorer/event_group_confirmation.html', $scope);
    };
    $scope.closeModal = function(){
        $scope.modalInstance.close();
        if($scope.events_export_limit == undefined || $scope.events_export_limit == 0) {
            $scope.csvpage.noOfRecordsCsv = 1;
        }else {
            $scope.csvpage.noOfRecordsCsv = $scope.events_export_limit;
        }
        $scope.csvdownloaderror = false;
    };
    $scope.downloadFacetsData= function(facetsdata){
        var facets = angular.copy(facetsdata);
        var data = [], tmp = [], row = [];
        for(var i=0;i<facets.length;i++){
            if(facets[i]['data'] && facets[i]['data'].length > 0){
                tmp = facets[i]['data'];
                row = [];
                for(var j=0;j<tmp.length;j++){                    
                    if(tmp[j].key != 'obs_url' && (tmp[j].label!='Section Name' || $scope.info.eventsection=='section')){
                        row.push(tmp[j]);
                    }
                }
                if(row.length > 0){
                    data = data.concat(row);
                }
            }
        }
        data.forEach(function(a){ 
            delete a.selected;
            delete a.key;
            a['Facet Name'] = a.title;
            delete a.title;
            a['Facet Identifier'] = a.label;
            delete a.label;
            a['Number of results'] = a.value;
            delete a.value;
        });
        var graphdata = angular.copy($scope.d3Data);
        var graphdataTitle = graphdata[0]['title'];

        $timeout(function() {
            JSONToCSVConvertor(data, "Facet Report", graphdata, graphdataTitle);
        }, 0);

        UserTrackingService.standard_user_tracking($scope.info.application, 'Explorer', 'Export csv', JSON.stringify({"activity":"Export as csv"})).then(function (response) {

        }, handleSessionTimeout);

    };
    var JSONToCSVConvertor = function(JSONData, ReportTitle, graphdata, graphdataTitle) {
        //If JSONData is not an object then JSON.parse will parse the JSON string in an Object
        var arrData = typeof JSONData != 'object' ? JSON.parse(JSONData) : JSONData;
        
        var CSV = '';
        var columnHeader = [];
        var row = "",tmp;
        //Set Report title in first row or line
        
        CSV += ReportTitle + '\r\n\n';
        ShowLabel = true;
        //This condition will generate the Label/Header
        if (ShowLabel) {
            
            //This loop will extract the label from 1st index of on array
            for (var index in arrData[0]) {
                columnHeader.push(index);
                //Now convert each value to string and comma-seprated
                row += index + ',';
            }

            row = row.slice(0, -1);
            
            //append Label row with line break
            CSV += row + '\r\n';
        }
        //undeline header
        row = "";
        for(var index =0; index<columnHeader.length;index++) {
            row += '"----------------------------------",';
        }
        CSV += row + '\r\n';
        //1st loop is to extract each row
        for (var i = 0; i < arrData.length; i++) {
            var row = "";
            
            //2nd loop will extract each column and convert it in string comma-seprated
            for (var index =0; index<columnHeader.length;index++) {
                row += '"' + arrData[i][columnHeader[index]] + '",';
            }

            row.slice(0, row.length - 1);
            
            //add a line break after each row
            CSV += row + '\r\n';
        }

        if(graphdataTitle && graphdata.length){
            CSV += '\r\n' + graphdataTitle + '\r\n';
            CSV += '"----------------------------------",'+ '\r\n';
            for(var i=0;i<graphdata.length;i++){
                row = '';
                tmp = graphdata[i];
                row += '"' + tmp.name + '",' + '"' + tmp.value + '",';
                CSV += row + '\r\n';
            }
        }

        if (CSV == '') {        
            alert("Invalid data");
            return;
        }   
        
        //Generate a file name
        var fileName; //= "facets";
        //this will remove the blank-spaces from the title and replace it with an underscore
        fileName = ReportTitle.replace(/ /g,"_");   
        
        //Initialize file format you want csv or xls
        var uri = 'data:text/csv;charset=utf-8,' + escape(CSV);
        
        // Now the little tricky part.
        // you can use either>> window.open(uri);
        // but this will not work in some browsers
        // or you will not get the correct file extension    
        
        //this trick will generate a temp <a /> tag
        var link = document.createElement("a");    
        link.href = uri;
        
        //set the visibility hidden so it will not effect on your web-layout
        link.style = "visibility:hidden";
        link.download = fileName + ".csv";
        
        //this part will append the anchor tag and remove it after automatic click
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
    $scope.showMoreOption = function(data){
        return data.length > $scope.info.facetLimit;
    };

    ExplorerService.getSavedFilters().then(function(response) {
        $scope.savedFiltersList = response.data.Data;
    }, function(response) {
        $scope.savedFiltersListLoading = false;
        $scope.savedFiltersListNotFound = true;
        handleSessionTimeout(response);
    });
}])
.controller('ExplorerTabCtrl', ['$scope', 'ModalService', 'GlobalService', 'AppService', 'ExplorerService', '$timeout',
function($scope, ModalService, GlobalService, AppService, ExplorerService, $timeout) {
    $scope.maxExplorerTabChar = GlobalService.getVal('maxExplorerTabChar');
    $scope.justforflag = {};
    $scope.justforflag.stillloading = false;
    $scope.tabList = [
        {
            id: "tab1",
            name: "Default",
            editMode: false
        }
    ];
    $scope.activeTab = $scope.tabList[0];
    $scope.getDisableTabStatus = function(tab) {
        if($scope.justforflag.stillloading) {
            return true;
        }else {
            if(tab != undefined && tab.id == $scope.activeTab.id){
                return false;    
            }
            for(i=0; i<$scope.tabList.length;i++){
                if($scope.tabList[i].editMode){
                    return true;
                }
            }
            return false;
        }
    }
    $scope.addNewTab = function(){
        if($scope.getDisableTabStatus()){
            return
        }else {
            for(i=0; i<$scope.tabList.length;i++){
                $scope.tabList[i].editMode = false;
            }
            var idList = [];
            for(i=0; i<$scope.tabList.length;i++){
                idList.push($scope.tabList[i].id);
            }
            do {
                var newId = "tab"+parseInt(Math.floor(Math.random() * 100));
            }
            while (idList.indexOf(newId) != -1);
            var obj = {
                id: newId,
                name: "Explorer Tab",
                editMode: false
            }
            ExplorerService.setBundleData(null)
            $scope.tabList.push(obj);
            $scope.activeTab = obj;
        }
    }
    $scope.enableEditMode = function(tab){
        for(i=0;i<$scope.tabList.length;i++){
            if($scope.tabList[i].id == tab.id){
                if(tab.id == "tab1" || tab.id != $scope.activeTab.id){
                    $scope.tabList[i].editMode = false;
                }else {
                    $scope.tabList[i].editMode = true;
                }
            }
        }
    }
    $scope.getDisableButtonStatus = function(tab) {
        if(tab.name == ""){
            return true;
        }else {
            return /^\s+$/.test(tab.name);
        }
    }
    $scope.changeTab = function(tab){
        if($scope.getDisableTabStatus()){
            return;
        }else {
            for(i=0; i<$scope.tabList.length;i++){
                if(tab.id != $scope.tabList[i].id){
                    $scope.tabList[i].editMode = false;
                }
            }
            $scope.activeTab = tab;
        }
    }
    $scope.getMaxTabs = function(){
        return GlobalService.getVal('maxExplorerTabs') > $scope.tabList.length;
    }
    $scope.closeTab = function(tab){
        var titleObj = {msg:"Close Tab"};
        var msgObj = {msg:"Do you want to close this tab?"};
        var modalInstance = ModalService.confirmationBox(titleObj, msgObj, "Yes", "No");
        modalInstance.result.then(function(response) {
            for(i=0; i<$scope.tabList.length;i++){
                if($scope.tabList[i].id == tab.id){
                    $scope.tabList.splice(i,1);
                    $scope.activeTab = $scope.tabList[i-1];
                    break;
                }
            }
        }, function(response) {
            
        });
    }
}])
.controller('MoreFacetCtrl', ['$scope', 'ModalService', 'GlobalService', 'AppService', 'ExplorerService', '$timeout',
function($scope, ModalService, GlobalService, AppService, ExplorerService, $timeout) {
    var ctrl = this;
    ctrl.facetList = [];
    ctrl.inlineSearch = "";
    ctrl.inlineSearchText = "";
    ctrl.tempList = [];
    ctrl.tempObject = null;
    ctrl.loading = true;
    ctrl.sortByAlpha = true;
    ctrl.facetGrouped = {
        '#':[],'A':[],'B':[],'C':[],'D':[],'E':[],'F':[],'G':[],'H':[],
        'I':[],'J':[],'K':[],'L':[],'M':[],'N':[],'O':[],'P':[],'Q':[],
        'R':[],'S':[],'T':[],'U':[],'V':[],'W':[],'X':[],'Y':[],'Z':[]
    };
    
    ctrl.resetfacetGroup = function(){
        var keys = Object.keys(ctrl.facetGrouped);
        keys.map(function(item){
            if(ctrl.facetGrouped[item].length > 0){
                ctrl.facetGrouped[item] = [];
            }
        })
    };
    ctrl.loadFacetGroup = function (reset) {
        if (!reset) {
            //load data localy
            ctrl.tempObject = $scope.$parent.getSelectedFacetData(ctrl.findex);
            if (ctrl.tempObject && ctrl.tempObject.data) {
                ctrl.tempList = angular.copy(ctrl.tempObject.data);
            };
            //sort
            ctrl.tempList.sort(function (item1, item2) {
                if (item1.label.toLowerCase() > item2.label.toLowerCase()) return 1;
                return -1;
            });
        }
        //This is executed on Initial load and cleat filter click
        if (ctrl.sortByAlpha == true) {
            //group data
            ctrl.tempList.map(function (item, index, originalData) {
                item.label = item.label.trim();
                if (!(/^[a-zA-Z]+$/.test(item.label.charAt(0)))) {
                    ctrl.facetGrouped['#'].push(item);
                } else {
                    ctrl.facetGrouped[item.label.charAt(0).toUpperCase()].push(item);
                }
            });
            //join groups into single list
            var keys = Object.keys(ctrl.facetGrouped);
            keys.map(function (item) {
                if (ctrl.facetGrouped[item].length > 0) {
                    ctrl.facetList = ctrl.facetList.concat([{ label: item, listTitle: true }]);
                    ctrl.facetList = ctrl.facetList.concat(ctrl.facetGrouped[item]);
                }
            });
        }
        //on clear filter if 9-0 is select then this is executed
        else {
            ctrl.makeFacetData();
            ctrl.sortFacetsByCount();

        }
        ctrl.loading = false;
    };
    ctrl.showMoreFacetWindow = function(selectedFacet){
        $scope.modal = ModalService.openModal('partials/explorer/load-more-facets.html', $scope, 'gb-facet-more-popup', false);
        ctrl.loading = true;
        var list = null,facetObj = null;
        ctrl.facetList = [];
        ctrl.inlineSearch = "";
        ctrl.inlineSearchText = "";
        ctrl.sortByAlpha = true;
         $timeout(function() {
            ctrl.resetfacetGroup();
            ctrl.loadFacetGroup();
        }, 1000);
    };

    ctrl.makeFacetData = function () {
        //group data
        ctrl.tempList.map(function (item, index, originalData) {
            item.label = item.label.trim();
            if (item.label.toLowerCase().indexOf(ctrl.inlineSearch.toLowerCase()) != -1) {
                if (!(/^[a-zA-Z]+$/.test(item.label.charAt(0)))) {
                    ctrl.facetGrouped['#'].push(item);
                } else {
                    ctrl.facetGrouped[item.label.charAt(0).toUpperCase()].push(item);
                }
            }
        });
        //join groups into single list
        var keys = Object.keys(ctrl.facetGrouped);
        keys.map(function (item) {
            if (ctrl.facetGrouped[item].length > 0) {
                ctrl.facetList = ctrl.facetList.concat([{ label: item, listTitle: true }]);
                ctrl.facetList = ctrl.facetList.concat(ctrl.facetGrouped[item]);
            }
        })
    };

    ctrl.inlineFilter = function () {

        ctrl.inlineSearch = ctrl.inlineSearchText;
        ctrl.loading = true;
        ctrl.facetList = [];
        ctrl.resetfacetGroup();
        if (ctrl.inlineSearch == "") {
            ctrl.loadFacetGroup(true);
            return;
        }
        //alphabet sort
        if (ctrl.sortByAlpha == true) {
            ctrl.makeFacetData();

        }
        //sort by count
        else {
            ctrl.makeFacetData();
            ctrl.sortFacetsByCount();

        }
        ctrl.loading = false;
    };

    ctrl.highlightItem = function(letter){
        if(ctrl.facetGrouped[letter].length == 0) return;
        if(letter == '#') letter = '0';
        var li = $(('#gb-facet-more-grouped-name-'+letter));
        var cntr = $('#gb-facet-more-popup-facet-list');       
        cntr.animate({
            scrollLeft: (cntr.scrollLeft() + Math.ceil(li.offset().left) - 550)
        }, 500);
    };
    ctrl.submit = function(){
        ctrl.loadFacetGroup(true);
        var facetcount = 0;
        var multimode = false;
        //get selected facets
        var list = [];
        ctrl.facetList.filter(function(item){
            if(item.selected){
                list.push(item);
            }
        });
        for(i=0;i<ctrl.tempList.length;i++){
            if(ctrl.tempList[i].selected){
                facetcount++;
            }
        }
        for(key in $scope.$parent.selectedFacets){
            if(key != ctrl.tempObject.key){
                if($scope.$parent.selectedFacets[key].length != 0){
                    multimode = true;
                    facetcount = $scope.$parent.selectedFacets[key].length + facetcount;
                }
            }
        }    
        if(multimode && facetcount > GlobalService.getVal('limitFacetTotal')) {
            ctrl.close();
            $scope.msg = GlobalService.getVal('limitFacetTotalMsg1')+GlobalService.getVal('limitFacetTotal');
            $scope.modal1 = ModalService.openModal('partials/alert_box_extra.html', $scope, false, true);
        }else if(!multimode && facetcount > GlobalService.getVal('limitFacet')) {
            ctrl.close();
            $scope.msg = GlobalService.getVal('limitFacetMsg1')+GlobalService.getVal('limitFacet');
            $scope.modal1 = ModalService.openModal('partials/alert_box_extra.html', $scope, false, true);
        }else {
            $scope.$parent.facetApplyFromMoreWindow(ctrl.tempObject,list,ctrl.findex);
            ctrl.close();
        }
    };
    ctrl.showBody = function(){
        if(ctrl.loading){
            return true;
        }else if(ctrl.facetList.length == 0) {
            return false;
        }   
        return true;     
    }
    ctrl.close = function(){
        $scope.modal.close();
    };
    ctrl.sortFacetsByCount = function(){
        ctrl.sortByAlpha = false
        //remove title
        ctrl.removeEmptyValue();
        //sort by count
        ctrl.facetList.sort(function(item1, item2){
            if(item1.value < item2.value){
                return 1;
            }else{
                return -1;
            }
        });
    };
    ctrl.removeEmptyValue = function(){
        for(var i=0;i<ctrl.facetList.length;i++){
            if(ctrl.facetList[i]['listTitle']){
                ctrl.deleteElementFromList(i);
                return;
            }
        }
    };
    ctrl.deleteElementFromList = function(index){
        ctrl.facetList.splice(index,1);
        ctrl.removeEmptyValue();
    };
    ctrl.sort = function (order) {
        ctrl.sortByAlpha = true;
        if (order == 'alpha') {
            if (ctrl.inlineSearch) {
                ctrl.inlineFilter();
                return;
            }
            ctrl.facetList = [];
            ctrl.resetfacetGroup();
            ctrl.loadFacetGroup();
        } else {
            ctrl.sortByAlpha = false;
            if (ctrl.inlineSearch) {
                ctrl.inlineFilter();
                ctrl.sortFacetsByCount();
                return;
            }
            ctrl.sortByAlpha = false;
            ctrl.sortFacetsByCount();
        }
    }
}]);


angular.module('gbApp.services.explorer', []).factory('ExplorerService', ['$http', 'UserTrackingService', 'GlobalService',
function($http,  UserTrackingService, GlobalService) {
    var exportUrl, bundleData, loadView = null, ruleText = "", ruleSection = "", isDrillDown=false;

    return {
        
        getLoadView: function() {
            return loadView;
        },
        
        setLoadView: function(view) {
            loadView = view;
        },
        
        getRuleText: function() {
            return ruleText;
        },
        
        setRuleText: function(text) {
            ruleText = text;
        },
        
        getRuleSection: function() {
            return ruleSection;
        },
        
        setRuleSection: function(text) {
            ruleSection = text;
        },
        
        // Service method to make an XHR to fetch all config meta info
        getAllConfig : function() {
            return UserTrackingService.getAllConfig();
        },
        
        // Service method to get solr start and end date
        getStats : function() {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http.get(infoserverDomain + '/solr/stats/'+ GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'));
        },
        
        // Service method to make an XHR to fetch the results based on parameters given
        getData : function(urlPart, params, searchText) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            var url = infoserverDomain + "/explorer/search/" + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + "/" + urlPart;
            var tParam = angular.copy(params);
            var mParam = angular.copy(params);
            delete mParam.filter;
            return $http.post(url, {searchtext: searchText,filter:tParam.filter}, {params : mParam});
        },
        
        // Service method to get facets for the results
        getFacets : function(urlPart, params, searchText) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            var url = infoserverDomain + "/explorer/search/facets/" + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + "/" + urlPart;
            var tParam = angular.copy(params);
            var mParam = angular.copy(params);
            delete mParam.filter;
            return $http.post(url, {searchtext: searchText,filter:tParam.filter}, {params : mParam});
        },
        // Service method to get facets for the results
        getFacetsGrdually : function(urlPart, params, searchText, nextParam) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            var url = infoserverDomain + "/explorer/search/facets/" + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + "/" + urlPart + (nextParam?nextParam:"");
            var tParam = angular.copy(params);
            var mParam = angular.copy(params);
            delete mParam.filter;
            return $http.post(url, {searchtext: searchText,filter:tParam.filter}, {params : mParam});
        },
        // Service method to export events
        getExportUrl : function(urlPart, params) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            var url = infoserverDomain + "/explorer/export/" + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + "/" + urlPart;
            if(!!Object.keys(params).length) {
                url += '?';
                var firstParam = true;
                angular.forEach(params, function(value, key) {
                    url += (firstParam ? '' : '&') + key + '=' + value.replace(/\&/g, '%26').replace(/\//g, '%2F');
                    firstParam = false;
                });
            }
            return url;
        },

        //Service method to get saved filters
        getSavedFilters : function() {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http.get(infoserverDomain + "/explorer/view/list/all/"+ GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'));
        },
        
        //Service method for deleting saved filter
        deleteSavedFilter : function(filterName) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http.post(infoserverDomain + "/explorer/view/delete/"+ GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + filterName);
        },

        updateLimit : function(limit) {
            var umsDomain = GlobalService.getVal('umsDomain');
            return $http.post(umsDomain + "/user/eventexport/"+ limit + '/' + GlobalService.getVal('manufacturer'));
        },
        
        //Service method to change filter accessibility
        changeFilterAccessibility : function(view) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http.post(infoserverDomain + "/explorer/view/setpublic/" + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + !view.public + '/' + view.view_name);
        },
        
        //Service method for getting default filter info
        getDefaultFilterInfo : function(param) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http.get(infoserverDomain + '/explorer/view/getdefault/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'));
        },
        
        //Service method to fetch the all sections for event viewer
        getSectionViewerSections : function() {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http.get(infoserverDomain + '/meta/sections/solr/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/SECTION');
        },
        
        //Service method for saving a filter
        saveFilter : function(param) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            var url = infoserverDomain + "/explorer/view/add/"+ GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + "/" + param.is_public + "/" + param.search_name + "/" + param.is_default;
            var data = {
                desc : param.search_desc,
                start_time : param.start_time,
                end_time : param.end_time,
                facet_filters : param.facet_string,
                search_text : param.search_string,
                search_type : param.search_type,
                last_n_log : param.last_n_log,
                last_n_log_by_me : param.last_n_log_uploaded_by_me
            };
            
            return $http.post(url, data);
        },
        
        //Service method for filter suggest
        suggestFilter : function(keyword, defer) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http.get(infoserverDomain + '/explorer/attribute/suggestion/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + keyword, {timeout: defer.promise});
        },
        
        //Service method for filter suggest
        suggestFilterSection : function(type, defer) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            type = type.toUpperCase();
            return $http.get(infoserverDomain + '/meta/sections/type/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + type, {timeout: defer.promise});
        },
        //Service method for filter suggest
        suggestFilterAttribute : function(section, defer) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http({
                url: infoserverDomain + '/meta/columns/table_name/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + section,
                method: 'GET',
                params: {timeout: defer.promise},
                cache: true
            });
        },
        //Service method for filter suggest
        suggestFilterSearch : function(type, section, sectionSearch, defer) {
            var result = null;
            // section search
            if(sectionSearch){
                result = this.suggestFilterSection(type, defer);
                //filter for the section
               // response.data.Data
            }else{
            // attribute search
                result =  this.suggestFilterAttribute(section, defer);
            }          
            return result;
        },
        // Service method to set default filter
        setResetDefaultFilter : function(view) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            var url = infoserverDomain + '/explorer/view/' + (view.default ? 'resetdefault' : 'setdefault') + '/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + view.view_name;
            return $http.post(url);
        },
        
        getLinkedAttributes : function() {
            // UserTrackingService.standard_user_tracking('application','module','activity','details');
            // var params = {
                // "method" : "landing",
                // "type" : "linked"
            // };
// 
            // return $http({
                // url : '/gb/ui/prod/search/api.cgi?' + JSON.stringify(params),
                // method : 'GET'
            // });
        },
        
        getLinkedAttributesData : function(linked_attributes) {
            // UserTrackingService.standard_user_tracking('application','module','activity','details');
            // var attribute_list = linked_attributes['linked'].join(",");
            // var attribute_arr = attribute_list.split(",");
            // return $http({
                // url : '/gb/ui/prod/search/get_attribute_url.cgi',
                // method : 'GET',
                // params : {
                    // "attribute" : attribute_list
                // }
            // });

        },
        
        // Service method to get sections content
        getSectionsContent : function(params) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            var query = params.ns_id ? "&ns_id=" + params.ns_id : "";
            return $http({
                url: infoserverDomain + '/explorer/nscontent/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'),
                method: 'GET',
                params: params,
                cache: true
            });
        },
        
        // Service method to get events content
        getEventsContent : function(obs_date, params, eScope, st,et, scrolldirection, sr, er,sp) {

            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            var url = '/explorer/events/viewer/' + eScope + '/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + st + '/' + et + '/' + scrolldirection + '/' + sr + '/' + er+"?" + params;
            if(sp.length){
                url = url + "&filter=severity=" +'"'+sp+ '"';
            }
            //return $http.get(infoserverDomain + '/explorer/viewer/events/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + obs_date, {params: params});
            return $http.get(infoserverDomain + url);
        },
        
        //get events sources in event viewer
        getEventSources : function(){
            var infoserverDomain = GlobalService.getVal('infoserverDomain');            
            return $http.get(infoserverDomain + '/meta/sections/type/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + 'EVENT');
        },
        // Service method to get all bundles
        getAllBundles : function(sysId, sid2) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            if(!sid2) {
                sid2='NA';
            }
            var params = {
                col: 'obs_ts',
                orderby: 'obs_ts desc'
            };
            return $http.get(infoserverDomain + '/bundles/all/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + GlobalService.getVal('manufacturer') + '/' + sysId + '/' + sid2, {params: params});
        },

        // Service method to get all bundles in Time range
        getAllBundlesInRange : function(sysId, sid2, startDate, endDate) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            if(!sid2) {
                sid2='NA';
            }
            var params = {
                col: 'obs_ts',
                orderby: 'obs_ts desc'
            };
            return $http.get(infoserverDomain + '/bundles/time_range/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + GlobalService.getVal('manufacturer') + '/' + sysId + '/' + sid2 +'/'+ startDate +'/' + endDate, {params: params});
        },
        
        
        // Method to convert the urls for linked attributes to desired model.
        processUrls : function(urls) {
            var i, urlMap = {};
            for (i in urls) {
                if (Array.isArray(urlMap[urls[i]['attribute_name']])) {
                    urlMap[urls[i]['attribute_name']].push(urls[i]);
                } else {
                    urlMap[urls[i]['attribute_name']] = [];
                    urlMap[urls[i]['attribute_name']].push(urls[i]);
                }
            }
            return urlMap;
        },
        
        // Service method to get section diff
        getFileDiffSection : function(srcts, tgtts, params) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http.get(infoserverDomain + '/explorer/sectiondiff/data/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + srcts + '/' + tgtts, {params: params});
        },
        
        //Service method for bundle name in section viewer suggest
        getBundles : function(param, sysId, obsDate) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http.get(infoserverDomain + '/bundles/files/named/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + GlobalService.getVal('manufacturer') + '/' + sysId + '/' + obsDate, {
                params : {
                    'obs_url' : param
                }
            });
        },
        
        // Service method to get bundle data for search log bundle feature
        getBundleData : function() {
            return bundleData;
        },
        
        // Service method to set bundle data for search log bundle feature
        setBundleData : function(data) {
            bundleData = data;
        },
        
        // Service method to get date range for a selected bundle
        getDateRange : function(bundleId) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http.get(infoserverDomain + '/bundles/date_boundaries/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + GlobalService.getVal('manufacturer') + '/' + bundleId);
        },
        
        // Service method to get facets for the results
        getEventGroups : function(urlPart, params, searchText) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http.post(infoserverDomain + "/explorer/eventtype/" + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + "/" + GlobalService.getVal('manufacturer') + "/" + urlPart, {searchtext: searchText}, {params : params});
        },
        
        // Service method to get facets for the results
        getEventGroupsData : function(id, sIndex, offset) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http.get(infoserverDomain + "/explorer/viewer/eventtype/" + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + "/" + id + "/" + sIndex + "/" + offset);
        },

        setDrillDown: function(value){
            isDrillDown = value;
        },
        getDrillDown: function(){
            return isDrillDown;
        }
    };
}]);
var reloadExplorerGraph = function(data) {
	var i, j, fdata = [], t_data, barChart, chartLabel = "", t_date;
	var chart_config = {
		"chart" : {
			"animation" : "1",
			"bgcolor" : "FFFFFF",
			"canvasbgColor" : "FAFAFA",
			"canvasbgAlpha" : "100",
			"bgAlpha" : "100",
			"canvasBorderColor" : "000000",
			"canvasBorderThickness" : "0.1",
			"paletteColors" : "#51BBFD",
			"plotGradientColor" : "4682B4",
			"plotFillAlpha" : "95,100",
			"plotFillRatio" : "20,80",
			"plotBorderColor" : "51BBFD",
			"plotSpacePercent" : "40",
			"caption" : "",
			"xaxisname" : "",
			"yaxisname" : "Result Count",
			"showvalues" : "0",
			"decimals" : "0",
			"formatnumberscale" : "0",
			"numDivLines" : "0",
			"toolTipSepChar" : " : ",
			"baseFontSize" : "9",
			"baseFontColor" : "286594",
			"chartLeftMargin" : "5",
			//"chartRightMargin" : "3",
			"chartBottomMargin" : "3",
			"chartTopMargin" : "5",
			"captionPadding" : "3",
			"labelDisplay" : "ROTATE",
			"rotatelabels" : "1",
			"slantlabels" : "1"
		}
	};
	if (!!data) {
		if (data['obs_date']['gap'].indexOf("YEAR") >= 0) {
			chartLabel = "Year View (UTC)";
			chart_config.chart.caption = chartLabel;
			chart_config.chart.rotatelabels = 0;
			chart_config.chart.slantlabels = 0;
			chart_config.chart.labelDisplay = 'auto';
			for ( i = 0; i < data['obs_date'].counts.length / 2; ++i) {
				t_data = {};
				t_date = new Date(data['obs_date'].counts[(i * 2)].replace(/-/g, "/").replace('T', ' ').substring(0, 19));
				t_data['label'] = ""+t_date.getFullYear();
				t_data['value'] = data['obs_date'].counts[(i * 2) + 1];
				t_data['link'] = "j-expDrillDown-" + data['obs_date'].counts[(i * 2)];
				t_data['color'] = '0099FF';
				fdata.push(t_data);
			}

			if (FusionCharts('explorerChart')) {
				FusionCharts('explorerChart').setJSONData({
					"chart" : chart_config.chart,
					"data" : fdata
				});
				FusionCharts('explorerChart').render("explorer_chart");
			} else {
				barChart = new FusionCharts({
					type : "column2d",
					renderAt : "explorer_chart",
					width : "100%",
					id : 'explorerChart',
					height : "100%",
					dataFormat : "json",
					dataSource : {
						"chart" : chart_config.chart,
						"data" : fdata
					}
				});
				barChart.render("explorer_chart");
			}
		} else if (data['obs_date']['gap'].indexOf("MONTH") >= 0) {
			chartLabel = "Month View (UTC)";
			chart_config.chart.caption = chartLabel;
			for ( i = 0; i < data['obs_date'].counts.length / 2; ++i) {
				t_data = {};
				t_date = new Date(data['obs_date'].counts[(i * 2)].replace(/-/g, "/").replace('T', ' ').substring(0, 19));
				t_data['label'] = t_date.getFullYear() + "-" + t_date.getMonthName().substring(0, 3);
				t_data['value'] = data['obs_date'].counts[(i * 2) + 1];
				t_data['link'] = "j-expDrillDown-" + data['obs_date'].counts[(i * 2)];
				t_data['color'] = '0099FF';
				fdata.push(t_data);
			}
			if (FusionCharts('explorerChart')) {
				FusionCharts('explorerChart').setJSONData({
					"chart" : chart_config.chart,
					"data" : fdata
				});
				FusionCharts('explorerChart').render("explorer_chart");
			} else {
				barChart = new FusionCharts({
					type : "column2d",
					renderAt : "explorer_chart",
					width : "100%",
					id : 'explorerChart',
					height : "100%",
					dataFormat : "json",
					dataSource : {
						"chart" : chart_config.chart,
						"data" : fdata
					}
				});
				barChart.render("explorer_chart");
			}
		} else if (data['obs_date']['gap'].indexOf("DAY") >= 0) {
			chartLabel = "Day of Month View (UTC)";
			chart_config.chart.caption = chartLabel;
			for ( i = 0; i < data['obs_date'].counts.length / 2; ++i) {
				t_data = {};
				t_date = new Date(data['obs_date'].counts[(i * 2)].replace(/-/g, "/").replace('T', ' ').substring(0, 19));
				t_data['label'] = (t_date.getDate() > 9 ? t_date.getDate() : "0" + t_date.getDate()) + " " + t_date.getMonthName().substring(0, 3);
				t_data['value'] = data['obs_date'].counts[(i * 2) + 1];
				t_data['link'] = "j-expDrillDown-" + data['obs_date'].counts[(i * 2)];
				t_data['color'] = '0099FF';
				fdata.push(t_data);
			}
			if (FusionCharts('explorerChart')) {
				FusionCharts('explorerChart').setJSONData({
					"chart" : chart_config.chart,
					"data" : fdata
				});
				FusionCharts('explorerChart').render("explorer_chart");
			} else {
				barChart = new FusionCharts({
					type : "column2d",
					renderAt : "explorer_chart",
					width : "100%",
					id : 'explorerChart',
					height : "100%",
					dataFormat : "json",
					dataSource : {
						"chart" : chart_config.chart,
						"data" : fdata
					}
				});
				barChart.render("explorer_chart");
			}
		} else if (data['obs_date']['gap'].indexOf("HOUR") >= 0) {
			chartLabel = "Hours View (UTC) (HH:MM Month-Date)";
			chart_config.chart.caption = chartLabel;
			for ( i = 0; i < data['obs_date'].counts.length / 2; ++i) {
				t_data = {};
				t_date = new Date(data['obs_date'].counts[(i * 2)].replace(/-/g, "/").replace('T', ' ').substring(0, 19));
				t_data['label'] = (t_date.getHours() > 9 ? t_date.getHours() : "0" + t_date.getHours()) + ":" + (t_date.getMinutes() > 9 ? t_date.getMinutes() : "0" + t_date.getMinutes()) + " " + t_date.getMonthName().substring(0, 3) + " " + t_date.getDate();
				t_data['value'] = data['obs_date'].counts[(i * 2) + 1];
				t_data['link'] = "j-expDrillDown-" + data['obs_date'].counts[(i * 2)];
				t_data['color'] = '0099FF';
				fdata.push(t_data);
			}
			if (FusionCharts('explorerChart')) {
				FusionCharts('explorerChart').setJSONData({
					"chart" : chart_config.chart,
					"data" : fdata
				});
				FusionCharts('explorerChart').render("explorer_chart");
			} else {
				barChart = new FusionCharts({
					type : "column2d",
					renderAt : "explorer_chart",
					width : "100%",
					id : 'explorerChart',
					height : "100%",
					dataFormat : "json",
					dataSource : {
						"chart" : chart_config.chart,
						"data" : fdata
					}
				});
				barChart.render("explorer_chart");
			}
		} else if (data['obs_date']['gap'].indexOf("MINUTES") >= 0) {
			chartLabel = "Minutes View (UTC) (HH:MM)";
			chart_config.chart.caption = chartLabel;
			for ( j = 0; j < 60; ++j) {
				for ( i = 0; i < data['obs_date'].counts.length / 2; ++i) {
					t_date = new Date(data['obs_date'].counts[(i * 2)].replace(/-/g, "/").replace('T', ' ').substring(0, 19));
					if (t_date.getMinutes() == j) {
						break;
					}
				}
				t_data = {};
				if (i < data['obs_date'].counts.length / 2) {
					t_data['value'] = data['obs_date'].counts[(i * 2) + 1];
				} else {
					t_data['value'] = 0;
				}
				t_data['label'] = (t_date.getHours() > 9 ? t_date.getHours() : "0" + t_date.getHours()) + ":" + (j > 9 ? j : "0" + j);
				t_data['link'] = "j-expDrillDown-" + data['obs_date'].counts[(i * 2)];
				t_data['color'] = '0099FF';
				fdata.push(t_data);
			}
			if (FusionCharts('explorerChart')) {
				FusionCharts('explorerChart').setJSONData({
					"chart" : chart_config.chart,
					"data" : fdata
				});
				FusionCharts('explorerChart').render("explorer_chart");
			} else {
				barChart = new FusionCharts({
					type : "column2d",
					renderAt : "explorer_chart",
					width : "100%",
					id : 'explorerChart',
					height : "100%",
					dataFormat : "json",
					dataSource : {
						"chart" : chart_config.chart,
						"data" : fdata
					}
				});
				barChart.render("explorer_chart");
			}
		} else if (data['obs_date']['gap'].indexOf("SECONDS") >= 0) {
			chartLabel = "Seconds View (UTC) (MM:SS)";
			chart_config.chart.caption = chartLabel;
			for ( j = 0; j < 60; ++j) {
				for ( i = 0; i < data['obs_date'].counts.length / 2; ++i) {
					t_date = new Date(data['obs_date'].counts[(i * 2)].replace(/-/g, "/").replace('T', ' ').substring(0, 19));
					if (t_date.getSeconds() == j) {
						break;
					}
				}
				t_data = {};
				if (i < data['obs_date'].counts.length / 2) {
					t_data['value'] = data['obs_date'].counts[(i * 2) + 1];
				} else {
					t_data['value'] = 0;
				}
				t_data['label'] = (t_date.getSeconds() > 9 ? t_date.getSeconds() : "0" + t_date.getSeconds()) + ":" + (j > 9 ? j : "0" + j);
				//t_data['link'] = "j-expDrillDown-" + data['obs_date'].counts[(i * 2)];
				t_data['color'] = '0099FF';
				fdata.push(t_data);
			}
			if (FusionCharts('explorerChart')) {
				FusionCharts('explorerChart').setJSONData({
					"chart" : chart_config.chart,
					"data" : fdata
				});
				FusionCharts('explorerChart').render("explorer_chart");
			} else {
				barChart = new FusionCharts({
					type : "column2d",
					renderAt : "explorer_chart",
					width : "100%",
					id : 'explorerChart',
					height : "100%",
					dataFormat : "json",
					dataSource : {
						"chart" : chart_config.chart,
						"data" : fdata
					}
				});
				barChart.render("explorer_chart");
			}
		} else {
			chartLabel = "Year View (UTC)";
			chart_config.chart.caption = chartLabel;
			for ( i = 0; i < data['obs_date'].counts.length / 2; ++i) {
				t_data = {};
				t_date = new Date(data['obs_date'].counts[(i * 2)].replace(/-/g, "/").replace('T', ' ').substring(0, 19));
				t_data['label'] = t_date;
				t_data['value'] = data['obs_date'].counts[(i * 2) + 1];
				t_data['link'] = "j-expDrillDown-" + data['obs_date'].counts[(i * 2)];
				t_data['color'] = '0099FF';
				fdata.push(t_data);
			}
			if (FusionCharts('explorerChart')) {
				FusionCharts('explorerChart').setJSONData({
					"chart" : chart_config.chart,
					"data" : fdata
				});
				FusionCharts('explorerChart').render("explorer_chart");
			} else {
				barChart = new FusionCharts({
					type : "column2d",
					renderAt : "explorer_chart",
					width : "100%",
					id : 'explorerChart',
					height : "100%",
					dataFormat : "json",
					dataSource : {
						"chart" : chart_config.chart,
						"data" : fdata
					}
				});
				barChart.render("explorer_chart");
			}
		}
	} else {
		if (FusionCharts('explorerChart')) {
			FusionCharts('explorerChart').setJSONData({
				"chart" : {
					"caption" : chartLabel,
					"canvasBgColor" : "F6F6F6",
					"showBorder" : 1,
					"yAxisName" : "Result Count",
					"theme" : "zune"
				},
				"data" : []
			});
			FusionCharts('explorerChart').render("explorer_chart");
		} else {
			barChart = new FusionCharts({
				type : "column2d",
				renderAt : "explorer_chart",
				width : "100%",
				id : 'explorer_chart',
				height : "100%",
				dataFormat : "json",
				dataSource : {
					"chart" : {
						"caption" : chartLabel,
						"canvasBgColor" : "F6F6F6",
						"showBorder" : 1,
						"yAxisName" : "Result Count",
						"theme" : "zune"
					},
					"data" : []
				}
			});
			barChart.render("explorer_chart");
		}
	}
};

var expDrillDown = function(input) {
	var d, d1;
	d = new Date(input.replace('j-drillDown-', '').replace(/-/g, "/").replace('T', ' ').substring(0, 19));
	d1 = new Date(input.replace('j-drillDown-', '').replace(/-/g, "/").replace('T', ' ').substring(0, 19));
	angular.element('.gb-explorer.'+angular.element('.gb-explorer').scope().$parent.activeTab.id).scope().customDateFilterApplied = false;
	angular.element('.gb-explorer.'+angular.element('.gb-explorer').scope().$parent.activeTab.id).scope().drillDown = true;
	angular.element('.gb-explorer.'+angular.element('.gb-explorer').scope().$parent.activeTab.id).scope().info.currentFacet = null;
	angular.element('.gb-explorer.'+angular.element('.gb-explorer').scope().$parent.activeTab.id).scope().getUTCTime = false;
	switch(angular.element('.gb-explorer.'+angular.element('.gb-explorer').scope().$parent.activeTab.id).scope().info.chartLevel) {
		case 'YEAR' :
			d.setMonth(0);
			d.setDate(1);
			// d.setHours(0);
			// d.setMinutes(0);
			// d.setSeconds(0);
			d1.setMonth(12);
			d1.setDate(0);
			d1.setHours(23);
			d1.setMinutes(59);
			d1.setSeconds(59);
			break;
		case 'MONTH' :
			d.setDate(1);
			// d.setHours(0);
			// d.setMinutes(0);
			// d.setSeconds(0);
			d1.setMonth(d1.getMonth() + 1);
			d1.setDate(0);
			d1.setHours(23);
			d1.setMinutes(59);
			d1.setSeconds(59);
			break;
		case 'DAY' :
			// d.setHours(0);
			// d.setMinutes(0);
			// d.setSeconds(0);
			d1.setHours(23);
			d1.setMinutes(59);
			d1.setSeconds(59);
			break;
		case 'HOUR' :
			// d.setMinutes(0);
			// d.setSeconds(0);
			d1.setMinutes(59);
			d1.setSeconds(59);
			break;
		case 'MINUTES' :
			// d.setSeconds(0);
			d1.setSeconds(59);
			break;
	}
	angular.element('.gb-explorer.'+angular.element('.gb-explorer').scope().$parent.activeTab.id).scope().updateBreadCrumb(d, d1);
	angular.element('.gb-explorer.'+angular.element('.gb-explorer').scope().$parent.activeTab.id).scope().setFromTo(d, d1, true);
	
};

var facetChart = function() {
	var f_div = $('<div class="gb-facet-chart-window"><div class="gb-facet-chart-window-title"><label class="radio-inline pull-left gb-modal-toolbar-radio-label"><input type="radio" name="facetChartType" value="bar"> Bar Chart </label><label class="radio-inline pull-left gb-modal-toolbar-radio-label"><input type="radio" name="facetChartType" value="line"> Line Chart</label><span class="icon-file-pdf gb-modal-toolbar-icon gb-modal-toolbar-icon-sendToPFD pull-left" title="Export As PDF"></span><span class="icon-image2 gb-modal-toolbar-icon pull-left" title="Export As Image"></span><span class="icon-close2 pull-right gb-modal-toolbar-controller gb-modal-toolbar-icon-close" title="close window"></span><span class="pull-right gb-modal-toolbar-controller" title="maximize window"></span>	</div><div class="gb-facet-chart-window-body"><div class="chart"></div>	</div></div>');
	$("body").append(f_div);
};

/* Controllers for analytics - All the controllers related to analytics app */

angular.module('gbApp.controllers.analytics', ['gbApp.services', 'gbApp.globals', 'gbApp.services.analytics'])

// MenuCtrl - Responsible for holding the model that constructs menu within analytics.
    .controller('MenuCtrl', ['$modal', 'MenuService', 'NavigationService', 'GlobalService', 'AppService', '$filter', 'SectionsMetaService', 'DefaultFilterService', 'ConfigDiffService', 'ModalService',
        function ($modal, MenuService, NavigationService, GlobalService, AppService, $filter, SectionsMetaService, DefaultFilterService, ConfigDiffService, ModalService) {
            var menuCtrl = this;
            MenuService.getConfig()
                .then(function (response) {
                    menuCtrl.menu = response.data.Data;
                }, function (response) {
                    menuCtrl.menu = response.data.Data;
                    if (!menuCtrl.info.sessionTimedOut && response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/timeout/)) {
                        menuCtrl.info.sessionTimedOut = true;
                        ModalService.sessionTimeout();
                    }
                });
            menuCtrl.info = {};
            // Highlights the current selection on the menu
            MenuService.setCurrentLabel(GlobalService.getVal("default_landing_label"));
            menuCtrl.info.tabview = "sectionview";
            // Stores whether session is timed out or not
            menuCtrl.info.sessionTimedOut = false;
            //Loading the default landing selection which is defined in globals.js
            MenuService.setAppsLoaded();
            menuCtrl.setUrl = function (key, label) {
                var selectedSections;
                if (NavigationService.getUrl() != NavigationService.getUrlByKey(key)) {
                    if (key !== '#' && AppService.isAuthorized() && AppService.isInfoServerUp()) {
                        /*if (key === 'configdiff') {
                            selectedSections = $filter('filter')(SectionsMetaService.getSections(DefaultFilterService.getDefaultObservation()), {
                                'selected': true
                            });
                        } else {
                            selectedSections = $filter('filter')(ConfigDiffService.getSections(), {
                                'selected': true
                            });
                        }
                        if (selectedSections && selectedSections.length) {
                            var modalInstance = $modal.open({
                                templateUrl: 'partials/apps_change_view.html',
                                controller: 'ChangeViewController as changeViewCtrl',
                                resolve: {
                                    items: function () {
                                        return {
                                            key: key,
                                            label: label,
                                            current: MenuService.getCurrentLabel()
                                        };
                                    }
                                }
                            });
                            modalInstance.result.then(function (label) {
                                MenuService.setCurrentLabel(label);
                            });
                        } else {
                            NavigationService.setUrl(key);
                            MenuService.setCurrentLabel(label);
                        }*/
                        NavigationService.setUrl(key);
                        MenuService.setCurrentLabel(label);
                    }
                }
            };
            
            menuCtrl.getCurrentLabel = function() {
                return MenuService.getCurrentLabel();
            }
        }])
    .controller('ChangeViewController', ['$modalInstance', '$localStorage', '$sce', '$window', 'SectionsMetaService', 'ConfigDiffService', 'GlobalService', 'DefaultFilterService', 'items', 'NavigationService', '$timeout',
        function ($modalInstance, $localStorage, $sce, $window, SectionsMetaService, ConfigDiffService, GlobalService, DefaultFilterService, items, NavigationService, $timeout) {
            var changeViewCtrl = this;
            changeViewCtrl.msg = $sce.trustAsHtml(GlobalService.getVal('nav_confirm'));
            changeViewCtrl.changeViewConfirm = function () {
                NavigationService.setUrl(items.key);
                if (items.key === 'configdiff') {
                    SectionsMetaService.clearSectionView();
                } else {
                    ConfigDiffService.clearConfigDiff();
                }
                $modalInstance.close(items.label);
            };
            changeViewCtrl.hideChangeViewModal = function () {
                $modalInstance.dismiss('cancel');
            };
            changeViewCtrl.openChangeViewModal = function () {
                var selectedSysId = JSON.stringify(DefaultFilterService.getDefaultSysId());
                var selectedObservation = JSON.stringify(DefaultFilterService.getSelectedObservation());
                var selectedEndCust = JSON.stringify(DefaultFilterService.getDefaultEndCust());
                var defualtObsGroup = DefaultFilterService.getSelectedObsGrp();
                var url = "";
                if (items.current === "Section View") {
                    url = "tabview=config";
                } else {
                    url = "tabview=section";
                }
                url += "&selobsgroup=" + defualtObsGroup + "&selsysid=" + selectedSysId + "&selobservation=" + selectedObservation;
                
                $localStorage.tabview = url;
                
                $timeout(function() {
                    $window.open(GlobalService.getVal('redirect_new_window'), '_blank');
                }, 250);
                $modalInstance.dismiss('cancel');
            };
        }])

// SectionsCtrl - Responsible for holding the model for everything related to sections.
    .controller('SectionsCtrl', ['$filter', 'metaDataService', 'SectionsMetaService', 'DefaultFilterService', 'UserTrackingService', 'GlobalService', 'ModalService', '$window', '$cookies', 'InstanceHandler', 'AppService', '$sce', 'ExplorerService',
        function ($filter, metaDataService, SectionsMetaService, DefaultFilterService, UserTrackingService, GlobalService, ModalService, $window, $cookies, InstanceHandler, AppService, $sce, ExplorerService) {
            var sectionCtrl = this;
            var visible = false;
            
            // Controls the visibility of the sections portion of the page.
            sectionCtrl.select = {};
            // For filtering selected sections from all the sections.
            sectionCtrl.search = {};
            // For filtering the sections based on keyword given by the user.
            sectionCtrl.select['selected'] = true;
            sectionCtrl.info = {};
            // Stores whether session is timed out or not
            sectionCtrl.info.sessionTimedOut = false;
            
            sectionCtrl.info.application = GlobalService.getVal('navLog');
            // Returns whether all XHR calls are complete to display start me
            sectionCtrl.isReady = function () {
                return SectionsMetaService.isReady();
            };
            // Returns all the sections for the current observation.
            sectionCtrl.getSections = function () {
                return SectionsMetaService.getSections(DefaultFilterService.getDefaultObservation());
            };
            sectionCtrl.getSectionsLoading = function () {
                return SectionsMetaService.getSectionLoading();
            };
            sectionCtrl.renderHtml = function (html) {
                return $sce.trustAsHtml(html);
            };
            // Gets the values from the globals based on the given key.
            sectionCtrl.getValue = function (key) {
                return GlobalService.getVal(key);
            };
            sectionCtrl.removeSection = function () {
                if (SectionsMetaService.getViewName() != "Select view") {
                    // ModalService.alertBox({msg: 'Your current applied view is lost'});
                    SectionsMetaService.setViewName("Select view");
                    SectionsMetaService.setKbLink(null);
                }
            };
            // Transposes the given section and logs the activity.
            sectionCtrl.doTranspose = function (section) {
                section.isTranspose = !section.isTranspose;
                sectionCtrl.removeSection();
                UserTrackingService.standard_user_tracking(sectionCtrl.info.application, 'Section View', 'Transpose Section', "{\'" + section.label + "\'}")
                    .then(successHandler, handleSessionTimeout);
            };
            // Returns true if the section has any filter applied on it.
            sectionCtrl.hasFilter = function (section) {
                var bool = false, i, keys;
                if (!!section.filter) {
                    keys = Object.keys(section.filter);
                    if (keys.length != 0) {
                        for (i in keys) {
                            if (!!section.filter[keys[i]]['value'] || section.filter[keys[i]]['value'] === 0) {
                                bool = true;
                            }
                        }
                    }
                }
                return bool;
            };
            sectionCtrl.addSectionInstance = function (section) {
                if (!DefaultFilterService.getDefaultObservation()) {
                    ModalService.alertBox({msg: 'Please select observation'});
                    return;
                }
                var bundleName = DefaultFilterService.getDefaultObservation()['obs_url'];
                if (bundleName.indexOf("\/") != -1) {
                    var bundleList = bundleName.split("\/");
                    bundleName = bundleList[bundleList.length - 1];
                }
                var result = {
                    //'obs_url': DefaultFilterService.getDefaultObservation()['bundle_name'],
                    'filename': bundleName,
                    'namespace_id': bundleName + '-0',
                    'namespace': section['name'],
                    'obs_date': DefaultFilterService.getDefaultObservation()['obs_time'].substring(0, 19) + 'Z',
                    'sysid': DefaultFilterService.getDefaultSysId()['sys_id']
                };
                
                angular.forEach(DefaultFilterService.getLogVaultRec(), function(value, key) {
                  if(!result[key]){
                    result[key] = value;
                  }
                });

                var instance = {
                    "type": 'section',
                    "title": 'Section Viewer',
                    "app" : sectionCtrl.info.application,
                    "module" : 'Section View',
                    "data": {
                        "result": result,
                        "bundle": bundleName,
                        "sysId": DefaultFilterService.getDefaultSysId()['sys_id'],
                        //"file": $filter('bundleName')(bundleName),
                        "instanceDisplay": DefaultFilterService.getConfigDiffFields(),
                        "start_time": DefaultFilterService.getDefaultObservation()['obs_time'].substring(0, 19) + 'Z',
                        "end_time": DefaultFilterService.getDefaultObservation()['obs_time'].substring(0, 19) + 'Z',
                        'observation': DefaultFilterService.getDefaultObservation()['obs_time'],
                        'observationStr': DefaultFilterService.getDefaultObservation()['obs_time']
                    }
                };
                InstanceHandler.addInstance(instance);
            };
            // Toggles the show log status for a given section
            sectionCtrl.toggleShowlog = function (section) {
                var status = section.showlog ? 'Hide Log' : 'Show Log';
                section.showlog = !section.showlog;
                UserTrackingService.standard_user_tracking(sectionCtrl.info.application, 'Section View', status, "{\'" + section.label + "\'}")
                    .then(successHandler, handleSessionTimeout);
            };
            // Returns true if the given column of the given section has any filters applied on it.
            sectionCtrl.hasColumnFilter = function (section, column) {
                if (!section.columns) {
                    return false;
                }
                var bool = false;
                if (!!section.filter[column.field] && (!!section.filter[column.field]['value'] || section.filter[column.field]['value'] === 0)) {
                    bool = true;
                }
                return bool;
            };
            // Resets the applied filters for any given section.
            sectionCtrl.resetFilter = function (section) {
                SectionsMetaService.resetFilter(section);
                sectionCtrl.removeSection();
            };
            // Invoked on clicking of cancel button in select sections. Reverts the selection of sections to previous done state.
            sectionCtrl.cancel = function () {
                var i, sections = SectionsMetaService.getSections(DefaultFilterService.getDefaultObservation());
                for (i in sections) {
                    sections[i]['default'] = sections[i].selected;
                }
                SectionsMetaService.setSections(DefaultFilterService.getDefaultObservation(), sections);
                visible = false;
            };
            // Invoked on clicking of done button in select sections. Loads both raw n parsed data for the sections selected.
            sectionCtrl.done = function (event) {
                if (!DefaultFilterService.getDefaultObservation()) {
                    ModalService.alertBox({msg: 'Please select observation!'});
                    return;
                }
                var section, error_txt = "", sections = SectionsMetaService.getSections(DefaultFilterService.getDefaultObservation());
                if (DefaultFilterService.getDefaultEndCust() === null) {
                    error_txt += "Please select End Customer.\n";
                }
                if (DefaultFilterService.getDefaultSysId() === null) {
                    error_txt += "Please select System ID.\n";
                }
                if (error_txt.length > 0) {
                    visible = false;
                    for (section in sections) {
                        if (sections[section]['selected'] == true) {
                            sections[section]['default'] = true;
                        } else {
                            sections[section]['default'] = false;
                        }
                    }
                    SectionsMetaService.setSections(DefaultFilterService.getDefaultObservation(), sections);
                    return;
                } else {
                    var sections_list = "";
                    for (section in sections) {
                        if (sections[section]['default'] == true) {
                            if (sections_list == "") {
                                sections_list += sections[section]['label'];
                            }
                            else {
                                sections_list += "," + sections[section]['label'];
                            }
                            if (!sections[section].selected) {
                                sectionCtrl.removeSection();
                            }
                            if(!sections[section].selected) {
                                SectionsMetaService.loadData(sections[section], sectionCtrl);
                            }
                            sections[section].selected = true;
                        } else {
                            if (sections[section].selected == true) {
                                sectionCtrl.removeSection();
                            }
                            sections[section].selected = false;
                        }
                    }
                    UserTrackingService.standard_user_tracking(sectionCtrl.info.application, 'Section View', 'Sections Selected', "{\'" + sections_list + "\'}")
                        .then(successHandler, handleSessionTimeout);
                    SectionsMetaService.setSections(DefaultFilterService.getDefaultObservation(), sections);
                    visible = false;
                }
            };
            // Toggles the selection of all columns for a given section
            sectionCtrl.toggleAll = function (section) {
                var column;
                var cols_list = "";
                for (column in section.columns) {
                    section.columns[column].selected = section.meta['shownAll'];
                    if (section.columns[column].selected) {
                        if(cols_list == "") {
                            cols_list += section.columnsMap[section.columns[column].title];
                        } else {
                            cols_list += "," + section.columnsMap[section.columns[column].title];
                        }
                    }
                }
                sectionCtrl.removeSection();
                updateColumns(section);
                UserTrackingService.standard_user_tracking(sectionCtrl.info.application, 'Section View', 'Columns selected', "{\'" + section.label + "\':\'" + cols_list + "\'}")
                        .then(successHandler, handleSessionTimeout);
            };
            // Updates the Shown All on the select columns based on the column selection by the user.
            sectionCtrl.changeShownAll = function (section) {
                var cols_list = "";
                var column, bool = true;
                for (column in section.columns) {
                    if (!section.columns[column].selected) {
                        bool = false;
                    } else {
                        if(cols_list == "") {
                            cols_list += section.columnsMap[section.columns[column].title];
                        } else {
                            cols_list += "," + section.columnsMap[section.columns[column].title];
                        }
                    }
                }
                section.meta['shownAll'] = bool;
                sectionCtrl.removeSection();
                updateColumns(section);
                UserTrackingService.standard_user_tracking(sectionCtrl.info.application, 'Section View', 'Columns selected', "{\'" + section.label + "\':\'" + cols_list + "\'}")
                        .then(successHandler, handleSessionTimeout);
            };
            // Blocks the click event propagation in column filters.
            sectionCtrl.stopFilter = function (event, section, column) {
                event.stopPropagation();
            };
            // Applies the specified filter on the given column of the section and logs the activity.
            sectionCtrl.doneFilter = function (event, section, column) {
                var secstr = "";
                secstr += section.name;
                column.filter = {};
                column.filter['field'] = column.field;
                column.filter['type'] = column.type;
                if (column.type == 'boolean') {
                    column.filter['true'] = column['true'];
                    column.filter['false'] = column['false'];
                } else if (column.type == 'number') {
                    column.filter['value'] = column.value;
                    column.filter['operator'] = column.operator;
                } else {
                    if(!!column.value && !!column.value.length) {
                        column.filter['value'] = column.value;
                    } else {
                        column.filter = {};
                    }
                }
                section.filter[column.field] = column.filter;
                var pages = Math.ceil(section.info.page.total / section.info.page.count);
                if (pages == 0) {
                    section.info.page.current = 1;
                } else if (section.info.page.current > pages) {
                    section.info.page.current = pages;
                }
                SectionsMetaService.populateSectionData(section);
                section.firstLoad = false;
                angular.element(document.querySelector('.dropdown.open')).removeClass('open');
                secstr += ":" + column.field + ":" + JSON.stringify(column.filter);
                sectionCtrl.removeSection();
                UserTrackingService.standard_user_tracking(sectionCtrl.info.application, 'Section View', 'Column Filters', "{\'" + secstr + "\'}")
                    .then(successHandler, handleSessionTimeout);
            };
            sectionCtrl.sortClicked = function(event, section, field) {
            	if(event.target.id == "columnHeader" || event.target.id == "columnDiv" || event.target.id == "columnLabel") {
            		sectionCtrl.changeSortField(section, field);
            	}
            };
            sectionCtrl.changeSortField = function (section, field) {
                if (!!section.info.sorting) {
                    if (section.info.sorting.field == field) {
                        section.info.sorting.reverse = !section.info.sorting.reverse;
                    } else {
                        section.info.sorting = {
                            field: field,
                            reverse: false
                        }
                    }
                } else {
                    section.info.sorting = {
                        field: field,
                        reverse: false
                    }
                }
                SectionsMetaService.populateSectionData(section);
            };
            sectionCtrl.getSectionColumns = function (columns) {
                var visibleCount = 0;
                if (!columns || !columns.length) return columns;
                for (var i = 0; i < columns.length; i++) {
                    columns[i].firstVisible = false;
                    if (!!columns[i].visible) {
                        visibleCount++;
                    }
                }
                if (visibleCount > 1) {
                    for (var i = 0; i < columns.length; i++) {
                        columns[i].firstVisible = false;
                        if (!!columns[i].visible) {
                            visibleCount++;
                        }
                    }
                    for (var i = 0; i < columns.length; i++) {
                        if (!!columns[i].visible) {
                            columns[i].firstVisible = true;
                            break;
                        }
                    }
                }
                return columns;
            };
            
            sectionCtrl.exportAllPDF = function() {
                var allSectionsDetails = SectionsMetaService.getSections(DefaultFilterService.getDefaultObservation());
                var selectedSections = sectionCtrl.getSelectedSections() || [];
                if (!selectedSections.length) {
                    ModalService.alertBox({msg: 'Please select at least one section!'});
                    return;
                }
                if (!getSelectedSectionsData().length) {
                    ModalService.alertBox({msg: 'Please select at least one column in a section!'});
                    return;
                }
                var selectedSections = $filter('filter')(allSectionsDetails, {
                    'selected': true
                }) || [];
                var sectionDataAvailable = false;
                for (var i in selectedSections) {
                    if (!!selectedSections[i].display_data) {
                        sectionDataAvailable = true;
                        break;
                    }
                }
                if (!sectionDataAvailable) {
                    ModalService.alertBox({msg: 'Please select a section with data'});
                    return;
                }
                exportPDF();
            };
            
            function exportPDF() {
                var selectedSections = sectionCtrl.getSelectedSections() || [];
                var sectionAdded = false;
                var pdf = new jsPDF('p', 'pt', 'a1');
                angular.forEach(selectedSections, function(section) {
                    if(Array.isArray(section.export_data) && !!section.export_data.length) {
                        var selectedCols = $filter('filter')(section.columns, {selected: true}) || [];
                        if(!!selectedCols.length) {
                            var pageAdded = false;
                            if(pdf.autoTableEndPosY() > 2250) {
                                pdf.addPage();
                                pageAdded = true;
                            }
                            
                            var startY = (!!sectionAdded && !pageAdded ? pdf.autoTableEndPosY() : 0) + 60;
                            pdf.text(section.label, 40, startY - 10);
                            pageAdded = false;

                            var cols = [], rows = [], config = {};
                            
                            if(!section.isTranspose) {
                                angular.forEach(selectedCols, function(col) {
                                    cols.push({
                                        title: section.columnsMap[col.title],
                                        key: col.title
                                    });
                                });
                                rows = section.export_data;
                                config = {
                                    startY: startY,
                                    tableWidth: 'auto',
                                    columnWidth: 'auto',
                                    styles: {
                                        overflow: 'linebreak'
                                    }
                                };
                            } else {
                                for(n = 0; n < section.export_data.length; n+=20) {
                                    cols = [{
                                        title: "",
                                        key: "col_name"
                                    }];
                                    var rangeEnd = (n+20 <= section.export_data.length) ? (n+20) : section.export_data.length;
                                    for(var i = n; i < rangeEnd; i++) {
                                        cols.push({
                                            title: "",
                                            key: "col" + i
                                        });
                                    }
                                    rows = [];
                                    angular.forEach(selectedCols, function(col) {
                                        var tempRow = {};
                                        tempRow['col_name'] = section.columnsMap[col.title];
                                        for(var i = n; i < rangeEnd; i++) {
                                            tempRow['col' + i] = section.export_data[i][col.title];
                                        }
                                        rows.push(tempRow);
                                    });
                                    
                                    if(n != 0) {
                                        startY = pdf.autoTableEndPosY() + 15;
                                    }
                                    
                                    config = {
                                        startY: startY,
                                        tableWidth: 'auto',
                                        columnWidth: 'auto',
                                        styles: {
                                            overflow: 'linebreak'
                                        }, createdCell: function (cell, data) {
                                            if (data.column.dataKey === 'col_name') {
                                               cell.styles.fillColor = data.row.index % 2 == 0 ? [41, 128, 185] : [61, 148, 205];
                                               cell.styles.textColor = 255;
                                            } 
                                        }, createdHeaderCell: function (cell, data) {
                                            cell.styles.rowHeight = 0;
                                            cell.styles.fillColor = 255;
                                        }
                                    };
                                    
                                    if(rangeEnd != section.export_data.length) {
                                        pdf.autoTable(cols, rows, config);
                                        sectionAdded = true;
                                    }
                                }
                            }
                            
                            pdf.autoTable(cols, rows, config);
                            sectionAdded = true;
                        }
                    }
                });
                if(!!sectionAdded) {
                    pdf.save("Sections.pdf");
                }
            }
            
            sectionCtrl.getSelectedSections = function () {
                var selectedSections = $filter('filter')(SectionsMetaService.getSections(DefaultFilterService.getDefaultObservation()), {
                    'selected': true
                });
                return selectedSections;
            };
            
            function getSelectedSectionsData() {
                var selectedSections = $filter('filter')(SectionsMetaService.getSections(DefaultFilterService.getDefaultObservation()), {
                    'selected': true
                });
                var updatedSectionList = [];
                for (var k in selectedSections) {
                    var eachSectionData = selectedSections[k];
                    if (eachSectionData.a_data) {
                        var sectionKeys = eachSectionData.columns;
                        for (var x in sectionKeys) {
                            var aKey = sectionKeys[x];
                            if (aKey.visible) {
                                updatedSectionList.push(eachSectionData);
                                break;
                            }
                        }
                    } else {
                        updatedSectionList.push(eachSectionData);
                    }
                }
                return updatedSectionList;
            }
            
            // Reverts the changes the made the column filter
            sectionCtrl.cancelFilter = function (event, section, column) {
                angular.element(document.querySelector('.dropdown.open')).removeClass('open');
            };
            // Increments the results per page of the section view.
            sectionCtrl.increasePageSize = function (section) {
                section.count = parseInt(section.count, 10) < 100 && (parseInt(section.count, 10) < section.tot_count) ? parseInt(section.count) + 10 : section.count;
                section.info.page.count = section.count;
                SectionsMetaService.populateSectionData(section);
            };
            // Decrements the results per page of the section view.
            sectionCtrl.decreasePageSize = function (section) {
                section.count = parseInt(section.count, 10) > 10 ? parseInt(section.count) - 10 : section.count;
                section.info.page.count = section.count;
                SectionsMetaService.populateSectionData(section);
            };
            sectionCtrl.firstPage = function (section) {
                if (section.info.page.current == 1)
                    return;
                section.info.page.current = 1;
                SectionsMetaService.populateSectionData(section);
            };
            sectionCtrl.prevPage = function (section) {
                if (section.info.page.current > 1) {
                    section.info.page.current -= 1;
                    SectionsMetaService.populateSectionData(section);
                }
            };
            sectionCtrl.nextPage = function (section) {
                if (section.info.page.current < section.info.page.pages) {
                    section.info.page.current += 1;
                    SectionsMetaService.populateSectionData(section);
                }
            };
            sectionCtrl.lastPage = function (section) {
                if (section.info.page.current == section.info.page.pages)
                    return;
                section.info.page.current = section.info.page.pages;
                SectionsMetaService.populateSectionData(section);
            };
            
            sectionCtrl.generateRuleLogic = function(section, column) {
            	ExplorerService.setRuleSection(section.name);
            	var logic = ExplorerService.getRuleText();
            	if(column.type == 'string') {
            		logic = "{" + section.label + "." + section.columnsMap[column.title] + "} LIKE '%" + logic + "%'";
            	} else if(column.type == 'number') {
            		logic = "{" + section.label + "." + section.columnsMap[column.title] + "} = " + logic;
            	}
            	ExplorerService.setRuleText(logic);
            };
            
            // Updates the columns selection for a given section based on user selection.
            function updateColumns(section) {
                var i, secstr = "", bool = true;
                for (i in section.columns) {
                    if (secstr != "") {
                        secstr += ", ";
                    }
                    section.columns[i].visible = section.columns[i].selected;
                    if (section.columns[i].visible) {
                        bool = false;
                        secstr += section.name + ":" + section.columns[i].title;
                    }
                }
                if (bool) {
                    section.no_cols = true;
                } else {
                    section.no_cols = false;
                }
            }

            function handleSessionTimeout(response) {
                if (!sectionCtrl.info.sessionTimedOut && response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/timeout/)) {
                    sectionCtrl.info.sessionTimedOut = true;
                    ModalService.sessionTimeout();
                }
            }

            function successHandler() {
            }
        }])

// DefaultFitlerCtrl - Responsible for holding the model related the default filters i.e., end_customer, sys_id and observation
    .controller('DefaultFilterCtrl', ['$scope', 'DefaultFilterService', 'SectionsMetaService', 'UtilService', 'GlobalService', 'ModalService', 'AppService', 'UserTrackingService', '$filter', '$window', '$timeout', '$q', '$modal', 'metaDataService',
        function ($scope, DefaultFilterService, SectionsMetaService, UtilService, GlobalService, ModalService, AppService, UserTrackingService, $filter, $window, $timeout, $q, $modal, metaDataService) {
            var defaultFilterCtrl = this, allSectionsDetails;

            defaultFilterCtrl.info = {};
            defaultFilterCtrl.defaultFilters = [];
            defaultFilterCtrl.info.ready = false;
            defaultFilterCtrl.resultLoading = true;
            defaultFilterCtrl.info.setObservationNull = false;
            defaultFilterCtrl.info.sysIdIndex = -1;
            defaultFilterCtrl.info.selectedSystemId = null;
            defaultFilterCtrl.info.sid2 = null;
            defaultFilterCtrl.info.subSysfilter = "";
            defaultFilterCtrl.application = GlobalService.getVal('navLog');
            defaultFilterCtrl.info.sysIdLimit = GlobalService.getVal('max_sysid_limit');
            var defaultSysId, defaultEndCust, found = false;
            var loadSysId, loadObservation, bundleLoad = false;
            defaultFilterCtrl.info.selectedObsGroup = null;
            SectionsMetaService.setSectionLoading(true);
            // Stores whether session is timed out or not
            defaultFilterCtrl.info.sessionTimedOut = false;

            $scope.$watch('defaultFilterCtrl.resultLoading', function() {
                if(!defaultFilterCtrl.resultLoading){
                    AppService.hidePanelLoading();
                }
            })
            //Event to check when application is ready
             $scope.$on('AppLoadEvent-apps', function (event, reload) {
                if(!defaultFilterCtrl.resultLoading){   
                    AppService.hidePanelLoading();
                }
                if(reload) {
                    $scope.init();
                }
             });


            // XHR to fetch ec n sys
            $scope.init = function () {
                // Holds the current selection of ec, sys n obs.
                /*if (DefaultFilterService.getDefaultSysId()) {
                    defaultSysId = DefaultFilterService.getDefaultSysId();
                    defaultEndCust = DefaultFilterService.getDefaultEndCust();
                    found = true;
                }*/
               /* if (DefaultFilterService.getLoadPage() == 'sectionview') {
                    loadSysId = DefaultFilterService.getLoadSysId();
                    loadObservation = DefaultFilterService.getLoadObservation();
                    DefaultFilterService.setLoadSysId(null);
                    DefaultFilterService.setLoadObservation(null);
                    DefaultFilterService.setLoadPage(null);
                    bundleLoad = true;
                }*/
                defaultFilterCtrl.resultLoading = false;
                SectionsMetaService.setReady(true);

                SectionsMetaService.getAll().then(function (response) {
                    var obs = DefaultFilterService.getDefaultObservation();
                    var sorted_data = $filter("filter")(response.data.Data, {
                        "namespace_type": "!EVENT"
                    });
                    sorted_data = $filter("filter")(sorted_data, {
                        "namespace_type": "!UNPARSED"
                    });
                    sorted_data = $filter("orderBy")(sorted_data, "label");
                    SectionsMetaService.setSections(DefaultFilterService.getDefaultObservation(), sorted_data);
                    sections = SectionsMetaService.getSections(DefaultFilterService.getDefaultObservation());
                    SectionsMetaService.getDefault()
                        .then(function (response) {
                            var dashboardView = SectionsMetaService.getLoadView();
                            if(!!dashboardView) {
                                defaultFilterCtrl.loadDashboardView(dashboardView, response.data.Data);
                            } else {
                                defaultFilterCtrl.loadDefaultView(response.data.Data);
                            }
                            /*if (defaultFilterCtrl.info.setObservationNull == true) {
                                defaultFilterCtrl.info.setObservationNull = false;
                                defaultFilterCtrl.info['defaultObservation'] = null;
                                DefaultFilterService.setDefaultObservation(null);
                                DefaultFilterService.setSelectedObservation(null);
                            }*/
                            defaultFilterCtrl.info.ready = true;
                            SectionsMetaService.setReady(true);
                        }, handleSessionTimeout);
                    }, function (response) {
                        sections = response.data.Data;
                        handleSessionTimeout(response);
                    });               
            };
            defaultFilterCtrl.changeSubSysId = function(sid){
                if(DefaultFilterService.getSysId2() == sid){
                    return;
                }
                DefaultFilterService.setSysId2(sid);
                defaultFilterCtrl.info.ready = true;
                old_sections = SectionsMetaService.getSections(DefaultFilterService.getDefaultObservation());
                SectionsMetaService.setSectionLoading(false);
                var sections = SectionsMetaService.getSections(DefaultFilterService.getDefaultObservation());
                var obs = DefaultFilterService.getDefaultObservation();
                for (section in old_sections) {
                    if (old_sections[section]['selected'] == true) {
                        sections[section]['selected'] = true;
                        sections[section]['default'] = true;
                        sections[section]["a_data"] = null;
                        SectionsMetaService.loadData(sections[section], defaultFilterCtrl);
                    } else {
                        sections[section].selected = false;
                        sections[section]['default'] = false;
                    }
                }
                if (defaultFilterCtrl.info.setObservationNull == true) {
                    defaultFilterCtrl.info.setObservationNull = false;
                    defaultFilterCtrl.info['defaultObservation'] = null;
                    DefaultFilterService.setDefaultObservation(null);
                    DefaultFilterService.setSelectedObservation(null);
                }
                var dashboardView = SectionsMetaService.getLoadView();
                if(!!dashboardView) {
                    defaultFilterCtrl.loadDashboardView(dashboardView);
                } else {
                    if (SectionsMetaService.getViewName() != 'Select view') {
                        loadView(SectionsMetaService.getSelectedView());
                    }
                }
                SectionsMetaService.setSections(DefaultFilterService.getDefaultObservation(), sections);
            }
            defaultFilterCtrl.getSysId2 = function() {
                return DefaultFilterService.getSysId2();
            }
            function checkSysIdMatch(sysId) {
                for (var i = 0; i < defaultFilterCtrl.defaultFilters[0].sys_ids.length; i++) {
                    if (defaultFilterCtrl.defaultFilters[0].sys_ids[i].sys_id == sysId) {
                        defaultFilterCtrl.info['defaultSysId'] = defaultFilterCtrl.defaultFilters[0].sys_ids[i];
                        DefaultFilterService.setDefaultSysId(defaultFilterCtrl.info['defaultSysId']);
                        break;
                    }
                }
            }
            
            function setSelectedObsGroup() {
                if (DefaultFilterService.getSelectedObsGrp()) {
                    defaultFilterCtrl.info.selectedObsGroup = DefaultFilterService.getSelectedObsGrp();
                }
            }
            defaultFilterCtrl.selectObsGroup = function (obsgrp) {
                defaultFilterCtrl.info.selectedObsGroup = obsgrp;
                DefaultFilterService.setSelectedObsGrp(obsgrp);
            };
            // Returns the knowledge base link of the applied view for displaying on the UI.
            defaultFilterCtrl.getKbLink = function () {
                return SectionsMetaService.getKbLink();
            };
            defaultFilterCtrl.moveThroughSysId = function ($event) {
                var sysIds = defaultFilterCtrl.info.defaultEndCust.sys_ids;
                if (!!defaultFilterCtrl.sysfilter) {
                    sysIds = $filter('filter')(defaultFilterCtrl.info.defaultEndCust.sys_ids, defaultFilterCtrl.sysfilter);
                }
                if ($event.keyCode == 40) {
                    if (defaultFilterCtrl.info.sysIdIndex == -1 || defaultFilterCtrl.info.sysIdIndex == (sysIds.length - 1)) {
                        defaultFilterCtrl.info.sysIdIndex = 0;
                    } else {
                        defaultFilterCtrl.info.sysIdIndex++;
                    }
                    for (var i in sysIds) {
                        sysIds[i]['selected'] = false;
                    }
                    sysIds[defaultFilterCtrl.info.sysIdIndex]['selected'] = true;
                    defaultFilterCtrl.info.selectedSystemId = sysIds[defaultFilterCtrl.info.sysIdIndex];
                } else if ($event.keyCode == 38) {
                    if (defaultFilterCtrl.info.sysIdIndex == -1 || defaultFilterCtrl.info.sysIdIndex == 0) {
                        defaultFilterCtrl.info.sysIdIndex = sysIds.length - 1;
                    } else {
                        defaultFilterCtrl.info.sysIdIndex--;
                    }
                    for (var i in defaultFilterCtrl.info.defaultEndCust.sys_ids) {
                        defaultFilterCtrl.info.defaultEndCust.sys_ids[i]['selected'] = false;
                    }
                    sysIds[defaultFilterCtrl.info.sysIdIndex]['selected'] = true;
                    defaultFilterCtrl.info.selectedSystemId = sysIds[defaultFilterCtrl.info.sysIdIndex];
                } else if ($event.keyCode == 13) {
                    defaultFilterCtrl.info.defaultSysId = defaultFilterCtrl.info.selectedSystemId;
                    defaultFilterCtrl.changeSysId();
                    defaultFilterCtrl.resetMoveThroughSysId();
                    angular.element('.btn-group.open .dropdown-toggle').dropdown('toggle');
                    if (!!defaultFilterCtrl.sysfilter) {
                        defaultFilterCtrl.sysfilter.sys_id = "";
                    }
                } else {
                    defaultFilterCtrl.resetMoveThroughSysId();
                }
            };
            defaultFilterCtrl.resetMoveThroughSysId = function () {
                defaultFilterCtrl.info.sysIdIndex = -1;
                defaultFilterCtrl.info.selectedSystemId = null;
                for (var i in defaultFilterCtrl.info.defaultEndCust.sys_ids) {
                    defaultFilterCtrl.info.defaultEndCust.sys_ids[i]['selected'] = false;
                }
            };
            // Fetches meta for the given view and applies the same.
            function loadView(selectedView) {
                // XHR to fetch the meta for the given view.
                SectionsMetaService.loadView(selectedView).then(function (response) {
                    var appliedView;
                    appliedView = response.data.Data[0];
                    if (!!appliedView) {
                        SectionsMetaService.applyView(appliedView, $scope);
                    } else {
                        ModalService.alertBox({msg: 'No Applied View'});
                    }
                }, handleSessionTimeout);
            }

            // Angular watcher to reach for the changes to ec selection
            $scope.$watch("defaultFilterCtrl.info['defaultEndCust']", function (newVal, oldVal) {
                DefaultFilterService.setDefaultEndCust(newVal);
            });
            // Angular watcher to reach for the changes to sys selection
            /*$scope.$watch("defaultFilterCtrl.info['defaultSysId']", function (newVal, oldVal) {
                DefaultFilterService.setDefaultSysId(newVal);
            });*/
            
            defaultFilterCtrl.loadDashboardView = function(dashboardView, defView) {
                if(dashboardView.type == "custom") {
                    var view = dashboardView.view;
                    view.view_name = "Select View";
                    SectionsMetaService.applyView(view);
                    SectionsMetaService.setSelectedView(view);
                    SectionsMetaService.setSectionLoading(false);
                } else if (dashboardView.type == "savedView") {
                    SectionsMetaService.getAllViews().then(function(response) {
                        var view = $filter('filter')(response.data.Data, {view_name: dashboardView.view}, true) || [];
                        if(view.length == 1) {
                            firstTimeLoaded = true;
                            // SectionsMetaService.applyView(view[0], $scope);
                            defaultFilterCtrl.loadView(view[0]);
                        } else {
                            SectionsMetaService.setSectionLoading(false);
                            ModalService.alertBox({msg: "View not found"});
                            if(!firstTimeLoaded) {
                                defaultFilterCtrl.loadDefaultView(defView);
                            }
                        }
                    }, function(response) {
                        SectionsMetaService.setSectionLoading(false);
                        ModalService.alertBox({msg: "View not found"});
                        if(!firstTimeLoaded) {
                            defaultFilterCtrl.loadDefaultView(defView);
                        }
                    });
                }
                SectionsMetaService.setLoadView(null);
            };
            
            defaultFilterCtrl.loadView = function(view) {
                SectionsMetaService.loadView(view)
                    .then(function (response) {
                        SectionsMetaService.setSectionLoading(false);
                        var appliedView;
                        appliedView = response.data.Data[0];
                        if (!!appliedView) {
                            SectionsMetaService.applyView(appliedView);
                            SectionsMetaService.setSelectedView(view);
                            // Applying the view that is fetched.
                            UserTrackingService.standard_user_tracking(defaultFilterCtrl.application, 'Section View', 'Apply View', "{\'" + view['view_name'] + "\'}")
                                .then(successHandler, handleSessionTimeout);
                        } else {
                            SectionsMetaService.setSectionLoading(false);
                            ModalService.alertBox({msg: 'No Applied View'});
                        }
                    }, handleSessionTimeout);
            };
            
            defaultFilterCtrl.loadDefaultView = function(defView) {
                var sections = SectionsMetaService.getSections(DefaultFilterService.getDefaultObservation());
                firstTimeLoaded = true;
                if (defView) {
                    // SectionsMetaService.setViewName(defView.view_name);
                    // SectionsMetaService.applyView(defView, $scope);
                } else {
                    // for (section in sections) {
                        // if (sections[section]['default'] == true) {
                            // sections[section].selected = true;
                            // SectionsMetaService.loadData(sections[section], defaultFilterCtrl);
                        // } else {
                            // sections[section].selected = false;
                        // }
                    // }
                }
                SectionsMetaService.setSectionLoading(false);
            };

            defaultFilterCtrl.getSysId2List = function() {
                defaultFilterCtrl.info.sid2 = DefaultFilterService.getSubSys();
                if(defaultFilterCtrl.info.sid2 && defaultFilterCtrl.info.sid2.length && defaultFilterCtrl.info.sid2.length > 0){
                    if(!DefaultFilterService.getSysId2()){
                        DefaultFilterService.setSysId2(defaultFilterCtrl.info.sid2[0]);
                    }                    
                }
                return defaultFilterCtrl.info.sid2;
            };

            var firstTimeLoaded = false;
            
            // Angular watcher to reach for the changes to obs selection
            /*$scope.$watch("defaultFilterCtrl.info['defaultObservation']", function (newVal, oldVal) {
                
                //hack need to remove
                return;
                var sorted_data, i, obs;
                DefaultFilterService.setDefaultObservation(newVal);
                var section, sections, old_sections;
                if (!!newVal && !!newVal['obs_time']) {
                    // First time when page is loaded.
                    var isSections = SectionsMetaService.getSections();
                    if (obs == undefined && !(isSections && isSections.length > 0)) {
                        defaultFilterCtrl.info.ready = false;
                        defaultFilterCtrl.info['file_name'] = newVal['file_name'];
                        SectionsMetaService.getAll().then(function (response) {
                            obs = DefaultFilterService.getDefaultObservation();
                            sorted_data = $filter("filter")(response.data.Data, {
                                "namespace_type": "!EVENT"
                            });
                            sorted_data = $filter("filter")(sorted_data, {
                                "namespace_type": "!UNPARSED"
                            });
                            defaultFilterCtrl.info.ready = true;
                            sorted_data = $filter("orderBy")(sorted_data, "label");
                            SectionsMetaService.setSections(DefaultFilterService.getDefaultObservation(), sorted_data);
                            sections = SectionsMetaService.getSections(DefaultFilterService.getDefaultObservation());
                            SectionsMetaService.getDefault()
                                .then(function (response) {
                                    var dashboardView = SectionsMetaService.getLoadView();
                                    if(!!dashboardView) {
                                        defaultFilterCtrl.loadDashboardView(dashboardView, response.data.Data);
                                    } else {
                                        defaultFilterCtrl.loadDefaultView(response.data.Data);
                                    }
                                    if (defaultFilterCtrl.info.setObservationNull == true) {
                                        defaultFilterCtrl.info.setObservationNull = false;
                                        defaultFilterCtrl.info['defaultObservation'] = null;
                                        DefaultFilterService.setDefaultObservation(null);
                                        DefaultFilterService.setSelectedObservation(null);
                                    }
                                    defaultFilterCtrl.info.ready = true;
                                    SectionsMetaService.setReady(true);
                                }, handleSessionTimeout);
                        }, function (response) {
                            sections = response.data.Data;
                            handleSessionTimeout(response);
                        });
                    } else if (SectionsMetaService.getSections(DefaultFilterService.getDefaultObservation()) == undefined) {// When obs data is not available in the cache.
                        sections = SectionsMetaService.getSections(obs);
                        SectionsMetaService.setSectionLoading(false);
                        obs = DefaultFilterService.getDefaultObservation();
                        sections = angular.copy(sections);
                        var sectionsCount = 0;
                        var sectionsLoaded = 0;
                        var dashboardView = SectionsMetaService.getLoadView();
                        if(!!dashboardView) {
                            for (var i in sections) {
                                sections[i]['selected'] = false;
                                sections[i]['default'] = false;
                                sections[i]['visible'] = true;
                                SectionsMetaService.resetFilter(sections[i]);
                            }
                            SectionsMetaService.setSections(DefaultFilterService.getDefaultObservation(), sections);
                            SectionsMetaService.setAppliedView(null);
                            SectionsMetaService.setViewName("Select view");
                            defaultFilterCtrl.loadDashboardView(dashboardView);
                        }
                        for (section in sections) {
                            delete sections[section].a_data;
                            if (sections[section]['selected'] == true) {
                                sectionsCount++;
                                sections[section].deferred = $q.defer();
                                // delete sections[section].tableParams;
                                SectionsMetaService.loadData(sections[section], defaultFilterCtrl, sections[section].deferred);
                                sections[section].deferred.promise.then(function () {
                                    sectionsLoaded = sectionsLoaded + 1;
                                    if (SectionsMetaService.getViewName() != 'Select view' && sectionsLoaded == sectionsCount) {
                                        loadView(SectionsMetaService.getSelectedView());
                                        // var dashboardView = SectionsMetaService.getLoadView();
                                        // if(!!dashboardView) {
                                            // defaultFilterCtrl.loadDashboardView(dashboardView);
                                        // } else {
//                                             
                                        // }
                                        
                                    }
                                }, function () {
                                    sectionsLoaded = sectionsLoaded + 1;
                                    if (SectionsMetaService.getViewName() != 'Select view' && sectionsLoaded == sectionsCount) {
                                        loadView(SectionsMetaService.getSelectedView());
                                        // var dashboardView = SectionsMetaService.getLoadView();
                                        // if(!!dashboardView) {
                                            // defaultFilterCtrl.loadDashboardView(dashboardView);
                                        // } else {
//                                             
                                        // }
                                    }
                                });
                                
                            } else {
                                sections[section].selected = false;
                            }
                        }
                        if (defaultFilterCtrl.info.setObservationNull == true) {
                            defaultFilterCtrl.info.setObservationNull = false;
                            defaultFilterCtrl.info['defaultObservation'] = null;
                            DefaultFilterService.setDefaultObservation(null);
                            DefaultFilterService.setSelectedObservation(null);
                        }
                    } else {// When obs data in available in the cache.
                        defaultFilterCtrl.info.ready = true;
                        old_sections = SectionsMetaService.getSections(obs);
                        SectionsMetaService.setSectionLoading(false);
                        sections = SectionsMetaService.getSections(DefaultFilterService.getDefaultObservation());
                        obs = DefaultFilterService.getDefaultObservation();
                        for (section in old_sections) {
                            if (old_sections[section]['selected'] == true) {
                                sections[section]['selected'] = true;
                                sections[section]['default'] = true;
                                SectionsMetaService.loadData(sections[section], defaultFilterCtrl);
                            } else {
                                sections[section].selected = false;
                                sections[section]['default'] = false;
                            }
                        }
                        if (defaultFilterCtrl.info.setObservationNull == true) {
                            defaultFilterCtrl.info.setObservationNull = false;
                            defaultFilterCtrl.info['defaultObservation'] = null;
                            DefaultFilterService.setDefaultObservation(null);
                            DefaultFilterService.setSelectedObservation(null);
                        }
                        var dashboardView = SectionsMetaService.getLoadView();
                        if(!!dashboardView) {
                            defaultFilterCtrl.loadDashboardView(dashboardView);
                        } else {
                            if (SectionsMetaService.getViewName() != 'Select view') {
                                loadView(SectionsMetaService.getSelectedView());
                            }
                        }
                    }
                    SectionsMetaService.setSections(DefaultFilterService.getDefaultObservation(), sections);
                }
            });*/

            //  Defines the grouping for observations.
            DefaultFilterService.getObsGroups().then(function (response) {
                defaultFilterCtrl.obsGroups = response.data.Data;
            }, function (response) {
                defaultFilterCtrl.obsGroups = response.data.Data;
                handleSessionTimeout(response);
            });

            // Filters the observation list to return only the observations from the last hour.
            var getLastHourObservations = function () {
                var observations = [], default_obs, t_obs, obs;
                if (defaultFilterCtrl.info['defaultSysId']) {
                    default_obs = new Date();
                    default_obs.setHours(default_obs.getHours() - 1);
                    for (obs in defaultFilterCtrl.info['defaultSysId'].observations) {
                        t_obs = UtilService.parseDate(defaultFilterCtrl.info['defaultSysId'].observations[obs].obs_time);
                        if (t_obs > default_obs) {
                            observations.push(defaultFilterCtrl.info['defaultSysId'].observations[obs]);
                        }
                    }
                    return observations;
                }
            };
            // Filters the observation list to return only the observations from the last 12 hours.
            var getLast12HourObservations = function () {
                var observations = [], default_obs, t_obs, obs;
                if (defaultFilterCtrl.info['defaultSysId']) {
                    default_obs = new Date();
                    default_obs.setHours(default_obs.getHours() - 12);
                    for (obs in defaultFilterCtrl.info['defaultSysId'].observations) {
                        t_obs = UtilService.parseDate(defaultFilterCtrl.info['defaultSysId'].observations[obs].obs_time);
                        if (t_obs > default_obs) {
                            observations.push(defaultFilterCtrl.info['defaultSysId'].observations[obs]);
                        }
                    }
                    return observations;
                }
            };
            // Filters the observation list to return only the observations of yesterday.
            var getYesterdayObservations = function () {
                var observations = [], default_obs, t_obs, obs;
                if (defaultFilterCtrl.info['defaultSysId']) {
                    default_obs = new Date();
                    default_obs.setDate(default_obs.getDate() - 1);
                    for (obs in defaultFilterCtrl.info['defaultSysId'].observations) {
                        t_obs = UtilService.parseDate(defaultFilterCtrl.info['defaultSysId'].observations[obs].obs_time);
                        if (t_obs > default_obs) {
                            observations.push(defaultFilterCtrl.info['defaultSysId'].observations[obs]);
                        }
                    }
                    return observations;
                }
            };
            // Filters the observation list to return only the observations from the last 2 days.
            var getLast2DaysObservations = function () {
                var observations = [], default_obs, t_obs, obs;
                if (defaultFilterCtrl.info['defaultSysId']) {
                    default_obs = new Date();
                    default_obs.setDate(default_obs.getDate() - 2);
                    for (obs in defaultFilterCtrl.info['defaultSysId'].observations) {
                        t_obs = UtilService.parseDate(defaultFilterCtrl.info['defaultSysId'].observations[obs].obs_time);
                        if (t_obs > default_obs) {
                            observations.push(defaultFilterCtrl.info['defaultSysId'].observations[obs]);
                        }
                    }
                    return observations;
                }
            };
            // Filters the observation list to return only the observations of current week.
            var getThisWeekObservations = function () {
                var observations = [], default_obs, t_obs, obs;
                if (defaultFilterCtrl.info['defaultSysId']) {
                    default_obs = new Date();
                    for (obs in defaultFilterCtrl.info['defaultSysId'].observations) {
                        t_obs = UtilService.parseDate(defaultFilterCtrl.info['defaultSysId'].observations[obs].obs_time);
                        if (t_obs && t_obs.getWeek() === default_obs.getWeek()) {
                            observations.push(defaultFilterCtrl.info['defaultSysId'].observations[obs]);
                        }
                    }
                    return observations;
                }
            };
            var getMostRecentObservations = function () {
                var observations = [];
                if (defaultFilterCtrl.info['defaultSysId'] && defaultFilterCtrl.info['defaultSysId'].lastNObservations) {
                    observations.push(defaultFilterCtrl.info['defaultSysId'].lastNObservations[0]);
                    return observations;
                }
            };
            // Filters the observation list to return only the observations of the current month.
            var getThisMonthObservations = function () {
                var observations = [], default_obs, t_obs, obs;
                if (defaultFilterCtrl.info['defaultSysId']) {
                    default_obs = new Date();
                    for (obs in defaultFilterCtrl.info['defaultSysId'].observations) {
                        t_obs = UtilService.parseDate(defaultFilterCtrl.info['defaultSysId'].observations[obs].obs_time);
                        if (t_obs && t_obs.getMonth() === default_obs.getMonth()) {
                            observations.push(defaultFilterCtrl.info['defaultSysId'].observations[obs]);
                        }
                    }
                    return observations;
                }
            };
            var getLastNObservations = function () {
                var observations = [];
                if (defaultFilterCtrl.info['defaultSysId'] && defaultFilterCtrl.info['defaultSysId'].lastNObservations) {
                    for (obs in defaultFilterCtrl.info['defaultSysId'].lastNObservations) {
                        observations.push(defaultFilterCtrl.info['defaultSysId'].lastNObservations[obs]);
                    }
                    return observations;
                }
            };
            // Sets the most recent observation as the current observation.
            function setRecentObservation() {
                var i, flag = 0, default_obs, t_obs;
                for (i in defaultFilterCtrl.info['defaultSysId'].observations) {
                    if (flag) {
                        default_obs = UtilService.parseDate(defaultFilterCtrl.info['defaultObservation'].obs_time);
                        t_obs = UtilService.parseDate(defaultFilterCtrl.info['defaultSysId'].observations[i].obs_time);
                        if (default_obs < t_obs) {
                            defaultFilterCtrl.info['defaultObservation'] = defaultFilterCtrl.info['defaultSysId'].observations[i];
                            DefaultFilterService.setSelectedObservation(defaultFilterCtrl.info['defaultObservation']);
                        }
                    } else {
                        defaultFilterCtrl.info['defaultObservation'] = defaultFilterCtrl.info['defaultSysId'].observations[i];
                        DefaultFilterService.setSelectedObservation(defaultFilterCtrl.info['defaultObservation']);
                        flag = 1;
                    }
                }
                DefaultFilterService.setDefaultObservation(defaultFilterCtrl.info['defaultObservation']);
                defaultFilterCtrl.info.selectedObsGroup = 'Most Recent';
                DefaultFilterService.setSelectedObsGrp('Most Recent');
            }

            // Triggered when ec is changed.
            defaultFilterCtrl.changeEndCust = function () {
                DefaultFilterService.setDefaultSysId(null);
                DefaultFilterService.setDefaultObservation(null);
                defaultFilterCtrl.info['defaultObservation'] = null;
                defaultFilterCtrl.info['defaultSysId'] = null;
            };
            // Gets the values from the globals based on the given key.
            defaultFilterCtrl.getValue = function (key) {
                return GlobalService.getVal(key);
            };
            defaultFilterCtrl.getSysId2Tooltip = function() {
            	var manufacturer = GlobalService.getVal('manufacturer');
            	var sysId2 = GlobalService.getVal('systemId2');
            	if(sysId2.customer.hasOwnProperty(manufacturer)) {
            		return sysId2.customer[manufacturer];
            	} else {
            		return sysId2.common;
            	}
            };
            defaultFilterCtrl.showSysid2DD = function() {
                var bool = metaDataService.isSysid2Enable();
                return bool;
            };
            // Triggered when sys is changed.
            defaultFilterCtrl.changeSysId = function () {
                if (!!defaultFilterCtrl.sysfilter) {
                    defaultFilterCtrl.sysfilter.sys_id = "";
                }
                defaultFilterCtrl.info['defaultObservation'] = null;
                if (defaultFilterCtrl.info['defaultSysId'].observations === undefined) {
                    DefaultFilterService.getObservations(defaultFilterCtrl.info['defaultEndCust'], defaultFilterCtrl.info['defaultSysId'])
                        .then(function (response) {
                            var obs, obscnt;
                            defaultFilterCtrl.info['defaultSysId'].observations = [];
                            for (obscnt in response.data.Data) {
                                obs = {};
                                obs['obs_time'] = response.data.Data[obscnt].obs_ts;
                                var bundleName = response.data.Data[obscnt].bundle_name;
                                obs['bundle_name'] = bundleName;
                                obs['file_name'] = response.data.Data[obscnt].file_name;
                                defaultFilterCtrl.info['defaultSysId'].observations.push(obs);
                            }
                            getObservationsTimeRange('This Month');
                            getObservationsTimeRange('This Week');
                            getObservationsTimeRange('Last 2 Days');

                        }, handleSessionTimeout);
                }
                if (defaultFilterCtrl.info['defaultSysId'].lastNObservations === undefined) {
                    DefaultFilterService.getNObservations(defaultFilterCtrl.info['defaultEndCust'], defaultFilterCtrl.info['defaultSysId'], GlobalService.getVal('no_of_bundles'))
                        .then(function (response) {
                            var obs;
                            SectionsMetaService.setReady(true);
                            defaultFilterCtrl.info['defaultSysId'].lastNObservations = [];
                            for (var i = 0; i < response.data.Data.length; i++) {
                                obs = {};
                                obs['obs_time'] = response.data.Data[i].obs_ts;
                                var bundleName = response.data.Data[i].bundle_name;
                                obs['obs_url'] = response.data.Data[i].bundle_name;
                                obs['bundle_name'] = bundleName;
                                defaultFilterCtrl.info['defaultSysId'].lastNObservations.push(obs);
                            }
                        }, handleSessionTimeout);
                }
                DefaultFilterService.setDefaultObservation(null);
                defaultFilterCtrl.info['defaultObservation'] = null;
                DefaultFilterService.setSelectedObservation(null);
            };
            // Sets the given observation as the current selection.
            defaultFilterCtrl.setDefaultObservation = function (obs) {
                SectionsMetaService.setAppliedView(null);
                defaultFilterCtrl.info['defaultObservation'] = obs;
                DefaultFilterService.setDefaultObservation(obs);
                DefaultFilterService.setSelectedObservation(obs);
                DefaultFilterService.setDefaultObservation(defaultFilterCtrl.info['defaultObservation']);
            };

            // Removed because not in use anymore - Ashwin
            // $scope.setDefaultObservationConfirm = function (obs) {
                // SectionsMetaService.setAppliedView(null);
                // defaultFilterCtrl.info['defaultObservation'] = obs;
                // DefaultFilterService.setDefaultObservation(obs);
                // DefaultFilterService.setSelectedObservation(obs);
                // DefaultFilterService.setDefaultObservation(defaultFilterCtrl.info['defaultObservation']);
                // $scope.modal.close();
            // };

            // Returns the budles having only the last part of the bundle name for the UI to display.
            defaultFilterCtrl.getObservations = function (obsgrp) {
                var obsMethod;
                if (!obsgrp) return;
                obsMethod = obsgrp.replace(/\s/g, '');
                obsMethod = 'get' + obsMethod + 'Observations';
                obsMethod = observationObj[obsMethod];
                if (typeof obsMethod === 'function') {
                    return obsMethod();
                } else {
                    ModalService.alertBox({msg: 'Not function'});
                }
            };

            function getObservationsTimeRange(obsgrp) {
                var fromTime, toTime;
                var currentDateobj = new Date();
                var Day = currentDateobj.getUTCDate();
                var Hour = currentDateobj.getUTCHours();
                var Month = 1 + (currentDateobj.getUTCMonth());
                var Year = currentDateobj.getUTCFullYear();

                switch (obsgrp) {
                    // Commenting because not in use - Ashwin
                    // case 'Last Hour':
                        // toTime = $filter('utcDateTZ')(currentDateobj);
                        // var tempTime = new Date(currentDateobj.setUTCHours(currentDateobj.getUTCHours() - 1));
                        // fromTime = $filter('utcDateTZ')(tempTime);
                        // break;
                    // case 'Last 12 Hour':
                        // toTime = $filter('utcDateTZ')(currentDateobj);
                        // var tempTime = new Date(currentDateobj.setUTCHours(currentDateobj.getUTCHours() - 12));
                        // fromTime = $filter('utcDateTZ')(tempTime);
                        // break;
                    // case 'Yesterday':
                        // var yesterdayDateTime = new Date(currentDateobj.setUTCDate(currentDateobj.getUTCDate() - 1));
                        // yesterdayDateTime.setUTCHours(0);
                        // yesterdayDateTime.setUTCMinutes(0);
                        // yesterdayDateTime.setUTCSeconds(0);
                        // toTime = $filter('utcDateTZ')(yesterdayDateTime);
                        // var yesterdayDateTime2 = new Date(yesterdayDateTime);
                        // var tempTime = new Date(yesterdayDateTime2);
                        // tempTime.setUTCHours(23);
                        // tempTime.setUTCMinutes(59);
                        // tempTime.setUTCSeconds(59);
                        // fromTime = $filter('utcDateTZ')(tempTime);
                        // break;
                    case 'Last 2 Days':
                        toTime = $filter('utcDateTZ')(currentDateobj);
                        var tempTime = new Date(currentDateobj.setUTCDate(currentDateobj.getUTCDate() - 2));
                        tempTime.setUTCHours(0);
                        tempTime.setUTCMinutes(0);
                        tempTime.setUTCSeconds(0);
                        fromTime = $filter('utcDateTZ')(tempTime);
                        break;
                    case 'This Month':
                        toTime = $filter('utcDateTZ')(currentDateobj);
                        var tempTime = new Date(currentDateobj.setUTCDate(1));
                        tempTime.setUTCHours(0);
                        tempTime.setUTCMinutes(0);
                        tempTime.setUTCSeconds(0);
                        fromTime = $filter('utcDateTZ')(tempTime);
                        break;
                    case 'This Week':
                        toTime = $filter('utcDateTZ')(currentDateobj);
                        var d = new Date();
                        var day = d.getUTCDay();
                        diff = d.getUTCDate() - day + (day == 0 ? -6 : 1);
                        tempTime = new Date(d.setUTCDate(diff));
                        tempTime.setUTCHours(0);
                        tempTime.setUTCMinutes(0);
                        tempTime.setUTCSeconds(0);
                        fromTime = $filter('utcDateTZ')(tempTime);
                        break;

                }
                DefaultFilterService.getObservationsTimeRange(defaultFilterCtrl.info['defaultEndCust'], defaultFilterCtrl.info['defaultSysId'], fromTime, toTime)
                    .then(function (response) {
                        var obs, obscnt;
                        if(Array.isArray(response.data.Data)) {
                            for (obscnt in response.data.Data) {
                                obs = {};
                                obs['obs_time'] = response.data.Data[obscnt].obs_ts;
                                var bundleName = response.data.Data[obscnt].bundle_name;
                                obs['bundle_name'] = bundleName;
                                obs['file_name'] = response.data.Data[obscnt].file_name;
                                var found = false;
                                for (var k = 0; k < defaultFilterCtrl.info['defaultSysId'].observations.length; k++) {
                                    if (defaultFilterCtrl.info['defaultSysId'].observations[k].bundle_name == obs.bundle_name) {
                                        found = true;
                                        break;
                                    }
                                }
                                if (!found) {
                                    defaultFilterCtrl.info['defaultSysId'].observations.push(obs);
                                }
                            }
                        }
                    }, handleSessionTimeout);
            }

            defaultFilterCtrl.getSelectedSections = function () {
                var selectedSections = $filter('filter')(SectionsMetaService.getSections(DefaultFilterService.getDefaultObservation()), {
                    'selected': true
                });
                return selectedSections;
            };

            defaultFilterCtrl.resetSections = function () {
                var sections = SectionsMetaService.getSections(DefaultFilterService.getDefaultObservation());
                var modalInstance = $modal.open({
                    templateUrl: 'partials/sectionview_reset_view.html',
                    controller: 'ResetViewController as resetViewCtrl'
                });
                modalInstance.result.then(function () {
                    for (var i in sections) {
                        sections[i]['selected'] = false;
                        sections[i]['default'] = false;
                        sections[i]['visible'] = true;
                        SectionsMetaService.resetFilter(sections[i]);
                    }
                    SectionsMetaService.setSections(DefaultFilterService.getDefaultObservation(), sections);
                    SectionsMetaService.setAppliedView(null);
                    SectionsMetaService.setViewName("Select view");
                    UserTrackingService.standard_user_tracking(defaultFilterCtrl.application, 'Section View', 'Clear Filter', "{}")
                                .then(successHandler, handleSessionTimeout);
                });
            };

            $scope.hideNavigationModal = function () {
                $scope.modal.close();
            };
            // Shows up the save view modal
            defaultFilterCtrl.showModal = function () {
                if (SectionsMetaService.getViewsCount() >= GlobalService.getVal('max_views_limit')) {
                    ModalService.alertBox({msgKey: 'max_views_msg'});
                    return;
                }
                allSectionsDetails = SectionsMetaService.getSections(DefaultFilterService.getDefaultObservation());
                var selectedSections = defaultFilterCtrl.getSelectedSections();
                if (!selectedSections.length) {
                    ModalService.alertBox({msg: 'Please select at least one section!'});
                    return;
                }
                if (!getSelectedSectionsData().length) {
                    ModalService.alertBox({msg: 'Please select at least one column in a section!'});
                    return;
                }
                var selectedSections = $filter('filter')(allSectionsDetails, {
                    'selected': true
                });
                var sectionDataAvailable = false;
                for (var i in selectedSections) {
                    if (!!selectedSections[i].display_data) {
                        sectionDataAvailable = true;
                        break;
                    }
                }
                if (!sectionDataAvailable) {
                    ModalService.alertBox({msg: 'Please select a section with data'});
                    return;
                }
                $modal.open({
                    templateUrl: 'partials/save_view.html',
                    controller: 'SaveFilter as saveFilterCtrl',
                    resolve: {
                        items: function () {
                            return {
                                allSectionsDetails: allSectionsDetails
                            };
                        }
                    }
                })
            };
            var observationObj = {
                getLastHourObservations: getLastHourObservations,
                getLast12HourObservations: getLast12HourObservations,
                getYesterdayObservations: getYesterdayObservations,
                getLast2DaysObservations: getLast2DaysObservations,
                getThisWeekObservations: getThisWeekObservations,
                getMostRecentObservations: getMostRecentObservations,
                getThisMonthObservations: getThisMonthObservations,
                getLastNObservations: getLastNObservations
            };
            
            function getSelectedSectionsData() {
                var selectedSections = $filter('filter')(SectionsMetaService.getSections(DefaultFilterService.getDefaultObservation()), {
                    'selected': true
                });
                var updatedSectionList = [];
                for (var k in selectedSections) {
                    var eachSectionData = selectedSections[k];
                    if (eachSectionData.a_data) {
                        var sectionKeys = eachSectionData.columns;
                        for (var x in sectionKeys) {
                            var aKey = sectionKeys[x];
                            if (aKey.visible) {
                                updatedSectionList.push(eachSectionData);
                                break;
                            }
                        }
                    } else {
                        updatedSectionList.push(eachSectionData);
                    }
                }
                return updatedSectionList;
            }

            $scope.init();
            function successHandler(response) {
            }
            function handleSessionTimeout(response) {
                if (!defaultFilterCtrl.info.sessionTimedOut && response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/timeout/)) {
                    defaultFilterCtrl.info.sessionTimedOut = true;
                    ModalService.sessionTimeout();
                }
            }
        }])

// AnalyticsCtrl - Responsible for holding the model for analytics app and handles authentication.
    .controller('AnalyticsCtrl', ['NavigationService', '$sce', 'ErrorService',
        function (NavigationService, $sce, ErrorService) {
            var analyticsCtrl = this;
            // Returns the url of the currently selected page to load.
            analyticsCtrl.getUrl = function () {
                return NavigationService.getUrl();
            };
            analyticsCtrl.renderHtml = function (html) {
                return $sce.trustAsHtml(html);
            };
            analyticsCtrl.getError = function () {
                return ErrorService.getErrors('analytics');
            };
            analyticsCtrl.isSectionTab = function () {
                if(NavigationService.getUrl() == 'partials/sectionview.html'){
                    return true;
                };
                if(NavigationService.getUrl() != 'partials/sectionview.html'){
                    return false;
                };
                return false;
            };

        }])

// ShowSavedFilters - Responsible for holding the list of saved views and model related to it.
    .controller('ShowSavedFilters', ['$modal', 'metaDataService', 'AppService', 'ModalService', '$cookies', 'SectionsMetaService', 'UserTrackingService', 'GlobalService', 'DefaultFilterService',
        function ($modal, metaDataService, AppService, ModalService, $cookies, SectionsMetaService, UserTrackingService, GlobalService, DefaultFilterService) {
            var showSavedFilterCtrl = this;
            showSavedFilterCtrl.meta = {};
            showSavedFilterCtrl.meta['visible'] = false;
            showSavedFilterCtrl.filterBtn = "all";
            showSavedFilterCtrl.inlineSearch = "";
            showSavedFilterCtrl.views = [];
            showSavedFilterCtrl.dataNotFound = false;
            showSavedFilterCtrl.application = GlobalService.getVal('navLog');
            var setDefaultStatus = null;
            var changeAccessibilityStatus = null;
            // Stores whether session is timed out or not
            var sessionTimedOut = false;
            // Returns the current view.
            showSavedFilterCtrl.getCurrentViewName = function () {
                return SectionsMetaService.getViewName();
            };
            // Loads the list of saved views.
            showSavedFilterCtrl.loadSavedViews = function () {
                showSavedFilterCtrl.savedViewsLoading = true;
                showSavedFilterCtrl.inlineSearch = "";
                // XHR to fetch all the saved views.
                SectionsMetaService.getAllSavedViews()
                    .then(function (response) {
                        showSavedFilterCtrl.savedViewsLoading = false;
                        showSavedFilterCtrl.views = response.data.Data;
                        if (!!showSavedFilterCtrl.views.length) {
                            SectionsMetaService.setViewsCount(showSavedFilterCtrl.views.length);
                        } else {
                            SectionsMetaService.setViewsCount(0);
                        }
                        changeAccessibilityStatus = "success";
                        setDefaultStatus = "success";
                        if (showSavedFilterCtrl.views == "" || showSavedFilterCtrl.views.length == 0) {
                            showSavedFilterCtrl.dataNotFound = true;
                        } else {
                            showSavedFilterCtrl.dataNotFound = false;
                        }
                    }, function (response) {
                        handleSessionTimeout(response);
                        showSavedFilterCtrl.dataNotFound = false;
                    });
            };
            // Fetches meta for the given view and applies the same.
            showSavedFilterCtrl.loadView = function (selectedView) {
                showSavedFilterCtrl.meta.visible = !showSavedFilterCtrl.meta.visible;
                if (!DefaultFilterService.getSelectedObservation()) {
                    ModalService.alertBox({msg: 'Please select observation!'});
                    return;
                }
                // XHR to fetch the meta for the given view.
                SectionsMetaService.loadView(selectedView)
                    .then(function (response) {
                        var appliedView;
                        appliedView = response.data.Data[0];
                        angular.element(document.getElementById("sectionview-select-view-div")).removeClass("open");
                        if (!!appliedView) {
                            SectionsMetaService.applyView(appliedView);
                            SectionsMetaService.setSelectedView(selectedView);
                            // Applying the view that is fetched.
                            UserTrackingService.standard_user_tracking(showSavedFilterCtrl.application, 'Section View', 'Apply View', "{\'" + selectedView['view_name'] + "\'}")
                                .then(successHandler, handleSessionTimeout);
                        } else {
                            ModalService.alertBox({msg: 'No Applied View'});
                        }
                    }, handleSessionTimeout);
            };
            // Shows up the delete view modal.
            showSavedFilterCtrl.deleteView = function (selectedView, event) {
                var modalInstance = $modal.open({
                    templateUrl: 'partials/delete_view.html',
                    controller: 'DeleteViewController as delCtrl',
                    resolve: {
                        deleteModal: function () {
                            return selectedView;
                        }
                    }
                });
                modalInstance.result.then(function () {
                    showSavedFilterCtrl.loadSavedViews();
                    // To refresh the list of views.
                });
            };
            // Set/unset the given view as the default for the current user.
            showSavedFilterCtrl.setDefaultView = function (selectedView, event) {
                // Check given view is default ??
                if (selectedView['default']) {
                    //reset default
                    setDefaultStatus = selectedView['view_name'];
                    // XHR to unset the default view.
                    SectionsMetaService.resetDefault(selectedView)
                        .then(function (response) {
                            showSavedFilterCtrl.loadSavedViews();
                            UserTrackingService.standard_user_tracking(showSavedFilterCtrl.application, 'Section View', 'Reset Default View', "{\'" + selectedView['view_name'] + "\'}")
                                .then(successHandler, handleSessionTimeout);
                        }, function (response) {
                            handleSessionTimeout(response);
                            setDefaultStatus = "error";
                        });
                } else {
                    // Current view is not default.
                    setDefaultStatus = selectedView['view_name'];
                    // XHR to unset the default view.
                    SectionsMetaService.setDefault(selectedView)
                        .then(function (response) {
                            showSavedFilterCtrl.loadSavedViews();
                            UserTrackingService.standard_user_tracking(showSavedFilterCtrl.application, 'Section View', 'Set Default View', "{\'" + selectedView['view_name'] + "\'}")
                                .then(successHandler, handleSessionTimeout);
                        }, function (response) {
                            handleSessionTimeout(response);
                            setDefaultStatus = "error";
                        });
                }
            };
            // Sets the accessibility of a view public/private based on the user selection.
            showSavedFilterCtrl.setAccessibility = function (selectedView, event) {
                changeAccessibilityStatus = selectedView['view_name'];
                // XHR to change the accessibility
                SectionsMetaService.setAccessibility(selectedView)
                    .then(function (response) {
                        showSavedFilterCtrl.loadSavedViews();
                        UserTrackingService.standard_user_tracking(showSavedFilterCtrl.application, 'Section View', !!selectedView['public'] ? 'Set View Private' : 'Set View Public', "{\'" + selectedView['view_name'] + "\'}")
                            .then(successHandler, handleSessionTimeout);
                    }, function (response) {
                        handleSessionTimeout(response);
                        changeAccessibilityStatus = "error";
                    });
            };
            // Filters the views based on user selection on the UI.
            showSavedFilterCtrl.filterByScope = function (view) {
                if (showSavedFilterCtrl.filterBtn == 'all')
                    return true;
                else if (showSavedFilterCtrl.filterBtn == 'my' && view.created_by == showSavedFilterCtrl.getLoggedInUserName())
                    return true;
                else if (showSavedFilterCtrl.filterBtn == 'others' && view.created_by != showSavedFilterCtrl.getLoggedInUserName())
                    return true;
                else
                    return false;
            };
            // Returns the logged in user name
            showSavedFilterCtrl.getLoggedInUserName = function () {
                return metaDataService.getUser()['email'];
            };
            function handleSessionTimeout(response) {
                if (!sessionTimedOut && response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/timeout/)) {
                    sessionTimedOut = true;
                    ModalService.sessionTimeout();
                }
            }

            function successHandler(response) {
            }
        }])
    .controller('DeleteViewController', ['$modalInstance', 'SectionsMetaService', 'UserTrackingService', 'ModalService', 'GlobalService', 'deleteModal', function ($modalInstance, SectionsMetaService, UserTrackingService, ModalService, GlobalService, deleteModal) {
        var delCtrl = this;
        delCtrl.deleteModal = deleteModal;
        delCtrl.deleteModal.deleteOperation = "initiated";
        delCtrl.deleteModal.deleteOperationMsg = "";
        delCtrl.application = GlobalService.getVal('navLog');
        // Closes the open model
        delCtrl.hideDeleteModal = function () {
            $modalInstance.close('ok');
        };
        // Sends the request to delete the given view and tracks the user activity for the operation.
        delCtrl.deleteViewRequest = function (selectedView) {
            delCtrl.deleteModal.deleteOperation = "progress";
            // XHR to delete the given view.
            SectionsMetaService.deleteView(selectedView)
                .then(function (response) {
                    SectionsMetaService.setViewsCount(SectionsMetaService.getViewsCount() - 1);
                    delCtrl.deleteModal.deleteOperation = "success";
                    delCtrl.deleteModal.deleteOperationMsg = "Deleted successfully";
                    //User activity tracking
                    UserTrackingService.standard_user_tracking(delCtrl.application, 'Section View', 'Delete View', "{\'" + selectedView['view_name'] + "\'}")
                        .then(function (response) {
                            
                        }, handleSessionTimeout);
                }, function (response) {
                    handleSessionTimeout(response);
                    delCtrl.deleteModal.deleteOperation = "error";
                    delCtrl.deleteModal.deleteOperationMsg = "Error : " + response.data.Msg;
                });
        };
        function handleSessionTimeout(response) {
            if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/timeout/)) {
                $modalInstance.dismiss('cancel');
                ModalService.sessionTimeout();
            }
        }
    }])

// SaveFilter - Responsible for holding model of the save view modal.
    .controller('SaveFilter', ['$scope', '$modalInstance', 'ModalService', 'AppService', 'GlobalService', 'SectionsMetaService', '$filter', 'UserTrackingService', 'DefaultFilterService', 'items', '$cookies', 'metaDataService',
        function ($scope, $modalInstance, ModalService, AppService, GlobalService, SectionsMetaService, $filter, UserTrackingService, DefaultFilterService, items, $cookies, metaDataService) {
            var saveFilterCtrl = this, savedFiltersList = [], emptySectionList = [];
            var attributeOfSelectedSection = items.allSectionsDetails[0].columns, allSectionsDetails = items.allSectionsDetails;
            saveFilterCtrl.saveModal = {};
            saveFilterCtrl.saveModal.saveStatus = "initiated";
            saveFilterCtrl.saveModal.message = "";
            saveFilterCtrl.form = {};
            saveFilterCtrl.info = {};
            saveFilterCtrl.saveModal.viewOverwrite = false;
            // Stores whether session is timed out or not
            saveFilterCtrl.info.sessionTimedOut = false;
            //Setting first option as selected in section select
            saveFilterCtrl.info.application = GlobalService.getVal('navLog');
            saveFilterCtrl.form = {
                type: items.allSectionsDetails[0].name
            };
            saveFilterCtrl.info.selected = $filter('filter')(allSectionsDetails, {selected: true})[0];
            SectionsMetaService.getAllViews()
                .then(function (response) {
                    savedFiltersList = response.data.Data;
                    SectionsMetaService.setViewsCount(savedFiltersList.length);
                }, handleSessionTimeout);
            // On focus puts the http:// in the kbase field
            saveFilterCtrl.kbaseOnFocus = function () {
                if (saveFilterCtrl.saveModal.kbase == '') {
                    saveFilterCtrl.saveModal.kbase = 'http://';
                }
            };
            // On blur removes the http:// if the user hasn't typed in an url in the kbase field.
            saveFilterCtrl.kbaseOnBlur = function () {
                if (saveFilterCtrl.saveModal.kbase == 'http://') {
                    saveFilterCtrl.saveModal.kbase = '';
                }
            };
            saveFilterCtrl.getEmptySectionList = function () {
                return emptySectionList;
            };
            // Updates the attributes selected for a given section to show in save view modal.
            saveFilterCtrl.updateColumnAttributes = function (sectionName) {
                if (sectionName) {
                    attributeOfSelectedSection = getSection(sectionName).columns;
                }
            };
            // Closes the modal held by $scope.modal
            saveFilterCtrl.hideModal = function () {
                $modalInstance.close('OK');
            };
            saveFilterCtrl.getSelectedSectionsNew = function () {
                emptySectionList = [];
                var selectedSections = $filter('filter')(SectionsMetaService.getSections(DefaultFilterService.getDefaultObservation()), {
                    'selected': true
                });
                var updatedSectionList = [];
                for (var k in selectedSections) {
                    var eachSectionData = selectedSections[k];
                    if (eachSectionData.a_data) {
                        var sectionKeys = eachSectionData.columns;
                        for (var x in sectionKeys) {
                            var aKey = sectionKeys[x];
                            if (aKey.visible) {
                                updatedSectionList.push(eachSectionData);
                                break;
                            }
                        }
                    }
                }
                //filter empty section
                for (var m = 0; m < selectedSections.length; m++) {
                    var match = false;
                    for (var n = 0; n < updatedSectionList.length; n++) {
                        if (selectedSections[m].label == updatedSectionList[n].label) {
                            match = true;
                            break;

                        }
                    }
                    if (!match) {
                        emptySectionList.push(selectedSections[m]);
                    }
                }
                return updatedSectionList;
            };
            saveFilterCtrl.checkViewName = function () {
                saveFilterCtrl.saveModal.viewOverwrite = false;
                if (savedFiltersList && savedFiltersList.length && savedFiltersList.length > 0) {
                    viewDuplicateCheck();
                } else {
                    getAllSavedViews(true);
                }
            };
            // Gets the values from the globals based on the given key.
            saveFilterCtrl.getValue = function (key) {
                return GlobalService.getVal(key);
            };
            // Saves the current selection as new view with details given by the user.
            saveFilterCtrl.saveFilter = function () {
                saveFilterCtrl.submitted = true;
                if (!saveFilterCtrl.form.saveViewModal.$valid) {
                    return;
                }
                saveFilterCtrl.saveModal.saveStatus = "progress";
                var param = {};
                var data = {};
                var i, j, colstr = "", transpose = "", filterstr = "";
                param.name = saveFilterCtrl.saveModal.name;
                param['public'] = saveFilterCtrl.saveModal.access == 'public' ? true : false;
                param['default'] = false;
                data.desc = escape(saveFilterCtrl.saveModal.desc);
                data.kbase = saveFilterCtrl.saveModal.kbase;
                var sections = SectionsMetaService.getSections(DefaultFilterService.getDefaultObservation());
                for (i in sections) {
                    if (sections[i]['selected'] && !!sections[i].a_data) {
                        for (j in sections[i].columns) {
                            if (sections[i].columns[j].visible) {
                                if (colstr) {
                                    colstr += ",";
                                }
                                colstr += sections[i].table_name + ":" + sections[i].columns[j].field;
                                if (!!sections[i].columns[j].filter) {
                                    if (filterstr) {
                                        filterstr += ",";
                                    }
                                    filterstr += sections[i].table_name + ":" + sections[i].columns[j].title + ":" + (sections[i].columns[j].type === "string" ? '~' : sections[i].columns[j].filter.operator) + ":" + sections[i].columns[j].filter.value;
                                }
                            }
                        }
                    }
                    if (transpose && sections[i].selected && !!sections[i].a_data) {
                        transpose += ",";
                    }
                    if (sections[i].selected && !!sections[i].a_data) {
                        transpose += sections[i].table_name + ":" + (sections[i].isTranspose?sections[i].isTranspose: false);
                    }
                }
                data.cols = "{\'" + colstr + "\'}";
                data.transpose = "{\'" + transpose + "\'}";
                data.filters = "{\'" + filterstr + "\'}";
                // XHR to save the view.
                SectionsMetaService.saveSelectedView(param, data)
                    .then(function (response) {
                        SectionsMetaService.setViewsCount(SectionsMetaService.getViewsCount() + 1);
                        saveFilterCtrl.saveModal.saveStatus = "success";
                        saveFilterCtrl.saveModal.message = "View saved successfully.";
                        UserTrackingService.standard_user_tracking(saveFilterCtrl.info.application, 'Section View', 'Save View', data.cols)
                            .then(function (response) {
                                
                            }, handleSessionTimeout);
                    }, function (response) {
                        handleSessionTimeout(response)
                        saveFilterCtrl.saveModal.saveStatus = "error";
                        saveFilterCtrl.saveModal.message = "Error :" + (response.data && response.data.hasOwnProperty('Msg') ? response.data.Msg : '');
                    });
            };
            // Returns the section object based on user selection.
            function getSection(sectionName) {
                attributeOfSelectedSection = [];
                var totalSections = allSectionsDetails.length;
                for (var i = 0; i < totalSections; i++) {
                    if (allSectionsDetails[i].name == sectionName) {
                        return allSectionsDetails[i];
                    }
                }
            }

            function getAllSavedViews() {
                SectionsMetaService.getAllViews().then(function (response) {
                    savedFiltersList = response.data.Data;
                    viewDuplicateCheck();
                }, handleSessionTimeout);
            }
            
            function viewDuplicateCheck() {
                var found = false;
                for (var i = 0; i < savedFiltersList.length; i++) {
                    if (savedFiltersList[i]["view_name"] == saveFilterCtrl.saveModal.name) {
                        if (savedFiltersList[i]["created_by"] == metaDataService.getUser()['email']) {
                            saveFilterCtrl.saveModal.viewOverwrite = true;
                            continue;
                        } else {
                            found = true;
                            break;
                        }
                    }
                }
                if (found) {
                    // mark it as invalid
                    saveFilterCtrl.form.saveViewModal.viewName.$setValidity('duplicate', false)
                } else {
                    saveFilterCtrl.form.saveViewModal.viewName.$setValidity('duplicate', true)
                }
            }

            function handleSessionTimeout(response) {
                if (!saveFilterCtrl.info.sessionTimedOut && response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/timeout/)) {
                    saveFilterCtrl.info.sessionTimedOut = true;
                    saveFilterCtrl.hideModal();
                    ModalService.sessionTimeout();
                }
            }
        }])

// LogiCtrl - To load the external logi dashboards
    .controller('LogiCtrl', ['$scope', '$sce',
        function ($scope, $sce) {
            // sets the given url as the secure url to load on the ui.
            $scope.sceURL = function (url) {
                return $sce.trustAsResourceUrl(url);
            };
        }])
// ConfigCtrl - A single controller for all the configdiff functionality.
    .controller('ConfigCtrl', ['$q', '$scope', '$modal', 'DefaultFilterService', 'ConfigDiffService', 'UtilService', '$filter', 'GlobalService', 'AppService', 'ModalService', '$cookies', 'UserTrackingService', 'InstanceHandler', '$window', 'metaDataService', 'ExplorerService',
        function ($q, $scope, $modal, DefaultFilterService, ConfigDiffService, UtilService, $filter, GlobalService, AppService, ModalService, $cookies, UserTrackingService, InstanceHandler, $window, metaDataService, ExplorerService) {
            var configCtrl = this;
            configCtrl.info = {};
            configCtrl.supportEmail = GlobalService.getVal('supportEmail')
            // Holds the current view name
            configCtrl.info.currentViewName = 'Select view';
            configCtrl.info.ready = false;
            configCtrl.info.userrole = metaDataService.getUser()['role'];
            configCtrl.info.usertype = metaDataService.getUser()['org_type'];
            configCtrl.info['max_obs_limit'] = GlobalService.getVal('max_obs_limit');
            // Maximum limit for the number of observations that can be loaded.
            configCtrl.info['min_obs_limit'] = GlobalService.getVal('min_obs_limit');
            // Minimum limit for the number of observations that can be loaded.
            configCtrl.select = {};
            configCtrl.select['selected'] = true;
            configCtrl.defaultFilters = [];
            // Defines whether gconf info is loaded or not
            configCtrl.info.loaded = false;
            configCtrl.info.sysIdIndex = -1;
            configCtrl.info.selectedSystemId = null;
            configCtrl.info.sysIdLimit = GlobalService.getVal('max_sysid_limit');
            // Stores whether session is timed out or not
            configCtrl.info.sessionTimedOut = false;
            configCtrl.info.setObservationNull = false;
            configCtrl.info.selectedObsGroup = null;
            configCtrl.info.application = GlobalService.getVal('navLog');
            ConfigDiffService.setSectionLoading(true);
            configCtrl.resultLoading = true;

            $scope.$watch('configCtrl.resultLoading', function() {
                if(!configCtrl.resultLoading){
                    AppService.hidePanelLoading();
                }
            })
            //Event to check when application is ready
             $scope.$on('AppLoadEvent-apps', function (event, reload) {
                if(!configCtrl.resultLoading){  
                    AppService.hidePanelLoading();
                }
                if(reload) {
                    $scope.init();
                }
             });

            configCtrl.showSysid2DD = function() {
                var bool = metaDataService.isSysid2Enable();
                return bool;
            };            
            // Returns the current view.
            configCtrl.getCurrentViewName = function () {
                return ConfigDiffService.getViewName();
            };
            // Gets the values from the globals based on the given key.
            configCtrl.getValue = function (key) {
                return GlobalService.getVal(key);
            };
            configCtrl.getSysId2Tooltip = function() {
            	var manufacturer = GlobalService.getVal('manufacturer');
            	var sysId2 = GlobalService.getVal('systemId2');
            	if(sysId2.customer.hasOwnProperty(manufacturer)) {
            		return sysId2.customer[manufacturer];
            	} else {
            		return sysId2.common;
            	}
            };
            // Returns true if the section has any filter applied on it.
            configCtrl.hasFilter = function (section) {
                var bool = false, i, keys;
                if (!!section.filter) {
                    keys = Object.keys(section.filter);
                    if (keys.length != 0) {
                        for (i in keys) {
                            if (!!section.filter[keys[i]]['value'] || section.filter[keys[i]]['value'] === 0) {
                                bool = true;
                            }
                        }
                    }
                }
                return bool;
            };
            // Resets the applied filters for any given section.
            configCtrl.resetFilter = function (section) {
                ConfigDiffService.resetFilter(section);
                resetViewCheck();
            };

            // XHR to get the ec and sys info
            ConfigDiffService.getSavedViews()
                .then(function (response) {
                    configCtrl.views = response.data.Data;
                    ConfigDiffService.setViewsCount(configCtrl.views.length);
                }, handleSessionTimeout);
             
            $scope.init = function() {
                configCtrl.info.ready = true;
                ConfigDiffService.setSectionLoading(false);

                configCtrl.resultLoading = false;

                configCtrl.info.ready = false;
                // XHR to load all the sections meta data.
                ConfigDiffService.getAll()
                    .then(function (response) {
                        obs = configCtrl.info['defaultObservation'];
                        sorted_data = $filter("filter")(response.data.Data, {
                            "namespace_type": "!UNPARSED"
                        });
                        sorted_data = $filter("filter")(sorted_data, {
                            "namespace_type": "!EVENT"
                        });
                        sorted_data = $filter("orderBy")(sorted_data, "label");
                        sections = sorted_data;
                        ConfigDiffService.setSections(sections);
                        // XHR to check if there is a default view set for the user
                        ConfigDiffService.getDefault()
                            .then(function (response) {
                                var dashboardView = ConfigDiffService.getLoadView();
                                if(!!dashboardView) {
                                    configCtrl.loadDashboardView(dashboardView, response.data.Data, sections);
                                } else {
                                    ConfigDiffService.setSectionLoading(false);
                                    configCtrl.loadDefaultView(response.data.Data, sections);
                                }                                        
                                if (configCtrl.info.setObservationNull == true) {
                                    configCtrl.info.setObservationNull = false;
                                    configCtrl.info['defaultObservation'] = null;
                                    DefaultFilterService.setDefaultObservation(null);
                                    DefaultFilterService.setSelectedObservation(null);
                                }
                                configCtrl.info.ready = true;
                            }, handleSessionTimeout);
                    }, function (response) {
                        sections = response.data.Data;
                        handleSessionTimeout(response)
                    });
            };
            
            $scope.$on("LoadConfigDiffView", function(event) {
            	$scope.init();
            });
            
            $scope.init();

            configCtrl.moveThroughSysId = function ($event) {
                var sysIds = configCtrl.info.defaultEndCust.sys_ids;
                if (!!configCtrl.sysfilter) {
                    sysIds = $filter('filter')(configCtrl.info.defaultEndCust.sys_ids, configCtrl.sysfilter);
                }
                if ($event.keyCode == 40) {
                    if (configCtrl.info.sysIdIndex == -1 || configCtrl.info.sysIdIndex == (sysIds.length - 1)) {
                        configCtrl.info.sysIdIndex = 0;
                    } else {
                        configCtrl.info.sysIdIndex++;
                    }
                    for (var i in sysIds) {
                        sysIds[i]['selected'] = false;
                    }
                    sysIds[configCtrl.info.sysIdIndex]['selected'] = true;
                    configCtrl.info.selectedSystemId = sysIds[configCtrl.info.sysIdIndex];
                } else if ($event.keyCode == 38) {
                    if (configCtrl.info.sysIdIndex == -1 || configCtrl.info.sysIdIndex == 0) {
                        configCtrl.info.sysIdIndex = sysIds.length - 1;
                    } else {
                        configCtrl.info.sysIdIndex--;
                    }
                    for (var i in configCtrl.info.defaultEndCust.sys_ids) {
                        configCtrl.info.defaultEndCust.sys_ids[i]['selected'] = false;
                    }
                    sysIds[configCtrl.info.sysIdIndex]['selected'] = true;
                    configCtrl.info.selectedSystemId = sysIds[configCtrl.info.sysIdIndex];
                } else if ($event.keyCode == 13) {
                    configCtrl.info.defaultSysId = configCtrl.info.selectedSystemId;
                    configCtrl.changeSysId();
                    configCtrl.resetMoveThroughSysId();
                    angular.element('.btn-group.open .dropdown-toggle').dropdown('toggle');
                    if (!!configCtrl.sysfilter) {
                        configCtrl.sysfilter.sys_id = "";
                    }
                } else {
                    configCtrl.resetMoveThroughSysId();
                }
            };
            configCtrl.resetMoveThroughSysId = function () {
                configCtrl.info.sysIdIndex = -1;
                configCtrl.info.selectedSystemId = null;
                for (var i in configCtrl.info.defaultEndCust.sys_ids) {
                    configCtrl.info.defaultEndCust.sys_ids[i]['selected'] = false;
                }
            };
            configCtrl.getSectionsLoading = function () {
                return ConfigDiffService.getSectionLoading();
            };
            function setSelectedObsGroup() {
                if (DefaultFilterService.getSelectedObsGrp()) {
                    configCtrl.info.selectedObsGroup = DefaultFilterService.getSelectedObsGrp();
                }
            }
            function checkSysIdMatch(sysId) {
                for (var i = 0; i < configCtrl.defaultFilters[0].sys_ids.length; i++) {
                    if (configCtrl.defaultFilters[0].sys_ids[i].sys_id == sysId) {
                        configCtrl.info['defaultSysId'] = configCtrl.defaultFilters[0].sys_ids[i];
                        DefaultFilterService.setDefaultSysId(configCtrl.info['defaultSysId']);
                        break;
                    }
                }
            }
            configCtrl.selectObsGroup = function (obsgrp) {
                configCtrl.info.selectedObsGroup = obsgrp;
                DefaultFilterService.setSelectedObsGrp(obsgrp);
            };
            // Returns the current sections object holding all the sections data.
            configCtrl.getSections = function () {
                return ConfigDiffService.getSections();
            };
            // Keeps the shownAll field in sync with column selection by the user for the given section.
            configCtrl.changeShownAll = function (section) {
                var key, bool = true, no_cols = true;
                for (key in section.keys) {
                    if (!section.keys[key].visible) {
                        bool = false;
                        break;
                    }
                }
                section.shownAll = bool;
                for (key in section.keys) {
                    if (section.keys[key].visible) {
                        no_cols = false;
                        break;
                    }
                }
                var cols_list = "";
                for (key in section.keys) {
                    if (section.keys[key].visible) {
                        if(cols_list == "") {
                            cols_list += section.keys[key].col_name;
                        } else {
                            cols_list += "," + section.keys[key].col_name;
                        }
                    }
                }
                
                section.no_cols = no_cols;
                resetViewCheck();
                UserTrackingService.standard_user_tracking(configCtrl.info.application, 'Config Diff', 'Columns selected', "{\'" + section.label + "\':\'" + cols_list + "\'}")
                        .then(successHandler, handleSessionTimeout);
            };
            // Remove a section from the selection and logs the user activity.
            configCtrl.removeSection = function (section) {
                section['default'] = false;
                section['selected'] = false;
                resetViewCheck();
                UserTrackingService.standard_user_tracking(configCtrl.info.application, 'Config Diff', 'Remove Section', "{\'" + section['name'] + "\'}")
                    .then(function (response) {
                        
                    }, handleSessionTimeout);
            };
            // Toggles the visibility of all the columns for a given section.
            configCtrl.toggleAll = function (section) {
                var key;
                for (key in section.keys) {
                    section.keys[key].visible = !!section.shownAll;
                }
                var cols_list = "";
                for (key in section.keys) {
                    if (section.keys[key].visible) {
                        if(cols_list == "") {
                            cols_list += section.keys[key].col_name;
                        } else {
                            cols_list += "," + section.keys[key].col_name;
                        }
                    }
                }
                if (!section.shownAll) {
                    section.no_cols = true;
                } else {
                    section.no_cols = false;
                }
                resetViewCheck();
                UserTrackingService.standard_user_tracking(configCtrl.info.application, 'Config Diff', 'Columns selected', "{\'" + section.label + "\':\'" + cols_list + "\'}")
                        .then(successHandler, handleSessionTimeout);
            };
            // Returns the kb link for the current view.
            configCtrl.getKbLink = function () {
                return ConfigDiffService.getKbLink();
            };
            // Cancel button click handler for selection of sections in the config diff
            configCtrl.cancel = function () {
                configCtrl.visible = false;
                 var i, sections = ConfigDiffService.getSections();
                for (i in sections) {
                    sections[i]['default'] = sections[i].selected;
                }
                ConfigDiffService.setSections(sections);
               
            };
            // Done button click handler for selection of sections in the config diff
            configCtrl.done = function (event) {
                if (!configCtrl.info.defaultObservation) {
                    ModalService.alertBox({msg: 'Please select observation!'});
                    return;
                }
                var section, error_txt = "", sections = ConfigDiffService.getSections();
                if (configCtrl.info['defaultEndCust'] === null) {
                    error_txt += "Please select End Customer.\n";
                }
                if (configCtrl.info['defaultSysId'] === null) {
                    error_txt += "Please select System ID.\n";
                }
                if (error_txt.length > 0) {
                    configCtrl.visible = false;
                    for (section in sections) {
                        if (sections[section]['selected'] == true) {
                            sections[section]['default'] = true;
                        } else {
                            sections[section]['default'] = false;
                        }
                    }
                    ConfigDiffService.setSections(sections);
                    return;
                } else {
                    var sections_list = "";
                    for (section in sections) {
                        if (sections[section]['default'] == true) {
                            if (sections_list == "") {
                                sections_list += sections[section]['label'];
                            }
                            else {
                                sections_list += "," + sections[section]['label'];
                            }
                            if (!sections[section].selected) {
                                resetViewCheck();
                            }
                            if(!sections[section].selected) {
                                ConfigDiffService.loadData(sections[section], $scope, configCtrl.info['defaultEndCust'], configCtrl.info['defaultSysId'], configCtrl.info['defaultObservation']);
                            }
                            sections[section].selected = true;
                        } else {
                            if (sections[section].selected == true) {
                                resetViewCheck();
                            }
                            sections[section].selected = false;
                        }
                    }
                    UserTrackingService.standard_user_tracking(configCtrl.info.application, 'Config Diff', 'Sections Selected', "{\'" + sections_list + "\'}")
                        .then(function(response) {
                            
                        }, handleSessionTimeout);
                    ConfigDiffService.setSections(sections);
                    configCtrl.visible = false;
                }
            };
            
            
            configCtrl.loadDashboardView = function(dashboardView, defView, sections) {
                if(dashboardView.type == "custom") {
                    var view = dashboardView.view;
                    view.view_name = "Select View";
                    ConfigDiffService.applyView(view, $scope, sections, configCtrl.info['defaultEndCust'], configCtrl.info['defaultSysId'], configCtrl.info['defaultObservation']);
                    configCtrl.info.currentViewName = view.view_name;
                    ConfigDiffService.setSectionLoading(false);
                } else if (dashboardView.type == "savedView") {
                    ConfigDiffService.getAllViews().then(function(response) {
                        var view = $filter('filter')(response.data.Data, {view_name: dashboardView.view}, true) || [];
                        if(view.length == 1) {
                            firstTimeLoaded = true;
                            configCtrl.loadView(view[0]);
                        } else {
                            ConfigDiffService.setSectionLoading(false);
                            ModalService.alertBox({msg: "View not found"});
                            if(!firstTimeLoaded) {
                                configCtrl.loadDefaultView(defView, sections);
                            }
                        }
                    }, function(response) {
                        ConfigDiffService.setSectionLoading(false);
                        ModalService.alertBox({msg: "View not found"});
                        if(!firstTimeLoaded) {
                            configCtrl.loadDefaultView(defView, sections);
                        }
                    });
                }
                ConfigDiffService.setLoadView(null);
            };            
            configCtrl.getSysId2 = function() {
                return ConfigDiffService.getSysId2();
            };            
            configCtrl.getSysId2List = function() {
                configCtrl.info.sid2 = DefaultFilterService.getSubSys();
                if(configCtrl.info.sid2 && configCtrl.info.sid2.length && configCtrl.info.sid2.length > 0){
                    if(!ConfigDiffService.getSysId2()){
                        ConfigDiffService.setSysId2(configCtrl.info.sid2[0]);
                    }
                }
                return configCtrl.info.sid2;
            };
            configCtrl.changeSubSysId = function(sid){
                if(ConfigDiffService.getSysId2() == sid){
                    return;
                }
                ConfigDiffService.setSysId2(sid);
                var sections = ConfigDiffService.getSections();
                 var sections_list = "";
                    for (section in sections) {
                        if (sections[section]['default'] == true) {
                            if (sections_list == "") {
                                sections_list += sections[section]['label'];
                            }
                            else {
                                sections_list += "," + sections[section]['label'];
                            }
                           /* if (!sections[section].selected) {
                                resetViewCheck();
                            }*/
                            //if(!sections[section].selected) {
                                ConfigDiffService.loadData(sections[section], $scope, configCtrl.info['defaultEndCust'], configCtrl.info['defaultSysId'], configCtrl.info['defaultObservation']);
                            //}
                            sections[section].selected = true;
                        } else {
                            if (sections[section].selected == true) {
                                resetViewCheck();
                            }
                            sections[section].selected = false;
                        }
                    }
                    ConfigDiffService.setSections(sections);
            };

            configCtrl.loadDefaultView = function(defView, sections) {
                firstTimeLoaded = true;
                if (defView) {
                    // if there is a default view set as default then apply that view.
                    // configCtrl.info.currentViewName = defView.view_name;
                    // ConfigDiffService.applyView(defView, $scope, sections, configCtrl.info['defaultEndCust'], configCtrl.info['defaultSysId'], configCtrl.info['defaultObservation']);
                } else {
                    // configCtrl.info.currentViewName = 'Select view';
                    // var sectionsCount = 0;
                    // var sectionsLoadCount = 0;
                    // for (section in sections) {
                        // if (sections[section]['default'] == true) {
                            // sections[section].selected = true;
                            // sectionsCount++;
                            // sections[section].deferred = $q.defer();
                            // ConfigDiffService.loadData(sections[section], $scope, configCtrl.info['defaultEndCust'], configCtrl.info['defaultSysId'], configCtrl.info['defaultObservation'], sections[section].deferred);
                            // sections[section].deferred.promise.then(function () {
                                // sectionsLoadCount = sectionsLoadCount + 1;
                                // if (configCtrl.info.currentViewName != 'Select view' && sectionsLoadCount == sectionsCount) {
                                    // configCtrl.loadView(configCtrl.info.currentView);
                                // }
                            // }, function () {
                                // sectionsLoadCount = sectionsLoadCount + 1;
                                // if (configCtrl.info.currentViewName != 'Select view' && sectionsLoadCount == sectionsCount) {
                                    // configCtrl.loadView(configCtrl.info.currentView);
                                // }
                            // });
                        // } else {
                            // sections[section].selected = false;
                        // }
                    // }
                }
                // if (defView) {
                    // configCtrl.info.currentViewName = defView.view_name;
                    // ConfigDiffService.applyView(defView, $scope, sections, configCtrl.info['defaultEndCust'], configCtrl.info['defaultSysId'], configCtrl.info['defaultObservation']);
                // } else {
                    // for (section in sections) {
                        // if (sections[section]['default'] == true) {
                            // sections[section].selected = true;
                            // ConfigDiffService.loadData(sections[section], $scope, configCtrl.info['defaultEndCust'], configCtrl.info['defaultSysId'], configCtrl.info['defaultObservation']);
                        // } else {
                            // sections[section].selected = false;
                        // }
                    // }
                // }
                // ConfigDiffService.setSectionLoading(false);
            };
            
            var firstTimeLoaded = false;
            
            // Angular watcher to watch the changes to selected observation
            $scope.$watch("configCtrl.info['defaultObservation']", function (newVal, oldVal) {
                configCtrl.info.defaultObservation = DefaultFilterService.getDefaultObservation();
                //need to remove: HACK
                return;
              /*  var sorted_data, i, obs;
                var section, sections, old_sections;
                configCtrl.info['selected'] = undefined;
                if (!!newVal && !!newVal['obs_time']) {
                    var isSections = ConfigDiffService.getSections();
                    if (obs == undefined && !(isSections && isSections.length > 0)) {
                        // First time
                        configCtrl.info['file_name'] = newVal['file_name'];
                        configCtrl.info.ready = false;
                        // XHR to load all the sections meta data.
                        ConfigDiffService.getAll()
                            .then(function (response) {
                                obs = configCtrl.info['defaultObservation'];
                                sorted_data = $filter("filter")(response.data.Data, {
                                    "namespace_type": "!UNPARSED"
                                });
                                sorted_data = $filter("filter")(sorted_data, {
                                    "namespace_type": "!EVENT"
                                });
                                sorted_data = $filter("orderBy")(sorted_data, "label");
                                sections = sorted_data;
                                ConfigDiffService.setSections(sections);
                                // XHR to check if there is a default view set for the user
                                ConfigDiffService.getDefault()
                                    .then(function (response) {
                                        var dashboardView = ConfigDiffService.getLoadView();
                                        if(!!dashboardView) {
                                            configCtrl.loadDashboardView(dashboardView, response.data.Data, sections);
                                        } else {
                                            ConfigDiffService.setSectionLoading(false);
                                            configCtrl.loadDefaultView(response.data.Data, sections);
                                        }
                                        
                                        // if (response.data.Data) {
                                            // // if there is a default view set as default then apply that view.
                                            // configCtrl.info.currentViewName = response.data.Data.view_name;
                                            // ConfigDiffService.applyView(response.data.Data, $scope, sections, configCtrl.info['defaultEndCust'], configCtrl.info['defaultSysId'], configCtrl.info['defaultObservation']);
                                        // } else {
                                            // configCtrl.info.currentViewName = 'Select view';
                                            // var sectionsCount = 0;
                                            // var sectionsLoadCount = 0;
                                            // for (section in sections) {
                                                // if (sections[section]['default'] == true) {
                                                    // sections[section].selected = true;
                                                    // sectionsCount++;
                                                    // sections[section].deferred = $q.defer();
                                                    // ConfigDiffService.loadData(sections[section], $scope, configCtrl.info['defaultEndCust'], configCtrl.info['defaultSysId'], configCtrl.info['defaultObservation'], sections[section].deferred);
                                                    // sections[section].deferred.promise.then(function () {
                                                        // sectionsLoadCount = sectionsLoadCount + 1;
                                                        // if (configCtrl.info.currentViewName != 'Select view' && sectionsLoadCount == sectionsCount) {
                                                            // configCtrl.loadView(configCtrl.info.currentView);
                                                        // }
                                                    // }, function () {
                                                        // sectionsLoadCount = sectionsLoadCount + 1;
                                                        // if (configCtrl.info.currentViewName != 'Select view' && sectionsLoadCount == sectionsCount) {
                                                            // configCtrl.loadView(configCtrl.info.currentView);
                                                        // }
                                                    // });
                                                // } else {
                                                    // sections[section].selected = false;
                                                // }
                                            // }
                                        // }
                                        if (configCtrl.info.setObservationNull == true) {
                                            configCtrl.info.setObservationNull = false;
                                            configCtrl.info['defaultObservation'] = null;
                                            DefaultFilterService.setDefaultObservation(null);
                                            DefaultFilterService.setSelectedObservation(null);
                                        }
                                        configCtrl.info.ready = true;
                                        // ConfigDiffService.setSectionLoading(false);
                                    }, handleSessionTimeout);
                            }, function (response) {
                                sections = response.data.Data;
                                handleSessionTimeout(response)
                            });
                    } else {
                        configCtrl.info.ready = true;
                        // if sections meta data is already present in the cache.
                        sections = ConfigDiffService.getSections();
                        ConfigDiffService.setSectionLoading(false);
                        // if there's an applied view
                        var dashboardView = ConfigDiffService.getLoadView();
                        if(!!dashboardView) {
                            for (var i in sections) {
                                sections[i]['selected'] = false;
                                sections[i]['default'] = false;
                                sections[i]['count'] = 2;
                                ConfigDiffService.resetFilter(sections[i]);
                            }
                            ConfigDiffService.setSections(sections);
                            ConfigDiffService.setAppliedView(null);
                            configCtrl.info.currentViewName = 'Select view';
                            configCtrl.loadDashboardView(dashboardView, null, sections);
                        } else {
                            if (!!ConfigDiffService.getAppliedView()) {
                                // then apply that view effectively for the selected observation.
                                configCtrl.info.currentViewName = ConfigDiffService.getAppliedView()['view_name'];
                                ConfigDiffService.applyView(ConfigDiffService.getAppliedView(), $scope, sections, configCtrl.info['defaultEndCust'], configCtrl.info['defaultSysId'], configCtrl.info['defaultObservation']);
                            } else {
                                // if there's no applied view.
                                for (section in sections) {
                                    if (sections[section]['selected'] == true) {
                                        delete sections[section].data;
                                        // delete sections[section].keys;
                                        delete sections[section].ref_data;
                                        ConfigDiffService.loadData(sections[section], $scope, configCtrl.info['defaultEndCust'], configCtrl.info['defaultSysId'], configCtrl.info['defaultObservation']);
                                    } else {
                                        sections[section].selected = false;
                                        sections[section]['default'] = false;
                                    }
                                }
                            }
                        }
                        
                        if (configCtrl.info.setObservationNull == true) {
                            configCtrl.info.setObservationNull = false;
                            configCtrl.info['defaultObservation'] = null;
                            DefaultFilterService.setDefaultObservation(null);
                            DefaultFilterService.setSelectedObservation(null);
                        }
                    }
                    ConfigDiffService.setSections(sections);
                }*/
            });
            // XHR to load the grouping meta info.
            DefaultFilterService.getObsGroups()
                .then(function (response) {
                    configCtrl.obsGroups = response.data.Data;
                }, function (response) {
                    configCtrl.obsGroups = response.data.Data;
                });
            // Increments the obs count for the configdiff
            configCtrl.incObsCount = function (section) {
                if (section.count < configCtrl.info.max_obs_limit) {
                    section.count = parseInt(section.count) + 1;
                    delete section.data;
                    delete section.ref_data;
                    ConfigDiffService.loadData(section, $scope, configCtrl.info['defaultEndCust'], configCtrl.info['defaultSysId'], configCtrl.info['defaultObservation']);
                    UserTrackingService.standard_user_tracking(configCtrl.info.application, 'Config Diff', 'Add Observation', "{\'" + section['name'] + "\'}")
                        .then(function (response) {
                            
                        }, handleSessionTimeout);
                }
            };
            // Decrements the obs count for the configdiff
            configCtrl.decObsCount = function (section) {
                if (section.count > configCtrl.info.min_obs_limit) {
                    section.count -= 1;
                    delete section.data;
                    delete section.ref_data;
                    ConfigDiffService.loadData(section, $scope, configCtrl.info['defaultEndCust'], configCtrl.info['defaultSysId'], configCtrl.info['defaultObservation']);
                    UserTrackingService.standard_user_tracking(configCtrl.info.application, 'Config Diff', 'Remove Observation', "{\'" + section['name'] + "\'}")
                        .then(function (response) {
                            
                        }, handleSessionTimeout);
                }
            };
            // Triggered when then ec changes
            configCtrl.changeEndCust = function () {
                configCtrl.info['defaultObservation'] = null;
                configCtrl.info['defaultSysId'] = null;
                DefaultFilterService.setDefaultEndCust(configCtrl.info['defaultEndCust']);
            };
            // Triggered when the sys changes
            configCtrl.changeSysId = function () {
                if (!!configCtrl.sysfilter) {
                    configCtrl.sysfilter.sys_id = "";
                }
                if (configCtrl.info['defaultSysId'].observations === undefined) {
                    DefaultFilterService.getObservations(configCtrl.info['defaultEndCust'], configCtrl.info['defaultSysId'])
                        .then(function (response) {
                            var obs, obscnt;
                            configCtrl.info['defaultSysId'].observations = [];
                            for (obscnt in response.data.Data) {
                                obs = {};
                                obs['obs_time'] = response.data.Data[obscnt].obs_ts;
                                var bundleName = response.data.Data[obscnt].bundle_name;
                                obs['obs_url'] = response.data.Data[obscnt].bundle_name;
                                obs['bundle_name'] = bundleName;
                                obs['file_name'] = response.data.Data[obscnt].file_name;
                                configCtrl.info['defaultSysId'].observations.push(obs);
                            }
                            getObservationsTimeRange('This Month');
                            getObservationsTimeRange('This Week');
                            getObservationsTimeRange('Last 2 Days');
                        }, handleSessionTimeout);
                }
                if (configCtrl.info['defaultSysId'].lastNObservations === undefined) {
                    DefaultFilterService.getNObservations(configCtrl.info['defaultEndCust'], configCtrl.info['defaultSysId'], GlobalService.getVal('no_of_bundles'))
                        .then(function (response) {
                            var obs;
                            configCtrl.info['defaultSysId'].lastNObservations = [];
                            for (var i = 0; i < response.data.Data.length; i++) {
                                obs = {};
                                obs['obs_time'] = response.data.Data[i].obs_ts;
                                var bundleName = response.data.Data[i].bundle_name;
                                obs['obs_url'] = response.data.Data[i].bundle_name;
                                obs['bundle_name'] = bundleName;
                                configCtrl.info['defaultSysId'].lastNObservations.push(obs);
                            }
                        }, handleSessionTimeout);
                }
                configCtrl.info['defaultObservation'] = null;
                DefaultFilterService.setDefaultObservation(null);
                DefaultFilterService.setSelectedObservation(null);
                DefaultFilterService.setDefaultSysId(configCtrl.info['defaultSysId']);
            };
            // Sets the given observation as the current observation
            configCtrl.setDefaultObservation = function (obs) {
                ConfigDiffService.setAppliedView(null);
                configCtrl.info['defaultObservation'] = obs;
                DefaultFilterService.setDefaultObservation(configCtrl.info['defaultObservation']);
                DefaultFilterService.setSelectedObservation(configCtrl.info['defaultObservation']);
            };

            // Returns all the observations splicing only the bundle names from the obs_url.
            configCtrl.getObservations = function (obsgrp) {
                var obsMethod;
                if (!obsgrp) return;
                obsMethod = obsgrp.replace(/\s/g, '');
                obsMethod = 'get' + obsMethod + 'Observations';
                obsMethod = observationObj[obsMethod];
                if (typeof obsMethod === 'function') {
                    return obsMethod();
                } else {
                    ModalService.alertBox({msg: 'Not function'});
                }
            };
            function getObservationsTimeRange(obsgrp) {
                var fromTime, toTime;
                var currentDateobj = new Date();
                var Day = currentDateobj.getUTCDate();
                var Hour = currentDateobj.getUTCHours();
                var Month = 1 + (currentDateobj.getUTCMonth());
                var Year = currentDateobj.getUTCFullYear();
                switch (obsgrp) {
                    // These cases are not used according to unit tests --- still keeping for future reference
                    // case 'Last Hour':
                        // toTime = $filter('utcDateTZ')(currentDateobj);
                        // var tempTime = new Date(currentDateobj.setUTCHours(currentDateobj.getUTCHours() - 1));
                        // fromTime = $filter('utcDateTZ')(tempTime);
                        // break;
                    // case 'Last 12 Hour':
                        // toTime = $filter('utcDateTZ')(currentDateobj);
                        // var tempTime = new Date(currentDateobj.setUTCHours(currentDateobj.getUTCHours() - 12));
                        // fromTime = $filter('utcDateTZ')(tempTime);
                        // break;
                    // case 'Yesterday':
                        // var yesterdayDateTime = new Date(currentDateobj.setUTCDate(currentDateobj.getUTCDate() - 1));
                        // yesterdayDateTime.setUTCHours(0);
                        // yesterdayDateTime.setUTCMinutes(0);
                        // yesterdayDateTime.setUTCSeconds(0);
                        // toTime = $filter('utcDateTZ')(yesterdayDateTime);
                        // var yesterdayDateTime2 = new Date(yesterdayDateTime);
                        // var tempTime = new Date(yesterdayDateTime2);
                        // tempTime.setUTCHours(23);
                        // tempTime.setUTCMinutes(59);
                        // tempTime.setUTCSeconds(59);
                        // fromTime = $filter('utcDateTZ')(tempTime);
                        // break;
                    case 'Last 2 Days':
                        toTime = $filter('utcDateTZ')(currentDateobj);
                        var tempTime = new Date(currentDateobj.setUTCDate(currentDateobj.getUTCDate() - 2));
                        tempTime.setUTCHours(0);
                        tempTime.setUTCMinutes(0);
                        tempTime.setUTCSeconds(0);
                        fromTime = $filter('utcDateTZ')(tempTime);
                        break;
                    case 'This Month':
                        toTime = $filter('utcDateTZ')(currentDateobj);
                        var tempTime = new Date(currentDateobj.setUTCDate(1));
                        tempTime.setUTCHours(0);
                        tempTime.setUTCMinutes(0);
                        tempTime.setUTCSeconds(0);
                        fromTime = $filter('utcDateTZ')(tempTime);
                        break;
                    case 'This Week':
                        toTime = $filter('utcDateTZ')(currentDateobj);
                        var d = new Date();
                        var day = d.getUTCDay();
                        diff = d.getUTCDate() - day + (day == 0 ? -6 : 1);
                        tempTime = new Date(d.setUTCDate(diff));
                        tempTime.setUTCHours(0);
                        tempTime.setUTCMinutes(0);
                        tempTime.setUTCSeconds(0);
                        fromTime = $filter('utcDateTZ')(tempTime);
                        break;
                }
                DefaultFilterService.getObservationsTimeRange(configCtrl.info['defaultEndCust'], configCtrl.info['defaultSysId'], fromTime, toTime)
                    .then(function (response) {
                        var obs, obscnt;
                        if(Array.isArray(response.data.Data)) {
                            for (obscnt in response.data.Data) {
                                obs = {};
                                obs['obs_time'] = response.data.Data[obscnt].obs_ts;
                                var bundleName = response.data.Data[obscnt].bundle_name;
                                obs['bundle_name'] = bundleName;
                                obs['file_name'] = response.data.Data[obscnt].file_name;
                                var found = false;
                                for (var k = 0; k < configCtrl.info['defaultSysId'].observations.length; k++) {
                                    if (configCtrl.info['defaultSysId'].observations[k].bundle_name == obs.bundle_name) {
                                        found = true;
                                        break;
                                    }
                                }
                                if (!found) {
                                    configCtrl.info['defaultSysId'].observations.push(obs);
                                }
                            }
                        }
                    }, handleSessionTimeout);
            }
            
            configCtrl.exportAllPDF = function() {
                if (!selectedSectionsNew().length) {
                    ModalService.alertBox({msg: 'Please select at least one section!'});
                    return;
                }
                if (!selectedSectionsData().length) {
                    ModalService.alertBox({msg: 'Please select at least one column in a section!'});
                    return;
                }
                var selectedSections = $filter('filter')(ConfigDiffService.getSections(), {
                    'selected': true
                });
                var sectionDataAvailable = false;
                for (var i in selectedSections) {
                    if (!!selectedSections[i].data) {
                        sectionDataAvailable = true;
                        break;
                    }
                }
                if (!sectionDataAvailable) {
                    ModalService.alertBox({msg: 'Please select a section with data'});
                    return;
                }
                exportPDF();
            };
            
            function exportPDF() {
                var selectedSections = selectedSectionsNew() || [];
                var sectionAdded = false;
                var pdf = new jsPDF('p', 'pt', 'a1');
                angular.forEach(selectedSections, function(section) {
                    if(Array.isArray(section.data) && section.data.length > 1) {
                        var observationsLength = section.data.length;
                        var selectedCols = $filter('filter')(section.keys, {visible: true}) || [];
                        if(!!selectedCols.length) {
                            var pageAdded = false;
                            if(pdf.autoTableEndPosY() > 2250) {
                                pdf.addPage();
                                pageAdded = true;
                            }
                            
                            var startY = (!!sectionAdded && !pageAdded ? pdf.autoTableEndPosY() : 0) + 60;
                            pdf.text(section.label, 40, startY - 10);
                            pageAdded = false;

                            var cols = [{
                                title: "Observations (" + observationsLength +  ")",
                                key: "obs"
                            }];
                            var colCount = 0;
                            angular.forEach(section.data, function(row) {
                                cols.push({
                                    title: row.obs,
                                    key: "col" + colCount
                                });
                                colCount++;
                            });
                            var rows = [], config = {};
                            angular.forEach(selectedCols, function(col) {
                                var rowObj = {};
                                rowObj["obs"] = col.col_name;
                                for(var i = 0; i < observationsLength; i++) {
                                    rowObj["col" + i] = section.data[i]['data'][col.key];
                                }
                                rows.push(rowObj);
                            });
                            config = {
                                startY: startY,
                                tableWidth: 'auto',
                                columnWidth: 'auto',
                                styles: {
                                    overflow: 'linebreak'
                                }, createdCell: function (cell, data) {
                                    if (data.column.dataKey === 'obs') {
                                       cell.styles.textColor = [41, 128, 185];
                                    }
                                    if (!(data.column.dataKey === 'obs' || data.column.dataKey === 'col0')) {
                                        if(section.ref_data[selectedCols[data.row.index].key].toString() != cell.text) {
                                            data.row.cells[data.column.dataKey].styles.fillColor = data.row.index % 2 == 0 ? [61, 148, 205] : [71, 158, 215];
                                            data.row.cells[data.column.dataKey].styles.textColor = 255;
                                            data.row.cells.obs.styles.textColor = [0, 87, 144];
                                            data.row.cells.obs.styles.fontSize = 11;
                                        }
                                    }  
                                }
                            };
                            
                            pdf.autoTable(cols, rows, config);
                            sectionAdded = true;
                        }
                    }
                });
                if(!!sectionAdded) {
                    pdf.save("Sections.pdf");
                }
            }

            // Shows up the modal for saving the view in configdiff.
            configCtrl.showSaveViewModal = function () {
                if (ConfigDiffService.getViewsCount() >= GlobalService.getVal('max_views_limit')) {
                    ModalService.alertBox({msgKey: 'max_views_msg'});
                    return;
                }
                var allSectionsDetails = selectedSectionsData();
                if (!selectedSectionsNew().length) {
                    ModalService.alertBox({msg: 'Please select at least one section!'});
                    return;
                }
                if (!selectedSectionsData().length) {
                    ModalService.alertBox({msg: 'Please select at least one column in a section!'});
                    return;
                }
                var selectedSections = $filter('filter')(ConfigDiffService.getSections(), {
                    'selected': true
                });
                var sectionDataAvailable = false;
                for (var i in selectedSections) {
                    if (!!selectedSections[i].data) {
                        sectionDataAvailable = true;
                        break;
                    }
                }
                if (!sectionDataAvailable) {
                    ModalService.alertBox({msg: 'Please select a section with data'});
                    return;
                }
                $modal.open({
                    templateUrl: 'partials/config-diff-save-view.html',
                    controller: 'SaveConfigFilter as saveConfigCtrl',
                    resolve: {
                        items: function () {
                            return {
                                allSectionsDetails: allSectionsDetails
                            };
                        }
                    }
                })
            };
            function selectedSectionsNew() {
                var selectedSections = $filter('filter')(ConfigDiffService.getSections(), {
                    'selected': true
                });
                return selectedSections;
            }

            function selectedSectionsData() {
                var selectedSections = $filter('filter')(ConfigDiffService.getSections(), {
                    'selected': true
                });
                var updatedSectionList = [];
                for (var k in selectedSections) {
                    var eachSectionData = selectedSections[k];
                    if (eachSectionData.data) {
                        var sectionKeys = eachSectionData.keys;
                        for (var x in sectionKeys) {
                            var aKey = sectionKeys[x];
                            if (aKey.visible) {
                                updatedSectionList.push(eachSectionData);
                                break;
                            }
                        }
                    } else {
                        updatedSectionList.push(eachSectionData);
                    }
                }
                return updatedSectionList;
            };
            // Fetches the list of saved views
            configCtrl.getSavedViews = function () {
                configCtrl.views = [];
                configCtrl.v_loading = true;
                // XHR to fetch the list of saved views.
                ConfigDiffService.getSavedViews()
                    .then(function (response) {
                        configCtrl.views = response.data.Data;
                        ConfigDiffService.setViewsCount(configCtrl.views.length);
                        configCtrl.v_loading = false;
                        configCtrl.info['filterBtn'] = 'all';
                    }, function (response) {
                        configCtrl.v_loading = false;
                        handleSessionTimeout(response);
                    });
            };
            // Filters the list of saved views based on the user selection on the UI.
            configCtrl.filterByScope = function (view) {
                if (configCtrl.info.filterBtn == 'all')
                    return true;
                else if (configCtrl.info.filterBtn == 'my' && view.created_by == configCtrl.getLoggedInUserName())
                    return true;
                else if (configCtrl.info.filterBtn == 'others' && view.created_by != configCtrl.getLoggedInUserName())
                    return true;
                else
                    return false;
            };
            // Returns the username of the current user.
            configCtrl.getLoggedInUserName = function () {
                return metaDataService.getUser()['email'];
            };
            // Set/unset the given view as default and tracks the user activity.
            configCtrl.setDefaultView = function (view, event) {
                var i;
                // Check if the given view is default
                if (!!!view['default']) {
                    // if given view is not default
                    view.inProgress = true;
                    // XHR to set given view as default.
                    ConfigDiffService.setDefault(view)
                        .then(function (response) {
                            for (i in configCtrl.views) {
                                configCtrl.views[i]['default'] = false;
                            }
                            if (response.data.Status == "Success") {
                                view['default'] = true;
                                UserTrackingService.standard_user_tracking(configCtrl.info.application, 'Config Diff', 'Set Default View', "{\'" + view['view_name'] + "\'}")
                                    .then(function (response) {
                                        
                                    }, handleSessionTimeout);
                            }
                            view.inProgress = false;
                        }, function (response) {
                            if(!handleSessionTimeout(response)) {
                                ModalService.alertBox({msg: 'Failed to set as default. Kindly try after sometime.'});
                            }
                            view.inProgress = false;
                        });
                } else {
                    // if the given view is not the default.
                    view.inProgress = true;
                    // XHR to unset the given view as default.
                    ConfigDiffService.resetDefault(view)
                        .then(function (response) {
                            if (response.data.Status == "Success") {
                                view['default'] = false;
                                UserTrackingService.standard_user_tracking(configCtrl.info.application, 'Config Diff', 'Reset Default View', "{\'" + view['view_name'] + "\'}")
                                    .then(function (response) {
                                        
                                    }, handleSessionTimeout);
                            }
                            view.inProgress = false;
                        }, function (response) {
                            view.inProgress = false;
                            handleSessionTimeout(response);
                        });
                }
            };
            // Shows up the delete view modal
            configCtrl.showDeleteView = function (view, event) {
                var modalInstance = $modal.open({
                    templateUrl: 'partials/delete_config_diff.html',
                    controller: 'DeleteConfigViewController as delConfigCtrl',
                    resolve: {
                        deleteConfigModal: function () {
                            return view;
                        }
                    }
                });
                modalInstance.result.then(function () {
                    // To refresh the list of views.
                    configCtrl.getSavedViews();
                    if (view.view_name == configCtrl.info.currentViewName) {
                        // ModalService.alertBox({msg: 'Your current applied view is lost'});
                        configCtrl.info.currentViewName = "Select view";
                        ConfigDiffService.setKbLink(null);
                    }
                });
            };
            // Sets the accessibility of the given view to private/public based on the user selection on the UI and tracks the user activity.
            configCtrl.setAccessibility = function (view) {
                view.accessProgress = true;
                view['public'] = !view['public'];
                ConfigDiffService.setAccessibility(view)
                    .then(function (response) {
                        if (response.data.Status != "Success") {
                            view['public'] = !view['public'];
                        }
                        view.accessProgress = false;
                        UserTrackingService.standard_user_tracking(configCtrl.info.application, 'Config Diff', !!view['public'] ? 'Set View Public' : 'Set View Private', "{\'" + view['view_name'] + "\'}")
                            .then(function (response) {
                                
                            }, handleSessionTimeout);
                    }, function (response) {
                        view['public'] = !view['public'];
                        view.accessProgress = false;
                        handleSessionTimeout(response)
                    });
            };
            // Loads the given view and tracks the user activity.
            configCtrl.loadView = function (view) {
                if (!DefaultFilterService.getSelectedObservation()) {
                    ModalService.alertBox({msg: 'Please select observation!'});
                    return;
                }
                var me = this;
                ConfigDiffService.loadView(view)
                    .then(function (response) {
                        var appliedView;
                        appliedView = response.data.Data[0];
                        angular.element(document.getElementById("configdiff-select-view-div")).removeClass("open");
                        ConfigDiffService.setSectionLoading(false);
                        if (!!appliedView) {
                            // XHR to fetch the view metadata.
                            ConfigDiffService.applyView(appliedView, $scope, ConfigDiffService.getSections(), configCtrl.info['defaultEndCust'], configCtrl.info['defaultSysId'], configCtrl.info['defaultObservation']);
                            configCtrl.info.currentViewName = view.view_name;
                            ConfigDiffService.setViewName(view.view_name);
                            configCtrl.info.currentView = view;
                            UserTrackingService.standard_user_tracking(configCtrl.info.application, 'Config Diff', 'Apply View', "{\'" + view['view_name'] + "\'}")
                                .then(function (response) {
                                    
                                }, handleSessionTimeout);
                        } else {
                            ModalService.alertBox({msg: 'No Applied View'});
                        }

                    }, function (response) {
                        ConfigDiffService.setSectionLoading(false);
                        if (!handleSessionTimeout(response)) {
                            ModalService.alertBox({msg: 'No view to apply.'});
                        }
                    },me);
            };
            configCtrl.getSelectedSections = function () {
                var selectedSections = $filter('filter')(ConfigDiffService.getSections(), {
                    'selected': true
                });
                return selectedSections;
            };
            configCtrl.resetSections = function () {
                var sections = ConfigDiffService.getSections();
                var modalInstance = $modal.open({
                    templateUrl: 'partials/sectionview_reset_view.html',
                    controller: 'ResetViewController as resetViewCtrl'
                });
                modalInstance.result.then(function () {
                    for (var i in sections) {
                        sections[i]['selected'] = false;
                        sections[i]['default'] = false;
                        sections[i]['count'] = 2;
                        ConfigDiffService.resetFilter(sections[i]);
                    }
                    ConfigDiffService.setSections(sections);
                    ConfigDiffService.setAppliedView(null);
                    ConfigDiffService.setViewName('Select view');
                    configCtrl.info.currentViewName = 'Select view';
                    UserTrackingService.standard_user_tracking(configCtrl.info.application, 'Config Diff', 'Clear Filter', "{}")
                                .then(successHandler, handleSessionTimeout);
                });
            };
            
            /*
            * Golden configuration		
            */		
           		
            var goldenConfig = {};		
            goldenConfig.loading = true;		
            goldenConfig.files = [];		
            goldenConfig.facets = [];		
            goldenConfig.disabled = true;		
            ConfigDiffService.setGoldenConfig(goldenConfig);		
           		
            ConfigDiffService.getGoldenConfigCategories()		
                .then(function (response) {		
                    goldenConfig = ConfigDiffService.getGoldenConfig();		
                    goldenConfig.category = response.data.Data.category;		
                    goldenConfig.sub_category = response.data.Data.sub_category;		
                    if (goldenConfig.category !== 'NA' && goldenConfig.sub_category !== 'NA') {		
                        goldenConfig.disabled = true;		
                        configCtrl.info.loaded = true;		
                    } else {		
                        goldenConfig.disabled = false;		
                        configCtrl.info.loaded = true;		
                    }		
                    ConfigDiffService.setGoldenConfig(goldenConfig);		
                }, handleSessionTimeout);
            
            /*
             * Show Golden config upload modal: for admin user
             */
            configCtrl.showGoldenConfig = function () {
                if (metaDataService.getUser()['role'] == GlobalService.getVal('manufacturer') + '_admin' || metaDataService.getUser()['org_type'] == GlobalService.getVal('gbUserOrgType')) {
                    var modalInstance = $modal.open({
                        templateUrl: 'partials/golden_config.html',
                        controller: 'GoldenConfigController as goldenConfigCtrl'
                    });
                } else {
                    ModalService.alertBox({msg: 'Non admin'});
                }
            };
            /*
             * Fetch file name from file controller
             */
            // Ashwin - Commenting because not used anywhere
            // $scope.getGCUploadedfiles = function (files) {
                // if (files.length > 0) {
                    // var file = {};
                    // for (var i = 0; i < files.length; i++) {
                        // file = {
                            // name: files[i].name,
                            // status: Math.floor((Math.random() * 100) + 1)
                        // };
                        // configCtrl.info.goldenconfig.files.push(file);
                    // }
                // }
            // };
            /*
             * Show diff from non-admin user
             */
            
            configCtrl.toggleGoldenConfigData = function() {
            	if(!!configCtrl.hasGoldenConfigSection()) {
            		configCtrl.clearGoldenConfigData();
            	} else {
            		configCtrl.loadGoldenConfigData();
            	}
            };
            
            configCtrl.loadGoldenConfigData = function () {
                var section, sections = ConfigDiffService.getSections();
                goldenConfig = ConfigDiffService.getGoldenConfig();
                if (!configCtrl.info.loaded) {
                    ModalService.alertBox({msg: 'Golden config not defined. Please contact ' + configCtrl.supportEmail});
                } else if (!goldenConfig.disabled) {
                    ModalService.alertBox({msg: 'Golden config not defined. Please contact ' + configCtrl.supportEmail});
                } else {
                    if ($filter('filter')(sections, {'selected': true}).length) {
                        for (section in sections) {
                            if (sections[section]['default'] == true) {
                                sections[section].selected = true;
                                ConfigDiffService.loadGoldenConfigDiffData(sections[section], $scope, configCtrl.info['defaultEndCust'], configCtrl.info['defaultSysId'], configCtrl.info['defaultObservation']);
                            } else {
                                sections[section].selected = false;
                            }
                        }
                        ConfigDiffService.setSections(sections);
                        configCtrl.visible = false;
                    } else {
                        ModalService.alertBox({msgKey: 'select_section'});
                    }
                }
                ConfigDiffService.setSections(sections);
                configCtrl.visible = false;
            };
            
            configCtrl.hasGoldenConfigSection = function() {
            	var section, sections = ConfigDiffService.getSections();
            	var filteredSections = $filter('filter')(sections, {'selected': true}) || [];
            	if(filteredSections.length) {
            		for (section in filteredSections) {
                            if (filteredSections[section].hasOwnProperty('data')) {
                            	for(var index in filteredSections[section].data) {
                            		if(/golden\s+config/i.test(filteredSections[section].data[index].obs)) {
                            			return true;
                            		}
                            	}
                            }
                        }
            	}
            	return false;
            };
            
            configCtrl.clearGoldenConfigData = function() {
            	var section, sections = ConfigDiffService.getSections();
            	var filteredSections = $filter('filter')(sections, {'default': true}) || [];
            	if(filteredSections.length) {
            		for (section in filteredSections) {
                        if (filteredSections[section]['selected'] == true) {
                        	if(filteredSections[section].hasOwnProperty('data')) {
                        		for(var index in filteredSections[section].data) {
                            		if(/golden\s+config/i.test(filteredSections[section].data[index].obs)) {
                            			ConfigDiffService.loadData(filteredSections[section], $scope, configCtrl.info['defaultEndCust'], configCtrl.info['defaultSysId'], configCtrl.info['defaultObservation']);
                            			break;
                            		}
                            	}
                        	}
                        } else {
                        	filteredSections[section].selected = false;
                        }
                    }
            	}
            };
            
            configCtrl.generateRuleLogic = function(section, column) {
            	ExplorerService.setRuleSection(section.name);
            	var logic = ExplorerService.getRuleText();
            	if(section.columnDesc[column.key] == 'STRING') {
            		logic = "{" + section.label + "." + column['col_name'] + "} LIKE '%" + logic + "%'";
            	} else if(section.columnDesc[column.key] == 'INTEGER' || section.columnDesc[column.key] == 'REAL') {
            		logic = "{" + section.label + "." + column['col_name'] + "} = " + logic;
            	}
            	ExplorerService.setRuleText(logic);
            };
            
            // Shows the section diff in the section viewer
            $scope.showSectionDiff = function (section) {
                if (!DefaultFilterService.getDefaultObservation()) {
                    ModalService.alertBox({msg: 'Please select observation'});
                    return;
                }
                var bundleName = DefaultFilterService.getDefaultObservation()['bundle_name'];
                if (bundleName.indexOf("\/") != -1) {
                    var bundleList = bundleName.split("\/");
                    bundleName = bundleList[bundleList.length - 1];
                }
                var result = {
                    'obs_url': DefaultFilterService.getDefaultObservation()['bundle_name'],
                    'filename': bundleName,
                    'namespace_id': bundleName + '-0',
                    'namespace': section['name'],
                    'obs_date': DefaultFilterService.getDefaultObservation()['obs_time'].substring(0, 19) + 'Z',
                    'sysid': DefaultFilterService.getDefaultSysId()['sys_id']
                };

                var bundlesResult = DefaultFilterService.getBundleDetailForSectionDiff();
                //copy it into result object
                angular.forEach(bundlesResult, function(value, key){
                    if(!result[key]){
                        result[key] = value;
                    }
                });
                var instance = {
                    'type': 'section',
                    'title': 'Section Diff',
                    'defaultTab': 'changes',
                    "app" : configCtrl.info.application,
                    "module" : 'Config Diff',
                    'data': {
                        "result": result,
                        "bundle": /*$filter('bundleName')*/(DefaultFilterService.getDefaultObservation()['bundle_name']),
                        "sysId": DefaultFilterService.getDefaultSysId()['sys_id'],
                        // "file": $filter('bundleName')(DefaultFilterService.getDefaultObservation()['bundle_name']),
                        "instanceDisplay": DefaultFilterService.getConfigDiffFields(),//GlobalService.getVal('instance_viewer_displayfield'),
                        "start_time": DefaultFilterService.getDefaultObservation()['obs_time'].substring(0, 19) + 'Z',
                        "end_time": DefaultFilterService.getDefaultObservation()['obs_time'].substring(0, 19) + 'Z',
                        'observation': DefaultFilterService.getDefaultObservation()['obs_time'],
                        'observationStr': DefaultFilterService.getDefaultObservation()['obs_time']
                    }
                };
                InstanceHandler.addInstance(instance);
            };
            // Filters all observations to return only the last hour observation.
            var getLastHourObservations = function () {
                var observations = [], default_obs, t_obs, obs;
                if (configCtrl.info['defaultSysId']) {
                    default_obs = new Date();
                    default_obs.setHours(default_obs.getHours() - 1);
                    for (obs in configCtrl.info['defaultSysId'].observations) {
                        t_obs = UtilService.parseDate(configCtrl.info['defaultSysId'].observations[obs].obs_time);
                        if (t_obs > default_obs) {
                            observations.push(configCtrl.info['defaultSysId'].observations[obs]);
                        }
                    }
                    return observations;
                }
            };
            // Filters all observations to return only the last 12 hour observation
            var getLast12HourObservations = function () {
                var observations = [], default_obs, t_obs, obs;
                if (configCtrl.info['defaultSysId']) {
                    default_obs = new Date();
                    default_obs.setHours(default_obs.getHours() - 12);
                    for (obs in configCtrl.info['defaultSysId'].observations) {
                        t_obs = UtilService.parseDate(configCtrl.info['defaultSysId'].observations[obs].obs_time);
                        if (t_obs > default_obs) {
                            observations.push(configCtrl.info['defaultSysId'].observations[obs]);
                        }
                    }
                    return observations;
                }
            };
            // Filters all observations to return only yesterday's observations
            var getYesterdayObservations = function () {
                var observations = [], default_obs, t_obs, obs;
                if (configCtrl.info['defaultSysId']) {
                    default_obs = new Date();
                    default_obs.setDate(default_obs.getDate() - 1);
                    for (obs in configCtrl.info['defaultSysId'].observations) {
                        t_obs = UtilService.parseDate(configCtrl.info['defaultSysId'].observations[obs].obs_time);
                        if (t_obs > default_obs) {
                            observations.push(configCtrl.info['defaultSysId'].observations[obs]);
                        }
                    }
                    return observations;
                }
            };
            // Filters all observations to return only last 2 days observations
            var getLast2DaysObservations = function () {
                var observations = [], default_obs, t_obs, obs;
                if (configCtrl.info['defaultSysId']) {
                    default_obs = new Date();
                    default_obs.setDate(default_obs.getDate() - 2);
                    for (obs in configCtrl.info['defaultSysId'].observations) {
                        t_obs = UtilService.parseDate(configCtrl.info['defaultSysId'].observations[obs].obs_time);
                        if (t_obs > default_obs) {
                            observations.push(configCtrl.info['defaultSysId'].observations[obs]);
                        }
                    }
                    return observations;
                }
            };
            // Filters all observations to return only this week observations
            var getThisWeekObservations = function () {
                var observations = [], default_obs, t_obs, obs;
                if (configCtrl.info['defaultSysId']) {
                    default_obs = new Date();
                    for (obs in configCtrl.info['defaultSysId'].observations) {
                        t_obs = UtilService.parseDate(configCtrl.info['defaultSysId'].observations[obs].obs_time);
                        if (t_obs && t_obs.getWeek() === default_obs.getWeek()) {
                            observations.push(configCtrl.info['defaultSysId'].observations[obs]);
                        }
                    }
                    return observations;
                }
            };
            var getMostRecentObservations = function () {
                var observations = [];
                if (configCtrl.info['defaultSysId'] && configCtrl.info['defaultSysId'].lastNObservations) {
                    observations.push(configCtrl.info['defaultSysId'].lastNObservations[0]);
                    return observations;
                }
            };
            // Filters all observations to return only this month's observations
            var getThisMonthObservations = function () {
                var observations = [], default_obs, t_obs, obs;
                if (configCtrl.info['defaultSysId']) {
                    default_obs = new Date();
                    for (obs in configCtrl.info['defaultSysId'].observations) {
                        t_obs = UtilService.parseDate(configCtrl.info['defaultSysId'].observations[obs].obs_time);
                        if (t_obs && t_obs.getMonth() === default_obs.getMonth()) {
                            observations.push(configCtrl.info['defaultSysId'].observations[obs]);
                        }
                    }
                    return observations;
                }
            };
            var getLastNObservations = function () {
                var observations = [];
                if (configCtrl.info['defaultSysId'] && configCtrl.info['defaultSysId'].lastNObservations) {
                    for (obs in configCtrl.info['defaultSysId'].lastNObservations) {
                        observations.push(configCtrl.info['defaultSysId'].lastNObservations[obs]);
                    }
                    return observations;
                }
            };
            var observationObj = {
                getLastHourObservations: getLastHourObservations,
                getLast12HourObservations: getLast12HourObservations,
                getYesterdayObservations: getYesterdayObservations,
                getLast2DaysObservations: getLast2DaysObservations,
                getThisWeekObservations: getThisWeekObservations,
                getMostRecentObservations: getMostRecentObservations,
                getThisMonthObservations: getThisMonthObservations,
                getLastNObservations: getLastNObservations
            };
            // Sets the recent observation as the current observation
            function setRecentObservation() {
                var i, flag = 0, default_obs, t_obs;
                for (i in configCtrl.info['defaultSysId'].observations) {
                    if (flag) {
                        default_obs = UtilService.parseDate(configCtrl.info['defaultObservation'].obs_time);
                        t_obs = UtilService.parseDate(configCtrl.info['defaultSysId'].observations[i].obs_time);
                        if (default_obs < t_obs) {
                            configCtrl.info['defaultObservation'] = configCtrl.info['defaultSysId'].observations[i];
                        }
                    } else {
                        configCtrl.info['defaultObservation'] = configCtrl.info['defaultSysId'].observations[i];
                        flag = 1;
                    }
                }
                DefaultFilterService.setDefaultObservation(configCtrl.info['defaultObservation']);
                DefaultFilterService.setSelectedObservation(configCtrl.info['defaultObservation']);
                configCtrl.info.selectedObsGroup = 'Most Recent';
                DefaultFilterService.setSelectedObsGrp('Most Recent');
            }
            function resetViewCheck() {
                if (configCtrl.info.currentViewName != "Select view") {
                    // ModalService.alertBox({msg: 'Your current applied view is lost'});
                    configCtrl.info.currentViewName = "Select view";
                    ConfigDiffService.setKbLink(null);
                }
            }
            function handleSessionTimeout(response) {
                if (!configCtrl.info.sessionTimedOut && response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/timeout/)) {
                    configCtrl.info.sessionTimedOut = true;
                    ModalService.sessionTimeout();
                    return true;
                }
                return;
            }
            function successHandler() {
            }
        }])
    // Controller for Golden Config
    .controller('GoldenConfigController', ['$scope', '$modalInstance', 'ModalService', 'ConfigDiffService', 'FileUploader', 'GlobalService',
        function($scope, $modalInstance, ModalService, ConfigDiffService, FileUploader, GlobalService) {
                
            var goldenConfigCtrl = this;
            goldenConfigCtrl.info = {};
            goldenConfigCtrl.info.loading = true;
            goldenConfigCtrl.info.goldenConfig = {
            	loading: true,
            	files: [],
            	facets: [],
            	disabled: true
            };
            
            if (goldenConfigCtrl.info.goldenConfig.loading) {
                ConfigDiffService.getAllFacets().then(function (response) {
                    goldenConfigCtrl.info.goldenConfig.facets = ConfigDiffService.formatFacets(response.data.Data);
                    ConfigDiffService.getGoldenConfigCategories().then(function (response) {
                        goldenConfigCtrl.info.loading = false;
                        goldenConfigCtrl.info.goldenConfig.category = response.data.Data.category;
                        goldenConfigCtrl.info.goldenConfig.sub_category = response.data.Data.sub_category;
                        if (goldenConfigCtrl.info.goldenConfig.category !== 'NA' && goldenConfigCtrl.info.goldenConfig.sub_category !== 'NA') {
                            goldenConfigCtrl.info.goldenConfig.disabled = true;
                            angular.forEach(goldenConfigCtrl.info.goldenConfig.facets, function(facet) {
                            	if(facet.name == response.data.Data.category) {
                            		goldenConfigCtrl.info.goldenConfig.category = facet;
                            	}
                            	if(facet.name == response.data.Data.sub_category) {
                            		goldenConfigCtrl.info.goldenConfig.sub_category = facet;
                            	}
                            });
                        } else {
                            goldenConfigCtrl.info.goldenConfig.disabled = false;
                            goldenConfigCtrl.info.goldenConfig.category = goldenConfigCtrl.info.goldenConfig.facets[0];
                            goldenConfigCtrl.info.goldenConfig.sub_category = goldenConfigCtrl.info.goldenConfig.facets[0];
                        }
                        goldenConfigCtrl.info.goldenConfig.loading = false;
                        updateGoldenConfig();
                    }, function (response) {
                        goldenConfigCtrl.info.loading = false;
                        updateGoldenConfig();
                        handleSessionTimeout(response);
                        console.error(response);
                    });
                }, function (response) {
                    goldenConfigCtrl.info.loading = false;
                    updateGoldenConfig();
                    handleSessionTimeout(response);
                    console.error(response);
                });
            } else {
                goldenConfigCtrl.info.loading = false;
            }
            
            var manufacturer = GlobalService.getVal('manufacturer');
            var product = GlobalService.getVal('product');
            var schema = GlobalService.getVal('schema');
            var infoserverDomain = GlobalService.getVal('infoserverDomain');

            // File Upload Object for GoldenConf.
            goldenConfigCtrl.uploader = new FileUploader({
                url: infoserverDomain + '/fileupload/uploadfile/' + manufacturer + '/' + product + '/' + schema,
                queueLimit: 1,
                onBeforeUploadItem: function (item) {
                    item.url = item.url + '?category=' + goldenConfigCtrl.info.goldenConfig.category.name + '&subcategory=' + goldenConfigCtrl.info.goldenConfig.sub_category.name;
                },
                onErrorItem : function(item, response, status, headers) {
                    if(!goldenConfigCtrl.info.sessionTimedOut && response && response.hasOwnProperty('Msg') && response.Msg.match(/timeout/)) {
                        $modalInstance.dismiss('cancel');
                        goldenConfigCtrl.info.sessionTimedOut = true;
                        ModalService.sessionTimeout();
                        return;
                    }
                }
            });
            
            // Initiates the upload of all files.
            goldenConfigCtrl.beginUpload = function () {
                goldenConfigCtrl.uploader.uploadAll();
            };
            
            goldenConfigCtrl.hideModal = function() {
                $modalInstance.dismiss('cancel');
            };
            
            goldenConfigCtrl.changeCategory = function() {
                if(goldenConfigCtrl.info.goldenConfig.category.name == 'all') {
                    goldenConfigCtrl.info.goldenConfig.sub_category = angular.copy(goldenConfigCtrl.info.goldenConfig.category);
                }
                else if(goldenConfigCtrl.info.goldenConfig.sub_category.name == 'all') {
                    goldenConfigCtrl.info.goldenConfig.sub_category = {};
                }
            };
            
            goldenConfigCtrl.changeSubCategory = function() {
                if(goldenConfigCtrl.info.goldenConfig.sub_category.name == 'all') {
                    goldenConfigCtrl.info.goldenConfig.category = angular.copy(goldenConfigCtrl.info.goldenConfig.sub_category);
                } else if(goldenConfigCtrl.info.goldenConfig.category.name == 'all') {
                    goldenConfigCtrl.info.goldenConfig.category = {};
                }
            };

            function updateGoldenConfig() {
                ConfigDiffService.setGoldenConfig(goldenConfigCtrl.info.goldenConfig);
            }
            
            function handleSessionTimeout(response) {
                if (!goldenConfigCtrl.info.sessionTimedOut && response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/timeout/)) {
                    goldenConfigCtrl.info.sessionTimedOut = true;
                    $modalInstance.dismiss('cancel');
                    ModalService.sessionTimeout();
                }
            }
        }])
// SaveFilter - Responsible for holding model of the save view modal.
    .controller('SaveConfigFilter', ['$scope', '$modalInstance', 'ModalService', 'AppService', 'GlobalService', 'ConfigDiffService', '$filter', 'UserTrackingService', 'DefaultFilterService', 'items', '$cookies', 'metaDataService',
        function ($scope, $modalInstance, ModalService, AppService, GlobalService, ConfigDiffService, $filter, UserTrackingService, DefaultFilterService, items, $cookies, metaDataService) {
            var saveConfigCtrl = this, savedFiltersList = [], emptySectionList = [];
            var attributeOfSelectedSection = items.allSectionsDetails[0].columns, allSectionsDetails = items.allSectionsDetails;
            saveConfigCtrl.saveModal = {};
            saveConfigCtrl.saveModal.saveStatus = "initiated";
            saveConfigCtrl.saveModal.message = "";
            saveConfigCtrl.form = {};
            saveConfigCtrl.info = {};
            saveConfigCtrl.info.application = GlobalService.getVal('navLog');
            saveConfigCtrl.saveModal.viewOverwrite = false;
            // Stores whether session is timed out or not
            saveConfigCtrl.info.sessionTimedOut = false;
            //Setting first option as selected in section select
            saveConfigCtrl.form = {
                visible: true,
                message: ""
            };
            // filters the sections based on user selection
            saveConfigCtrl.selectedSections = function () {
                var selectedSections, updatedSectionList = [];
                emptySectionList = [];
                selectedSections = $filter('filter')(ConfigDiffService.getSections(), {
                    'selected': true
                });
                for (var k in selectedSections) {
                    var eachSectionData = selectedSections[k];
                    if (!!eachSectionData.data) {
                        updatedSectionList.push(eachSectionData);
                    }
                }
                //filter empty section
                for (var m = 0; m < selectedSections.length; m++) {
                    var match = false;
                    for (var n = 0; n < updatedSectionList.length; n++) {
                        if (selectedSections[m].label == updatedSectionList[n].label) {
                            match = true;
                            break;
                        }
                    }
                    if (!match) {
                        emptySectionList.push(selectedSections[m]);
                    }
                }
                return updatedSectionList;
            };
            // On focus puts the http:// in the kbase field
            saveConfigCtrl.kbaseOnFocus = function () {
                if (saveConfigCtrl.saveModal.kbase == '') {
                    saveConfigCtrl.saveModal.kbase = 'http://';
                }
            };
            // On blur removes the http:// if the user hasn't typed in an url in the kbase field.
            saveConfigCtrl.kbaseOnBlur = function () {
                if (saveConfigCtrl.saveModal.kbase == 'http://') {
                    saveConfigCtrl.saveModal.kbase = '';
                }
            };
            saveConfigCtrl.getEmptySectionList = function () {
                return emptySectionList;
            };
            // Updates the attributes selected for a given section to show in save view modal.
            saveConfigCtrl.updateColumnAttributes = function (sectionName) {
                if (sectionName) {
                    attributeOfSelectedSection = getSection(sectionName).columns;
                }
            };
            // Closes the modal held by $scope.modal
            saveConfigCtrl.hideModal = function () {
                $modalInstance.close('OK');
            };
            saveConfigCtrl.checkViewName = function () {
                saveConfigCtrl.saveModal.viewOverwrite = false;
                if (savedFiltersList && savedFiltersList.length && savedFiltersList.length > 0) {
                    var found = false;
                    for (var i = 0; i < savedFiltersList.length; i++) {
                        if (savedFiltersList[i]["view_name"] == saveConfigCtrl.saveModal.name) {
                            if (savedFiltersList[i]["created_by"] == metaDataService.getUser()['email']) {
                                saveConfigCtrl.saveModal.viewOverwrite = true;
                                continue;
                            } else {
                                found = true;
                                break;
                            }
                        }
                    }
                    if (found) {
                        // mark it as invalid
                        saveConfigCtrl.form.saveViewModal.viewName.$setValidity('duplicate', false)
                    } else {
                        saveConfigCtrl.form.saveViewModal.viewName.$setValidity('duplicate', true)
                    }
                } else {
                    getAllSavedViews();
                }
            };
            // Gets the values from the globals based on the given key.
            saveConfigCtrl.getValue = function (key) {
                return GlobalService.getVal(key);
            };
            // Saves the current selection as new view with details given by the user.
            saveConfigCtrl.saveFilter = function () {
                saveConfigCtrl.submitted = true;
                if (!saveConfigCtrl.form.saveViewModal.$valid) {
                    return;
                }
                saveConfigCtrl.saveModal.saveStatus = "progress";
                var param = {};
                var data = {};
                var i, j, colstr = "", transpose = "", filterstr = "";
                param.name = saveConfigCtrl.saveModal.name;
                param['public'] = saveConfigCtrl.saveModal.access == 'public' ? true : false;
                param['default'] = false;
                data.desc = escape(saveConfigCtrl.saveModal.desc);
                data.kbase = saveConfigCtrl.saveModal.kbase;
                var opsCnt = "";
                var sections = ConfigDiffService.getSections();
                for (i in sections) {
                    if (sections[i]['selected'] && !!sections[i].data) {
                        for (j in sections[i].keys) {
                            if (sections[i].keys[j].visible) {
                                if (colstr) {
                                    colstr += ",";
                                }
                                colstr += sections[i].table_name + ":" + sections[i].keys[j].key;
                            }
                        }
                    }
                    if (opsCnt && sections[i].selected && !!sections[i].data) {
                        opsCnt += ",";
                    }
                    if (sections[i].selected && !!sections[i].data) {
                        opsCnt += sections[i].table_name + ":" + sections[i].count;
                    }
                }
                data.cols = "{\'" + colstr + "\'}";
                data.obs_ct = "{\'" + opsCnt + "\'}";
                // XHR to save the view.
                ConfigDiffService.saveSelectedView(param, data).then(function (response) {
                    ConfigDiffService.setViewsCount(ConfigDiffService.getViewsCount() + 1);
                    saveConfigCtrl.saveModal.saveStatus = "success";
                    saveConfigCtrl.saveModal.message = "View saved successfully.";
                    getAllSavedViews();
                    // Tracking user activity to save the view.
                    UserTrackingService.standard_user_tracking(saveConfigCtrl.info.application, 'Config Diff', 'Save View', data.cols)
                        .then(function (response) {
                            
                        }, handleSessionTimeout);
                }, function (response) {
                    handleSessionTimeout(response);
                    saveConfigCtrl.saveModal.saveStatus = "error";
                    saveConfigCtrl.saveModal.message = "Error :" + response.data.Msg;
                });
            };
            // Returns the section object based on user selection.
            function getSection(sectionName) {
                attributeOfSelectedSection = [];
                var totalSections = allSectionsDetails.length;
                for (var i = 0; i < totalSections; i++) {
                    if (allSectionsDetails[i].name == sectionName) {
                        return allSectionsDetails[i];
                    }
                }
            }

            function getAllSavedViews() {
                ConfigDiffService.getAllViews()
                    .then(function (response) {
                        savedFiltersList = response.data.Data;
                        var found = false;
                        for (var i = 0; i < savedFiltersList.length; i++) {
                            if (savedFiltersList[i]["view_name"] == saveConfigCtrl.saveModal.name) {
                                if (savedFiltersList[i]["created_by"] == metaDataService.getUser()['email']) {
                                    saveConfigCtrl.saveModal.viewOverwrite = true;
                                    continue;
                                } else {
                                    found = true;
                                    break;
                                }
                            }
                        }
                        if (found) {
                            // mark it as invalid
                            saveConfigCtrl.form.saveViewModal.viewName.$setValidity('duplicate', false)
                        } else {
                            saveConfigCtrl.form.saveViewModal.viewName.$setValidity('duplicate', true)
                        }
                    }, handleSessionTimeout);
            }

            function handleSessionTimeout(response) {
                if (!saveConfigCtrl.info.sessionTimedOut && response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/timeout/)) {
                    saveConfigCtrl.info.sessionTimedOut = true;
                    $modalInstance.dismiss('cancel');
                    ModalService.sessionTimeout();
                }
            }
        }])
    .controller('ResetViewController', ['$modalInstance', function ($modalInstance) {
        var resetViewCtrl = this;
        resetViewCtrl.msg = "Are you sure to loose the current selection ??";
        resetViewCtrl.resetViewConfirm = function () {
            $modalInstance.close('ok');
        };
        resetViewCtrl.hideNavigationModal = function () {
            $modalInstance.dismiss('cancel');
        };
    }])
    .controller('DeleteConfigViewController', ['$modalInstance', 'ConfigDiffService', 'UserTrackingService', 'ModalService', 'GlobalService', 'deleteConfigModal', function ($modalInstance, ConfigDiffService, UserTrackingService, ModalService, GlobalService, deleteConfigModal) {
        var delConfigCtrl = this;
        delConfigCtrl.deleteModal = deleteConfigModal;
        delConfigCtrl.deleteModal.status = "initiated";
        delConfigCtrl.deleteModal.deleteOperationMsg = "";
        delConfigCtrl.application = GlobalService.getVal('navLog');
        // Closes the open model
        delConfigCtrl.hideDeleteView = function () {
            $modalInstance.close('ok');
        };
        // Sends the request to delete the given view.
        delConfigCtrl.deleteView = function (view, event) {
            delConfigCtrl.deleteModal.status = "progress";
            // XHR to delete the given view
            ConfigDiffService.deleteView(view)
                .then(function (response) {
                    ConfigDiffService.setViewsCount(ConfigDiffService.getViewsCount() - 1);
                    delConfigCtrl.deleteModal.status = "success";
                    delConfigCtrl.deleteModal.deleteOperationMsg = "View deleted successfully.";
                    ConfigDiffService.setViewName('Select view');
                    UserTrackingService.standard_user_tracking(delConfigCtrl.application, 'Config Diff', 'Delete View', "{\'" + view['view_name'] + "\'}")
                        .then(function (response) {
                            
                        }, handleSessionTimeout);
                }, function (response) {
                    delConfigCtrl.deleteModal.status = "error";
                    handleSessionTimeout(response)
                    delConfigCtrl.deleteModal.deleteOperationMsg = "Unable to delete view. Try again later.";
                });
        };
        function successHandler(response) {
            
        }
        function handleSessionTimeout(response) {
            if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/timeout/)) {
                $modalInstance.dismiss('cancel');
                ModalService.sessionTimeout();
            }
        }
    }]);

/* Services */

angular.module('gbApp.services.analytics', ['ui.bootstrap', 'ui.unique']).factory('MenuService', ['$http', 'useLocal', 'GlobalService',
    function ($http, useLocal, GlobalService) {
        var currentLabel = 'Section View', appsLoaded = false;
        return {
            getConfig: function () {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                var url = infoserverDomain + '';
                //if (useLocal) {
                url = 'stat/menuconfig.json';
                //}
                return $http.get(url);
            },
            getCurrentLabel: function() {
                return this.currentLabel;
            },
            setCurrentLabel: function(label) {
                this.currentLabel = label;
            },
            getAppsLoaded: function() {
                return this.appsLoaded;
            },
            setAppsLoaded: function() {
                this.appsLoaded = true;
            }
        };
    }]);

angular.module('gbApp.services.analytics').factory('DefaultFilterService', ['$http', 'useLocal', 'GlobalService', 'metaDataService',
    function ($http, useLocal, GlobalService, metaDataService) {
        var defaultEndCust, defaultSysId, defaultObservation, selectedObservation, selectedObsGrp, loadPage, loadSysId, loadObservation, configDiffFields, setBundleDetailForSectionDiff, logvaultRec;

        return {
            setLogVaultRec : function(val) {
                logvaultRec = val;
            },
            getLogVaultRec : function(val) {
                return logvaultRec;
            },
            setBundleDetailForSectionDiff : function(val) {
                setBundleDetailForSectionDiff = val;
            },
            getBundleDetailForSectionDiff : function(val) {
                return setBundleDetailForSectionDiff;
            },
            setConfigDiffFields: function(val) {
                configDiffFields = val;
            },
            getConfigDiffFields: function() {
                return configDiffFields;
            },
            getDefaultEndCust: function () {
                return this.defaultEndCust;
            },
            setDefaultEndCust: function (endCust) {
                this.defaultEndCust = endCust;
            },
            getDefaultSysId: function () {
                return this.defaultSysId;
            },
            setDefaultSysId: function (sysId) {
                this.defaultSysId = sysId;
            },
            setSysId2: function(id) {
                this.sid2 = id;
            },
            getSysId2: function() {
                if(!metaDataService.isSysid2Enable()){
                    return 'NA';
                }
                return this.sid2;
            },
            setSubSys: function(list) {
                this.subSys = list;
            },
            getSubSys: function() {
                return this.subSys;
            },
            getDefaultObservation: function () {
                return this.defaultObservation;
            },
            setDefaultObservation: function (observation) {
                this.defaultObservation = observation;
            },
            getSelectedObservation: function () {
                return this.selectedObservation;
            },
            setSelectedObservation: function (observation) {
                this.selectedObservation = observation;
            },
            getLoadPage: function () {
                return this.loadPage;
            },
            setLoadPage: function (page) {
                this.loadPage = page;
            },
            getLoadSysId: function () {
                return this.loadSysId;
            },
            setLoadSysId: function (sysid) {
                this.loadSysId = sysid;
            },
            getLoadObservation: function () {
                return this.loadObservation;
            },
            setLoadObservation: function (observation) {
                this.loadObservation = observation;
            },
            getSelectedObsGrp: function () {
                return this.selectedObsGrp;
            },
            setSelectedObsGrp: function (obsgrp) {
                this.selectedObsGrp = obsgrp;
            },
            getEC: function () {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                return $http.get(infoserverDomain + '/analytics/standard/ecs/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'));
            },
            getSerialNum: function (ec) {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                return $http.get(infoserverDomain + '/analytics/standard/systems/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + ec['ec_name']);
            },
            getObservations: function (ec, sid,sid2) {
                if(!sid2){
                    sid2 = 'NA';
                }
                if(!ec){
                    ec = GlobalService.getVal('manufacturer');
                }
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                return $http({                    
                    url: infoserverDomain + '/bundles/all/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + ec + '/' + sid['sys_id'] + '/' + sid2 + '?orderby=obs_ts DESC&limit=1',
                    method: 'GET',
                    cache: true
                });
            },
            getAllObservations: function (ec, sid, sid2) {
                if(!sid2){
                    sid2 = 'NA';
                }
                if(!ec){
                    ec = GlobalService.getVal('manufacturer');
                }
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                return $http({                    
                    url: infoserverDomain + '/bundles/all/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + ec + '/' + sid['sys_id'] + '/' + sid2 + '?orderby=obs_ts DESC',
                    method: 'GET',
                    cache: true
                });
            },
            getNObservations: function (ec, sid, n) {
                 var infoserverDomain = GlobalService.getVal('infoserverDomain');
                return $http({                   
                    url: infoserverDomain + '/bundles/last_n/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + ec['ec_name'] + '/' + sid['sys_id'] + '/' + n,
                    method: 'GET',
                    cache: true
                });
            },
            getObservationsTimeRange: function (ec, sid, fromTime, toTime) {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                return $http({                    
                    url: infoserverDomain + '/bundles/time_range/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + ec['ec_name'] + '/' + sid['sys_id'] + '/' + fromTime + '/' + toTime,
                    method: 'GET',
                    cache: true
                });
            },
            getEcSys: function () {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                return $http({                    
                    url: infoserverDomain + '/analytics/ec/cluster/all/list/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'),
                    method: 'GET',
                    cache: true
                });
            },
            getDefaultFilterData: function () {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                return $http.get(infoserverDomain + '/analytics/standard/default_filters/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'));
            },
            getObsGroups: function () {
                var url = '';
                // if (useLocal) {
                url = 'stat/obs_groups.json';
                // }
                return $http({
                    'url' : url,
                    'method': 'GET',
                    'cache': true
                });
            }
        };
    }]);

angular.module('gbApp.services.analytics').factory('SectionsMetaService', ['$q', '$http', 'useLocal', 'ngTableParams', '$filter', 'DefaultFilterService', 'GlobalService', 'ModalService', '$cookies', '$window', 'UserTrackingService',
    function ($q, $http, useLocal, ngTableParams, $filter, DefaultFilterService, GlobalService, ModalService, $cookies, $window, UserTrackingService) {
        var kbLink, sectionsMap = {}, appliedView, obs_ts, sid1, sid2, ready = false, viewName = 'Select view', viewsCount, sectionsLoading, selectedView, loadView = null;

        return {
            getLoadView: function() {
                return loadView;
            },
            setLoadView: function(view) {
                loadView = view;
            },
            setSelectedView: function (value) {
                selectedView = value;
            },
            getSelectedView: function () {
                return selectedView;
            },
            setSectionLoading: function (bool) {
                sectionsLoading = bool;
            },
            getSectionLoading: function () {
                return sectionsLoading;
            },
            getAppliedView: function () {
                return !!appliedView ? appliedView : false;
            },
            setAppliedView: function (view) {
                appliedView = view;
            },
            setReady: function (r) {
                ready = r;
            },
            isReady: function () {
                return ready;
            },
            getViewName: function () {
                return viewName;
            },
            setViewName: function (name) {
                viewName = name;
            },
            setViewsCount: function (count) {
                viewsCount = count;
            },
            getViewsCount: function () {
                return viewsCount;
            },
            getSections: function (obs) {
                if (obs) {
                    return sectionsMap[$filter('bundleName')(obs['bundle_name']) + obs['obs_time']];
                } else if (obs_ts) {
                    return sectionsMap[obs_ts];
                } else {
                    return [];
                }
            },
            setSections: function (obs, t_sections) {
                if (obs && t_sections) {
                    obs_ts = $filter('bundleName')(obs['bundle_name']) + obs['obs_time'];
                    sectionsMap[obs_ts] = t_sections;
                }
            },
            getKbLink: function () {
                if (!!this.getAppliedView()) {
                    return (this.kbLink == 'NA' ? false : this.kbLink);
                } else {
                    return null;
                }
            },
            setKbLink: function (lnk) {
                this.kbLink = lnk;
            },
            clearSectionView: function () {
                var sections = this.getSections(DefaultFilterService.getDefaultObservation());
                for (var i in sections) {
                    sections[i]['selected'] = false;
                    sections[i]['default'] = false;
                    sections[i]['visible'] = true;
                    this.resetFilter(sections[i]);
                }
                this.setSections(DefaultFilterService.getDefaultObservation(), sections);
                this.setAppliedView(null);
                this.setViewName("Select view");
            },
            resetFilter: function (section) {
                var i;
                if (section.hasOwnProperty('isTranspose')) {
                    section.isTranspose = false;
                }
                for (i in section.columns) {
                    if (!!section.filter[section.columns[i].field]) {
                        section.filter[section.columns[i].field]['value'] = "";
                        section.filter = {};
                        this.populateSectionData(section);
                    }
                    section.columns[i]['value'] = null;
                }
                if(!!section.info && !!section.info.sorting) {
                    delete section.info.sorting;
                    this.populateSectionData(section);
                }
            },
            parseFilters: function (view) {
                if (view.filters.length == 0) {
                    return;
                }
                var parsedFilters = {};
                var filters = view.filters[0].split(',');
                for (var i = 0; i < filters.length; i++) {
                    var filter = filters[i].split(':');
                    var filter_text;
                    if (filter[2] == '~') {
                        filter_text = filter[1] + filter[2] + '\"' + filter[3] + '\"';
                    } else {
                        filter_text = filter[1] + filter[2] + filter[3];
                    }
                    if (!!parsedFilters[filter[0]]) {
                        parsedFilters[filter[0]] += ' AND ' + filter_text;
                    } else {
                        parsedFilters[filter[0]] = filter_text;
                    }
                }
                return parsedFilters;
            },
            applyViewFromLogVault: function(selectedView){                
                // XHR to fetch the meta for the given view.
                var me = this;
                this.loadView(selectedView)
                    .then(function (response) {
                        var appliedView;
                        appliedView = response.data.Data[0];
                        if(angular.element(document.getElementById("sectionview-select-view-div"))){
                            angular.element(document.getElementById("sectionview-select-view-div")).removeClass("open");
                        }                        
                        if (!!appliedView) {
                            me.applyView(appliedView);
                            me.setSelectedView(selectedView);
                            // Applying the view that is fetched.
                            UserTrackingService.standard_user_tracking(GlobalService.getVal('navLog'), 'Section View', 'Apply View', "{\'" + selectedView['view_name'] + "\'}")
                                .then(function(response){}, function(response){});
                        } else {
                            ModalService.alertBox({msg: 'No Applied View'});
                        }
                    }, function(response){
                        console.log(response);
                    }, me);
            },
            applyView: function (view, scope) {
                var trans = view.transpose[0];
                trans = trans.replace("{\'", "");
                trans = trans.replace("\'}", "");
                view.transpose[0] = trans;
                var filt = view.filters[0];
                filt = filt.replace("{\'", "");
                filt = filt.replace("\'}", "");
                view.filters[0] = filt;
                var col = view.cols[0];
                col = col.replace("{\'", "");
                col = col.replace("\'}", "");
                view.cols[0] = col;
                var deferred = [], p_view, p_filters, p_cols, sections, i, j, k, l, keys, bool, transpose, val;
                this.setKbLink(view.kbase);
                this.setAppliedView(view);
                sections = this.getSections(DefaultFilterService.getDefaultObservation());
                p_view = this.parseSavedView(view);
                p_filters = this.parseFilters(view);

                keys = Object.keys(p_view);
                if (!!p_filters) {
                    filter_keys = Object.keys(p_filters);
                }
                for (i in sections) {
                    sections[i]['selected'] = false;
                    sections[i]['default'] = false;
                    sections[i]['isTranspose'] = false;
                }
                transpose = view.transpose[0].split(",");
                for (i in sections) {
                    for (j in keys) {
                        if (sections[i].table_name == keys[j]) {
                            sections[i]['selected'] = true;
                            sections[i]['default'] = true;
                            for (k in filter_keys) {
                                if (sections[i].table_name == filter_keys[k]) {
                                    sections[i]['filters'] = p_filters[filter_keys[k]];
                                }
                            }
                            if (p_filters.hasOwnProperty(sections[i].table_name)) {
                                sections[i]['filters'] = p_filters[sections[i].table_name];
                            } else {
                                sections[i]['filters'] = null;
                            }
                            deferred[i] = $q.defer();
                            this.loadData(sections[i], scope, deferred[i], i, j, true);
                            deferred[i].promise.then(function (res_col) {
                                var d_cols, index_i, index_j;
                                d_cols = res_col['cols'];
                                index_i = res_col['index_i'];
                                index_j = res_col['index_j'];
                                p_cols = p_view[keys[index_j]];
                                for (k in d_cols) {
                                    
                                    d_cols[k]['selected'] = false;
                                    d_cols[k]['visible'] = false;
                                }
                                if(p_cols.length == 1 && p_cols[0] == "*") {
                                    for (l in d_cols) {
                                        if(sections[index_i].columnType[d_cols[l]['field']] != 'G') {
                                            d_cols[l]['selected'] = true;
                                            d_cols[l]['visible'] = true;
                                        }
                                    }
                                } else {
                                    for (k in p_cols) {
                                        for (l in d_cols) {
                                            if (p_cols[k] == d_cols[l]['field']) {
                                                d_cols[l]['selected'] = true;
                                                d_cols[l]['visible'] = true;
                                            }
                                        }
                                    }
                                }
                                bool = true;
                                for (k in d_cols) {
                                    if (d_cols[k]['visible'] == false) {
                                        bool = false;
                                    }
                                }
                                sections[index_i].columns = d_cols;
                                sections[index_i]['meta'].shownAll = bool;
                            }, function (res_col) {
                                console.error(res_col);
                            });
                        }
                    }
                }
                for (i in sections) {
                    for (j in transpose) {
                        val = transpose[j].split(":");
                        if (sections[i].table_name == val[0]) {
                            if (val[1] == "false") {
                                sections[i].isTranspose = false;
                            } else {
                                sections[i].isTranspose = true;
                            }
                        }
                    }
                }
                this.setSections(DefaultFilterService.getDefaultObservation(), sections);
            },
            parseSavedView: function (view) {
                var p_view = {}, cols, i, oneCol;
                var colsstring = view['cols'][0];
                colsstring = colsstring.replace("{\'", "");
                colsstring = colsstring.replace("\'}", "");
                cols = colsstring.split(',');
                for (i in cols) {
                    oneCol = cols[i].split(':');
                    if (!!p_view[oneCol[0]]) {
                        p_view[oneCol[0]].push(oneCol[1]);
                    } else {
                        p_view[oneCol[0]] = [];
                        p_view[oneCol[0]].push(oneCol[1]);
                    }
                }
                return p_view;
            },
            getColumnDefs: function (data) {
                var columns = [], key, keyStr, title, type;
                for (key in Object.keys(data[0])) {
                    keyStr = Object.keys(data[0])[key];
                    if (typeof data[0][keyStr] === "number") {
                        type = "number";
                    } else if (typeof data[0][keyStr] === "boolean") {
                        type = "boolean";
                    } else {
                        type = "string";
                    }
                    title = keyStr;
                    columns.push({
                        title: title,
                        field: keyStr,
                        visible: true,
                        selected: true,
                        type: type,
                        operator: '>'
                    });
                }
                return columns;
            },
            processData: function (data, refCol) {
                var row, col, rdata, pdata = [], key;
                for (row in data.data[0].rows) {
                    rdata = {};
                    for (col in data.data[0].rows[row].columns) {
                        key = Object.keys(data.data[0].rows[row].columns[col])[0];
                        if (key.indexOf('obs') == -1 && refCol[key] && refCol[key].length > 0) {
                            rdata[key] = data.data[0].rows[row].columns[col][key];
                        }
                    }
                    pdata.push(rdata);
                }
                return pdata;
            },
            loadData: function (t_section, scope, defer, i, j, applyView) {
                var section, that, res_col;
                t_section.no_cols = false;
                if (t_section.visible === undefined) {
                    t_section.visible = true;
                }
                if (!t_section.a_data) {
                    that = this;
                    t_section.d_loading = true;
                    // Adding column label map for all the sections.
                    this.getColumns(t_section['table_name']).then(function (response) {
                        var x;
                        t_section.columnsMap = {};
                        t_section.columnType = {};
                        for (x in response.data.Data) {
                            //Add attribute 'column_name' if its missing in the response
                            var gtg = response.data.Data[x];
                            for (var k in gtg) {
                                response.data.Data[x][Object.keys(response.data.Data[x])[0]]['column_name'] = k;
                                break;
                            }
                            t_section.columnsMap[response.data.Data[x][Object.keys(response.data.Data[x])[0]]['column_name']] = response.data.Data[x][Object.keys(response.data.Data[x])[0]]['attribute_label'];
                            t_section.columnType[response.data.Data[x][Object.keys(response.data.Data[x])[0]]['column_name']] = response.data.Data[x][Object.keys(response.data.Data[x])[0]]['solr_facet'];
                        }
                        // Fetching parsed data for the given section
                        that.getSectionData(t_section.name, t_section.table_name, 0, GlobalService.getVal('rc_threshold')).then(function (response) {
                            t_section.tot_count = response.data.Data['row_count'];
                            t_section.d_loading = false;
                            if (t_section.tot_count > GlobalService.getVal('rc_threshold')) {
                                // console.info("Total rows are more than threshold.");
                            } else {
                                // console.info("Total rows are less than threshold.");
                            }
                            if (response.data.Data.data != "") {
                                t_section.a_data = that.processData(response.data.Data, t_section.columnsMap);
                                t_section.columns = that.getColumnDefs(t_section.a_data);
                                t_section.meta = {};
                                t_section.filter = {};
                                if (!!t_section.filters) {
                                    var filters = t_section.filters.split(' AND ');
                                    var field, value, operator;
                                    for (var i1 = 0; i1 < filters.length; i1++) {
                                        if (filters[i1].indexOf('~') != -1) {
                                            field = filters[i1].split('~')[0];
                                            value = filters[i1].split('~')[1].replace(/\"/g, "");
                                        } else if (filters[i1].indexOf('<') != -1) {
                                            field = filters[i1].split('<')[0];
                                            value = parseInt(filters[i1].split('<')[1]);
                                            operator = "<";
                                        } else if (filters[i1].indexOf('>') != -1) {
                                            field = filters[i1].split('>')[0];
                                            value = parseInt(filters[i1].split('>')[1]);
                                            operator = ">";
                                        } else if (filters[i1].indexOf('=') != -1) {
                                            field = filters[i1].split('=')[0];
                                            value = parseInt(filters[i1].split('=')[1]);
                                            operator = "=";
                                        }
                                        for (var j1 in t_section.columns) {
                                            if (t_section.columns[j1]['field'] === field) {
                                                t_section.columns[j1]['filter'] = {};
                                                t_section.columns[j1]['filter']['field'] = field;
                                                t_section.columns[j1]['filter']['type'] = t_section.columns[j1]['type'];
                                                if (t_section.columns[j1]['filter']['type'] == 'number') {
                                                    t_section.columns[j1]['filter']['value'] = value;
                                                    t_section.columns[j1]['value'] = value;
                                                    t_section.columns[j1]['filter']['operator'] = operator;
                                                    t_section.columns[j1]['operator'] = operator;
                                                } else {
                                                    t_section.columns[j1]['filter']['value'] = value;
                                                    t_section.columns[j1]['value'] = value;
                                                    t_section.columns[j1]['filter']['operator'] = t_section.columns[j1]['operator'];
                                                }
                                                t_section.filter[t_section.columns[j1]['field']] = t_section.columns[j1]['filter'];
                                            }
                                        }
                                    }
                                    delete t_section.filters;
                                }
                                t_section.count = 10;
                                if(!applyView) {
                                	var sysColFound = false;
                                	var nonSysColFound = false;
                                	angular.forEach(t_section.columns, function(column) {
	                                    if(t_section.columnType[column.title] == "G") {
	                                        column.selected = false;
	                                        column.visible = false;
	                                        sysColFound = true;
	                                    } else {
	                                        nonSysColFound = true;
	                                    }
	                                });
	                                
	                                if(sysColFound) {
	                                    t_section.meta['shownAll'] = false;
	                                } else {
	                                    t_section.meta['shownAll'] = true;
	                                }
	                                if(!nonSysColFound) {
	                                    t_section.no_cols = true;
	                                }
                                }
                                
                                if (!!defer) {
                                    res_col = {};
                                    res_col['index_i'] = i;
                                    res_col['index_j'] = j;
                                    res_col['cols'] = t_section.columns;
                                    defer.resolve(res_col);
                                } else {
                                    //t_section.isTranspose = false;
                                }
                                if (!t_section.display_data) {
                                    t_section.info = {};
                                    t_section.info.page = {
                                        total: 0,
                                        current: 1,
                                        pages: 0,
                                        count: 10
                                    };
                                } else {
                                    t_section.firstLoad = true;
                                }
                                that.populateSectionData(t_section);
                            } else {
                                delete t_section.a_data;
                                delete t_section.display_data;
                                t_section.info = {};
                                t_section.info.page = {
                                    total: 0,
                                    current: 1,
                                    pages: 0,
                                    count: 10
                                };
                                t_section.meta = {};
                                t_section.filter = {};
                                t_section.showlog = false;
                            }
                        }, function (response) {
                            if (!scope.info.sessionTimedOut && response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/timeout/)) {
                                scope.info.sessionTimedOut = true;
                                ModalService.sessionTimeout();
                            }
                        });
                    }, function (response) {
                        if (!scope.info.sessionTimedOut && response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/timeout/)) {
                            scope.info.sessionTimedOut = true;
                            ModalService.sessionTimeout();
                        }
                    });

                    t_section.r_loading = true;
                    this.getSectionRawData(t_section.name, t_section.table).then(function (response) {
                        t_section.r_loading = false;
                        if (response.data.Data[0]) {
                            t_section.rawdata = response.data.Data[0]['content'];
                            t_section.rawdataArr = t_section.rawdata.split('\n');
                            if (t_section.rawdataArr.length > 10) {
                                t_section.rawdata = t_section.rawdataArr[0] + '<br\>' + t_section.rawdataArr[1] + '<br\>' + t_section.rawdataArr[2]
                                + '<br\>' + t_section.rawdataArr[3] + '<br\>' + t_section.rawdataArr[4] + '<br\>' + t_section.rawdataArr[5]
                                + '<br\>' + t_section.rawdataArr[6] + '<br\>' + t_section.rawdataArr[7] + '<br\>' + t_section.rawdataArr[8]
                                + '<br\>' + t_section.rawdataArr[9];
                            }
                        } else {
                            t_section.rawdata = GlobalService.getVal('no_data');
                        }
                    }, function (response) {
                        if (!(scope && scope.info && scope.info.sessionTimedOut) && response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/timeout/)) {
                            scope.info.sessionTimedOut = true;
                            ModalService.sessionTimeout();
                        }
                        t_section.r_loading = false;
                    });
                } else {
                    if (!!t_section.filters) {
                        t_section.filter = {};
                        var filters = t_section.filters.split(' AND ');
                        var field, value, operator;
                        for (var i1 = 0; i1 < filters.length; i1++) {
                            if (filters[i1].indexOf('~') != -1) {
                                field = filters[i1].split('~')[0];
                                value = filters[i1].split('~')[1].replace(/\"/g, "");
                            } else if (filters[i1].indexOf('<') != -1) {
                                field = filters[i1].split('<')[0];
                                value = parseInt(filters[i1].split('<')[1]);
                                operator = "<";
                            } else if (filters[i1].indexOf('>') != -1) {
                                field = filters[i1].split('>')[0];
                                value = parseInt(filters[i1].split('>')[1]);
                                operator = ">";
                            } else if (filters[i1].indexOf('=') != -1) {
                                field = filters[i1].split('=')[0];
                                value = parseInt(filters[i1].split('=')[1]);
                                operator = "=";
                            }
                            for (var j1 in t_section.columns) {
                                if (t_section.columns[j1]['field'] === field) {
                                    t_section.columns[j1]['filter'] = {};
                                    t_section.columns[j1]['filter']['field'] = field;
                                    t_section.columns[j1]['filter']['type'] = t_section.columns[j1]['type'];
                                    if (t_section.columns[j1]['filter']['type'] == 'number') {
                                        t_section.columns[j1]['filter']['value'] = value;
                                        t_section.columns[j1]['value'] = value;
                                        t_section.columns[j1]['filter']['operator'] = operator;
                                        t_section.columns[j1]['operator'] = operator;
                                    } else {
                                        t_section.columns[j1]['filter']['value'] = value;
                                        t_section.columns[j1]['value'] = value;
                                        t_section.columns[j1]['filter']['operator'] = t_section.columns[j1]['operator'];
                                    }
                                    t_section.filter[t_section.columns[j1]['field']] = t_section.columns[j1]['filter'];
                                }
                            }
                        }
                        delete t_section.filters;
                    } else if (applyView) {
                        t_section.filter = {};
                    }
                    if (!!defer) {
                        res_col = {};
                        res_col['index_i'] = i;
                        res_col['index_j'] = j;
                        res_col['cols'] = t_section.columns;
                        defer.resolve(res_col);
                    }
                    if(!applyView) {
                    	var sysColFound = false;
	                    var nonSysColFound = false;
	                    angular.forEach(t_section.columns, function(column) {
	                        if(t_section.columnType[column.title] == "G") {
	                            column.selected = false;
	                            column.visible = false;
	                            sysColFound = true;
	                        } else {
	                            nonSysColFound = true;
	                        }
	                    });
	                    if(sysColFound) {
	                        t_section.meta['shownAll'] = false;
	                    } else {
	                        t_section.meta['shownAll'] = true;
	                    }
	                    if(!nonSysColFound) {
	                        t_section.no_cols = true;
	                    }
                    }
                    
                    this.populateSectionData(t_section);
                }
            },

            populateSectionData: function (section) {
                var tdata, orderedData = section.info.sorting ? $filter('orderBy')(section.a_data, section.info.sorting.field, section.info.sorting.reverse) : section.a_data;
                orderedData = section.filter ? $filter('numberFilter')(orderedData, section.filter) : orderedData;
                section.info.page.total = orderedData.length;
                section.info.page.pages = Math.ceil(section.info.page.total / section.info.page.count);
                if (section.info.page.pages == 0) {
                    section.info.page.current = 1;
                }
                else if (section.info.page.current > section.info.page.pages) {
                    section.info.page.current = section.info.page.pages;
                }
                section.export_data = orderedData;
                tdata = orderedData.slice((section.info.page.current - 1) * section.info.page.count, section.info.page.current * section.info.page.count);
                section.display_data = tdata;
            },

            getAll: function () {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                return $http({
                    url: infoserverDomain + '/meta/sections/type/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema')+'/SECTION',
                    method: 'GET',
                    cache: true
                });
            },

            getSectionsFilteredByByndleType: function (bType) {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                return $http({
                    url: infoserverDomain + '/meta/sections/btype/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema')+'/'+bType,
                    method: 'GET',
                    cache: true
                });
            },
            getColumns: function (table_name) {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                return $http({
                    method: 'GET',
                    url: infoserverDomain + '/meta/columns/table_name/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + table_name,
                    cache: true
                });
            },
            getS2: function(sid1){
                var ec,sid1;
                ec = GlobalService.getVal('manufacturer');
                if(!sid1){
                    sid1 = DefaultFilterService.getDefaultSysId()["sys_id"];
                }

                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                return $http({
                    method: 'GET',
                    url: infoserverDomain + '/analytics/ec/cluster/sysid/all/list/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + ec + '/' + sid1,
                    cache: true
                });
            },
            getSectionData: function (sec_name, table_name, sr, er, filters, ec) {
                var sid1= DefaultFilterService.getDefaultSysId()["sys_id"];
				sid2=DefaultFilterService.getSysId2(), sid3='NA';
                var ts = DefaultFilterService.getDefaultObservation()['obs_time'], http_url;
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                if(!ec){
                    ec = GlobalService.getVal('manufacturer');
                }
                if(!sid2){
                    sid2 = 'NA';
                }
                if (!!filters) {
                    http_url = infoserverDomain + '/base/columns/system/ts/all/row_range/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + ec + '/' + sid1 + '/' + sid2 + '/' + sid3 + '/' + table_name + '/' + ts + '/' + sr + '/' + er + '?filter=' + filters;
                } else {
                    http_url = infoserverDomain + '/base/columns/system/ts/all/row_range/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + ec + '/' + sid1 + '/' + sid2 + '/' + sid3 + '/' + table_name + '/' + ts + '/' + sr + '/' + er;
                }
                return $http({
                    url: http_url,
                    method: 'GET',
                    cache: true
                });
            },
            getSectionParsedData: function (sid1, sid2, sid3, table_name, ts, sr, er, filters, ec,params) {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                if (!!filters) {
                    http_url = infoserverDomain + '/base/columns/system/ts/all/row_range/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + ec + '/' + sid1 + '/' + sid2 + '/' + sid3 + '/' + table_name + '/' + ts + '/' + sr + '/' + er + '?filter=' + filters;
                } else {
                    http_url = infoserverDomain + '/base/columns/system/ts/all/row_range/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + ec + '/' + sid1 + '/' + sid2 + '/' + sid3 + '/' + table_name + '/' + ts + '/' + sr + '/' + er;
                }
                return $http({
                    url: http_url,
                    method: 'GET',
                    params: params,
                    cache: true
                });
            },
            getSectionRawData: function (sec_name, table_name) {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                return $http({
                    url: infoserverDomain + '/explorer/nscontent/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'),
                    method: 'GET',
                    params: {
                        bundle: DefaultFilterService.getDefaultObservation()['obs_url'],
                        ts: DefaultFilterService.getDefaultObservation()['obs_time'],
                        ns: sec_name
                    },
                    cache: true
                });
            },
            saveSelectedView: function (param, data) {
                var url;
                if (!data.desc) {
                    data.desc = 'NA';
                }
                if (!data.kbase) {
                    data.kbase = 'NA';
                }
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                url = infoserverDomain + '/sectionview/add/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + param['public'] + "/" + param.name + "/" + param['default'];
                return $http.post(url, data);
            },
            getAllSavedViews: function () {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                return $http.get(infoserverDomain + '/sectionview/list/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'));
            },
            /*
             * Retrive all views for all user's public and private view.
             */
            getAllViews: function () {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                return $http.get(infoserverDomain + '/sectionview/list/all/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'));
            },
            deleteView: function (param) {
                if (this.getViewName() == param.view_name) {
                    this.setViewName('Select view');
                }
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                return $http.post(infoserverDomain + '/sectionview/delete/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + "/" + param.view_name);
            },
            loadView: function (param) {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                this.setViewName(param.view_name);
                return $http({
                    method: "GET",
                    url: infoserverDomain + '/sectionview/meta/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + "/" + param.view_name,
                    params: {
                        "created_by": param['created_by']
                    },
                    cache: false
                });
            },
            setDefault: function (param) {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                return $http.post(infoserverDomain + '/sectionview/setdefault/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + param.view_name);
            },
            resetDefault: function (param) {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                return $http.post(infoserverDomain + '/sectionview/resetdefault/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + param.view_name);
            },
            setAccessibility: function (param) {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                return $http.post(infoserverDomain + '/sectionview/setpublic/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + (param['public'] == false ? "true" : "false") + '/' + param.view_name);
            },
            getDefault: function (param) {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                return $http.get(infoserverDomain + '/sectionview/getdefault/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'));
            },
            exportXlsUrl: function (param) {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                var filters = "", cols = "", filters, i, filter_keys,ec;
                for (i in param.columns) {
                    if (cols != "") {
                        cols += "&";
                    }
                    cols += "col=" + param.columns[i]['field'];
                }
                filter_keys = Object.keys(param['filter']);
                for (i in filter_keys) {
                    if (filters != "") {
                        filters += "&";
                    }
                    filters += "filter=" + filter_keys[i];
                    if (param.filter[filter_keys[i]].type == 'number') {
                        filters += param.filter[filter_keys[i]]['operator'];
                    } else {
                        filters += '=';
                    }
                    filters += param.filter[filter_keys[i]]['value'];
                }
                ec = GlobalService.getVal('manufacturer');
                var sid1= DefaultFilterService.getDefaultSysId()["sys_id"];
				sid2=DefaultFilterService.getSysId2(), sid3='NA';
                if(!sid2){
                    sid2 = 'NA';
                }if(!sid3){
                    sid3 = 'NA';
                }
                return infoserverDomain + '/base/export/system/ts/named/time_range/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + ec + '/' + sid1 + '/' + sid2 + '/' + sid3 + '/' + param.table_name + '/' + DefaultFilterService.getDefaultObservation()['obs_time'].substr(0, 19) + '/' + DefaultFilterService.getDefaultObservation()['obs_time'].substr(0, 19) + '?' + cols; // + '&' + filters;
            }
        };

    }]);

angular.module('gbApp.services.analytics').factory('Analytics', ['$http', 'GlobalService',
    function ($http, GlobalService) {

        return {
            custom_x_gby_y: function (instance) {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                return $http.get(infoserverDomain + '/analytics/x_gby_y/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/all/model/system_count/' + instance.dashboardId + '/' + instance.id);
            },
            standard_user_tracking: function (module, activity, details) {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                var url = infoserverDomain + '/user_tracking/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/Analytics/' + module + '/' + activity;
                return $http.post(url, {
                    "details": details
                });
            },
            custom_user_tracking: function (d_id, r_id) {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                return $http.get(infoserverDomain + '/user_tracking/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + d_id + '/' + r_id);
            }
        };
    }]);

angular.module('gbApp.services.analytics').factory('NavigationService', ['GlobalService', 'ErrorService', 'AppService',
    function (GlobalService, ErrorService, AppService) {
        var cur_url;
        return {
            getUrlByKey: function (key) {
                return GlobalService.getVal(key);
            },
            setUrl: function (key, label) {
                if (key !== '#' && AppService.isAuthorized() && AppService.isInfoServerUp()) {
                    cur_url = GlobalService.getVal(key);
                    ErrorService.setError("");
                }
            },
            getUrl: function () {
                if (AppService.isAuthorized() && AppService.isInfoServerUp()) {
                    if (cur_url === undefined) {
                        cur_url = GlobalService.getVal(GlobalService.getVal('default_landing_page'));
                    }
                    return cur_url;
                } else {
                    return undefined;
                }
            }
        };
    }]);

angular.module('gbApp.services.analytics').factory('ConfigDiffService', ['$http', 'SectionsMetaService', 'GlobalService', 'DefaultFilterService', '$q', '$filter', 'ModalService', 'metaDataService',
    function ($http, SectionsMetaService, GlobalService, DefaultFilterService, $q, $filter, ModalService, metaDataService) {
        var kbLink, sections = [], appliedView,selectedView, viewName, obs_ts, viewsCount, sectionsLoading, goldenConfig, loadView = null,clusterId,sysd2;

        return {
            getLoadView: function() {
                return loadView;
            },            
            setLoadView: function(view) {
                loadView = view;
            },            
            getViewName: function () {
                return viewName;
            },
            setViewName: function (name) {
                viewName = name;
            },
            setSectionLoading: function (bool) {
                sectionsLoading = bool;
            },
            getSectionLoading: function () {
                return sectionsLoading;
            },
            setClusterId: function (id) {
                clusterId = id;
            },
            getClusterId: function () {
                return clusterId;
            },
            setSysId2: function(id) {
                this.sid2 = id;
            },
            getSysId2: function() {
                if(!metaDataService.isSysid2Enable()){
                    return 'NA';
                }
                return this.sid2;
            },
            setGoldenConfig: function(config) {
                goldenConfig = config;
            },
            getGoldenConfig: function() {
                return goldenConfig;
            },
            getAll: function () {
                return SectionsMetaService.getAll();
            },
            getDefault: function () {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                return $http({
                    method: 'GET',
                    url: infoserverDomain + '/configview/getdefault/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema')
                });
            },
            getAppliedView: function () {
                return !!appliedView ? appliedView : false;
            },
            setAppliedView: function (view) {
                appliedView = view;
            },
            getSections: function (obs) {
                return sections;
            },
            setSections: function (t_sections) {
                sections = t_sections;
            },
            setViewsCount: function (count) {
                viewsCount = count;
            },
            getViewsCount: function () {
                return viewsCount;
            },
            getKbLink: function () {
                if (!!this.getAppliedView()) {
                    return (this.kbLink == 'NA' ? false : this.kbLink);
                } else {
                    return null;
                }
            },
            setKbLink: function (lnk) {
                this.kbLink = lnk;
            },
            clearConfigDiff: function () {
                var i, sections = this.getSections();
                for (i in sections) {
                    sections[i]['selected'] = false;
                    sections[i]['default'] = false;
                    sections[i]['count'] = 2;
                }
                this.setSections(sections);
                this.setAppliedView(null);
                this.setViewName('Select view');
            },
            resetFilter: function (section) {
                var key;
                section.no_cols = false;
            },

             setSelectedView: function (value) {
                 selectedView = value;
             },
             getSelectedView: function () {
                 return selectedView;
             },
             applyViewFromLogVault: function(selectedView){                
                // XHR to fetch the meta for the given view.
                var me = this;
                this.loadView(selectedView)
                    .then(function (response) {
                        var appliedView;
                        appliedView = response.data.Data[0];
                        me.setViewName(selectedView.view_name);
                        if(angular.element(document.getElementById("configdiff-select-view-div"))){
                            angular.element(document.getElementById("configdiff-select-view-div")).removeClass("open");
                        }                        
                        if (!!appliedView) {
                             var sysId = me.getClusterId();
                            var ec = DefaultFilterService.getDefaultEndCust();
                             //me.applyView(appliedView);
                            me.applyView(appliedView, null, me.getSections(), ec, sysId, DefaultFilterService.getDefaultObservation());
                            me.setSelectedView(selectedView);
                            // Applying the view that is fetched.
                            /*UserTrackingService.standard_user_tracking(GlobalService.getVal('navLog'), 'Config diff', 'Apply View', "{\'" + selectedView['view_name'] + "\'}")
                                .then(function(response){}, function(response){});*/
                        } else {
                            ModalService.alertBox({msg: 'No Applied View'});
                        }
                    }, function(response){
                        console.log(response);
                    }, me);
            },
            applyView: function (view, scope, sections, ec, system, obs) {
                var col = view.cols[0];
                col = col.replace("{\'", "");
                col = col.replace("\'}", "");
                view.cols[0] = col;
                var obs_ct = view.obs_ct[0];
                obs_ct = obs_ct.replace("{\'", "");
                obs_ct = obs_ct.replace("\'}", "");
                view.obs_ct[0] = obs_ct;
                var p_view, i, j, k, deferred = [], obs_cnt;
                obs_cnt = view.obs_ct[0].split(',');
                this.setKbLink(view.kbase);
                this.setAppliedView(view);
                p_view = this.parseSavedView(view);
                for (i in sections) {
                    if (!!p_view[sections[i].table_name]) {
                        sections[i]['default'] = true;
                        sections[i]['selected'] = true;
                        sections[i]['count'] = p_view[sections[i].table_name].obs_cnt;
                        sections[i]['no_cols'] = false;
                        deferred[i] = $q.defer();
                        this.loadData(sections[i], scope, ec, system, obs, deferred[i]);
                        deferred[i].promise.then(function (section) {
                            var no_cols = true;
                            var shownAll = true;
                            for (j in section.keys) {
                                section.keys[j]['visible'] = false;
                            }
                            for (j in section.keys) {
                                if(p_view[section.table_name]['cols'].length == 1 && p_view[section.table_name]['cols'][0] == "*") {
                                    if(section.columnType[section.keys[j]['key']] != "G") {
                                        section.keys[j]['visible'] = true;
                                        no_cols = false;
                                    }
                                    if (!section.keys[j]['visible']) {
                                        shownAll = false;
                                    }
                                } else {
                                    for (k in p_view[section.table_name]['cols']) {
                                        if (section.keys[j]['key'] == p_view[section.table_name]['cols'][k]) {
                                            section.keys[j]['visible'] = true;
                                            no_cols = false;
                                        }
                                    }
                                    if (!section.keys[j]['visible']) {
                                        shownAll = false;
                                    }
                                }
                                
                            }
                            section['shownAll'] = shownAll;
                            section['no_cols'] = no_cols;
                        }, function () {
                            console.error('Error');
                        });
                    } else {
                        sections[i]['default'] = false;
                        sections[i]['selected'] = false;
                    }
                }
            },
            parseSavedView: function (view) {
                var p_view = {}, cols, i, oneCol, obs_cnt, one_cnt;
                obs_cnt = view.obs_ct[0].split(',');
                cols = view['cols'][0].split(',');
                for (i in cols) {
                    oneCol = cols[i].split(':');
                    if (!!p_view[oneCol[0]]) {
                        p_view[oneCol[0]]['cols'].push(oneCol[1]);
                    } else {
                        p_view[oneCol[0]] = {};
                        p_view[oneCol[0]]['cols'] = [];
                        p_view[oneCol[0]]['cols'].push(oneCol[1]);
                    }
                }
                for (i in obs_cnt) {
                    one_cnt = obs_cnt[i].split(':');
                    if (!!p_view[one_cnt[0]]) {
                        p_view[one_cnt[0]]['obs_cnt'] = one_cnt[1];
                    } else {
                        p_view[one_cnt[0]] = {};
                        p_view[one_cnt[0]]['obs_cnt'] = one_cnt[1];
                    }
                }
                return p_view;
            },
            parseData: function (section, data) {
                var t_data = [], i, obs_data, key, j, cols, cols_ref;
                delete section.keys;
                if (section.keys == undefined) {
                    section.keys = [];
                    for (i in data.data[0].rows[0].columns) {
                        key = {};
                        key['key'] = Object.keys(data.data[0].rows[0].columns[i])[0];
                        key['col_name'] = section.columnsMap[Object.keys(data.data[0].rows[0].columns[i])[0]];
                        key['visible'] = true;
                        key['changed'] = false;
                        if (key['key'].indexOf('obs') == -1 && key['col_name']) {
                            section.keys.push(key);
                        }
                    }
                } else {
                    for (i in section.keys) {
                        section.keys[i]['changed'] = false;
                    }
                }
                cols_ref = data.data[0].rows[0].columns.filter(function (value) {
                    return (Object.keys(value)[0].indexOf('obs') == -1 && section.columnsMap[Object.keys(value)[0]]);
                });
                for (i in data.data) {
                    obs_data = {};
                    obs_data['obs'] = data.data[i]['time'];
                    obs_data['data'] = {};
                    cols = data.data[i].rows[0].columns.filter(function (value) {
                        return (Object.keys(value)[0].indexOf('obs') == -1 && section.columnsMap[Object.keys(value)[0]]);
                    });
                    for (j in cols) {
                        obs_data['data'][section.keys[j]['key']] = cols[j][section.keys[j]['key']];
                        if (i > 0 && cols_ref[j][section.keys[j]['key']] != cols[j][section.keys[j]['key']]) {
                            section.keys[j]['changed'] = true;
                        }
                    }
                    t_data.push(obs_data);
                }
                section.data = t_data;
                section.ref_data = section.data[0].data;
            },
            loadData: function (section, scope, ec, system, obs, defer) {
                var that = this;
                section.data = null;
                section.ref_data = null;
                if (section.count == undefined) {
                    section.count = 2;
                }
                if (section.keys == undefined) {
                    section.no_cols = false;
                    section.shownAll = true;
                }
                section.loading = true;
                // Adding column label map for all the sections.
                SectionsMetaService.getColumns(section['table_name']).then(function (response) {
                    var j;
                    section.columnsMap = {};
                    section.columnType = {};
                    section.columnDesc = {};
                    for (j in response.data.Data) {
                        //Add attribute 'column_name' if its missing in the response
                        var gtg = response.data.Data[j];
                        for (var k in gtg) {
                            response.data.Data[j][Object.keys(response.data.Data[j])[0]]['column_name'] = k;
                            break;
                        }
                        section.columnsMap[response.data.Data[j][Object.keys(response.data.Data[j])[0]]['column_name']] = response.data.Data[j][Object.keys(response.data.Data[j])[0]]['attribute_label'];
                        section.columnType[response.data.Data[j][Object.keys(response.data.Data[j])[0]]['column_name']] = response.data.Data[j][Object.keys(response.data.Data[j])[0]]['solr_facet'];
                        section.columnDesc[response.data.Data[j][Object.keys(response.data.Data[j])[0]]['column_name']] = response.data.Data[j][Object.keys(response.data.Data[j])[0]]['type'];
                    }
                    that.getDiffData(section.name, section.table_name, obs['obs_time'].substring(0, 19), section.count).then(function (response) {
                        if (response.data.Data == "" || response.data.Data.data.length == 0) {
                            section.data = null;
                            section.ref_data = null;
                        } else {
                            that.parseData(section, response.data.Data);
                        }
                        if (!!defer) {
                            defer.resolve(section);
                        }
                        var sysColFound = false;
                        var nonSysColFound = false;
                        angular.forEach(section.keys, function(column) {
                            if(section.columnType[column.key] == "G") {
                                column.visible = false;
                                sysColFound = true;
                            } else {
                                nonSysColFound = true;
                            }
                        });
                        if(sysColFound) {
                            section.shownAll = false;
                        } else {
                            section.shownAll = true;
                        }
                        if(!nonSysColFound) {
                            section.no_cols = true;
                        }
                        section.loading = false;
                    }, function (response) {
                        section.loading = false;
                        if (!scope.info.sessionTimedOut && response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/timeout/)) {
                            scope.info.sessionTimedOut = true;
                            ModalService.sessionTimeout();
                        }

                    });
                }, function (response) {
                    if (!scope.info.sessionTimedOut && response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/timeout/)) {
                        scope.info.sessionTimedOut = true;
                        ModalService.sessionTimeout();
                    }
                });

                section.visible = true;
                //section.isTranspose = false;
            },
            getDiffData: function (ns, tbl, ts, n) {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                var ec = GlobalService.getVal('manufacturer');
                var sid2= this.getSysId2(),sid3='NA';
                var sid1 = this.getClusterId();
                if(!sid1){
                    sid1 = 'NA';
                }
                if(!sid2){
                    sid2 = 'NA';
                }
                return $http({
                    method: 'GET',
                    url: infoserverDomain + '/base/columns/system/ts/named/last_n/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + ec + '/' + sid1 + '/' + sid2 + '/' + sid3 + '/' + tbl + '/' + ts + '/' + n,
                    cache: true
                });
            },
            saveSelectedView: function (param, data) {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                var url;
                if (!data.desc) {
                    data.desc = 'NA';
                }
                if (!data.kbase) {
                    data.kbase = 'NA';
                }
                url = infoserverDomain + '/configview/add/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + param['public'] + "/" + param.name + "/" + param['default'];
                return $http.post(url, data);
            },
            getSavedViews: function () {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                return $http({
                    method: 'GET',
                    url: infoserverDomain + '/configview/list/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema')
                });
            },
            /*
             * Retrive all views for all user's public and private view.
             */
            getAllViews: function () {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                return $http({
                    method: "GET",
                    cache: true,
                    url: infoserverDomain + '/configview/list/all/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema')
                });
            },
            setDefault: function (view) {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                return $http({
                    method: 'POST',
                    url: infoserverDomain + '/configview/setdefault/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + view.view_name
                });
            },
            resetDefault: function (view) {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                return $http({
                    method: 'POST',
                    url: infoserverDomain + '/configview/resetdefault/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + view.view_name
                });
            },
            deleteView: function (view) {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                return $http({
                    method: 'POST',
                    url: infoserverDomain + '/configview/delete/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + view.view_name
                });
            },
            setAccessibility: function (view) {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                return $http({
                    method: 'POST',
                    url: infoserverDomain + '/configview/setpublic/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + view['public'] + '/' + view.view_name
                });
            },
            loadView: function (param) {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                return $http({
                    method: "GET",
                    url: infoserverDomain + '/configview/meta/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + "/" + param.view_name,
                    params: {
                        "created_by": param['created_by']
                    }
                });
            },
            exportXlsUrl: function (ec, sys, obs, param) {
                var cols = "", i;
                for (i in param.keys) {
                    if (cols != "") {
                        cols += "&";
                    }
                    cols += "col=" + param.keys[i]['key'];
                }
                var infoserverDomain = GlobalService.getVal('infoserverDomain');

                var sid1 = this.getClusterId();
                //var sid1= DefaultFilterService.getDefaultSysId()["sys_id"];
				var  sid2=DefaultFilterService.getSysId2(), sid3='NA';
                if(!sid2){
                    sid2 = 'NA';
                }if(!sid3){
                    sid3 = 'NA';
                }
                if(!ec){
                    ec = GlobalService.getVal('manufacturer');
                }
                return infoserverDomain + '/base/export/system/ts/all/last_n/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + ec + '/' + sid1 + '/' + sid2 + '/' + sid3 + '/' + param.table_name + '/' + obs['obs_time'].substr(0, 19) + '/' + param.count + '?' + cols;
            },
            getAllFacets: function () {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                return $http({
                    url: infoserverDomain + '/meta/columns/context/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'),
                    method: 'GET',
                    cache: true
                });
            },
            getGoldenConfigCategories: function () {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                return $http({
                    url: infoserverDomain + '/base/gconf/category/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'),
                    method: 'GET',
                    cache: true
                });
            },
            getGoldenConfigDiffData: function (ec, system, ns, tbl, ts, n) {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                return $http({
                    url: infoserverDomain + '/base/gconf/tbl/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + ec + '/' + system + '/' + tbl + '/' + ts,
                    method: 'GET'
                });
            },
            loadGoldenConfigDiffData: function (section, scope, ec, system, obs, defer) {
                var that = this;
                section.data = null;
                section.ref_data = null;
                if (section.count == undefined) {
                    section.count = 2;
                }
                if (section.keys == undefined) {
                    section.no_cols = false;
                    section.shownAll = true;
                }
                section.loading = true;
                this.getGoldenConfigDiffData(ec['ec_name'], system['sys_id'], section.name, section.table_name, obs['obs_time'].substring(0, 19), section.count).then(function (response) {
                    if (response.data.Data == "") {
                        section.data = null;
                        section.ref_data = null;
                    } else {
                        that.parseData(section, response.data.Data);
                    }
                    if (!!defer) {
                        defer.resolve(section);
                    }
                    section.loading = false;
                }, function (response) {
                    section.loading = false;
                    if (!scope.info.sessionTimedOut && response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/timeout/)) {
                        scope.info.sessionTimedOut = true;
                        ModalService.sessionTimeout();
                    }
                });
                section.visible = true;
                //section.isTranspose = false;
            },

            // Formats the facets data to use on UI.
            formatFacets : function(rfacets) {
                var facets = [{
                    label: 'All',
                    name: 'all'
                }], facet;
                angular.forEach(rfacets, function(value) {
                    angular.forEach(value, function(tfacet, key) {
                        if (tfacet['solr_facet'] == 'S' && tfacet['attribute_label'] && key && key.indexOf('obs_') != 0) {
                            facet = {};
                            facet['label'] = tfacet['attribute_label'];
                            facet['name'] = key;
                            facets.push(facet);
                        }
                    });
                });
                //Filtering out to remove duplicates.
                return $filter('unique')(facets, 'label');
            }
        };
    }]);

/* Controllers for analytics - All the controllers related to analytics app */

angular.module('gbApp.controllers.dashboards', ['gbApp.services.analytics', 'gbApp.globals'])
// DashboardsCtrl - Responsible for holding the model related to the dashboards.
    .controller('DashboardsCtrl', ['$scope', '$sce', '$filter', '$interval', 'Dashboards', 'GlobalService', 'AppService', 'ErrorService', 'UserTrackingService', '$timeout', 'InstanceHandler', 'WorkbenchService', 'ModalService', '$window', '$cookies', 'metaDataService', '$modal', '$location', 'x2js', '$modalInstance', 'GBDashboardService','UtilService',
        function ($scope, $sce, $filter, $interval, Dashboards, GlobalService, AppService, ErrorService, UserTrackingService, $timeout, InstanceHandler, WorkbenchService, ModalService, $window, $cookies, metaDataService, $modal, $location, x2js, $modalInstance, GBDashboardService, UtilService) {
            var dashCtrl = this;
            dashCtrl.gbAlDashboards = [];
            dashCtrl.groupedData = [];
            $scope.showFilterPanel = false;
            dashCtrl.actionMessageFlag = false;
            $scope.filterCount = 0;
            dashCtrl.info = {};
            dashCtrl.info.query = '';
            dashCtrl.currentSelected = 0;
            dashCtrl.showSelectNotify = false;
            // Defines the completion of the request for dashboards.
            dashCtrl.info.complete = false;
            dashCtrl.info.loggedRole = metaDataService.getUserRole();
            dashCtrl.tabSummaryFlag = true;
            dashCtrl.filterLoading = false;
            dashCtrl.repeatCall = true;
            dashCtrl.BulkOwnerDropElement = GlobalService.getVal("BulkOwnerDropElement");
            dashCtrl.visDisableInfo = GlobalService.getVal("visDisableInfo");
            dashCtrl.BulkVisibilityDropElement = GlobalService.getVal("BulkVisibilityDropElement");
            dashCtrl.bulkOwnerEmail = GlobalService.getVal("BulkOwnerDropElement");;
            dashCtrl.bulkVisibility = dashCtrl.BulkVisibilityDropElement[0].value;
            dashCtrl.bulkEditConfMessage = GlobalService.getVal("bulkEditConfMessage");
            dashCtrl.dataSourcesList = [];
            dashCtrl.dataSourcesListFlag = false;
            dashCtrl.NoUsersRoleFoundMsg = GlobalService.getVal("NoUsersRoleFoundMsg");
            dashCtrl.info.lastModifiedArray = GlobalService.getVal("lastModifiedArray");
            dashCtrl.scheduleFreq = {"enabled":false, "name":"hourly"};
            dashCtrl.days = GlobalService.getVal("days");
            dashCtrl.internalDashCount = 0;
            dashCtrl.userCreatedDashCount = 0;
            dashCtrl.dataSourceSelMsg = GlobalService.getVal("dataSourceSelMsg");
            dashCtrl.dtypeSelMsg = GlobalService.getVal("dtypeSelMsg");
            dashCtrl.roleAssignTitle = GlobalService.getVal("roleAssignTitle");
            dashCtrl.scheduleFreq.scheduler_timeZone = new Date().toTimeString().split("GMT")[1].substring(0,5);
            dashCtrl.month = GlobalService.getVal("month");
            dashCtrl.schTimeHrs = GlobalService.getVal("schTimeHrs");
            dashCtrl.schTimeMin = GlobalService.getVal("schTimeMin");
            dashCtrl.changeOwnerErrorMsg = GlobalService.getVal("changeOwnerErrorMsg");
            dashCtrl.scheduleFreq.hrintvSele = "1";
            dashCtrl.scheduleFreq.weekDaySele = "1";
            dashCtrl.roles = [];
            dashCtrl.scheduleFreq.monthDay = "Sunday";
            dashCtrl.allTags = [];
            dashCtrl.scheduleFreq.YearDay = "Sunday";
            dashCtrl.scheduleFreq.YearMonth = "Jan";
            dashCtrl.info.assignRole = "Select Roles";
            dashCtrl.scheduleFreq.scheduler_recipients = "";
            dashCtrl.scheduleFreq.SelectedDays = [];
            dashCtrl.allDashCount = 0;
            dashCtrl.selectAllFlag = false;
            dashCtrl.scheduleFreq.weekDay = GlobalService.getVal('weekDay');
            dashCtrl.schReportrecp = GlobalService.getVal("schReportrecp");
            dashCtrl.schReportDays = GlobalService.getVal("schReportDays");
            dashCtrl.scheduleFreq.hrintv = GlobalService.getVal('hrintv');
            dashCtrl.schReportTitle = GlobalService.getVal('schReportTitle');
            dashCtrl.freqTitle = GlobalService.getVal("freqTitle");
            dashCtrl.schReportOptions = GlobalService.getVal("schReportOptions");
            dashCtrl.noScheduling = GlobalService.getVal("noScheduling");
            dashCtrl.info.loadCount = 0;
            dashCtrl.info.dashboardSortOrder = true;
            dashCtrl.scheduleFreq.error = false;
            dashCtrl.info.dashboardSortOrderCB = true;
            dashCtrl.info.dashboardSortOrderType = true;
            dashCtrl.info.dashboardSortOrderDOFM = true;
            dashCtrl.info.orderByField = 'name';
            dashCtrl.scheduleFreq.scheduler_time = {};
            dashCtrl.scheduleFreq.scheduler_time.hr = "HH";
            dashCtrl.scheduleFreq.scheduler_time.min = "MM";
            dashCtrl.logiOwnerSearch = "";
            dashCtrl.tableauOwnerSearch = "";
            dashCtrl.info.allDashboardsList = [];
            dashCtrl.dashboardType = GlobalService.getVal('defaultDashboard');
            // Holds all the dashboards.
            dashCtrl.dashboards = [];
            // Holds all tableau dashboards return from infoserver API
            dashCtrl.tableauDashboards = [];
            dashCtrl.loaded = false;
            dashCtrl.defaultDashboard = [];
            dashCtrl.info.currentView = 'list';
            dashCtrl.info.currentBook = null;
            dashCtrl.info.dType = 'allDashboards';//posible values : allDashboards, internalDashboards, internalDashboards
            dashCtrl.info.typeDisplay = 'All';
            dashCtrl.info.createdBy = 'All';
            dashCtrl.info.lastModified = 'All';
            dashCtrl.info.owner = 'All';
            dashCtrl.info.datasource = 'All';
            dashCtrl.info.dUserName = [];
            dashCtrl.info.bookOwnerList = [];
	        dashCtrl.gAllDashboards = [];
            dashCtrl.info.selectAll = false;
            dashCtrl.info.unSelectAll = false;
            dashCtrl.info.tags = "";
            dashCtrl.info.tagsFilter = [];
            dashCtrl.info.loading = false;
            dashCtrl.info.selectedBooks = "";
            dashCtrl.info.workbenchApiRootDir = "";
            dashCtrl.info.tag_max_characters = GlobalService.getVal('tag_maxlimit');
            dashCtrl.info.tag_truncate_char_limit = GlobalService.getVal('tag_truncatelimit');
            dashCtrl.info.errMsg = "";
            dashCtrl.noDashboardFound = false;
            //dashCtrl.scheduleExportFileTypes = GlobalService.getVal("tableauExportFormat");
            dashCtrl.scheduleExportFileTypeDefault = GlobalService.getVal("scheduleExportFileTypeDefault");//readit fromglobal
            dashCtrl.scheduleExportFileTypeCurrentVariable = '';
            
            //tableau shecudling download type
            dashCtrl.tableauExportFormat = GlobalService.getVal("tableauExportFormat");
            dashCtrl.logiExportFormat = GlobalService.getVal("logiExportFormat");
            dashCtrl.info.selected = {};
            dashCtrl.info.filter = {};
            dashCtrl.info.pageSize = {
                "total" : 0,
                "count" : GlobalService.getVal("dashboardListPageCount"),
            };
            dashCtrl.info.pagination = UtilService.localPagination();
            dashCtrl.info.pagination.pageSize = GlobalService.getVal("dashboardListPageCount");
            dashCtrl.info.isTableauConfigured = false;
            var htmconst_url = "../config/constants/dashboard_constants.json";
            $.get(htmconst_url, function (response, status) {
               $scope.htmconstdata = response;
            });
            // //ng-change="dashCtrl.selectedExportType(type.name, $index)"
            // var selExpArr = [];
            // dashCtrl.selectedExportType = function(sel, index){

            //     if(selExpArr.length >= 1)
            //     {
            //         selExpArr.splice(0,selExpArr.length);
            //         selExpArr.push(sel);
            //     }
            //     else{
            // selExpArr.push(sel);
            // }
            //   }

            $scope.$watch(' dashCtrl.info.complete', function() {
                if(dashCtrl.info.complete){
                    AppService.hidePanelLoading();
                }
            })
            //Event to check when application is ready
             $scope.$on('AppLoadEvent-dashboards', function (event, args) {
                if( dashCtrl.info.complete){
                    AppService.hidePanelLoading();
                    //realod fresh list of dashboards when user click main menu (Dashboard)
                    if(dashCtrl.defaultDashboard.length == 0){
                        dashCtrl.setDashboard('summary');
                        dashCtrl.info.loading = true;
                    }
                    $scope.showFilterPanel = false;
                    $('#gbDashboard-filter-panel-body .panel-collapse').collapse('hide');
                    $scope.clearAppliedFilters();
                    dashCtrl.resetQuickFilter();
                    dashCtrl.info.filterObj = [];
                    dashCtrl.hardReload(true);
                }
             });

            // Holds all the workbenchDashboards.
            var workbenchDashboards = {
                loading: true,
                books: []
            };
            // Defines the page object for pagination.
            dashCtrl.info.page = {
                "current": 1,
                "pageSize": 10
            };

            dashCtrl.info.filterObj = [];

            dashCtrl.info.selectAllDashboard = false;

            dashCtrl.info.quickFilter = [{
                title : 'All',
                columnName : 'type_to_display',
                columnValue : "*",
                selected : true
            },{
                title : 'Internal',
                columnName : 'type_to_display',
                columnValue : GlobalService.getVal('internalDashboards'),
                selected : false
            },{
                title : 'User Created',
                columnName : 'type_to_display',
                columnValue : GlobalService.getVal('userCreatedDashboards'),
                selected : false
            }];

            dashCtrl.info.sortBy = null;

            // dashCtrl.info.pagination = {};

            dashCtrl.info.columns = [
                {
                    title : "Name",
                    sorted : false,
                    columnName : "dname",
                    class : "dnameNew"
                },{
                    title : "Type",
                    sorted : false,
                    columnName : "d_type",
                    class : "dTypeNew"
                },{
                    title : "Owner",
                    sorted : false,
                    columnName : "gDOwner",
                    class : "dOwnedNew"
                },{
                    title : "Last modified",
                    sorted : false,
                    columnName : "modified_ts",
                    class : "dModifiedNew"
                }
            ]
            // Stores whether session is timed out or not
            dashCtrl.info.sessionTimedOut = false;
            // function to set dashboard type either summary or other dashboard
            dashCtrl.setDashboard = function (dtype) {
                var domain = GlobalService.getVal('primaryDomain');
			    document.cookie = 'dashboardType=' + dtype + ";domain=" + domain + ";path=/";
                dashCtrl.dashboardType = dtype;
                metaDataService.setDashboardType(dtype);
                var currentApp = getCookie("currentApp");
            };
            dashCtrl.chkAdminFeature = function(){
                if(metaDataService.getFeatures().admin){
                    return true;
                }else {
                    return false;
                }
            };
            dashCtrl.info.complete = false;
            dashCtrl.info.pagination.sortByColumn = function (sortInfo, data) {
                data.sort(function (a, b) {
                    var nameA = a[sortInfo['columnName']].toUpperCase(); // ignore upper and lowercase
                    var nameB = b[sortInfo['columnName']].toUpperCase(); // ignore upper and lowercase
                    if (sortInfo['sorted']) {
                        if (nameA < nameB) {
                            return -1;
                        }
                        if (nameA > nameB) {
                            return 1;
                        }
                    } else {
                        if (nameA > nameB) {
                            return -1;
                        }
                        if (nameA < nameB) {
                            return 1;
                        }
                    }
                    // names must be equal
                    return 0;
                });
                return data;
            };
            //This will be executed only once when page loads first time
            //GBDashboardService.getAllDashboardsAndInitializeTableauServices(dashCtrl.info.pageSize["count"])
                //new api by shubam
            dashCtrl.hardReload = function(initialLoad) {
                dashCtrl.workbenchDown = false;
                dashCtrl.info.loading = true;
                dashCtrl.filterLoading = true;
                dashCtrl.info.selectAllDashboard = false;
                setTimeout(function(){ dashCtrl.actionMessageFlag = false; }, 3000);
                $scope.NameFilter = {
                    columnTitle : "Name"
                }
                dashCtrl.loaded =false;
                if(dashCtrl.defaultDashboard.length == 0 || dashCtrl.defaultDashboard == undefined){
                    dashCtrl.defaultDashboard = [];
                }
                WorkbenchService.checkIfTableauIsConfigured().then(function (response) {
                    dashCtrl.info.isTableauConfigured = response.data.Data;
                    if(dashCtrl.info.isTableauConfigured){
                        WorkbenchService.getTrustedAuthKey().then(function (response) {
                            dashCtrl.info.securityToken = response.data.Data;
                            GBDashboardService.getTableauInitialInfo().then(function(){
                                if(dashCtrl.defaultDashboard.length == 0) {
                                    GBDashboardService.getSummaryDashObject(dashCtrl.info.securityToken != -1 ? true : false).then(function (data) {
                                        if(data.data.Data!=""){
                                            dashCtrl.defaultDashboard.push(data.data.Data);
                                            if(dashCtrl.defaultDashboard[0].typ == "Tableau"){
                                                dashCtrl.defaultDashboard[0].dname = dashCtrl.defaultDashboard[0].name;
                                                dashCtrl.defaultDashboard[0].thumbnailImgSrc = GlobalService.getVal('infoserverDomain') +"/"+ dashCtrl.defaultDashboard[0].reports[0].thumbnailImgSrc;
                                                dashCtrl.defaultDashboard[0]['type_to_display'] = GlobalService.getVal('userCreatedDashboards');
                                                for(j=0;j<dashCtrl.defaultDashboard[0].reports.length;j++){
                                                    dashCtrl.defaultDashboard[0].reports[j].hilighted = false;
                                                    dashCtrl.defaultDashboard[0].reports[j].url = "/t/"+GBDashboardService.getSiteName()+"/views/"+dashCtrl.defaultDashboard[0].reports[j].url.replace('/sheets', '');
                                                    dashCtrl.defaultDashboard[0].reports[j].r_link = dashCtrl.defaultDashboard[0].reports[j].url;
                                                    dashCtrl.defaultDashboard[0].reports[j].thumbnailImgSrc = GlobalService.getVal('infoserverDomain') +"/"+ dashCtrl.defaultDashboard[0].reports[j].thumbnailImgSrc;
                                                    dashCtrl.defaultDashboard[0].reports[j].rname =  dashCtrl.defaultDashboard[0].reports[j].name;
                                                }
                                            }else {
                                                dashCtrl.defaultDashboard[0].thumbnailImgSrc = GlobalService.getVal('dashboard_img_logi_path')+"/"+dashCtrl.defaultDashboard[0].reports[0].thumbnailImgSrc;
                                                if(dashCtrl.defaultDashboard[0].dashboardSecurityInfo.owner == "" || dashCtrl.defaultDashboard[0].dashboardSecurityInfo.owner == null)  {
                                                    dashCtrl.defaultDashboard[0].dashboardSecurityInfo.owner = dashCtrl.defaultDashboard[0].created_by;
                                                }
                                                for(j=0;j<dashCtrl.defaultDashboard[0].reports.length;j++){
                                                    dashCtrl.defaultDashboard[0].reports[j].hilighted = false;
                                                    dashCtrl.defaultDashboard[0].reports[j].thumbnailImgSrc = GlobalService.getVal('dashboard_img_logi_path')+"/"+dashCtrl.defaultDashboard[0].reports[j].thumbnailImgSrc;
                                                }
                                                dashCtrl.defaultDashboard[0]['type_to_display'] = GlobalService.getVal('internalDashboards');
                                            }
                                            dashCtrl.defaultDashboard[0]['modified_ts_to_display'] = moment( dashCtrl.defaultDashboard[0]['modified_ts']).format("YYYY-MM-DD HH:MM:SS");
                                            dashCtrl.defaultDashboard[0]['created_ts_to_display'] = moment( dashCtrl.defaultDashboard[0]['created_ts']).format("YYYY-MM-DD HH:MM:SS");
                                            dashCtrl.defaultDashboard[0]['visibility'] = dashCtrl.getVisibility(dashCtrl.defaultDashboard[0]);
                                            dashCtrl.defaultDashboard[0]['expand'] = false;
                                            dashCtrl.defaultDashboard[0]['selected'] = false;
                                            dashCtrl.defaultDashboard[0]['gDOwner'] = dashCtrl.getBookChangedOwnerName(dashCtrl.defaultDashboard[0]);
                                            dashCtrl.defaultDashboard = GBDashboardService.setpermissionsandroles(dashCtrl.defaultDashboard, false);
                                            if(dashCtrl.defaultDashboard.length == 0){
                                                dashCtrl.setDashboard('other');    
                                            }else {
                                                dashCtrl.setUpSummaryDashboard();
                                            }
                                        }else {
                                            dashCtrl.setDashboard('other');
                                        }
                                    }, function (response) {
                                    });
                                }
                                if(dashCtrl.info.securityToken != -1){
                                    GBDashboardService.newgetAllDashboards(true).then(function (data) {
                                        dashCtrl.processData(data, initialLoad, true);
                                    }, function (response) {
                                        dashCtrl.info.complete = true;
                                        dashCtrl.loaded =true;
                                        dashCtrl.gbAlDashboards = [];
                                        dashCtrl.noDashboardFound = true;
                                        dashCtrl.setDashboard('other');
                                    });
                                }else {
                                    GBDashboardService.newgetAllDashboards(false).then(function (data) {
                                        dashCtrl.processData(data, initialLoad, false);
                                    }, function (response) {
                                        dashCtrl.info.complete = true;
                                        dashCtrl.loaded =true;
                                        dashCtrl.gbAlDashboards = [];
                                        dashCtrl.noDashboardFound = true;
                                        dashCtrl.setDashboard('other');
                                    });
                                }
                            });
                        }, function (response) {
                            dashCtrl.info.securityToken = "-1";
                            if(dashCtrl.defaultDashboard.length == 0) {
                                GBDashboardService.getSummaryDashObject(dashCtrl.info.securityToken != -1 ? true : false).then(function (data) {
                                    if(data.data.Data!=""){
                                        dashCtrl.defaultDashboard.push(data.data.Data);
                                        if(dashCtrl.defaultDashboard[0].typ == "Tableau"){
                                            dashCtrl.defaultDashboard[0].dname = dashCtrl.defaultDashboard[0].name;
                                            dashCtrl.defaultDashboard[0].thumbnailImgSrc = GlobalService.getVal('infoserverDomain') +"/"+ dashCtrl.defaultDashboard[0].reports[0].thumbnailImgSrc;
                                            dashCtrl.defaultDashboard[0]['type_to_display'] = GlobalService.getVal('userCreatedDashboards');
                                            for(j=0;j<dashCtrl.defaultDashboard[0].reports.length;j++){
                                                dashCtrl.defaultDashboard[0].reports[j].hilighted = false;
                                                dashCtrl.defaultDashboard[0].reports[j].url = "/t/"+GBDashboardService.getSiteName()+"/views/"+dashCtrl.defaultDashboard[0].reports[j].url.replace('/sheets', '');
                                                dashCtrl.defaultDashboard[0].reports[j].r_link = dashCtrl.defaultDashboard[0].reports[j].url;
                                                dashCtrl.defaultDashboard[0].reports[j].thumbnailImgSrc = GlobalService.getVal('infoserverDomain') +"/"+ dashCtrl.defaultDashboard[0].reports[j].thumbnailImgSrc;
                                                dashCtrl.defaultDashboard[0].reports[j].rname =  dashCtrl.defaultDashboard[0].reports[j].name;
                                            }
                                        }else {
                                            dashCtrl.defaultDashboard[0].thumbnailImgSrc = GlobalService.getVal('dashboard_img_logi_path')+"/"+dashCtrl.defaultDashboard[0].reports[0].thumbnailImgSrc;
                                            if(dashCtrl.defaultDashboard[0].dashboardSecurityInfo.owner == "" || dashCtrl.defaultDashboard[0].dashboardSecurityInfo.owner == null)  {
                                                dashCtrl.defaultDashboard[0].dashboardSecurityInfo.owner = dashCtrl.defaultDashboard[0].created_by;
                                            }
                                            for(j=0;j<dashCtrl.defaultDashboard[0].reports.length;j++){
                                                dashCtrl.defaultDashboard[0].reports[j].hilighted = false;
                                                dashCtrl.defaultDashboard[0].reports[j].thumbnailImgSrc = GlobalService.getVal('dashboard_img_logi_path')+"/"+dashCtrl.defaultDashboard[0].reports[j].thumbnailImgSrc;
                                            }
                                            dashCtrl.defaultDashboard[0]['type_to_display'] = GlobalService.getVal('internalDashboards');
                                        }
                                        dashCtrl.defaultDashboard[0]['modified_ts_to_display'] = moment( dashCtrl.defaultDashboard[0]['modified_ts']).format("YYYY-MM-DD HH:MM:SS");
                                        dashCtrl.defaultDashboard[0]['created_ts_to_display'] = moment( dashCtrl.defaultDashboard[0]['created_ts']).format("YYYY-MM-DD HH:MM:SS");
                                        dashCtrl.defaultDashboard[0]['visibility'] = dashCtrl.getVisibility(dashCtrl.defaultDashboard[0]);
                                        dashCtrl.defaultDashboard[0]['expand'] = false;
                                        dashCtrl.defaultDashboard[0]['selected'] = false;
                                        dashCtrl.defaultDashboard[0]['gDOwner'] = dashCtrl.getBookChangedOwnerName(dashCtrl.defaultDashboard[0]);
                                        dashCtrl.defaultDashboard = GBDashboardService.setpermissionsandroles(dashCtrl.defaultDashboard, false);
                                        if(dashCtrl.defaultDashboard.length == 0){
                                            dashCtrl.setDashboard('other');    
                                        }else {
                                            dashCtrl.setUpSummaryDashboard();
                                        }
                                    }else {
                                        dashCtrl.setDashboard('other');
                                    }
                                }, function (response) {
                                });
                            }
                            GBDashboardService.newgetAllDashboards(false).then(function (data) {
                                dashCtrl.processData(data, initialLoad, false);
                            }, function (response) {
                                dashCtrl.info.complete = true;
                                dashCtrl.loaded =true;
                                dashCtrl.gbAlDashboards = [];
                                dashCtrl.noDashboardFound = true;
                                dashCtrl.setDashboard('other');
                            });
                        });
                    } else{
                        if(dashCtrl.defaultDashboard.length == 0) {
                            GBDashboardService.getSummaryDashObject(false).then(function (data) {
                                if(data.data.Data!=""){
                                    dashCtrl.defaultDashboard.push(data.data.Data);
                                    if(dashCtrl.defaultDashboard[0].typ == "Tableau"){
                                        dashCtrl.defaultDashboard[0].dname = dashCtrl.defaultDashboard[0].name;
                                        dashCtrl.defaultDashboard[0].thumbnailImgSrc = GlobalService.getVal('infoserverDomain') +"/"+ dashCtrl.defaultDashboard[0].reports[0].thumbnailImgSrc;
                                        dashCtrl.defaultDashboard[0]['type_to_display'] = GlobalService.getVal('userCreatedDashboards');
                                        for(j=0;j<dashCtrl.defaultDashboard[0].reports.length;j++){
                                            dashCtrl.defaultDashboard[0].reports[j].hilighted = false;
                                            dashCtrl.defaultDashboard[0].reports[j].url = "/t/"+GBDashboardService.getSiteName()+"/views/"+dashCtrl.defaultDashboard[0].reports[j].url.replace('/sheets', '');
                                            dashCtrl.defaultDashboard[0].reports[j].r_link = dashCtrl.defaultDashboard[0].reports[j].url;
                                            dashCtrl.defaultDashboard[0].reports[j].thumbnailImgSrc = GlobalService.getVal('infoserverDomain') +"/"+ dashCtrl.defaultDashboard[0].reports[j].thumbnailImgSrc;
                                            dashCtrl.defaultDashboard[0].reports[j].rname =  dashCtrl.defaultDashboard[0].reports[j].name;
                                        }
                                    }else {
                                        dashCtrl.defaultDashboard[0].thumbnailImgSrc = GlobalService.getVal('dashboard_img_logi_path')+"/"+dashCtrl.defaultDashboard[0].reports[0].thumbnailImgSrc;
                                        if(dashCtrl.defaultDashboard[0].dashboardSecurityInfo.owner == "" || dashCtrl.defaultDashboard[0].dashboardSecurityInfo.owner == null)  {
                                            dashCtrl.defaultDashboard[0].dashboardSecurityInfo.owner = dashCtrl.defaultDashboard[0].created_by;
                                        }
                                        for(j=0;j<dashCtrl.defaultDashboard[0].reports.length;j++){
                                            dashCtrl.defaultDashboard[0].reports[j].hilighted = false;
                                            dashCtrl.defaultDashboard[0].reports[j].thumbnailImgSrc = GlobalService.getVal('dashboard_img_logi_path')+"/"+dashCtrl.defaultDashboard[0].reports[j].thumbnailImgSrc;
                                        }
                                        dashCtrl.defaultDashboard[0]['type_to_display'] = GlobalService.getVal('internalDashboards');
                                    }
                                    dashCtrl.defaultDashboard[0]['modified_ts_to_display'] = moment( dashCtrl.defaultDashboard[0]['modified_ts']).format("YYYY-MM-DD HH:MM:SS");
                                    dashCtrl.defaultDashboard[0]['created_ts_to_display'] = moment( dashCtrl.defaultDashboard[0]['created_ts']).format("YYYY-MM-DD HH:MM:SS");
                                    dashCtrl.defaultDashboard[0]['visibility'] = dashCtrl.getVisibility(dashCtrl.defaultDashboard[0]);
                                    dashCtrl.defaultDashboard[0]['expand'] = false;
                                    dashCtrl.defaultDashboard[0]['selected'] = false;
                                    dashCtrl.defaultDashboard[0]['gDOwner'] = dashCtrl.getBookChangedOwnerName(dashCtrl.defaultDashboard[0]);
                                    dashCtrl.defaultDashboard = GBDashboardService.setpermissionsandroles(dashCtrl.defaultDashboard, false);
                                    if(dashCtrl.defaultDashboard.length == 0){
                                        dashCtrl.setDashboard('other');    
                                    }else {
                                        dashCtrl.setUpSummaryDashboard();
                                    }
                                }else {
                                    dashCtrl.setDashboard('other');
                                }
                            }, function (response) {
                            });
                        }
                        GBDashboardService.newgetAllDashboards(false).then(function (data) {
                            dashCtrl.processData(data, initialLoad, false);
                        }, function (response) {
                            dashCtrl.info.complete = true;
                            dashCtrl.loaded =true;
                            dashCtrl.gbAlDashboards = [];
                            dashCtrl.noDashboardFound = true;
                            dashCtrl.setDashboard('other');
                        });
                    }
                })

                //New code logic
                
            }
            dashCtrl.processData = function (data, initialLoad, isTableau) {
                var affix =  GlobalService.getVal('rLinkAffix');
                dashCtrl.workbenchDown = false;
                dashCtrl.currentSelected = 0;
                dashCtrl.showSelectNotify = false;
                dashCtrl.dashgroup = [];
                dashCtrl.allTableauDash = $filter('filter')(data.data.Data.dashboards, { 'typ': 'Tableau' }, false) || [];
                dashCtrl.allInternalDash = $filter('internalDashboards')(data.data.Data.dashboards);
                dashCtrl.allTableauAdmins = data.data.Data.tOwnerList;
                dashCtrl.allLogiAdmins = data.data.Data.lOwnerList;
                dashCtrl.gbAlDashboards = dashCtrl.allTableauDash.concat(dashCtrl.allInternalDash);
                for(i=0;i<dashCtrl.gbAlDashboards.length;i++){
                    if(dashCtrl.gbAlDashboards[i].typ == "Tableau"){
                        dashCtrl.gbAlDashboards[i].dname = dashCtrl.gbAlDashboards[i].name;
                        dashCtrl.gbAlDashboards[i].thumbnailImgSrc = GlobalService.getVal('infoserverDomain') +"/"+ dashCtrl.gbAlDashboards[i].reports[0].thumbnailImgSrc;
                        dashCtrl.gbAlDashboards[i]['type_to_display'] = GlobalService.getVal('userCreatedDashboards');
                        for(j=0;j<dashCtrl.gbAlDashboards[i].reports.length;j++){
                            dashCtrl.gbAlDashboards[i].reports[j].hilighted = false;
                            dashCtrl.gbAlDashboards[i].reports[j].url = "/t/"+GBDashboardService.getSiteName()+"/views/"+dashCtrl.gbAlDashboards[i].reports[j].url.replace('/sheets', '');
                            dashCtrl.gbAlDashboards[i].reports[j].r_link = dashCtrl.gbAlDashboards[i].reports[j].url;
                            console.log(dashCtrl.gbAlDashboards[i].reports[j].r_link);
                            dashCtrl.gbAlDashboards[i].reports[j].thumbnailImgSrc = GlobalService.getVal('infoserverDomain') +"/"+ dashCtrl.gbAlDashboards[i].reports[j].thumbnailImgSrc;
                            dashCtrl.gbAlDashboards[i].reports[j].rname =  dashCtrl.gbAlDashboards[i].reports[j].name;
                        }
                    }else {
                        dashCtrl.gbAlDashboards[i].thumbnailImgSrc = GlobalService.getVal('dashboard_img_logi_path')+"/"+dashCtrl.gbAlDashboards[i].reports[0].thumbnailImgSrc;
                        if(dashCtrl.gbAlDashboards[i].dashboardSecurityInfo.owner == "" || dashCtrl.gbAlDashboards[i].dashboardSecurityInfo.owner == null)  {
                            dashCtrl.gbAlDashboards[i].dashboardSecurityInfo.owner = dashCtrl.gbAlDashboards[i].created_by;
                        }
                        for(j=0;j<dashCtrl.gbAlDashboards[i].reports.length;j++){
                            dashCtrl.gbAlDashboards[i].reports[j].hilighted = false;
                            dashCtrl.gbAlDashboards[i].reports[j].thumbnailImgSrc = GlobalService.getVal('dashboard_img_logi_path')+"/"+dashCtrl.gbAlDashboards[i].reports[j].thumbnailImgSrc;
                        }
                        dashCtrl.gbAlDashboards[i]['type_to_display'] = GlobalService.getVal('internalDashboards');
                    }
                    dashCtrl.gbAlDashboards[i]['modified_ts_to_display'] = moment( dashCtrl.gbAlDashboards[i]['modified_ts']).format("YYYY-MM-DD HH:MM:SS");
                    dashCtrl.gbAlDashboards[i]['created_ts_to_display'] = moment( dashCtrl.gbAlDashboards[i]['created_ts']).format("YYYY-MM-DD HH:MM:SS");
                    dashCtrl.gbAlDashboards[i]['visibility'] = dashCtrl.getVisibility(dashCtrl.gbAlDashboards[i]);
                    dashCtrl.gbAlDashboards[i]['expand'] = false;
                    dashCtrl.gbAlDashboards[i]['selected'] = false;
                    dashCtrl.gbAlDashboards[i]['gDOwner'] = dashCtrl.getBookChangedOwnerName(dashCtrl.gbAlDashboards[i]);
                    //Populate Dashboard Group Names
                    if(dashCtrl.gbAlDashboards[i].group_type != "NA" && dashCtrl.gbAlDashboards[i].group_type){
                        dashCtrl.dashgroup.push(dashCtrl.gbAlDashboards[i].group_type);
                        dashCtrl.dashgroup = dashCtrl.unique(dashCtrl.dashgroup);
                    }
                }
                dashCtrl.gbAlDashboards = GBDashboardService.setpermissionsandroles(dashCtrl.gbAlDashboards, true);
                dashCtrl.dashboards =angular.copy(dashCtrl.gbAlDashboards);//using this for pagination
                dashCtrl.gbAlDashboards = dashCtrl.info.applyFilter(dashCtrl.gbAlDashboards, dashCtrl.info.filterObj);
                if(dashCtrl.dashboardType != 'summary' && dashCtrl.dashboardType !='other'){
                    dashCtrl.gbAlDashboards = dashCtrl.gbAlDashboards.filter(function(field){
                        return field.group_type == dashCtrl.dashboardType;
                    })
                }
                
                if (!dashCtrl.gbAlDashboards || !dashCtrl.gbAlDashboards.length || dashCtrl.gbAlDashboards.length == 0) {
                    //hide loading modal
                    //dashCtrl.setUpSummaryDashboard();
                    dashCtrl.info.complete = true;
                    dashCtrl.info.loading = false;
                    dashCtrl.loaded =true;
                    dashCtrl.noDashboardFound = true;
                    return;
                }
                dashCtrl.info.pageSize["total"] = dashCtrl.dashboards.length;
                var allDash = dashCtrl.dashboards;
                for (i = 0; i < allDash.length; i++) {
                    if (allDash[i].typ == "Tableau") {
                        dashCtrl.userCreatedDashCount++;
                    } else {
                        dashCtrl.internalDashCount++;
                    }
                }
                dashCtrl.noDashboardFound = false;
                //update pagination object
                //dashCtrl.info.pagination = GBDashboardService.pagination;
                //hide loading modal
                dashCtrl.info.sortBy = {title: "Last modified", sorted: false, columnName: "modified_ts"};
                dashCtrl.gbAlDashboards = dashCtrl.info.pagination.sortByColumn(dashCtrl.info.sortBy, dashCtrl.gbAlDashboards);
                dashCtrl.gbAlDashboardsFiltered = dashCtrl.gbAlDashboards;
                dashCtrl.info.pagination.init(angular.copy(dashCtrl.gbAlDashboards));
                dashCtrl.gbAlDashboards = dashCtrl.info.pagination.currentRecordsSet;
                dashCtrl.info.loading = false;
                dashCtrl.loaded =true;
                //move to first page
                //dashCtrl.info.pagination.currentPage = 1;
                //get data soruces
                //set up summary dasboard
                // if(initialLoad){
                //     dashCtrl.setUpSummaryDashboard();
                // }else {
                //     dashCtrl.setUpSummaryDashboard(true);
                // }
                //load dashboard in instance viewer
                dashCtrl.openDashboardInstanceViewerByDefault();
                dashCtrl.groupedData = [];
                if(isTableau){
                    dashCtrl.appendDataSources(true);
                }else{
                    dashCtrl.appendDataSources(false);
                }
                dashCtrl.info.complete = true;
            };
            dashCtrl.hardReload(true);
            dashCtrl.reloadData = function (flag) {
                dashCtrl.info.selectedBooks = [];
                if(flag!="fromSearch"){
                    dashCtrl.currentSelected = 0;
                    dashCtrl.showSelectNotify = false;
                    dashCtrl.info.selectAllDashboard = false;
                }
                dashCtrl.userCreatedDashCount = 0;
                dashCtrl.internalDashCount = 0;
                dashCtrl.hideModal();
                for(i=0;i<dashCtrl.dashboards.length;i++){
                    if(flag!="fromSearch"){
                        dashCtrl.dashboards[i].selected = false;
                    }
                    dashCtrl.dashboards[i]['visibility'] = dashCtrl.getVisibility(dashCtrl.dashboards[i]);
                    dashCtrl.dashboards[i]['gDOwner'] = dashCtrl.getBookChangedOwnerName(dashCtrl.dashboards[i]);
                }
                dashCtrl.groupedData = [];
                dashCtrl.dashboards = GBDashboardService.setpermissionsandroles(dashCtrl.dashboards, true);
                dashCtrl.gbAlDashboards = angular.copy(dashCtrl.dashboards);
                dashCtrl.groupedData = GBDashboardService.groupbyColumn(dashCtrl.dashboards);
                for(i=0;i<dashCtrl.groupedData[0].data.length;i++){
                    for(j=0;j<dashCtrl.info.quickFilter.length;j++){
                        if(dashCtrl.groupedData[0].data[i].name == dashCtrl.info.quickFilter[j].columnValue && dashCtrl.info.quickFilter[j].selected){
                            dashCtrl.groupedData[0].data[i].selected = true;
                            dashCtrl.groupedData[0].appliedFilterFirstItem = dashCtrl.groupedData[0].data[i].name;
                            dashCtrl.groupedData[0].appliedFilterCount = 1;
                        }
                    }
                }
                GBDashboardService.setGroupedData(dashCtrl.groupedData);
                dashCtrl.gbAlDashboards = GBDashboardService.setpermissionsandroles(dashCtrl.gbAlDashboards, true);
                dashCtrl.gbAlDashboards = dashCtrl.info.applyFilter(dashCtrl.gbAlDashboards, dashCtrl.info.filterObj);
                if(dashCtrl.dashboardType != 'summary' && dashCtrl.dashboardType !='other'){
                    dashCtrl.gbAlDashboards = dashCtrl.gbAlDashboards.filter(function(field){
                        return field.group_type == dashCtrl.dashboardType;
                    })
                }
                var allDash = dashCtrl.dashboards;
                for (i = 0; i < allDash.length; i++) {
                    if (allDash[i].typ == "Tableau") {
                        dashCtrl.userCreatedDashCount++;
                    } else {
                        dashCtrl.internalDashCount++;
                    }
                }
                dashCtrl.info.pageSize["total"] = dashCtrl.dashboards.length;
                dashCtrl.noDashboardFound = false;
                dashCtrl.info.sortBy = {title: "Last modified", sorted: false, columnName: "modified_ts"};
                dashCtrl.gbAlDashboards = dashCtrl.info.pagination.sortByColumn(dashCtrl.info.sortBy, dashCtrl.gbAlDashboards);
                dashCtrl.gbAlDashboardsFiltered = dashCtrl.gbAlDashboards;
                dashCtrl.info.pagination.init(angular.copy(dashCtrl.gbAlDashboards));
                dashCtrl.gbAlDashboards = dashCtrl.info.pagination.currentRecordsSet;
                dashCtrl.info.loading = false;
                dashCtrl.loaded =true;
                setTimeout(function(){ dashCtrl.actionMessageFlag = false; }, 3000);
            }
            dashCtrl.appendDataSources = function(isTableau){
                if(isTableau){
                    GBDashboardService.getDashboardDatasourcesList().then(function (response) {
                        for(i=0;i<dashCtrl.dashboards.length;i++){
                            for(j=0;j<response.data.Data.length;j++){
                                if(dashCtrl.dashboards[i].d_id == response.data.Data[j].d_id){
                                    dashCtrl.dashboards[i].datasource = response.data.Data[j].datasource;
                                }
                            }
                        }
                        dashCtrl.groupedData = GBDashboardService.groupbyColumn(dashCtrl.dashboards);
                        GBDashboardService.setGroupedData(dashCtrl.groupedData);
                        dashCtrl.filterLoading = false;
                    });
                }else {
                    dashCtrl.groupedData = GBDashboardService.groupbyColumn(dashCtrl.dashboards);
                    GBDashboardService.setGroupedData(dashCtrl.groupedData);
                    dashCtrl.filterLoading = false;
                }
            }
            dashCtrl.getGroupDashLength = function(grp){
                return dashCtrl.dashboards.filter(function(field){
                    return field.group_type == grp;
                }).length;
            }
            dashCtrl.setUpSummaryDashboard = function(dontoReset){
                var d_id, match;
                if (dashCtrl.defaultDashboard.length != 0) {
                    var roleList = dashCtrl.defaultDashboard[0].role_access.join(",");
                    var userInfo = metaDataService.getUser();

                    if(!dashCtrl.ifGlassbeamUser() && roleList.indexOf(userInfo['role']) == -1){
                        if(!metaDataService.getFeatures().admin){
                            dashCtrl.defaultDashboard = [];
                        }
                    }
                }
                if (dashCtrl.defaultDashboard.length && !dontoReset) {
                    dashCtrl.setDashboard('summary');
                    instances = InstanceHandler.getInstances();
                    angular.element('#gb-summary-dashboard-iframe').height('100%');
                    // console.log(angular.element('#gb-summary-dashboard-iframe').height())   
                } else {
                    dashCtrl.setDashboard('other');
                }
                 //if you have only summary dashboard and no other dashboards
                //  if (!dashCtrl.gbAlDashboards && dashCtrl.dashboardType == 'summary') {
                //     if (d_id && d_id != dashCtrl.defaultDashboard.reports[0].r_id) {
                //         //dashCtrl.info.complete = true;
                //         ErrorService.setError('dashboards', GlobalService.getVal('dashboard_not_found'));
                //         dashCtrl.r_link = "";
                //         dashCtrl.r_name = "";%
                //     } else {
                //         dashCtrl.r_link = dashCtrl.defaultDashboard.reports[0].r_link;
                //         dashCtrl.r_name = dashCtrl.defaultDashboard.reports[0].rname;
                //         dashCtrl.height = dashCtrl.defaultDashboard.reports[0].height;
                //         dashCtrl.d_name = dashCtrl.defaultDashboard.dname;
                //         //dashCtrl.info.complete = true;
                //     }
                //     // Logging default loading of dashboards activity.
                //     dashCtrl.logActivity(dashCtrl.dashboardType == 'summary' ? 'Summary Dashboard' : 'Other Dashboards', 'Default Load', '{\'' + dashCtrl.r_name + '\'}');
                // } else {
                //     if (dashCtrl.dashboardType == 'summary' && dashCtrl.defaultDashboard.length == 1) {
                //         dashCtrl.logActivity('Summary Dashboard', 'Default Load', '{\'' + dashCtrl.defaultDashboard[0].reports[0].rname + '\'}');
                //     }
                //     if (d_id) {
                //         for (i in dashCtrl.gbAlDashboards) {
                //             for (j in dashCtrl.gbAlDashboards[i].reports) {
                //                 if (dashCtrl.gbAlDashboards[i].reports[j].r_id == d_id) {
                //                     match = dashCtrl.gbAlDashboards[i].reports[j];
                //                     break;
                //                 }
                //             }
                //         }
                //         if (match) {
                //             dashCtrl.addInstance(match);
                //         } else {
                //             ErrorService.setError('dashboards', GlobalService.getVal('dashboard_not_found'));
                //         }
                //     }
                //    //dashCtrl.info.complete = true;
                // }
                //if we have tableau dashboard as summary dashboard
                if(dashCtrl.defaultDashboard.length>0){
                    var works = dashCtrl.dashboards;
                    if(dashCtrl.defaultDashboard[0].typ == "Tableau"){
                        dashCtrl.loadTableauSummary(dashCtrl.defaultDashboard[0],dashCtrl.defaultDashboard[0].reports[0].r_id);      
                    }
                }
            };
            dashCtrl.openDashboardInstanceViewerByDefault = function(){
                var d_id, match;
                var data = GBDashboardService.getAllDashboardsWithoutFilter()
                if(data.length != 0 && sessionStorage.getItem("dash_mode") == "true"){
                    var foundFlag = false;
                    var didList = localStorage.getItem("did").split(',');
                    var ridList = localStorage.getItem("rid").split(',');
                    for(i=0;i<didList.length;i++){
                        var tempRid = ridList[i];
                        var tempDid = didList[i];
                        for(j=0;j<didList.length;j++){
                            if(tempRid == ridList[j] && i!=j && tempDid == didList[j]){
                                didList.splice(j,1);
                                j--
                            }
                        }
                    }
                    var foundDid = [];
                    var foundRid = [];
                    var works = data;
                    dashCtrl.setDashboard('other');
                    for(i=0;i<works.length;i++){
                        if(works[i]["dname"]){
                            for(k=0;k<didList.length;k++){
                                if(didList[k]==works[i].d_id){
                                    for(j=0;j<works[i].reports.length;j++){
                                        if(works[i].reports[j].r_id == ridList[k]){
                                            foundDid.push(didList[k]);
                                            foundRid.push(ridList[k]);
                                            didList.splice(k,1);
                                            ridList.splice(k,1);
                                            if(dashCtrl.showDashBoard(works[i],"dashLevel")){
                                                var DirRep = works[i].reports[j];
                                                if(sessionStorage.getItem("rdreport")){
                                                    var re = new RegExp("([?&])rdReport=.*?(&|$)", "i");
                                                    var separator = DirRep.r_link.indexOf('?') !== -1 ? "&" : "?";
                                                    DirRep.r_link = DirRep.r_link.replace(re, "$1rdReport=" + sessionStorage.getItem("rdreport") + '$2');
                                                }
                                                if(works[i]['d_type'] != "Tableau"){
                                                    dashCtrl.openDashboardIninstanceViewerOnloadOfPage(DirRep);
                                                }else{
                                                    dashCtrl.addTabInstance(DirRep);
                                                }
                                                dashCtrl.logActivity(dashCtrl.dashboardType == 'summary' ? 'Summary Dashboard' : 'Other Dashboards', 'InstanceViewer', '{\''+DirRep.rname+'\'}');
                                                if(didList.length==0){
                                                    foundFlag = true;
                                                    sessionStorage.setItem("dash_mode", "false");
                                                }
                                                document.getElementById("gb-full-page-loader").style.display = 'none';
                                                break;
                                            }else {
                                                if(didList.length==0){
                                                    foundFlag = true;
                                                }
                                                sessionStorage.setItem("dash_mode", "false");
                                                dashCtrl.info.dashModeErrorMsg = GlobalService.getVal("dashModePermissionError")
                                                ModalService.alertBox({msg: dashCtrl.info.dashModeErrorMsg});
                                            }
                                        }
                                    } 
                                }
                            }
                        }
                    } 
                    for(i=0;i<didList.length;i++){
                        if(dashCtrl.defaultDashboard[0]){
                            if(didList[i]==dashCtrl.defaultDashboard[0].d_id && ridList[i]==dashCtrl.defaultDashboard[0].reports[0].r_id){
                                foundDid.push(didList[i]);
                                foundRid.push(ridList[i]);
                                didList.splice(i,1);
                                ridList.splice(i,1);
                                i--;
                                var DirRep = dashCtrl.defaultDashboard[0].reports[0];
                                dashCtrl.openDashboardIninstanceViewerOnloadOfPage(DirRep);
                                dashCtrl.logActivity(dashCtrl.dashboardType == 'summary' ? 'Summary Dashboard' : 'Other Dashboards', 'InstanceViewer', '{\''+DirRep.rname+'\'}');
                                if(didList==0){
                                    sessionStorage.setItem("dash_mode", "false");
                                    foundFlag = true;
                                }
                                document.getElementById("gb-full-page-loader").style.display = 'none';
                            }
                        }
                    }                   
                    if(!foundFlag){
                        sessionStorage.setItem("dash_mode", "false");
                        dashCtrl.info.dashModeErrorMsg = GlobalService.getVal("dashModeError")
                        ModalService.alertBox({msg: dashCtrl.info.dashModeErrorMsg});
                    }
                    localStorage.setItem("did", foundDid.toString());
                    localStorage.setItem("rid", foundRid.toString());
                }
            };
            dashCtrl.getQuickFilterDisable = function(data) {
                if(dashCtrl.filterLoading){
                    return true;
                }
               if((data.title == "Internal" && dashCtrl.internalDashCount == 0) || (data.title == "User Created" && dashCtrl.userCreatedDashCount == 0)){
                    return true;
               }else{
                   return false;
               }
            }
            dashCtrl.reloadDashboards = function (reloadPagination) {
                dashCtrl.info.loading = true;
                GBDashboardService.reloadDashboard(dashCtrl.info.filterObj, dashCtrl.info.sortBy, dashCtrl.info.query, reloadPagination, dashCtrl.info.pageSize["count"])
                    .then(function (data) {
                        dashCtrl.gbAlDashboards = data;
                        dashCtrl.dashboards = data;
                        if(!data || !data.length || data.length == 0){
                            //hide loading modal
                            dashCtrl.info.loading = false;
                            dashCtrl.info.pagination = null;
                            dashCtrl.noDashboardFound = true;
                            return;
                        }
                        dashCtrl.noDashboardFound = false;
                        // update group data
                        var newGroupedData = GBDashboardService.getGroupedData();
                        dashCtrl.updateColumnGroups(newGroupedData);
                        //hide loading modal
                        dashCtrl.info.loading = false;
                        // get data soruces
                        dashCtrl.info.datasource =  GBDashboardService.getDataSources();
                        //reset selection, unchech all checkboxes
                        dashCtrl.info.selectAllDashboard = false;
                        // if its hard reload the update/rest pagination and default dashboard
                        if(reloadPagination){
                            dashCtrl.info.pagination = GBDashboardService.pagination;
                            // get summary dashboards
                            dashCtrl.defaultDashboard = GBDashboardService.getSummaryDashboard();
                            //set up summary dasboard
                            dashCtrl.setUpSummaryDashboard(true);
                        }
                        dashCtrl.info.loading = false;
                    },function (response) {
                        dashCtrl.info.complete = true;
                        dashCtrl.info.loading = false;
                        dashCtrl.noDashboardFound = true;
                        dashCtrl.gbAlDashboards = [];
                        dashCtrl.setDashboard('other');
                    });
            };
            dashCtrl.updateColumnGroups = function(newGroupedData){
                newGroupedData.map(function(newFilterItem){
                    var newItem = true;
                    for(var i=0;i<dashCtrl.groupedData.length;i++){
                        if(newFilterItem.columnName == dashCtrl.groupedData[i]['columnName']){
                            newItem = false;
                            var newData = newFilterItem.data;
                            var oldData = dashCtrl.groupedData[i]['data'];
                            if(Array.isArray(newData)){
                                newData.map(function(dItem){
                                    for(var k=0;k<oldData.length;k++){
                                        if((oldData[k].name == dItem.name) && oldData[k].selected){
                                            dItem.selected = oldData[k].selected;
                                        }
                                    }
                                });
                            }
                            //update with count "0" which is not part of new data
                            if(oldData.length > newData.length){
                                oldData.forEach(function(oldDataItem){
                                    var found = false;
                                    newData.forEach(function(newDataItem){
                                        if(oldDataItem.name === newDataItem.name){
                                            found = true;
                                        }
                                    });
                                    if(!found){
                                        newData.push(oldDataItem);
                                    }
                                });
                            }
                            dashCtrl.groupedData[i]['data'] = newData;
                        }
                    }
                    if(newItem){
                        dashCtrl.groupedData.push(newFilterItem);
                    }
                });
                //
            };
            dashCtrl.getSortedFilteredPaginatedData = function() {
                dashCtrl.gbAlDashboards = dashCtrl.info.applyFilter(dashCtrl.dashboards, dashCtrl.info.filterObj);
                if(dashCtrl.dashboardType != 'summary' && dashCtrl.dashboardType !='other'){
                    dashCtrl.gbAlDashboards = dashCtrl.gbAlDashboards.filter(function(field){
                        return field.group_type == dashCtrl.dashboardType;
                    })
                }
                dashCtrl.gbAlDashboards = dashCtrl.info.pagination.sortByColumn(dashCtrl.info.sortBy, dashCtrl.gbAlDashboards);
                dashCtrl.gbAlDashboardsFiltered = dashCtrl.gbAlDashboards;
                dashCtrl.info.pagination.init(angular.copy(dashCtrl.gbAlDashboards));
                //dashCtrl.groupedData = GBDashboardService.getGroupedData();
                var tmpGroupedData = GBDashboardService.groupbyColumn(dashCtrl.gbAlDashboards);
                dashCtrl.gbAlDashboards = dashCtrl.info.pagination.currentRecordsSet;
                var updateData = function(targetList, newList){
                    var found = false;
                    targetList.forEach(function(item){ 
                        found = false;
                        newList.forEach(function(newItem){
                            if(item.name === newItem.name){
                                found = true;
                                item.count = newItem.count;
                                item.disabled = false;
                            }
                        });
                        if(!found){
                            item.disabled = true;
                            item.count = 0;
                            //item.selected = false;
                        }
                    });
                }

                dashCtrl.groupedData.forEach(function(item){
                    tmpGroupedData.forEach(function(newItem){
                        if(!item.lastUpdatedFilter){
                            if(item.columnName == newItem.columnName){
                                updateData(item.data, newItem.data);
                            }
                        }
                    });
                });

            };
            dashCtrl.changePages = function () {

                dashCtrl.gbAlDashboards =  dashCtrl.info.changePage(dashCtrl.info.filterObj, dashCtrl.info.sortBy, dashCtrl.info.query);
            }
            dashCtrl.changePageSize = function () {
                dashCtrl.gbAlDashboards =  dashCtrl.info.changePageSize(dashCtrl.info.filterObj, dashCtrl.info.sortBy, dashCtrl.info.pagination.pageSize);
            }
            dashCtrl.updateDataFilter = function(actualColumn, columnValue, selected, multiselect, actualData, filterColumn) {
                dashCtrl.filterLoading = false;
                var filterList = [];
                // if user select "TYPE" as ""User created dashboards""
                // Delect all data from "datasource"
                // collapse data sources list
                if(actualColumn === 'type_to_display' && columnValue === "Internal dashboards"){
                    dashCtrl.groupedData.map(function(item){
                        if(item.columnName === "datasource"){
                            item.data.map(function(selectedItem){
                                selectedItem.selected = false;
                            });
                        }
                    });
                }
                var getSelectedValues = function(list){
                    var tmp = [], tmpKeys;
                    if(Array.isArray(list)){
                        list.map(function(item){
                            if(item.selected) tmp.push(item.name);
                        });
                        return tmp;
                    }
                    return [];
                }
                //for singl select
                if(!multiselect && selected){
                    if(Array.isArray(actualData)){
                        actualData.map(function(item){
                            if(columnValue === item.name){
                                item.selected = true;
                            }else{
                                item.selected = false;
                            }
                        });
                    }
                }
                //make filterObj
                dashCtrl.groupedData.map(function(item){
                    if(getSelectedValues(item.data).length){
                        filterList.push({
                            'columnName' : item.columnName,
                            'columnValue' : getSelectedValues(item.data)
                        });
                        item['appliedFilterCount'] = getSelectedValues(item.data).length;
                        item['appliedFilterFirstItem'] = getSelectedValues(item.data)[0];
                    }else{
                        item['appliedFilterCount'] = 0;
                        item['appliedFilterFirstItem'] = "";
                    }
                });
                if(!filterList.length){
                    dashCtrl.clearLocalFilter();
                    return;
                }
                dashCtrl.info.filterObj = filterList;

                //mark last selected filter
                dashCtrl.groupedData.map(function(item){
                    if(item.columnName === filterColumn.columnName){
                       item.lastUpdatedFilter = true;
                    }else{
                       item.lastUpdatedFilter = false;
                    }
                });

                dashCtrl.logActivity('Other Dashboards', 'local filter', columnValue);
                dashCtrl.getSortedFilteredPaginatedData();
                //update quick filter
                if(actualColumn === "type_to_display"){
                    dashCtrl.info.quickFilter.map(function(item){
                        if(item.columnValue === columnValue){
                            item.selected = selected;
                        }else{
                            item.selected = false;
                        }
                    });
                    if(!selected){
                        dashCtrl.info.quickFilter.map(function(item){
                            if(item.title == 'All'){
                                item.selected = true;
                            }else{
                                item.selected = false;
                            }
                        });
                    }
                }
            };
            dashCtrl.getClearFilterDisable = function () {
                if(dashCtrl.info.filterObj.length){
                    return false;
                }
                if(dashCtrl.info.query.length==0){
                    return true;
                }
                return false;
            };
            dashCtrl.clearLocalFilter = function () {
                dashCtrl.info.query="";
                dashCtrl.groupedData.map(function(item){
                    item['appliedFilterCount'] = 0;
                    item['appliedFilterFirstItem'] = "";
                    item['expand'] = false;
                    item['lastUpdatedFilter'] = false;
                    if(Array.isArray(item.data)){
                        item.data.map(function(item){
                            item.selected = false;
                        })
                    }else{
                        for (var key in item.data) {
                            item.data[key]['selected'] = false;
                        }
                    }
                });
                dashCtrl.info.filterObj = [];
                dashCtrl.resetQuickFilter();
                dashCtrl.getSortedFilteredPaginatedData();
            };
            dashCtrl.enableBulkEdit = function (){
                var dashList = dashCtrl.dashboards;
                var countInternal = 0;
                var countUserCreated = 0;
                for(i=0;i<dashList.length;i++){
                    if(dashList[i].selected){
                        if(dashList[i].type_to_display == GlobalService.getVal("internalDashboards")){
                            countInternal++;
                        }else{
                            countUserCreated++;
                        }
                    }
                }
                for(i=0;i<dashCtrl.info.quickFilter.length;i++){
                    if(dashCtrl.info.quickFilter[i].selected){
                        if(dashCtrl.info.quickFilter[i].columnValue == GlobalService.getVal("internalDashboards") && countInternal>0){
                            return false;
                        }else if(dashCtrl.info.quickFilter[i].columnValue == GlobalService.getVal("userCreatedDashboards") && countUserCreated>0){
                            return false;
                        }else {
                            return true;
                        }
                    }
                }
            }
            dashCtrl.getBulkVisDisablity = function() {
                var dashList = dashCtrl.gbAlDashboards;
                var count = 0;
                var flag = false;
                for(i=0;i<dashList.length;i++){
                    if(dashList[i].selected){
                        if(dashList[i].d_type == "Summary"){
                            flag = true;
                        }
                    }
                } 
                return flag;
            }
            dashCtrl.getBulkEditTitle = function() {
                var dashList = dashCtrl.dashboards;
                var countInternal = 0;
                var countUserCreated = 0;
                for(i=0;i<dashList.length;i++){
                    if(dashList[i].selected){
                        if(dashList[i].type_to_display == GlobalService.getVal("internalDashboards")){
                            countInternal++;
                        }else{
                            countUserCreated++;
                        }
                    }
                }
                for(i=0;i<dashCtrl.info.quickFilter.length;i++){
                    if(dashCtrl.info.quickFilter[i].selected){
                        if(dashCtrl.info.quickFilter[i].columnValue == "*"){
                            return GlobalService.getVal("quickDashFilterTitleBulkEdit");
                        }else {
                            if(dashCtrl.info.quickFilter[i].columnValue == GlobalService.getVal("internalDashboards") && countInternal>0){
                                return "Edit "+countInternal+" dashboards";
                            }else if(dashCtrl.info.quickFilter[i].columnValue == GlobalService.getVal("userCreatedDashboards") && countUserCreated>0){
                                return "Edit "+countUserCreated+" dashboards";
                            }else {
                                return GlobalService.getVal("NoMultiSelectTitleBulkEdit");
                            }
                        }
                    }
                }
            }
            dashCtrl.getBulkEditText = function() {
                var dashList = dashCtrl.gbAlDashboards;
                var count = 0;
                for(i=0;i<dashList.length;i++){
                    if(dashList[i].selected){
                        count++;
                    }
                }
                for(i=0;i<dashCtrl.info.quickFilter.length;i++){
                    if(dashCtrl.info.quickFilter[i].selected){
                        if(dashCtrl.info.quickFilter[i].columnValue == "*"){
                            return "Bulk Edit";
                        }else {
                            if(count>=2){                                
                                return "Edit "+count+" dashboards";
                            }else {
                                return "Bulk Edit";
                            }
                        }
                    }
                }
            }
            dashCtrl.bulkEditDash = function() {
                $scope.modalInstance = ModalService.openModal("partials/dashboards/bulk_edit_dash.html", $scope, "gb-dash-bulk-edit-modal", true, 'static');
                dashCtrl.bulkOwnerEmail = GlobalService.getVal("BulkOwnerDropElement");
                dashCtrl.bulkVisibility = dashCtrl.BulkVisibilityDropElement[0].name;
            }
            dashCtrl.getBulkOwnerList = function() {
                for(i=0;i<dashCtrl.info.quickFilter.length;i++){
                    if(dashCtrl.info.quickFilter[i].selected){
                        var type = dashCtrl.info.quickFilter[i].columnValue;
                    }
                }
                if(type == "*") {
                    return;
                }
                if(type == GlobalService.getVal('internalDashboards')) {
                    var owner = dashCtrl.allLogiAdmins;
                }else {
                    var owner = dashCtrl.allTableauAdmins;  
                }
                return owner;
            }
            dashCtrl.bulkEditApply = function() {
                dashCtrl.info.loading = true;
                for(i=0;i<dashCtrl.info.quickFilter.length;i++){
                    if(dashCtrl.info.quickFilter[i].selected){
                        var type = dashCtrl.info.quickFilter[i].columnValue;
                    }
                }
                var dashList = dashCtrl.dashboards;
                var dashListSelected = [];
                var tempObj = {};
                var tempArray = [];
                for(i=0;i<dashList.length;i++){
                    if(type == GlobalService.getVal('internalDashboards')){
                        if(dashList[i].selected && dashList[i].type_to_display == GlobalService.getVal("internalDashboards")){
                            dashListSelected.push(dashList[i]);
                        }
                    }else{
                        if(dashList[i].selected && dashList[i].type_to_display == GlobalService.getVal("userCreatedDashboards")){
                            dashListSelected.push(dashList[i]);
                        }
                    }
                }
                for(j=0;j<dashListSelected.length;j++){
                    for (i = 0; i < dashListSelected[j].reports.length; i++) {
                        tempObj = {};
                        tempObj.did = dashListSelected[j].d_id;
                        tempObj.rids = dashListSelected[j].reports[i].r_id;
                        tempArray.push(tempObj);
                    }
                }
                for(i=0;i<dashCtrl.info.quickFilter.length;i++){
                    if(dashCtrl.info.quickFilter[i].selected){
                        var typ = dashCtrl.info.quickFilter[i].columnValue;
                    }
                }
                if(dashCtrl.bulkOwnerEmail != GlobalService.getVal("BulkOwnerDropElement")){
                    if(typ == GlobalService.getVal('userCreatedDashboards')) {
                        var newOwnerId = "";
                        var userIdArray = [];
                        var ownerJson = JSON.parse(dashCtrl.bulkOwnerEmail);
                        var newOwner = ownerJson.email;
                        var site_id = GBDashboardService.getSiteId();
                        var un = metaDataService.getUserEmail();
                        for(i=0;i<dashListSelected.length;i++){
                            userIdArray.push(dashListSelected[i].ownerId);
                        }
                        GBDashboardService.getUsersAPI().then(function (response) {
                            var users = x2js.xml_str2json(response.data)['tsResponse']['users']['user'];
                            if (Array.isArray(users)) {
                                for (var i in users) {
                                    if (users[i]['_name'] == newOwner) {
                                        newOwnerId = users[i]['_id'];
                                    }
                                }
                            } else {
                                ModalService.alertBox({ msg: dashCtrl.changeOwnerErrorMsg });
                            }
                            var param = {
                                ownership: {
                                    drids: tempArray,
                                    owner: ownerJson.email,
                                    role: ownerJson.role,
                                    isTableau: true,
                                    siteId: site_id,
                                    userId: userIdArray,
                                    userName: un,
                                    newOwnerId:newOwnerId

                                }
                            }
                            Dashboards.updateOwner(param).then(function (response) {
                                dashCtrl.logActivity('Other Dashboards', 'Change Owner for multiple dashboard', '{\'' + tempArray + '\'}');
                                var dateToUpdate = new Date();
                                if (response.data.Msg.search("ERROR") >= 0) {
                                    ModalService.alertBox({ msg: dashCtrl.changeOwnerErrorMsg });
                                } else {
                                    dashCtrl.filterLoading = false;
                                    for(i=0;i<dashCtrl.dashboards.length;i++){
                                        for(j=0;j<dashListSelected.length;j++){
                                            if(dashCtrl.dashboards[i].d_id == dashListSelected[j].d_id){
                                                dashCtrl.dashboards[i].modified_ts = dateToUpdate.toISOString();
                                                dashCtrl.dashboards[i].modified_ts_to_display = moment( dashCtrl.dashboards[i].modified_ts).format("YYYY-MM-DD HH:MM:SS");
                                                dashCtrl.dashboards[i].dashboardSecurityInfo.owner = JSON.parse(dashCtrl.bulkOwnerEmail).email;
                                                if(dashCtrl.dashboards[i].role_access.indexOf(JSON.parse(dashCtrl.bulkOwnerEmail).role) == -1){
                                                    dashCtrl.dashboards[i].role_access.push(JSON.parse(dashCtrl.bulkOwnerEmail).role);
                                                }
                                            }
                                        }
                                    }
                                    $scope.modalInstance.close();
                                    dashCtrl.actionMessage = "Updated "+dashListSelected.length+" dashboards.";
                                    dashCtrl.actionMessageFlag = true;
                                    $scope.showFilterPanel = false;
                                    dashCtrl.reloadData();
                                }
                            }, function (error) {
                                ModalService.alertBox({ msg: dashCtrl.changeOwnerErrorMsg });
                            });
                        });
                    }else {
                        var ownerJson = JSON.parse(dashCtrl.bulkOwnerEmail);
                        var param = {
                            ownership : {
                                drids : tempArray,
                                owner : ownerJson.email,
                                role: ownerJson.role,
                                isTableau:false
                            }
                        }
                        Dashboards.updateOwner(param).then(function (response) {
                            dashCtrl.logActivity('Other Dashboards', 'Change Owner for multiple dashboard', '{\''+tempArray+'\'}');
                            var dateToUpdate = new Date();
                            for(i=0;i<dashCtrl.dashboards.length;i++){
                                for(j=0;j<dashListSelected.length;j++){
                                    if(dashCtrl.dashboards[i].d_id == dashListSelected[j].d_id){
                                        dashCtrl.dashboards[i].modified_ts = dateToUpdate.toISOString();
                                        dashCtrl.dashboards[i].modified_ts_to_display = moment( dashCtrl.dashboards[i].modified_ts).format("YYYY-MM-DD HH:MM:SS");
                                        dashCtrl.dashboards[i].dashboardSecurityInfo.owner = JSON.parse(dashCtrl.bulkOwnerEmail).email;
                                        if(dashCtrl.dashboards[i].role_access.indexOf(JSON.parse(dashCtrl.bulkOwnerEmail).role) == -1){
                                            dashCtrl.dashboards[i].role_access.push(JSON.parse(dashCtrl.bulkOwnerEmail).role);
                                        }
                                    }
                                }
                            }
                            dashCtrl.filterLoading = false;
                            $scope.modalInstance.close();
                            dashCtrl.actionMessage = "Updated "+dashListSelected.length+" dashboards.";
                            dashCtrl.actionMessageFlag = true;
                            $scope.showFilterPanel = false;

                            dashCtrl.reloadData();
                        }, function (response) {
                        }); 
                    }
                }
                if(dashCtrl.bulkVisibility != dashCtrl.BulkVisibilityDropElement[0].name){
                    if(typ == GlobalService.getVal('userCreatedDashboards')) {
                        var param = {
                            visibility : {
                                drids : tempArray,
                                isPublic : JSON.parse(dashCtrl.bulkVisibility),
                                isTableau:true,
                                siteId : site_id,
                                userId : "",
                                userName : un
                            }
                        }
                    }else {
                        var param = {
                            visibility : {
                                drids : tempArray,
                                isPublic : JSON.parse(dashCtrl.bulkVisibility),
                                isTableau:false
                            }
                        }
                    }
                    Dashboards.changeVisibility(param).then(function (response) {
                        dashCtrl.logActivity('Other Dashboards', 'Change Visibility multiple dashboard', '{\''+tempArray+'\'}');
                        var dateToUpdate = new Date();
                        dashCtrl.filterLoading = false;
                        for(i=0;i<dashCtrl.dashboards.length;i++){
                            for(j=0;j<dashListSelected.length;j++){
                                if(dashCtrl.dashboards[i].d_id == dashListSelected[j].d_id){
                                    dashCtrl.dashboards[i].modified_ts = dateToUpdate.toISOString();
                                    dashCtrl.dashboards[i].modified_ts_to_display = moment( dashCtrl.dashboards[i].modified_ts).format("YYYY-MM-DD HH:MM:SS");
                                    dashCtrl.dashboards[i].visibility = JSON.parse(dashCtrl.bulkVisibility);
                                    dashCtrl.dashboards[i].dashboardSecurityInfo.is_public = JSON.parse(dashCtrl.bulkVisibility);
                                    if(dashCtrl.bulkOwnerEmail != GlobalService.getVal("BulkOwnerDropElement")){
                                        if(dashCtrl.dashboards[i].role_access.indexOf(JSON.parse(dashCtrl.bulkOwnerEmail).role) == -1){
                                            dashCtrl.dashboards[i].role_access.push(JSON.parse(dashCtrl.bulkOwnerEmail).role);
                                        }
                                    }
                                }
                            }
                        }

                        dashCtrl.actionMessage = "Updated "+dashListSelected.length+" dashboards.";
                        dashCtrl.actionMessageFlag = true;
                        $scope.modalInstance.close();
                        $scope.showFilterPanel = false;

                        dashCtrl.reloadData();
                    }, function (response) {
                    });
                }else {
                }
            }
            dashCtrl.applyQuickFilter = function (btn) {
                if(btn.selected) return;
                var multiselect, actualData;
                btn.selected = !btn.selected;
                multiselect = false;
                actualData = {"User created dashboards":{"count":11,"selected":false},"Internal dashboards":{"count":7,"selected":false}};
                dashCtrl.info.quickFilter.map(function(item){
                    if(btn.title != item.title){
                        item.selected = false;
                    }
                });
                //update filter group object
                var selectedFilterItem = null;
                dashCtrl.groupedData.map(function(item){
                    if(item.columnName === btn.columnName){
                        selectedFilterItem = item;
                        for(var key in item.data){
                            if( item.data[key]['name'] === btn.columnValue){
                                item.data[key]['selected'] = true;
                            }else{
                                item.data[key]['selected'] = false;
                            }
                        }
                    }
                });
                dashCtrl.updateDataFilter( btn.columnName, btn.columnValue, btn.selected, multiselect, actualData, selectedFilterItem);
            };
            dashCtrl.resetQuickFilter = function () {
                dashCtrl.info.quickFilter.map(function(item){
                    if(item.title == 'All'){
                        item.selected = true;
                    }else{
                        item.selected = false;
                    }
                });
            };
            dashCtrl.columnSorting = function(column) {
                for(var i=0;i<dashCtrl.info.columns.length;i++){
                    if(dashCtrl.info.columns[i]['title'] != column['title']){
                        dashCtrl.info.columns[i]['sorted'] = false;
                    }
                }
                column.sorted = !column.sorted;
                dashCtrl.info.sortBy = column;
                dashCtrl.changePages();
            };
            dashCtrl.serachDashboardsAndTags =  function () {
                dashCtrl.reloadData("fromSearch");
            };
            dashCtrl.closeModal = function(){
                dashCtrl.resetModal();
                $scope.modalInstance.close();
            };
            dashCtrl.expandField = function(index, type, field){
                if(type == "ext"){
                    var id = "dashRowExt"+index;
                }else {
                    var id = "dashRowInt"+index;
                }
                if(field == "role"){
                    $(".gbDashboardTable #"+id+" td.dRolesNew").css("white-space", "inherit");
                    $(".gbDashboardTable #"+id+" td.dRolesNew .shrinkAllLink").show();
                    $(".gbDashboardTable #"+id+" td.dRolesNew .showAllLink").hide();
                }else {
                    $(".gbDashboardTable #"+id+" td.dTagNew").css("white-space", "inherit");
                    $(".gbDashboardTable #"+id+" td.dTagNew .shrinkAllLink").show();
                    $(".gbDashboardTable #"+id+" td.dTagNew .showAllLink").hide();
                }
            };
            dashCtrl.shrinkField = function(index, type, field){
                if(type == "ext"){
                    var id = "dashRowExt"+index;
                }else {
                    var id = "dashRowInt"+index;
                }
                if(field=="role"){
                    $(".gbDashboardTable #"+id+" td.dRolesNew").css("white-space", "nowrap");
                    $(".gbDashboardTable #"+id+" td.dRolesNew .shrinkAllLink").hide();
                    $(".gbDashboardTable #"+id+" td.dRolesNew .showAllLink").show();
                }else {
                    $(".gbDashboardTable #"+id+" td.dTagNew").css("white-space", "nowrap");
                    $(".gbDashboardTable #"+id+" td.dTagNew .shrinkAllLink").hide();
                    $(".gbDashboardTable #"+id+" td.dTagNew .showAllLink").show();
                }                
            };
            dashCtrl.resetModal = function(){
                dashCtrl.scheduleFreq.enabled = false;
                dashCtrl.scheduleFreq.error = false;
                dashCtrl.scheduleFreq.name = "hourly";
                dashCtrl.scheduleFreq.scheduler_recipients = "";
                dashCtrl.scheduleFreq.hrintvSele = "1";
                dashCtrl.scheduleFreq.weekDaySele = "1";
                dashCtrl.scheduleFreq.monthDay = "Sunday";
                dashCtrl.scheduleFreq.yearDay = "Sunday";
                dashCtrl.scheduleFreq.YearMonth = "Jan";
                dashCtrl.scheduleFreq.scheduler_time.hr = "HH";
                dashCtrl.scheduleFreq.scheduler_time.min = "MM";
            };
            dashCtrl.setSummaryDashConf = function(book,index){
                if(book.reports[index].d_type == "Summary"){
                    return;
                }
                $scope.setSummaryDashData = book;
                $scope.setSummaryDashIndex = index;
                $scope.modal1 = ModalService.openModal('partials/dashboard_summary_conf.html', $scope, false, true);
            };
            dashCtrl.setSummaryDash = function(){
                var book = $scope.setSummaryDashData;
                var index = $scope.setSummaryDashIndex;
                dashCtrl.loaded = false;
                if(book.dname){
                    var d_id = book.d_id;
                    var r_id = book.reports[index].r_id;
                }
                Dashboards.setSummaryDash(d_id, r_id).then(function (response) {
                    dashCtrl.info.loading = true;
                    dashCtrl.info.complete = false;
                    dashCtrl.actionMessage = response.data.Msg;
                    dashCtrl.actionMessageFlag = true;
                    dashCtrl.defaultDashboard = [];
                    document.getElementById( 'gb-summary-dashboard-iframe' ).setAttribute( 'src', 'about:blank' );
                    document.getElementById( 'tableauSummaryDash' ).setAttribute( 'src', 'about:blank' );
                    dashCtrl.hardReload(true);
                });
            };
            dashCtrl.openScheduling = function (book,index) {
                dashCtrl.scheduleFreq.SelectedDays = [];
                $scope.selectedIndex = index;
                dashCtrl.bookItem = book;
                if(dashCtrl.bookItem.typ != "Tableau"){
                    dashCtrl.scheduleItem = dashCtrl.bookItem.reports[index];
                    var d_id = dashCtrl.bookItem.d_id;
                    var r_id = dashCtrl.scheduleItem.r_id;
                }else {
                    dashCtrl.scheduleItem = dashCtrl.bookItem.reports[index];
                    var d_id = dashCtrl.bookItem.d_id;
                    var r_id = dashCtrl.scheduleItem.r_id;
                }
                if (!dashCtrl.scheduleItem.scheduler_enabled) {
                    Dashboards.getSchedulingData(d_id, r_id).then(function (response) {
                        dashCtrl.scheduleItem.export_format = response.data.Data.export_format;
                        if (dashCtrl.bookItem.typ != "Tableau") {
                            var supportedFileType = dashCtrl.bookItem.reports[index].supported_export_format;
                            var defaultFileType = dashCtrl.scheduleItem.export_format;
                        } else {
                            if (dashCtrl.scheduleItem.export_format) {
                                var defaultFileType = dashCtrl.scheduleItem.export_format;
                            }
                        }
                        for (var k = 0; k < dashCtrl.logiExportFormat.length; k++) {
                            dashCtrl.logiExportFormat[k].enabled = false;
                        }
                        dashCtrl.scheduleExportFileTypeCurrentVariable = '';
                        dashCtrl.exporFormatCount  = 0;

                        // var supportedFileType = book['supported_export_format'];
                        // var supportedFileType = 'pdf,csv';
                        // var defaultFileType = book['export_format'];
                        //var defaultFileType = 'csv';

                        $scope.modalInstance = ModalService.openModal('partials/dashboards/schedulingpopup.html', $scope);
                        if (dashCtrl.bookItem.typ != "Tableau") {
                            //logi dashboards
                            if (supportedFileType != 'NA' && supportedFileType != '' && supportedFileType != undefined && supportedFileType != null) {
                                dashCtrl.scheduleExportFileTypeCurrentVariable = '';

                                supportedFileType = supportedFileType.split(",");
                                for (var i = 0; i < supportedFileType.length; i++) {
                                    for (var k = 0; k < dashCtrl.logiExportFormat.length; k++) {
                                        if (supportedFileType[i] == dashCtrl.logiExportFormat[k].name) {
                                            dashCtrl.logiExportFormat[k].enabled = true;
                                        }
                                    }
                                }

                                // find out count of true values
                                dashCtrl.exporFormatCount  = dashCtrl.logiExportFormat.filter(function(s) { return s.enabled; }).length;
                                
                                //Refined array sent to ui
                                dashCtrl.scheduleExportFileTypes = dashCtrl.logiExportFormat;

                                //for export format if undefined... then set pdf as default
                                if (defaultFileType == 'NA' || defaultFileType == '' || defaultFileType == null || defaultFileType == undefined) {
                                    dashCtrl.scheduleExportFileTypeCurrentVariable = '';

                                }

                                //export format is backend response
                                else {
                                    if (supportedFileType.indexOf(defaultFileType) != -1) {
                                        dashCtrl.scheduleExportFileTypeCurrentVariable = defaultFileType;
                                    }
                                    else {
                                        dashCtrl.scheduleExportFileTypeCurrentVariable = '';
                                    }
                                }
                            }

                            //If supported type is null or no response from backend then show  default array
                            else {
                                dashCtrl.scheduleExportFileTypes = dashCtrl.logiExportFormat;
                                dashCtrl.scheduleExportFileTypeCurrentVariable = '';
                            }
                        } 
                            else {
                                //tableau dashboards
                                dashCtrl.scheduleExportFileTypes = dashCtrl.tableauExportFormat;

                                //for export format
                                if (defaultFileType == 'NA' || defaultFileType == '' || defaultFileType == null || defaultFileType == undefined) {
                                    dashCtrl.scheduleExportFileTypeCurrentVariable = '';
                                    dashCtrl.tableauCurrentVariable = '';

                                }
                                else {
                                    dashCtrl.scheduleExportFileTypeCurrentVariable = defaultFileType;
                                    dashCtrl.tableauCurrentVariable = defaultFileType;

                                }
                            }
                    }, function (response) {
                        if (dashCtrl.bookItem.typ != "Tableau") {
                            var supportedFileType = dashCtrl.bookItem.reports[index].supported_export_format;
                            var defaultFileType = dashCtrl.scheduleItem.export_format;
                        } else {
                            if (dashCtrl.scheduleItem.export_format) {
                                var defaultFileType = dashCtrl.scheduleItem.export_format;
                            }
                        }
                        for (var k = 0; k < dashCtrl.logiExportFormat.length; k++) {
                            dashCtrl.logiExportFormat[k].enabled = false;
                        }
                        dashCtrl.scheduleExportFileTypeCurrentVariable = '';

                        // var supportedFileType = book['supported_export_format'];
                        // var supportedFileType = 'pdf,csv';
                        // var defaultFileType = book['export_format'];
                        //var defaultFileType = 'csv';

                        $scope.modalInstance = ModalService.openModal('partials/dashboards/schedulingpopup.html', $scope);
                        if (dashCtrl.bookItem.typ != "Tableau") {
                            //logi dashboards
                            if (supportedFileType != 'NA' && supportedFileType != '' && supportedFileType != undefined && supportedFileType != null) {
                                dashCtrl.scheduleExportFileTypeCurrentVariable = '';

                                supportedFileType = supportedFileType.split(",");
                                for (var i = 0; i < supportedFileType.length; i++) {
                                    for (var k = 0; k < dashCtrl.logiExportFormat.length; k++) {
                                        if (supportedFileType[i] == dashCtrl.logiExportFormat[k].name) {
                                            dashCtrl.logiExportFormat[k].enabled = true;
                                        }
                                    }
                                }
                                // find out count of true values
                                dashCtrl.exporFormatCount  = dashCtrl.logiExportFormat.filter(function(s) { return s.enabled; }).length;
  

                                //Refined array sent to ui
                                dashCtrl.scheduleExportFileTypes = dashCtrl.logiExportFormat;

                                //for export format if undefined... then set pdf as default
                                if (defaultFileType == 'NA' || defaultFileType == '' || defaultFileType == null || defaultFileType == undefined) {
                                    dashCtrl.scheduleExportFileTypeCurrentVariable = '';

                                }

                                //export format is backend response
                                else {
                                    if (supportedFileType.indexOf(defaultFileType) != -1) {
                                        dashCtrl.scheduleExportFileTypeCurrentVariable = defaultFileType;
                                    }
                                    else {
                                        dashCtrl.scheduleExportFileTypeCurrentVariable = '';
                                    }
                                }
                            }

                            //If supported type is null or no response from backend then show  default array
                            else {
                                dashCtrl.scheduleExportFileTypes = dashCtrl.logiExportFormat;
                                dashCtrl.scheduleExportFileTypeCurrentVariable = '';
                            }
                        } 
                            else {
                                //tableau dashboards
                                dashCtrl.scheduleExportFileTypes = dashCtrl.tableauExportFormat;

                                //for export format
                                if (defaultFileType == 'NA' || defaultFileType == '' || defaultFileType == null || defaultFileType == undefined) {
                                    dashCtrl.scheduleExportFileTypeCurrentVariable = '';
                                    dashCtrl.tableauCurrentVariable = '';

                                }
                                else {
                                    dashCtrl.scheduleExportFileTypeCurrentVariable = defaultFileType;
                                    dashCtrl.tableauCurrentVariable = defaultFileType;

                                }
                            }

                    });
                    //if a dashboard is not scheduled then this part is executed

                    //Array reset
                } else {
                    //if a dashboard is already scheduled then this part is executed
                    Dashboards.getSchedulingData(d_id, r_id).then(function (response) {

                        //Export format logic 
                        dashCtrl.scheduleItem.export_format = response.data.Data.export_format;
                        //Array reset
                        for (var k = 0; k < dashCtrl.logiExportFormat.length; k++) {
                            dashCtrl.logiExportFormat[k].enabled = false;
                        }
                        dashCtrl.scheduleExportFileTypeCurrentVariable = '';

                        //Backend  response variables
                        //var supportedFileType = book['supported_export_format'];
                        //var supportedFileType = 'pdf,csv';
                        //var defaultFileType = book['export_format'];
                        //var defaultFileType = response.data.Data.export_format;
                        //var defaultFileType = 'csv';

                        //tableau dashboard
                        if (dashCtrl.bookItem.typ != "Tableau") {
                            var supportedFileType = dashCtrl.bookItem.reports[index].supported_export_format;
                            var defaultFileType = dashCtrl.scheduleItem.export_format;
                        } else {

                            var defaultFileType = dashCtrl.scheduleItem.export_format;
                        }


                        if (response.data.Data.is_tableau_reprt) {

                            dashCtrl.scheduleExportFileTypes = dashCtrl.tableauExportFormat;

                            //for export format
                            if (defaultFileType == 'NA' || defaultFileType == '' || defaultFileType == null || defaultFileType == undefined) {


                                dashCtrl.scheduleExportFileTypeCurrentVariable = '';
                                dashCtrl.tableauCurrentVariable = '';

                            }
                            else {
                                dashCtrl.scheduleExportFileTypeCurrentVariable = defaultFileType;
                                dashCtrl.tableauCurrentVariable = defaultFileType;

                            }
                        }

                        else {
                            //logi dashboards
                            if (supportedFileType != 'NA' && supportedFileType != '' && supportedFileType != undefined && supportedFileType != null) {
                                dashCtrl.scheduleExportFileTypeCurrentVariable = '';

                                supportedFileType = supportedFileType.split(",");
                                for (var i = 0; i < supportedFileType.length; i++) {
                                    for (var k = 0; k < dashCtrl.logiExportFormat.length; k++) {
                                        if (supportedFileType[i] == dashCtrl.logiExportFormat[k].name) {
                                            dashCtrl.logiExportFormat[k].enabled = true;
                                        }
                                    }
                                }

                                // find out count of true values
                                dashCtrl.exporFormatCount  = dashCtrl.logiExportFormat.filter(function(s) { return s.enabled; }).length;
                                
                                //Refined array sent to ui
                                dashCtrl.scheduleExportFileTypes = dashCtrl.logiExportFormat;

                                //for export format if undefined... then set pdf as default
                                if (defaultFileType == 'NA' || defaultFileType == '' || defaultFileType == null || defaultFileType == undefined) {
                                    dashCtrl.scheduleExportFileTypeCurrentVariable = '';

                                }

                                //export format is backend response
                                else {
                                    if (supportedFileType.indexOf(defaultFileType) != -1) {
                                        dashCtrl.scheduleExportFileTypeCurrentVariable = defaultFileType;
                                    }
                                    else {
                                        dashCtrl.scheduleExportFileTypeCurrentVariable = '';
                                    }
                                }
                            }

                            //If supported type is null or no response from backend then show  default array
                            else {
                                dashCtrl.scheduleExportFileTypes = dashCtrl.logiExportFormat;
                                dashCtrl.scheduleExportFileTypeCurrentVariable = '';
                            }
                        }// END Export format logic 

                        dashCtrl.scheduleFreq.enabled = true;
                        dashCtrl.scheduleFreq.frequency = response.data.Data.scheduler_freq;
                        dashCtrl.scheduleFreq.scheduler_recipients = response.data.Data.scheduler_recipients;
                        dashCtrl.scheduleFreq.name = dashCtrl.scheduleItem.scheduler_period;
                        dashCtrl.scheduleFreq.scheduler_time.hr = dashCtrl.scheduleItem.scheduler_time.split(":")[0];
                        dashCtrl.scheduleFreq.scheduler_time.min = dashCtrl.scheduleItem.scheduler_time.split(":")[1];
                        if(dashCtrl.scheduleFreq.name == "weekly"){ 
                            var tempDays = dashCtrl.scheduleItem.scheduler_freq.substring(5).split(",");
                            for(i=0;i<tempDays.length;i++){
                                tempDays[i] = tempDays[i].charAt(0).toUpperCase() + tempDays[i].slice(1);; 
                            }
                            dashCtrl.scheduleFreq.SelectedDays = tempDays;
                        } else if(dashCtrl.scheduleFreq.name == "monthly"){
                            for(k=0;k<dashCtrl.scheduleFreq.weekDay.length;k++){
                                if(dashCtrl.scheduleFreq.weekDay[k].key == response.data.Data.scheduler_freq.split(":")[1].substring(4)){
                                    dashCtrl.scheduleFreq.weekDaySele = dashCtrl.scheduleFreq.weekDay[k].key;
                                }
                            }
                            dashCtrl.scheduleFreq.monthDay = response.data.Data.scheduler_freq.split(":")[0].substring(5).charAt(0).toUpperCase() + response.data.Data.scheduler_freq.split(":")[0].substring(5).slice(1);
                            dashCtrl.scheduleFreq.yearDay = "Sunday";
                        }
                        else if(dashCtrl.scheduleFreq.name == "yearly"){
                            for(k=0;k<dashCtrl.scheduleFreq.weekDay.length;k++){
                                if(dashCtrl.scheduleFreq.weekDay[k].key == response.data.Data.scheduler_freq.split(":")[2].substring(4)){
                                    dashCtrl.scheduleFreq.weekDaySele = dashCtrl.scheduleFreq.weekDay[k].key;
                                }
                            }
                            dashCtrl.scheduleFreq.YearMonth = response.data.Data.scheduler_freq.split(":")[0].substring(6).charAt(0).toUpperCase()+response.data.Data.scheduler_freq.split(":")[0].substring(6).slice(1);
                            dashCtrl.scheduleFreq.yearDay = response.data.Data.scheduler_freq.split(":")[1].substring(5).charAt(0).toUpperCase() + response.data.Data.scheduler_freq.split(":")[1].substring(5).slice(1);
                        }
                        else if(dashCtrl.scheduleFreq.name == "hourly"){
                            dashCtrl.scheduleFreq.hrintvSele = dashCtrl.scheduleFreq.frequency.slice(5);
                        }
                        
                        $scope.modalInstance = ModalService.openModal('partials/dashboards/schedulingpopup.html', $scope);
                    });
                }
            };
            dashCtrl.doneScheduling = function (mode) {
                dashCtrl.info.loading = true;
                var  param = {};
                var timeRegex = /^(([0-1]{0,1}[0-9])|(2[0-3])):[0-5]{0,1}[0-9]$/g;
                var emailRegex = /^(?:[\w\d\.\-]+@[\w\d\.\-]+\s*,\s*)*(?:[\w\d\.\-]+@[\w\d\.\-]+)?$/g;
                if(mode) {
                    if(dashCtrl.scheduleFreq.scheduler_recipients == "" || !emailRegex.test(dashCtrl.scheduleFreq.scheduler_recipients)){
                        dashCtrl.scheduleError = GlobalService.getVal("noEmailError");
                        dashCtrl.scheduleFreq.error = true;
                        dashCtrl.info.loading = false;
                        return;
                    }else if(dashCtrl.scheduleFreq.scheduler_time.hr == "HH" || dashCtrl.scheduleFreq.scheduler_time.min == "MM"){
                        dashCtrl.scheduleError = GlobalService.getVal("timeSchError");
                        dashCtrl.scheduleFreq.error = true;
                        dashCtrl.info.loading = false;
                        return;
                    }
                    else if(dashCtrl.bookItem.typ != "Tableau"){
                        if(dashCtrl.scheduleExportFileTypeCurrentVariable == '' &&  dashCtrl.exporFormatCount > 0){
                            dashCtrl.scheduleError = GlobalService.getVal("noExportFormatError");
                            dashCtrl.scheduleFreq.error = true;
                            dashCtrl.info.loading = false;
                            return;
                        }
			else if(dashCtrl.scheduleExportFileTypeCurrentVariable == '' &&  dashCtrl.exporFormatCount == 0){
			    dashCtrl.scheduleError = GlobalService.getVal("reportNotConfigured");
                            dashCtrl.scheduleFreq.error = true;
                            dashCtrl.info.loading = false;
                            return;		

			}
                    }
                    else if(dashCtrl.scheduleExportFileTypeCurrentVariable == ''){
                        dashCtrl.scheduleError = GlobalService.getVal("noExportFormatError");
                            dashCtrl.scheduleFreq.error = true;
                            dashCtrl.info.loading = false;
                            return;
                    }

                }
                var d_id = dashCtrl.bookItem.d_id;
                var r_id = dashCtrl.scheduleItem.r_id;
                if(dashCtrl.scheduleFreq.name == "hourly"){
                    param = {
                        "d_id" : d_id,
                        "r_id" : r_id,
                        "scheduler_period" : dashCtrl.scheduleFreq.name,
                        "scheduler_time" : dashCtrl.scheduleFreq.scheduler_time.hr+":"+dashCtrl.scheduleFreq.scheduler_time.min,
                        "scheduler_recipients" : dashCtrl.scheduleFreq.scheduler_recipients,
                        "scheduler_enabled" : mode,
                        "scheduler_freq" : "hour-"+dashCtrl.scheduleFreq.hrintvSele,
                        "scheduler_timezone" : dashCtrl.scheduleFreq.scheduler_timeZone,
                        "tableau_wb_name" : ((dashCtrl.bookItem.typ == "Internal" || dashCtrl.bookItem.typ == "Summary") ? "" : dashCtrl.bookItem.name),
                        "site_id" : GBDashboardService.getSiteId(),
                        "wb_sheet_name" : ((dashCtrl.bookItem.typ == "Internal" || dashCtrl.bookItem.typ == "Summary") ? "" : dashCtrl.scheduleItem.name),
                        "content_sheet_url" : ((dashCtrl.bookItem.typ == "Internal" || dashCtrl.bookItem.typ == "Summary") ? "" : dashCtrl.scheduleItem.url),
                        "is_tableau_reprt" : ((dashCtrl.bookItem.typ == "Internal" || dashCtrl.bookItem.typ == "Summary") ? false : true)
                    };  
                }else if(dashCtrl.scheduleFreq.name == "daily"){
                    param = {
                        "d_id" : d_id,
                        "r_id" : r_id,
                        "scheduler_period" : dashCtrl.scheduleFreq.name,
                        "scheduler_time" : dashCtrl.scheduleFreq.scheduler_time.hr+":"+dashCtrl.scheduleFreq.scheduler_time.min,
                        "scheduler_recipients" : dashCtrl.scheduleFreq.scheduler_recipients,
                        "scheduler_enabled" : mode,
                        "scheduler_freq" : "days-monday,tuesday,wednesday,thursday,friday,saturday,sunday",
                        "scheduler_timezone" : dashCtrl.scheduleFreq.scheduler_timeZone,
                        "tableau_wb_name" : ((dashCtrl.bookItem.typ == "Internal" || dashCtrl.bookItem.typ == "Summary") ? "" : dashCtrl.bookItem.name),
                        "site_id" : GBDashboardService.getSiteId(),
                        "wb_sheet_name" : ((dashCtrl.bookItem.typ == "Internal" || dashCtrl.bookItem.typ == "Summary") ? "" : dashCtrl.scheduleItem.name),
                        "content_sheet_url" : ((dashCtrl.bookItem.typ == "Internal" || dashCtrl.bookItem.typ == "Summary") ? "" : dashCtrl.scheduleItem.url),
                        "is_tableau_reprt" : ((dashCtrl.bookItem.typ == "Internal" || dashCtrl.bookItem.typ == "Summary") ? false : true)
                    };  
                }else if(dashCtrl.scheduleFreq.name == "weekly"){
                    if(dashCtrl.scheduleFreq.SelectedDays.length == 0){
                        dashCtrl.scheduleError = GlobalService.getVal("weekError");
                        dashCtrl.scheduleFreq.error = true;
                        dashCtrl.info.loading = false;
                        return;
                    }else {
                        param = {
                            "d_id" : d_id,
                            "r_id" : r_id,
                            "scheduler_period" : dashCtrl.scheduleFreq.name,
                            "scheduler_time" : dashCtrl.scheduleFreq.scheduler_time.hr+":"+dashCtrl.scheduleFreq.scheduler_time.min,
                            "scheduler_recipients" : dashCtrl.scheduleFreq.scheduler_recipients,
                            "scheduler_enabled" : mode,
                            "scheduler_freq" : "days-"+dashCtrl.scheduleFreq.SelectedDays.toString().toLowerCase(),
                            "scheduler_timezone" : dashCtrl.scheduleFreq.scheduler_timeZone,
                            "tableau_wb_name" : ((dashCtrl.bookItem.typ == "Internal" || dashCtrl.bookItem.typ == "Summary") ? "" : dashCtrl.bookItem.name),
                            "site_id" : GBDashboardService.getSiteId(),
                            "wb_sheet_name" : ((dashCtrl.bookItem.typ == "Internal" || dashCtrl.bookItem.typ == "Summary") ? "" : dashCtrl.scheduleItem.name),
			                "content_sheet_url" : ((dashCtrl.bookItem.typ == "Internal" || dashCtrl.bookItem.typ == "Summary") ? "" : dashCtrl.scheduleItem.url),
                            "is_tableau_reprt" : ((dashCtrl.bookItem.typ == "Internal" || dashCtrl.bookItem.typ == "Summary") ? false : true)
                        }; 
                    }
                }else if(dashCtrl.scheduleFreq.name == "monthly"){
                    param = {
                        "d_id" : d_id,
                        "r_id" : r_id,
                        "scheduler_period" : dashCtrl.scheduleFreq.name,
                        "scheduler_time" : dashCtrl.scheduleFreq.scheduler_time.hr+":"+dashCtrl.scheduleFreq.scheduler_time.min,
                        "scheduler_recipients" : dashCtrl.scheduleFreq.scheduler_recipients,
                        "scheduler_enabled" : mode,
                        "scheduler_freq" : "day-"+dashCtrl.scheduleFreq.weekDaySele+":days-"+dashCtrl.scheduleFreq.monthDay.toLowerCase(),
                        "scheduler_timezone" : dashCtrl.scheduleFreq.scheduler_timeZone,
                        "tableau_wb_name" : ((dashCtrl.bookItem.typ == "Internal" || dashCtrl.bookItem.typ == "Summary") ? "" : dashCtrl.bookItem.name),
                        "site_id" : GBDashboardService.getSiteId(),
                        "wb_sheet_name" : ((dashCtrl.bookItem.typ == "Internal" || dashCtrl.bookItem.typ == "Summary") ? "" : dashCtrl.scheduleItem.name),
                        "content_sheet_url" : ((dashCtrl.bookItem.typ == "Internal" || dashCtrl.bookItem.typ == "Summary") ? "" : dashCtrl.scheduleItem.url),
                        "is_tableau_reprt" : ((dashCtrl.bookItem.typ == "Internal" || dashCtrl.bookItem.typ == "Summary") ? false : true)
                    };                      
                }else if(dashCtrl.scheduleFreq.name == "yearly"){
                    param = {
                        "d_id" : d_id,
                        "r_id" : r_id,
                        "scheduler_period" : dashCtrl.scheduleFreq.name,
                        "scheduler_time" : dashCtrl.scheduleFreq.scheduler_time.hr+":"+dashCtrl.scheduleFreq.scheduler_time.min,
                        "scheduler_recipients" : dashCtrl.scheduleFreq.scheduler_recipients,
                        "scheduler_enabled" : mode,
                        "scheduler_freq" : "day-"+dashCtrl.scheduleFreq.weekDaySele+":days-"+dashCtrl.scheduleFreq.yearDay.toLowerCase()+":month-"+dashCtrl.scheduleFreq.YearMonth.toLowerCase(),
                        "scheduler_timezone" : dashCtrl.scheduleFreq.scheduler_timeZone,
                        "tableau_wb_name" : ((dashCtrl.bookItem.typ == "Internal" || dashCtrl.bookItem.typ == "Summary") ? "" : dashCtrl.bookItem.name),
                        "site_id" : GBDashboardService.getSiteId(),
                        "wb_sheet_name" : ((dashCtrl.bookItem.typ == "Internal" || dashCtrl.bookItem.typ == "Summary") ? "" : dashCtrl.scheduleItem.name),
                        "content_sheet_url" : ((dashCtrl.bookItem.typ == "Internal" || dashCtrl.bookItem.typ == "Summary") ? "" : dashCtrl.scheduleItem.url),
                        "is_tableau_reprt" : ((dashCtrl.bookItem.typ == "Internal" || dashCtrl.bookItem.typ == "Summary") ? false : true)
                    };        
                }
                //param...for type of download
                param.export_format = dashCtrl.scheduleExportFileTypeCurrentVariable;
                
                dashCtrl.apiUpdateScheduling(param);    
            };
            dashCtrl.apiUpdateScheduling = function(param){                
                Dashboards.updateSceduling(param).then(function (response) {
                    dashCtrl.info.loading = true;
                    dashCtrl.bookItem.visibility = !dashCtrl.bookItem.visibility;
                    dashCtrl.changeVisibility(dashCtrl.bookItem, true);
                    dashCtrl.bookItem.visibility = !dashCtrl.bookItem.visibility;
                    dashCtrl.info.loading = false;
                    dashCtrl.closeModal();
                    if(param.scheduler_enabled){
                        dashCtrl.actionMessage = response.data.Msg;
                    }else {
                        dashCtrl.actionMessage = "Dashboard Report unscheduled successfully";
                    }
                    dashCtrl.actionMessageFlag = true;
                    dashCtrl.hardReload();
                }, function (response) {
                });   
            }
            dashCtrl.changeVisibility = function(book, updateMessage){
                if(book["typ"] == "Tableau"){
                    var site_id = GBDashboardService.getSiteId();
                    var un = metaDataService.getUserEmail();
                    dashCtrl.info.loading = true;
                    var tempArray = [];
                    var tempObj = {};
                    for(i=0;i<book.reports.length;i++){
                        tempObj.did = book.d_id;
                        tempObj.rids = book.reports[i].r_id;
                        tempArray.push(tempObj);
                    }
                    book.visibility = !book.visibility;
                    var param = {
                        visibility : {
                            drids : tempArray,
                            isPublic : book.visibility,
                            isTableau:true,
                            siteId : site_id,
                            userId : book.ownerId,
                            userName : un
                        }
                    }
                    Dashboards.changeVisibility(param).then(function (response) {
                        dashCtrl.logActivity('Other Dashboards', 'Change Visibility', '{\''+book["name"]+'\'}');
                        dashCtrl.info.loading = false;
                        var dateToUpdate = new Date();
                        for(i=0;i<dashCtrl.dashboards.length;i++){
                            if(dashCtrl.dashboards[i].d_id == book.d_id){
                                dashCtrl.dashboards[i].visibility = book.visibility;
                                dashCtrl.dashboards[i].modified_ts = dateToUpdate.toISOString();
                                dashCtrl.dashboards[i].modified_ts_to_display = moment( dashCtrl.dashboards[i].modified_ts).format("YYYY-MM-DD HH:MM:SS");
                                dashCtrl.dashboards[i].dashboardSecurityInfo.is_public = book.visibility;
                                if(!updateMessage){
                                    dashCtrl.actionMessage = response.data.Msg;
                                    dashCtrl.actionMessageFlag = true;
                                }
                                dashCtrl.reloadData();
                            }
                        }
                    }, function (response) {
                    });
                }else {
                    dashCtrl.info.loading = true;
                    var tempArray = [];
                    var tempObj = {};
                    for(i=0;i<book.reports.length;i++){
                        tempObj.did = book.d_id;
                        tempObj.rids = book.reports[i].r_id;
                        tempArray.push(tempObj);
                    }
                    book.visibility = !book.visibility;
                    var param = {
                        visibility : {
                            drids : tempArray,
                            isPublic : book.visibility,
                            isTableau:false
                        }
                    }
                    Dashboards.changeVisibility(param).then(function (response) {
                        dashCtrl.info.loading = false;
                        dashCtrl.logActivity('Other Dashboards', 'Change Visibility', '{\''+book["dname"]+'\'}');
                        var dateToUpdate = new Date();
                        for(i=0;i<dashCtrl.dashboards.length;i++){
                            if(dashCtrl.dashboards[i].d_id == book.d_id){
                                dashCtrl.dashboards[i].visibility = book.visibility;
                                dashCtrl.dashboards[i].modified_ts = dateToUpdate.toISOString();
                                dashCtrl.dashboards[i].modified_ts_to_display = moment( dashCtrl.dashboards[i].modified_ts).format("YYYY-MM-DD HH:MM:SS");
                                dashCtrl.dashboards[i].dashboardSecurityInfo.is_public = book.visibility;
                                if(!updateMessage){
                                    dashCtrl.actionMessage = response.data.Msg;
                                    dashCtrl.actionMessageFlag = true;
                                }
                                dashCtrl.reloadData();
                                break;
                            }
                        }
                    }, function (response) {
                    });
                } 
            }
            dashCtrl.updateOwnerConf = function(user,book){
                // $scope.ownerConfMsg = "Do you want to change ownership to "+user.email;
                $scope.ownerName = user.email;
                $scope.userUpdate = user;
                $scope.bookUpdate = book;
                $scope.modal1 = ModalService.openModal('partials/dashboard_owner_conf.html', $scope, false, true);
            };
            dashCtrl.addRoleConf = function(){
                var roleArray = [];
                for(i=0;i<dashCtrl.roles.length;i++){
                    if(dashCtrl.roles[i].selected){
                        roleArray.push(dashCtrl.roles[i].name); 
                    }
                }
                $scope.roles = roleArray.length;;
                // $scope.addRoleConfMsg = "Do you want to add "+roles+" roles to selected dashboards?";
                $scope.modal1 = ModalService.openModal('partials/dashboard_add_role_conf.html', $scope, false, true);
            };
            dashCtrl.removeRoleConf = function(book){
                $scope.roleEditBook = book;
                var roleNameArray = [];
                // $scope.removeRoleConfMsg = "Do you want to remove '"+role.name+"' role?";
                for(i=0;i<book.role_access_dis.length;i++){
                    if(book.role_access_dis[i].selected){
                        roleNameArray.push(book.role_access_dis[i].name);        
                    }
                }
                $scope.roleName = roleNameArray.length;
                $scope.modal1 = ModalService.openModal('partials/dashboard_remove_role_conf.html', $scope, false, true);
            };
            dashCtrl.copyLink = function(book,index){
                var landingPage = getCookie("landingPageUrl");
                landingPage = landingPage.slice(0, landingPage.indexOf("#"));
                var linkToCopy = landingPage+"#?dash_mode=true&did="+book.d_id+"&rid="+book.reports[index].r_id;
                var copyElement = document.createElement("span");
                copyElement.appendChild(document.createTextNode(linkToCopy));
                copyElement.id = 'tempCopyToClipboard';	
                $("body").append(copyElement);
                var range = document.createRange();
                range.selectNode(copyElement);
                window.getSelection().removeAllRanges();
                window.getSelection().addRange(range);
                document.execCommand("copy");
                window.getSelection().removeAllRanges();
                copyElement.remove();
                dashCtrl.copiedLink = linkToCopy;
                $(".copyMsg").show();
                setTimeout(function(){ $(".copyMsg").hide(); }, 3000);
            };
            dashCtrl.emailLink = function(book,index){
                var landingPage = getCookie("landingPageUrl");
                landingPage = landingPage.slice(0, landingPage.indexOf("#"));
                var linkToCopy = landingPage+"#?dash_mode=true%26did="+book.d_id+"%26rid="+book.reports[index].r_id;
                var subject = GlobalService.getVal("emailLinkSub")+book.reports[index].rname;
                var message = GlobalService.getVal("emailLinkMsg")+"<a href='"+linkToCopy+"'>"+book.reports[index].rname+"</a></b>"+GlobalService.getVal("emailLinkFooter");
                $window.open("mailto:?subject=" + subject+"&body="+message,"_self");
            };
            dashCtrl.updateOwner = function(user,book){
                dashCtrl.info.loading = true;
                if(book["typ"] === "Tableau"){
                    var tempArray = [];
                    var tempObj = {};
                    var newOwnerId = "";
                    var newOwner = user.email;
                    var site_id = GBDashboardService.getSiteId();
                    var un = metaDataService.getUserEmail();
                    for (i = 0; i < book.reports.length; i++) {
                        tempObj.did = book.d_id;
                        tempObj.rids = book.reports[i].r_id;
                        tempArray.push(tempObj);
                    }
                    GBDashboardService.getUsersAPI().then(function (response) {
                        var users = x2js.xml_str2json(response.data)['tsResponse']['users']['user'];
                        if (Array.isArray(users)) {
                            for (var i in users) {
                                if (users[i]['_name'] == newOwner) {
                                    newOwnerId = users[i]['_id'];
                                }
                            }

                        } else {
                            ModalService.alertBox({ msg: dashCtrl.changeOwnerErrorMsg });
                        }
                        var param = {
                            ownership: {
                                drids: tempArray,
                                owner: user.email,
                                role: user.role,
                                isTableau: true,
                                siteId: site_id,
                                userId: [book.ownerId],
                                userName: un,
                                newOwnerId:newOwnerId

                            }
                        }
                        Dashboards.updateOwner(param).then(function (response) {
                            dashCtrl.logActivity('Other Dashboards', 'Change Owner', '{\'' + book["name"] + '\'}');
                            dashCtrl.actionMessage = response.data.Msg;
                            dashCtrl.actionMessageFlag = true;
                            var dateToUpdate = new Date();
                            if (response.data.Msg.search("ERROR") >= 0) {
                                ModalService.alertBox({ msg: dashCtrl.changeOwnerErrorMsg });
                                dashCtrl.info.loading = false;
                            } else {
                                for(i=0;i<dashCtrl.dashboards.length;i++){
                                    if(dashCtrl.dashboards[i].d_id == book.d_id){
                                        dashCtrl.dashboards[i].dashboardSecurityInfo.owner = user.email;
                                        dashCtrl.dashboards[i].modified_ts = dateToUpdate.toISOString();
                                        dashCtrl.dashboards[i].modified_ts_to_display = moment( dashCtrl.dashboards[i].modified_ts).format("YYYY-MM-DD HH:MM:SS");
                                        dashCtrl.dashboards[i].role_access_dis = [];
                                        if(dashCtrl.dashboards[i].role_access.indexOf(user.role) == -1){
                                            dashCtrl.dashboards[i].role_access.push(user.role);
                                        }
                                    }
                                }
                                dashCtrl.info.loading = false;
                                dashCtrl.clearLocalFilter();
                                $scope.showFilterPanel = false;
                                dashCtrl.reloadData();
                            }
                        }, function (error) {
                            ModalService.alertBox({ msg: dashCtrl.changeOwnerErrorMsg });
                        });
                    });
                }else {
                    var tempArray = [];
                    var tempObj = {};
                    for(i=0;i<book.reports.length;i++){
                        tempObj.did = book.d_id;
                        tempObj.rids = book.reports[i].r_id;
                        tempArray.push(tempObj);
                    }
                    var param = {
                        ownership : {
                            drids : tempArray,
                            owner : user.email,
                            role: user.role,
                            isTableau:false
                        }
                    }
                    Dashboards.updateOwner(param).then(function (response) {
                        dashCtrl.logActivity('Other Dashboards', 'Change Owner', '{\''+book["dname"]+'\'}');
                        var dateToUpdate = new Date();
                        for(i=0;i<dashCtrl.dashboards.length;i++){
                            if(dashCtrl.dashboards[i].d_id == book.d_id){
                                dashCtrl.dashboards[i].dashboardSecurityInfo.owner = user.email;
                                dashCtrl.dashboards[i].modified_ts = dateToUpdate.toISOString();
                                dashCtrl.dashboards[i].modified_ts_to_display = moment( dashCtrl.dashboards[i].modified_ts).format("YYYY-MM-DD HH:MM:SS");
                                dashCtrl.dashboards[i].role_access_dis = [];
                                if(dashCtrl.dashboards[i].role_access.indexOf(user.role) == -1){
                                    dashCtrl.dashboards[i].role_access.push(user.role);
                                }
                            }
                        }
                        dashCtrl.info.loading = false;

                        dashCtrl.actionMessage = response.data.Msg;
                        dashCtrl.actionMessageFlag = true;

                        dashCtrl.clearLocalFilter();
                        $scope.showFilterPanel = false;

                        dashCtrl.reloadData();
                    }, function (response) {
                    });
                }
            }
            dashCtrl.toggleSelection = function (item) {
                var idx = dashCtrl.scheduleFreq.SelectedDays.indexOf(item);
                if (idx > -1) {
                  dashCtrl.scheduleFreq.SelectedDays.splice(idx, 1);
                }
                else {
                  dashCtrl.scheduleFreq.SelectedDays.push(item);
                }
            };
            // In case of system error, it doesn't wait to show error messages
            if (ErrorService.getErrors('gbApp').length) {
                dashCtrl.info.complete = true;
            }
            // Check whether a given feature is enabled or not
            dashCtrl.isFeatureEnable = function (feature) {
                return GlobalService.getVal('features')[feature];
            };
            dashCtrl.ifGlassbeamUser = function () {
                var userOrg = metaDataService.getUserOrgType();
                var gbOrg = GlobalService.getVal('gbUserOrgType');
                if(userOrg == gbOrg) {
                    return true;
                }else {
                    return false;
                }
            };
            // check whether the user is workbench user for demo/poc customer
	        dashCtrl.ifWbDemoUser = function () {
                var userOrg = metaDataService.getUserOrgType();
                var wbOrg = GlobalService.getVal('wbUserOrgType');
		        var demo_realms = GlobalService.getVal('gb_demo_apps_realms');

                for(var i=0; i < demo_realms.length ;i++){
                  if(GlobalService.getVal('role_details').mps_uidomain[demo_realms[i]] == $location.host()){
                        if(userOrg == wbOrg) {
		           return true;
                	}
                   }
                }
                return false;

            };

            dashCtrl.isSubscribed = function(content) {
                var subscription = $filter('filter')(WorkbenchService.getSubscriptionsList(), {'content': {'_id': content.id}}) || [];
                return subscription.length >= 1;
            };
            
            dashCtrl.getWorkbenchApiRootDir = function(content) {
                if(dashCtrl.info.workbenchApiRootDir == "" || !dashCtrl.info.workbenchApiRootDir){
                    dashCtrl.info.workbenchApiRootDir = GBDashboardService.getWorkbenchApiRoot();
                }
                return dashCtrl.info.workbenchApiRootDir;
            };
            dashCtrl.getSheetThumbnailImage = function(workbook, sheet) {
                if(!workbook || workbook == "") return "";
                dashCtrl.getWorkbenchApiRootDir();

                var imgUrl = "";
                var workbookId = "";
                var sheetId = "";
                //for internal dashboard
                if(workbook["d_type"] != "Tableau"){
                    workbookId = workbook["d_id"];
                    return GlobalService.getVal('dashboard_img_logi_path')+'/'+workbookId+'.png';
                }else if(workbook["id"]){
                    workbookId = workbook["id"];
                }
                //for user created dashboards
                if(sheet) {
                    if(workbook["d_id"]){
                        sheetId = sheet["r_id"];
                    }else if(workbook["id"]){
                        sheetId = sheet["id"];
                    }
                    imgUrl = dashCtrl.info.workbenchApiRootDir + '/' + workbookId + '/' + sheetId;
                }else {
                    //For workbook
                    //Get if is of the first sheet of a dashboard
                    var list = [];
                    if( workbook["d_id"] && workbook["reports"]){
                        list = workbook["reports"];
                        sheetId  = list[0]["r_id"];
                    }
                    // if(workbook["id"] && workbook["views"]) {
                    //     list = workbook["views"];
                    //     sheetId  = list[0]["id"];
                    // }
                }                
                imgUrl = dashCtrl.info.workbenchApiRootDir + '/' + workbookId + '/' + sheetId;
                return imgUrl;
            };

            function getSubscription(content) {
                return $filter('filter')(WorkbenchService.getSubscriptionsList(), {'content': {'_id': content.id}}) || [];
            }
        
            // XHR to get the dashboards.
            UserTrackingService.getAllConfig().then(function(response) {
                dashCtrl.info.tempSchFlag = response.data.Data.config.dashboard_scheduling;
            });
            Dashboards.getRoles().then(function (response) {
                var data = response.data.Data;
                for(i=0;i<data.length;i++){
                    if(data[i]!=""){
                        var tempObj = {};
                        var testArray = data[i].split('_');
                        if(testArray.length>3){
                            tempObj.name = testArray.splice(3,3).join('_');
                        }else {
                            tempObj.name = data[i];
                        }
                        tempObj.realName = data[i];
                        tempObj.selected = false;
                        dashCtrl.roles.push(tempObj);
                    }
                }
            })
            dashCtrl.getSummaryFlag = function(book){
                var flag = false;
                for(i=0;i<book.reports.length;i++){
                    if(book.reports[i].d_type == "Summary"){
                        flag = true;
                    }
                }
                return flag;
            }
            dashCtrl.getExpandedRowId = function(book, parentIndex, index){
                if(book.typ == "Tableau"){
                    return "dashRowExt"+parentIndex+"_report"+index;
                }else {
                    return "dashRowInt"+parentIndex+"_report"+index;
                }
            }
            dashCtrl.getRowId = function(book, index){
                if(book.typ == "Tableau"){
                    return "dashRowExt"+index;
                }else {
                    return "dashRowInt"+index;
                }
            }
            dashCtrl.loadTableauSummary = function(dashboard, r_id) {
                console.log(dashboard);
                if(dashCtrl.info.isTableauConfigured){
                    GBDashboardService.getTrustedAuthKey().then(function (response) {
                        var token = response.data.Data;
                        var tempView = angular.copy(dashboard);
                        var reportIndex;
                        dashboard.reports.map(function(report,index){
                            if(report.r_id === r_id){
                                reportIndex = index;
                            }
                        });
                        var placeholderDiv = document.getElementById("tableauSummaryDash");
                        var options = {
                            width : '100%',
                            height : '100%',
                            hideTabs : true,
                            hideToolbar : true,
                            toolbarPosition : 'top',
                            onFirstInteractive : function() {
                            }
                        };
                        dashCtrl.tableauSummaryName = tempView.name;
                        var url = GBDashboardService.getTableauDomain() + '/trusted/' + token + tempView.reports[reportIndex]['url'];
                        console.log(url);
                        if($scope.viz) {
                            $scope.viz.dispose();
                        }
                        setTimeout(function(){ $scope.viz = new tableau.Viz(placeholderDiv, url, options); }, 1500);
                    });         
                }
            };
            //RAJA API - 2
            // Dashboards.getSecurityToken().then(function (response) {
            //     dashCtrl.info.securityToken = response.data.Data;
            //     //RAJA API - 3
            //     Dashboards.allDetails().then(function (response) {
            //         var request_page, i, j, d_id, epoch, serial, match = false;
            //         dashCtrl.dashboards = $filter('internalDashboards')(response.data.Data);
            //         dashCtrl.tableauDashboards = $filter('filter')(response.data.Data, { 'd_type': 'Tableau' }, false) || [];
            //         dashCtrl.defaultDashboard = $filter('filter')(response.data.Data, { 'd_type': 'Summary' }, true) || [];
            //         if (dashCtrl.defaultDashboard.length != 0) {
            //             var roleList = dashCtrl.defaultDashboard[0].role_access.join(",");
            //             var userInfo = metaDataService.getUser();
            //             if (roleList.indexOf(userInfo['role']) == -1 && !dashCtrl.ifGlassbeamUser()) {
            //                 dashCtrl.defaultDashboard = [];
            //             }
            //         }
            //         //dashCtrl.dashboards.push(dashCtrl.defaultDashboard[0]);
            //         if (dashCtrl.dashboardSecurity && dashCtrl.info.securityToken === "") {
            //             dashCtrl.defaultDashboard[0].reports[0].r_link = $location.protocol() + "://" + $location.host() + GlobalService.getVal('dashboardErrorPage');
            //         } else if (dashCtrl.dashboardSecurity && dashCtrl.info.securityToken !== "") {
            //             dashCtrl.defaultDashboard[0].reports[0].r_link = dashCtrl.defaultDashboard[0].reports[0].r_link + "&rdSecureKey=" + dashCtrl.info.securityToken;
            //         }
            //         dashCtrl.info.complete = true;
            //         if (dashCtrl.defaultDashboard.length) {
            //             dashCtrl.setDashboard('summary');
            //         } else {
            //             dashCtrl.setDashboard('other');
            //         }
            //         if (!Array.isArray(dashCtrl.dashboards)) {
            //             dashCtrl.dashboards = [];
            //         }
            //         if (dashCtrl.dashboards && dashCtrl.dashboards.length == 1 && dashCtrl.dashboards[0].reports.length == 1 && dashCtrl.dashboardType == 'summary') {
            //             if (d_id && d_id != dashCtrl.dashboards[0].reports[0].r_id) {
            //                 dashCtrl.info.complete = true;
            //                 ErrorService.setError('dashboards', GlobalService.getVal('dashboard_not_found'));
            //                 dashCtrl.r_link = "";
            //                 dashCtrl.r_name = "";
            //             } else {
            //                 dashCtrl.r_link = dashCtrl.dashboards[0].reports[0].r_link;
            //                 dashCtrl.r_name = dashCtrl.dashboards[0].reports[0].rname;
            //                 dashCtrl.height = dashCtrl.dashboards[0].reports[0].height;
            //                 dashCtrl.d_name = dashCtrl.dashboards[0].dname;
            //                 $timeout(function () {
            //                     dashCtrl.info.complete = true;
            //                 }, 5000);
            //             }
            //             // Logging default loading of dashboards activity.
            //             dashCtrl.logActivity(dashCtrl.dashboardType == 'summary' ? 'Summary Dashboard' : 'Other Dashboards', 'Default Load', '{\'' + dashCtrl.r_name + '\'}');
            //         } else {
            //             if (dashCtrl.dashboardType == 'summary' && dashCtrl.defaultDashboard.length == 1) {
            //                 dashCtrl.logActivity('Summary Dashboard', 'Default Load', '{\'' + dashCtrl.defaultDashboard[0].reports[0].rname + '\'}');
            //             }
            //             if (d_id) {
            //                 for (i in dashCtrl.dashboards) {
            //                     for (j in dashCtrl.dashboards[i].reports) {
            //                         if (dashCtrl.dashboards[i].reports[j].r_id == d_id) {
            //                             match = dashCtrl.dashboards[i].reports[j];
            //                             break;
            //                         }
            //                     }
            //                 }
            //                 if (match) {
            //                     dashCtrl.addInstance(match);
            //                 } else {
            //                     ErrorService.setError('dashboards', GlobalService.getVal('dashboard_not_found'));
            //                 }
            //             }
            //             dashCtrl.info.complete = true;
            //         }
            //     }, function (response) {
            //         dashCtrl.info.complete = true;
            //         dashCtrl.dashboards.length = 0;
            //         dashCtrl.setDashboard('other');
            //         dashCtrl.dashboards = [];
            //     });
            // });
            dashCtrl.getAllDeatils = function () {
                dashCtrl.info.loading = true;
                dashCtrl.reloadDashboards(true);
                //RAJA - > call service to update dashboard; getfresh copy
                // XHR to get the dashboards.
                // Dashboards.getSecurityToken().then(function (response) {
                //     dashCtrl.info.securityToken = response.data.Data;
                //     Dashboards.allDetails().then(function (response) {
                //         var request_page, i, j, d_id, epoch, serial, match = false;
                //         dashCtrl.dashboards = $filter('internalDashboards')(response.data.Data);
                //         dashCtrl.tableauDashboards = $filter('filter')(response.data.Data, { 'd_type': 'Tableau' }, false) || [];
                //         dashCtrl.defaultDashboard = $filter('filter')(response.data.Data, { 'd_type': 'Summary' }, true) || [];
                //         //dashCtrl.dashboards.push(dashCtrl.defaultDashboard[0]);
                //         dashCtrl.info.loading = false;
                //         if (dashCtrl.dashboardSecurity && dashCtrl.info.securityToken === "") {
                //             dashCtrl.defaultDashboard[0].reports[0].r_link = $location.protocol() + "://" + $location.host() + GlobalService.getVal('dashboardErrorPage');
                //         } else if (dashCtrl.dashboardSecurity && dashCtrl.info.securityToken !== "") {
                //             dashCtrl.defaultDashboard[0].reports[0].r_link = dashCtrl.defaultDashboard[0].reports[0].r_link + "&rdSecureKey=" + dashCtrl.info.securityToken;
                //         }
                //     }, function (response) {
                //         dashCtrl.dashboards.length = 0;
                //         dashCtrl.dashboards = [];
                //         dashCtrl.info.loading = false;
                //     });

                // }, function (response) {
                //     dashCtrl.dashboards.length = 0;
                //     dashCtrl.dashboards = [];
                //     dashCtrl.info.loading = false;
                // });
            }

            $window.loadingDone = function () {
                dashCtrl.info.loadCount++;
                $timeout(function () {
                    dashCtrl.loaded = true;                    
                    if(angular.element('#content-loader'))      angular.element('#content-loader').addClass("gb-hide");
                    if(angular.element('#dashboard-iframe-div'))    angular.element('#dashboard-iframe-div').removeClass("gb-hide");
                    // angular.element('#gb-summary-dashboard-iframe').height() = "100%";
                }, 5000);
                //if(((dashCtrl.info.loadCount % 2 === 0) && (navigator.userAgent.match(/Chrome/) || navigator.userAgent.match(/Safari/))) || ((navigator.userAgent.match(/Firefox/) || navigator.userAgent.match(/Edge/)))) {
               /* if(dashCtrl.loaded){
                    console.log("LOADING DONE....");
                    if(angular.element('#content-loader'))      angular.element('#content-loader').addClass("gb-hide");
                    if(angular.element('#dashboard-iframe-div'))    angular.element('#dashboard-iframe-div').removeClass("gb-hide");
                }*/
            };
            // Gets the system errors
            dashCtrl.getSysErrors = function () {
                return ErrorService.getErrors('gbApp');
            };
            // Adds the given instance to the instance viewer
            
            dashCtrl.addInstance = function (book,report, owner) {
                var instance;
                var report_link = "";
                if ((book.typ == "Internal" || book.d_type == "Summary") && book.typ != "Tableau") {
                    // create instance viewer object
                    var instanceConfig = {
                        'type': 'dashboard',
                        'name': report.rname,
                        'data': {
                            'report': report
                        }
                    };

                        instance = JSON.parse(angular.toJson(instanceConfig));
                        InstanceHandler.addInstance(instance, dashCtrl);
                }else if(book.typ == "Tableau"){
                    dashCtrl.addTabInstance(report, owner);
                    // var instanceConfig = {
                    //     'type' : 'tableau',
                    //     'name' : view['name'],
                    //     'data' : {      
                    //         'view': view,
                    //         'mode' : 'viewer'
                    //     },
                    //     'owner' : owner
                    // };
                    // var instance = JSON.parse(angular.toJson(instanceConfig));
                    // var domain = $location.host().split(/\.(.+)?/)[1];
                    // document.cookie = 'gb_hide_options=' + 1 + ";domain=" + domain + ";path=/";
                    // InstanceHandler.addInstance(instance, dashCtrl, owner);
                }
            };
            dashCtrl.openDashboardIninstanceViewerOnloadOfPage = function(report){
                // create instance viewer object
                var report_link = "";
                var instanceConfig = {
                    'type': 'dashboard',
                    'name': report.rname,
                    'data': {
                        'report': report
                    }
                };
                
                    instance = JSON.parse(angular.toJson(instanceConfig));
                    InstanceHandler.addInstance(instance, dashCtrl);
            }
            dashCtrl.isInstanceViewerVisible = function() {
                return !InstanceHandler.isVisible() && InstanceHandler.getNumberOfInstances() > 0;  
            };
            // Method to log the user activity from the UI template.
            dashCtrl.logActivity = function (module, activity, details) {
                UserTrackingService.standard_user_tracking(GlobalService.getVal('navDashboards'), module, activity, details)
                    .then(successHandler, sessionTimeOutHandler);
            };
            // Returns the filter expression to filter the dashboards based the search term typed by the user.
            dashCtrl.search = function () {
                return {
                    "rdesc": dashCtrl.info.query
                };
            };
            // Toggles the visibilty of the dashboards.
            dashCtrl.toggleDashboard = function (dashboard) {
                // if (!!dashCtrl.info.query) {
                //     ModalService.alertBox({msgKey: 'dashboard_collapse'});
                // } else {
                    dashboard.expand = !dashboard.expand;
                // }
                Dashboards.updateDashboards(dashCtrl.gAllDashboards);
            };
            dashCtrl.toggleRoleSelect = function (role) {
            //    // for(i=0;i<dashCtrl.roles.length;i++){
            //         if(role == dashCtrl.roles[i].name){
            //             dashCtrl.roles[i].selected = !dashCtrl.roles[i].selected;
            //         }
            //     }
                var tempArray = [];
                for(i=0;i<dashCtrl.roles.length;i++){
                    if(dashCtrl.roles[i].selected){
                        tempArray.push(dashCtrl.roles[i].name); 
                    }
                }
                if(tempArray.length != 0){
                    dashCtrl.info.assignRole = tempArray.toString();
                }else {
                    dashCtrl.info.assignRole = "Select Roles";
                }
                 
            };
            dashCtrl.toggleRoleRemoveSelect = function (role) {
                if(dashCtrl.info.loggedRole != role.realName){
                    role.selected = !role.selected;
                }
            };
            dashCtrl.selectAllRole = function () {
                var tempArray = [];
                for(i=0;i<dashCtrl.roles.length;i++){
                    dashCtrl.roles[i].selected = true;
                    tempArray.push(dashCtrl.roles[i].name);
                }
                dashCtrl.info.assignRole = tempArray.toString();                 
            };
            dashCtrl.selectAllRoleRemove = function (book) {
                var tempArray = [];
                for(i=0;i<book.role_access_dis.length;i++){
                    if(book.role_access_dis[i].realName != dashCtrl.info.loggedRole){
                        book.role_access_dis[i].selected = true;
                    }else {
                        book.role_access_dis[i].selected = false;
                    }
                }               
            };
            dashCtrl.clearAllRole = function () {
                for(i=0;i<dashCtrl.roles.length;i++){
                    dashCtrl.roles[i].selected = false;
                    dashCtrl.info.assignRole = "Select Roles";
                }                 
            };
            dashCtrl.clearAllRoleRemove = function (book) {
                for(i=0;i<book.role_access_dis.length;i++){
                    book.role_access_dis[i].selected = false;
                }                 
            };
            dashCtrl.checkRoleSubmit = function () {
                var tempArray = [];
                for(i=0;i<dashCtrl.roles.length;i++){
                    if(dashCtrl.roles[i].selected){
                        tempArray.push(dashCtrl.roles[i].name); 
                    }
                }
                if(tempArray.length != 0 && dashCtrl.showAddTagsDd()){
                    return false;
                }else {
                    return true;
                }
                 
            };
            dashCtrl.checkRoleRemoveSubmit = function (book) {
                var tempArray = [];
                for(i=0;i<book.role_access_dis.length;i++){
                    if(book.role_access_dis[i].selected){
                        tempArray.push(book.role_access_dis.name); 
                    }
                }
                if(tempArray.length != 0){
                    return false;
                }else {
                    return true;
                }
                 
            };
            dashCtrl.addRoleSubmit = function () {
                var roleArray = [];
                for(i=0;i<dashCtrl.roles.length;i++){
                    if(dashCtrl.roles[i].selected){
                        roleArray.push(dashCtrl.roles[i].realName); 
                    }
                }
                var roles = roleArray.toString();
                var list = dashCtrl.getAllDashboards();
                dashCtrl.info.selectedBooks = [];
                for(var i=0; i< list.length; i++) {
                    if(list[i]['selected'] && list[i]['d_id']){
                        dashCtrl.info.selectedBooks.push(list[i]);
                    }else{
                        if(list[i]['selected']){
                            //selectedWorkbenchs.push(list[i]["id"]);
                            dashCtrl.info.selectedBooks.push(list[i]);
                        }
                    }                            
                }
                var tempObj = [];
                var tempArray = [];
                for(i=0;i<dashCtrl.info.selectedBooks.length;i++){
                    if(dashCtrl.info.selectedBooks[i].d_id){
                        tempObj[i] = {};
                        tempObj[i].did = dashCtrl.info.selectedBooks[i].d_id;
                        tempObj[i].rids = [];
                        for(j=0;j<dashCtrl.info.selectedBooks[i].reports.length;j++){
                            tempArray.push(dashCtrl.info.selectedBooks[i].reports[j].r_id);
                        }
                        tempObj[i].rids = tempArray.join(",")
                    }
                    tempArray = [];
                }
                var param = {
                    roleaccess : {
                        drids : tempObj,
                        roles : roles
                    }
                }
                dashCtrl.info.loading = true;
                Dashboards.addRolesToDashboards(param).then(function (response) {
                    var dateToUpdate = new Date();
                    for(i=0;i<dashCtrl.dashboards.length;i++){
                        for(j=0;j<dashCtrl.info.selectedBooks.length;j++){
                            if(dashCtrl.dashboards[i].d_id == dashCtrl.info.selectedBooks[j].d_id){
                                dashCtrl.dashboards[i].modified_ts = dateToUpdate.toISOString();
                                dashCtrl.dashboards[i].modified_ts_to_display = moment( dashCtrl.dashboards[i].modified_ts).format("YYYY-MM-DD HH:MM:SS");
                                for(k=0;k<roleArray.length;k++){
                                    if(dashCtrl.dashboards[i].role_access.indexOf(roleArray[k]) == -1){
                                        dashCtrl.dashboards[i].role_access.push(roleArray[k]);
                                    }
                                }
                            }
                        }
                    }
                    dashCtrl.actionMessage = response.data.Msg;
                    dashCtrl.actionMessageFlag = true;
                    dashCtrl.reloadData();
                    dashCtrl.info.selectedBooks = "";
                    dashCtrl.info.tags = "";
                    for(i=0;i<dashCtrl.roles.length;i++){
                        dashCtrl.roles[i].selected = false;
                    }
                    dashCtrl.info.assignRole = "Select Roles";
                },function(error){    
                    dashCtrl.info.selectedBooks = "";
                    dashCtrl.info.tags = "";
                    dashCtrl.info.loading = false;
                });
            };
            dashCtrl.getCheckboxStatus = function(param){
                for(i=0;i<dashCtrl.gbAlDashboards.length;i++){
                    if(!dashCtrl.gbAlDashboards[i].selected){
                        return false;
                    }
                }
                return true;
            }
            dashCtrl.getSelectAllChkDisable = function(){
                var count =0;
                dashCtrl.gbAlDashboards.map(function(item){
                    for(i=0;i<dashCtrl.dashboards.length;i++){
                        if(item.d_id == dashCtrl.dashboards[i].d_id){
                            if(dashCtrl.dashboards[i].permissionTags){
                                count++
                            }
                        }
                    }
                });
                if(count===0){
                    return false;
                }else{
                    return true;
                }
            }
            dashCtrl.toggleSelectAll = function(param){
                dashCtrl.currentSelected = 0;
                if(dashCtrl.info.selectAllDashboard){
                    dashCtrl.gbAlDashboards.map(function(item){
                        item.selected = true;
                        for(i=0;i<dashCtrl.dashboards.length;i++){
                            if(item.d_id == dashCtrl.dashboards[i].d_id){
                                if(dashCtrl.dashboards[i].permissionTags){
                                    dashCtrl.dashboards[i].selected = true;
                                }
                            }
                        }
                    });
                }else{
                    dashCtrl.gbAlDashboards.map(function(item){
                        item.selected = false;
                        for(i=0;i<dashCtrl.dashboards.length;i++){
                            if(item.d_id == dashCtrl.dashboards[i].d_id){
                                if(dashCtrl.dashboards[i].permissionTags){
                                    dashCtrl.dashboards[i].selected = false;
                                }
                            }
                        }
                    });
                }
                dashCtrl.dashboards.map(function(item){
                    if(item.selected){
                        dashCtrl.currentSelected++;
                    }
                });
                if(dashCtrl.currentSelected==0){
                    dashCtrl.showSelectNotify = false;
                }else{
                    dashCtrl.showSelectNotify = true;
                }
            }
            dashCtrl.checkdash = function(book, flag){
                dashCtrl.filterLoading = false;
                dashCtrl.currentSelected = 0;
                dashCtrl.gbAlDashboards.map(function(item){
                    if(book.d_id == item.d_id){
                        item.selected = flag;
                    }
                });
                dashCtrl.dashboards.map(function(item){
                    if(book.d_id == item.d_id){
                        item.selected = flag;
                    }
                });
                dashCtrl.dashboards.map(function(item){
                    if(item.selected){
                        dashCtrl.currentSelected++;
                    }
                });
                if(dashCtrl.currentSelected==0){
                    dashCtrl.showSelectNotify = false;
                }else {
                    dashCtrl.showSelectNotify = true;
                }
            }
            dashCtrl.checkSelectAll = function(){
                dashCtrl.currentSelected = 0;
                for(i=0;i<dashCtrl.gbAlDashboardsFiltered.length;i++){
                    for(j=0;j<dashCtrl.dashboards.length;j++) {
                        if(dashCtrl.dashboards[j].d_id == dashCtrl.gbAlDashboardsFiltered[i].d_id){
                            dashCtrl.dashboards[j].selected = true;
                            dashCtrl.currentSelected++;
                        }
                    }
                }
            }
            dashCtrl.clearselected = function(){
                dashCtrl.currentSelected = 0;
                dashCtrl.gbAlDashboards.map(function(item){
                    item.selected = false;
                });
                dashCtrl.dashboards.map(function(item){
                    item.selected = false;
                });
                dashCtrl.showSelectNotify =false;
            }
            // Returns whether dashboards are there after filtering or not so as to display the proper message on the UI when no dashboards are matched.
            dashCtrl.filterResult = function () {
                var i, bool = true;
                if (dashCtrl.info.complete && dashCtrl.getError() && !dashCtrl.getError().length) {
                    for (i in dashCtrl.gbAlDashboards) {
                        if (dashCtrl.gbAlDashboards[i].reports != null && dashCtrl.dashboards[i].reports.length) {
                            bool = false;
                        }
                    }
                    return bool;
                } else {
                    return false;
                }
            };
            // Returns the errors related to dashboards
            dashCtrl.getError = function () {
                return ErrorService.getFeatureErrors('dashboards');
            };
            // Returns the no match found message for the given filter.
            dashCtrl.getMessage = function (key) {
                return GlobalService.getVal(key);
            };
            // sets the given url as the secure url to load on the ui.
            dashCtrl.sceURL = function (url) {
                return $sce.trustAsResourceUrl(url);
            };
            dashCtrl.sceHTML = function (html) {
                return $sce.trustAsHtml(html);
            };
            // Expand the views under a given workbook
            dashCtrl.expandBook = function (book) {
                book['expand'] = !book['expand'];
                Dashboards.updateDashboards(dashCtrl.gAllDashboards);
            };
            // Filters the workbooks based on the given filter
            dashCtrl.filterTableau = function () {
                var i, wbs = dashCtrl.getAllDashboards();
                for (i in wbs) {
                    if ($filter('filter')(wbs[i]['views'], {'tags': dashCtrl.info.query}).length) {
                        return true;
                    }
                }
                return false;
            };
            dashCtrl.userPermitted = function () {
                var userInfo = metaDataService.getUser();
                var featureInfo = metaDataService.getFeatures();
                if (featureInfo.workbench || userInfo['org_type'] == GlobalService.getVal('gbUserOrgType') || (userInfo['org_type'] == GlobalService.getVal('studioUserOrgType') && AppService.isGbStudioApp()) || dashCtrl.ifWbDemoUser()) {
                    return true;
                }else if(userInfo['org_type'] == GlobalService.getVal('gbUserOrgType') && !dashCtrl.chkAdminFeature() && featureInfo.dashboard_admin)
                {
                    return false;
                }
                else if (userInfo['org_type'] != GlobalService.getVal('gbUserOrgType') && !dashCtrl.chkAdminFeature() && featureInfo.dashboard_admin)
                {
                    return true;
                }else if (userInfo['org_type'] != GlobalService.getVal('gbUserOrgType') && dashCtrl.chkAdminFeature() && featureInfo.dashboard_admin)
                {
                    return true;
                }
                return false;
            };
            dashCtrl.checkCurrentRole = function (role, endPram) {
                var userInfo = metaDataService.getUser();

                if (userInfo['role'] == role.realName) {
                    if(dashCtrl.chkAdminFeature()){
                        return true;
                    }else {
                        return false;
                    }
                }
                return true;
            };

            dashCtrl.isPowerUser = function() {
                return WorkbenchService.isPowerUser();
            };

            dashCtrl.subscribe = function(content) {
                var modalInstance = $modal.open({
                    templateUrl: 'partials/tableau_subscribe.html',
                    controller: 'SubscribeController as subscribeCtrl',
                    resolve: {
                        content: function () {
                            return content;
                        },
                        schedules : function() {
                            return WorkbenchService.getSchedulesList();
                        }
                    }
                });
            };
            dashCtrl.showUsers = function() {
                dashCtrl.roleListLoading = true;
                dashCtrl.modalInstance = $modal.open({
                    templateUrl: 'partials/dashboard_user_role_list.html',
                    scope: $scope
                });
                Dashboards.showUsers().then(function (response) {
                    var data = response.data.Data;
                    var tempArray = [];
                    var tempObj = {};
                    dashCtrl.roleUserList = [];
                    for(i=0;i<data.length;i++){
                        tempObj.name = data[i].first_name+" "+data[i].last_name;
                        tempObj.email = data[i].email;
                        if(data[i].role.split('_').length>3){
                            tempObj.role = data[i].role.split('_').splice(3,3).join('_');
                        }else {
                            tempObj.role = data[i].role;
                        }
                        tempArray.push(tempObj);
                        tempObj={};
                    }
                    dashCtrl.roleUserList = tempArray;
                    dashCtrl.roleListLoading = false;
                });
            };

            dashCtrl.updateSubscription = function(content) {
                var modalInstance = $modal.open({
                    templateUrl: 'partials/tableau_update_subscription.html',
                    controller: 'UpdateSubscriptionController as subscribeCtrl',
                    resolve: {
                        content: function () {
                            return content;
                        },
                        schedules : function() {
                            return WorkbenchService.getSchedulesList();
                        },
                        subscription : function() {
                            return getSubscription(content);
                        }
                    }
                });
            };

            dashCtrl.unsubscribe = function(content) {
                var modalInstance = $modal.open({
                    templateUrl: 'partials/tableau_unsubscribe.html',
                    controller: 'UnsubscribeController as unsubscribeCtrl',
                    resolve: {
                        content: function () {
                            return content;
                        },
                        subscription : function() {
                            return getSubscription(content);
                        }
                    }
                });
            };
            //only power user can add/delete tag
            if(dashCtrl.userPermitted()) {
                dashCtrl.info.addDeleteTag = true;
            } else {
                dashCtrl.info.addDeleteTag = false;
            }

            // Adds tableau instance to the instance viewer.
            dashCtrl.addTabInstance = function (view, owner) {
                var instanceConfig = {
                    'type' : 'tableau',
                    'name' : view['name'],
                    'data' : {      
                        'view': view,
                        'mode' : 'viewer'
                    },
                    'owner' : owner
                };
                var instance = JSON.parse(angular.toJson(instanceConfig));
                var domain = GlobalService.getVal('primaryDomain');
                document.cookie = 'gb_hide_options=' + 1 + ";domain=" + domain + ";path=/";
                InstanceHandler.addInstance(instance, dashCtrl, owner);
            };
            
            dashCtrl.addTagToWorkbook = function(book) {
                var modalInstance = $modal.open({
                    templateUrl: 'partials/dashboards_add_tag_workbook.html',
                    controller: 'AddTagController as addTagCtrl',
                    resolve: {
                        workbook: function () {
                            return book;
                        }
                    }
                });
            };
            
            dashCtrl.removeTagFromWorkbook = function(book, tag) {
                dashCtrl.info.loading = true;
                var id=book["d_id"];
                Dashboards.removeTag(id, tag).then(function(response) {
                    dashCtrl.logActivity('Other Dashboards', 'Remove Tag', '{\''+tag+'\'}');
                    var dateToUpdate = new Date();
                    for(i=0;i<dashCtrl.dashboards.length;i++){
                        if(dashCtrl.dashboards[i].d_id == book["d_id"]){
                            dashCtrl.dashboards[i].modified_ts = dateToUpdate.toISOString();
                            dashCtrl.dashboards[i].modified_ts_to_display = moment( dashCtrl.dashboards[i].modified_ts).format("YYYY-MM-DD HH:MM:SS");
                            dashCtrl.dashboards[i].tag.splice(dashCtrl.dashboards[i].tag.indexOf(tag),1);
                        }
                    }
                    dashCtrl.actionMessage = response.data.Msg;
                    dashCtrl.actionMessageFlag = true;
                    dashCtrl.reloadData();
                }, function(response) {
                    dashCtrl.reloadData();
                    dashCtrl.info.loading = false;
                });
            };
            dashCtrl.removeRoleFromWorkbook = function(book, role) {
                    dashCtrl.info.loading = true;
                    var id=book["d_id"];
                    var roleToRemove = [];
                    var roleToRemoveDone = [];
                    for(i=0;i<book.role_access_dis.length;i++){
                        if(book.role_access_dis[i].selected){
                            roleToRemove.push(book.role_access_dis[i].realName);
                        }
                    }
                    for(i=0;i<roleToRemove.length;i++){
                        Dashboards.removeRole(id, roleToRemove[i]).then(function(response) {
                            dashCtrl.logActivity('Other Dashboards', 'Remove Role', '{\''+roleToRemove[i]+'\'}');
                            roleToRemoveDone.push(roleToRemove[i]);
                            var dateToUpdate = new Date();
                            if(roleToRemoveDone.length == roleToRemove.length){
                                for(k=0;k<dashCtrl.dashboards.length;k++){
                                    if(dashCtrl.dashboards[k].d_id == id) {
                                        dashCtrl.dashboards[k].modified_ts = dateToUpdate.toISOString();
                                        dashCtrl.dashboards[k].modified_ts_to_display = moment( dashCtrl.dashboards[k].modified_ts).format("YYYY-MM-DD HH:MM:SS");
                                        for(j=0;j<roleToRemove.length;j++){
                                            dashCtrl.dashboards[k].role_access.splice(dashCtrl.dashboards[k].role_access.indexOf(roleToRemove[j]),1);
                                        }
                                    }
                                }
                                dashCtrl.actionMessage = response.data.Msg;
                                dashCtrl.actionMessageFlag = true;
                                dashCtrl.reloadData();
                            }
                        });
                    }
            };
            
            dashCtrl.updateWorkbook = function(book) {
                var modalInstance = $modal.open({
                    templateUrl: 'partials/dashboards_update_workbook.html',
                    controller: 'UpdateWorkbookController as updateWorkbookCtrl',
                    resolve: {
                        workbook: function () {
                            return book;
                        }
                    }
                });
            };
            
            dashCtrl.deleteWorkbookModal = function(book) {
                dashCtrl.selectedDashboard = book;
                dashCtrl.msg = "Are you sure you want to delete the report <b>" + dashCtrl.selectedDashboard.name + "</b>";
                dashCtrl.modalInstance = $modal.open({
                    templateUrl: 'partials/dashboards_delete_workbook.html',
                    scope: $scope
                });
            }
            
            dashCtrl.checkOwner = function(book) {
                if(book.owner == WorkbenchService.getUserId()) {
                    return true;
                }
                return false;
            };
    
            // Adds a tabbed tableau instance to the instance viewer.
            dashCtrl.addTabbedTabInstance = function (book) {
                var instanceConfig = {
                    'type': 'tableau',
                    'name': book['name'],
                    'data': {
                        'book': book,
                        'mode': 'viewer'
                    },
                    'owner': book['owner']
                };
                var instance = JSON.parse(angular.toJson(instanceConfig));
                InstanceHandler.addInstance(instance, dashCtrl, book['owner']);
            };
            // Adds the manage permissions instance to the instance viewer
            dashCtrl.addManageInstance = function () {
                var instance = {
                    'type': 'permissions',
                    'name': 'Manage Reports',
                    'data': {}
                };
                instance = JSON.parse(angular.toJson(instance));
                InstanceHandler.addInstance(instance, dashCtrl);
            };
            // To get the tableau workbooks
            dashCtrl.getWorkbooks = function () {
                var works = WorkbenchService.getWorkbooksLocal();
                workbenchDashboards['books'] = works['books'];
                workbenchDashboards['loading'] = works['loading'];
                workbenchDashboards['error'] = works['error'];
                workbenchDashboards['userUnauthorized'] = works['userUnauthorized'];
                return workbenchDashboards;
            };
            dashCtrl.isLoadingOtherDashboard = function(){
                return dashCtrl.info.loading;
            }
            //search for d_id and return tags for tableau dashboard
            dashCtrl.getTagsForTableau = function(id) {
                var dboard = dashCtrl.tableauDashboards;
                if(dboard && dboard.length > 0){
                    for(var i=0;i<dboard.length;i++){
                        if(dboard[i]['d_id'] === id){
                            return dboard[i]['tag'];
                        }
                    }
                }
                return [];
            };
            dashCtrl.getSchForTableau = function(id) {
                var dboard = dashCtrl.tableauDashboards;
                if(dboard && dboard.length > 0){
                    for(var i=0;i<dboard.length;i++){
                        if(dboard[i]['d_id'] === id){
                            return dboard[i]['reports'];
                        }
                    }
                }
                return [];
            };
            dashCtrl.isNoDashboards = function(){
                var list = [];
                list = dashCtrl.gbAlDashboards;
                var internalDashboards = WorkbenchService.getWorkbooksLocal();
                if(internalDashboards && internalDashboards["books"] && internalDashboards["books"].length && internalDashboards["books"].length > 0){
                   list = list.concat(internalDashboards["books"]);
                }
                var result = (list.length > 0 ? false: true);
                return result;
            };
            //RAJA
            // dashCtrl.gAllDashboards = [];
            //$interval(function(){dashCtrl.gbAllDashboards();}, 1000, false);

            dashCtrl.getAllDashboards = function(){
                return dashCtrl.gbAlDashboards;
            }
           // dashCtrl.gbAllDashboards = function(){                
        //         var internalDashboards = WorkbenchService.getWorkbooksLocal();
        //         if(dashCtrl.dashOwnerListLogi == undefined){
        //             //RAJA API - 4
        //             Dashboards.getLogiAdmin().then(function (responseLogi) {
        //                 dashCtrl.dashOwnerListLogi = responseLogi.data.Data;
        //             });
        //         }
        //         if(dashCtrl.dashOwnerListTableau == undefined){
        //             //RAJA API - 5
        //             Dashboards.getTableauAdmin().then(function (responseTab) {
        //                 dashCtrl.dashOwnerListTableau = responseTab.data.Data;
        //             });
        //         }
        //         if(dashCtrl.dataSourcesList.length==0 && !dashCtrl.dataSourcesListFlag && WorkbenchService.getSiteId()){
        //             //RAJA API - 6
        //             WorkbenchService.getDataSources().then(function (response){
        //                 dashCtrl.dataSourcesListFlag = true;
        //                 var jsonResponse = x2js.xml_str2json(response.data);
        //                 if(!jsonResponse['tsResponse'] || !jsonResponse['tsResponse']['datasources']) return;
        //                 var data = jsonResponse['tsResponse']['datasources']['datasource'];
        //                 if (Array.isArray(data)) {
        //                     dashCtrl.dataSourcesList = data;
        //                 } else {
        //                     dashCtrl.dataSourcesList = [];
        //                     if (data) {
        //                         dashCtrl.dataSourcesList.push(data);
        //                     }
        //                 }
        //             });
        //         }
        //         //RAJA API - 7
        //         dashCtrl.info.bookOwnerList = WorkbenchService.getAllUsersDeatils();
        //         if(internalDashboards && internalDashboards["books"] && internalDashboards["books"].length && internalDashboards["books"].length > 0){
        //            //dashCtrl.gAllDashboards = dashCtrl.gAllDashboards.concat(internalDashboards["books"]);
        //             Dashboards.setDashboard(dashCtrl.dashboards, internalDashboards["books"]);
        //         }else{
        //             Dashboards.setDashboard(dashCtrl.dashboards);
        //         }
        //         dashCtrl.gAllDashboards = Dashboards.getDashboards();
		// //console.log(dashCtrl.gAllDashboards);debugger;
        //         //update scheduled information for each dashboard
        //         for(l=0;l<dashCtrl.gAllDashboards.length;l++){
        //             if(dashCtrl.gAllDashboards[l].dname){
        //                 if(dashCtrl.gAllDashboards[l].f_reports && dashCtrl.gAllDashboards[l].f_reports.length){
        //                 for(i=0;i<dashCtrl.gAllDashboards[l].f_reports.length;i++){
        //                     if(dashCtrl.gAllDashboards[l].f_reports[i].scheduler_enabled) {
        //                         if(dashCtrl.gAllDashboards[l].f_reports[i].scheduler_period == "hourly"){
        //                             dashCtrl.gAllDashboards[l].f_reports[i].schDisplay = "Hourly";
        //                         }else if(dashCtrl.gAllDashboards[l].f_reports[i].scheduler_period == "daily"){
        //                             dashCtrl.gAllDashboards[l].f_reports[i].schDisplay = "Daily at "+dashCtrl.gAllDashboards[l].f_reports[i].scheduler_time;
        //                         }else if(dashCtrl.gAllDashboards[l].f_reports[i].scheduler_period == "weekly"){
        //                             dashCtrl.gAllDashboards[l].f_reports[i].schDisplay = "Weekly on "+dashCtrl.gAllDashboards[l].f_reports[i].scheduler_freq.substring(5)+" at "+dashCtrl.gAllDashboards[l].f_reports[i].scheduler_time;
        //                         }else if(dashCtrl.gAllDashboards[l].f_reports[i].scheduler_period == "monthly"){
        //                             for(k=0;k<dashCtrl.scheduleFreq.weekDay.length;k++){
        //                                 if(dashCtrl.scheduleFreq.weekDay[k].key == dashCtrl.gAllDashboards[l].f_reports[i].scheduler_freq.split(":")[1].substring(4)){
        //                                     disDay = dashCtrl.scheduleFreq.weekDay[k].value;
        //                                 }
        //                             }
        //                             dashCtrl.gAllDashboards[l].f_reports[i].schDisplay = "Monthly on "+disDay+" "+dashCtrl.gAllDashboards[l].f_reports[i].scheduler_freq.split(":")[0].substring(5).charAt(0).toUpperCase()+dashCtrl.gAllDashboards[l].f_reports[i].scheduler_freq.split(":")[0].substring(5).slice(1)+" at "+dashCtrl.gAllDashboards[l].f_reports[i].scheduler_time;
        //                         }else if(dashCtrl.gAllDashboards[l].f_reports[i].scheduler_period == "yearly"){
        //                             for(k=0;k<dashCtrl.scheduleFreq.weekDay.length;k++){
        //                                 if(dashCtrl.scheduleFreq.weekDay[k].key == dashCtrl.gAllDashboards[l].f_reports[i].scheduler_freq.split(":")[2].substring(4)){
        //                                     disDay = dashCtrl.scheduleFreq.weekDay[k].value;
        //                                 }
        //                             }
        //                             dashCtrl.gAllDashboards[l].f_reports[i].schDisplay = "Yearly every "+disDay+" "+dashCtrl.gAllDashboards[l].f_reports[i].scheduler_freq.split(":")[1].substring(5).charAt(0).toUpperCase()+dashCtrl.gAllDashboards[l].f_reports[i].scheduler_freq.split(":")[1].substring(5).slice(1)+" of "+dashCtrl.gAllDashboards[l].f_reports[i].scheduler_freq.split(":")[0].substring(6)+" month at "+dashCtrl.gAllDashboards[l].f_reports[i].scheduler_time;
        //                         }
        //                     }
        //                 }}
        //             }
        //         }
        //         //updateUserName
        //         dashCtrl.gAllDashboards.map(function(item){
        //             //check for tableau dashboard and update tags from infoserver API
        //             if(item['id']){
        //                 var tags = dashCtrl.getTagsForTableau(item['id']);
        //                 item.visibility = dashCtrl.getVisibility(item);
        //                 item.role_access = dashCtrl.getRoleAccessField(item);
        //                 var schDetails = dashCtrl.getSchForTableau(item['id']);
        //                 var disDay;
        //                 if(tags.length > 0 || schDetails.length > 0){
        //                     item.tag = tags;
        //                     if(item.f_views && item.f_views.length){
        //                     for(i=0;i<item.f_views.length;i++){
        //                         for(j=0;j<schDetails.length;j++){
        //                             if(item.f_views[i].id == schDetails[j].r_id){
        //                                 item.f_views[i].scheduler_enabled = schDetails[j].scheduler_enabled;
        //                                 item.f_views[i].scheduler_freq = schDetails[j].scheduler_freq;
        //                                 item.f_views[i].scheduler_period = schDetails[j].scheduler_period;
        //                                 item.f_views[i].scheduler_time = schDetails[j].scheduler_time;
        //                                 item.f_views[i].schDisplay = "";
        //                                 if(item.f_views[i].scheduler_enabled) {
        //                                     if(item.f_views[i].scheduler_period == "hourly"){
        //                                         item.f_views[i].schDisplay = "Hourly at "+item.f_views[i].scheduler_time;
        //                                     }else if(item.f_views[i].scheduler_period == "daily"){
        //                                         item.f_views[i].schDisplay = "Daily at "+item.f_views[i].scheduler_time;
        //                                     }else if(item.f_views[i].scheduler_period == "weekly"){
        //                                         item.f_views[i].schDisplay = "Weekly on "+item.f_views[i].scheduler_freq.substring(5)+" at "+item.f_views[i].scheduler_time;
        //                                     }else if(item.f_views[i].scheduler_period == "monthly"){
        //                                         for(k=0;k<dashCtrl.scheduleFreq.weekDay.length;k++){
        //                                             if(dashCtrl.scheduleFreq.weekDay[k].key == item.f_views[i].scheduler_freq.split(":")[1].substring(4)){
        //                                                 disDay = dashCtrl.scheduleFreq.weekDay[k].value;
        //                                             }
        //                                         }
        //                                         item.f_views[i].schDisplay = "Monthly on "+disDay+" "+item.f_views[i].scheduler_freq.split(":")[0].substring(5).charAt(0).toUpperCase() + item.f_views[i].scheduler_freq.split(":")[0].substring(5).slice(1)+" at "+item.f_views[i].scheduler_time;
        //                                     }else if(item.f_views[i].scheduler_period == "yearly"){
        //                                         for(k=0;k<dashCtrl.scheduleFreq.weekDay.length;k++){
        //                                             if(dashCtrl.scheduleFreq.weekDay[k].key == item.f_views[i].scheduler_freq.split(":")[2].substring(4)){
        //                                                 disDay = dashCtrl.scheduleFreq.weekDay[k].value;
        //                                             }
        //                                         }
        //                                         item.f_views[i].schDisplay = "Yearly every "+disDay+" "+item.f_views[i].scheduler_freq.split(":")[1].substring(5).charAt(0).toUpperCase() +item.f_views[i].scheduler_freq.split(":")[1].substring(5).slice(1) +" of "+item.f_views[i].scheduler_freq.split(":")[0].substring(6)+" month at "+item.f_views[i].scheduler_time;
        //                                     }
        //                                 }
        //                             }
        //                         }    
        //                     }}
        //                 }else{
        //                     item.tag = [];
        //                 }
        //             }
        //             item.gDUser = dashCtrl.getBookOwnerName(item);
        //             if(item["dname"]) {
        //                 item.visibility = dashCtrl.getVisibility(item);
        //             }
        //             item.gDOwner = dashCtrl.getBookChangedOwnerName(item);
        //             item.gDTs = dashCtrl.changeDateFormate(item.modified_ts);
        //             item.gDType = item.dname ? dashCtrl.getValue('internalDashboards') : dashCtrl.getValue('userCreatedDashboards');
        //         });
        //         var works = dashCtrl.gAllDashboards;
        //         for(i=0;i<works.length;i++){
        //             if(!dashCtrl.showDashBoard(works[i],"dashLevel")){
        //                 works.splice(i,1);
        //                 i--;
        //             }
        //         }
        //         if(works.length != 0 && sessionStorage.getItem("dash_mode") == "true"){
        //             var foundFlag = false;
        //             var didList = localStorage.getItem("did").split(',');
        //             var ridList = localStorage.getItem("rid").split(',');
        //             for(i=0;i<didList.length;i++){
        //                 var tempRid = ridList[i];
        //                 var tempDid = didList[i];
        //                 for(j=0;j<didList.length;j++){
        //                     if(tempRid == ridList[j] && i!=j && tempDid == didList[j]){
        //                         didList.splice(j,1);
        //                         j--
        //                     }
        //                 }
        //             }
        //             var foundDid = [];
        //             var foundRid = [];
        //             dashCtrl.setDashboard('other');
        //             for(i=0;i<works.length;i++){
        //                 if(works[i]["dname"]){
        //                     for(k=0;k<didList.length;k++){
        //                         if(didList[k]==works[i].d_id){
        //                             for(j=0;j<works[i].reports.length;j++){
        //                                 if(works[i].reports[j].r_id == ridList[k]){
        //                                     foundDid.push(didList[k]);
        //                                     foundRid.push(ridList[k]);
        //                                     didList.splice(k,1);
        //                                     ridList.splice(k,1);
        //                                     if(dashCtrl.showDashBoard(works[i],"dashLevel")){
        //                                         var DirRep = works[i].reports[j];
        //                                         if(sessionStorage.getItem("rdreport")){
        //                                             var re = new RegExp("([?&])rdReport=.*?(&|$)", "i");
        //                                             var separator = DirRep.r_link.indexOf('?') !== -1 ? "&" : "?";
        //                                             DirRep.r_link = DirRep.r_link.replace(re, "$1rdReport=" + sessionStorage.getItem("rdreport") + '$2');
        //                                         }
        //                                         dashCtrl.addInstance(DirRep);
        //                                         dashCtrl.logActivity(dashCtrl.dashboardType == 'summary' ? 'Summary Dashboard' : 'Other Dashboards', 'InstanceViewer', '{\''+DirRep.rname+'\'}');
        //                                         if(didList.length==0){
        //                                             foundFlag = true;
        //                                             sessionStorage.setItem("dash_mode", "false");
        //                                         }
        //                                         document.getElementById("gb-full-page-loader").style.display = 'none';
        //                                         break;
        //                                     }else {
        //                                         if(didList.length==0){
        //                                             foundFlag = true;
        //                                         }
        //                                         sessionStorage.setItem("dash_mode", "false");
        //                                         dashCtrl.info.dashModeErrorMsg = GlobalService.getVal("dashModePermissionError")
        //                                         ModalService.alertBox({msg: dashCtrl.info.dashModeErrorMsg});
        //                                     }
        //                                 }
        //                             } 
        //                         }
        //                     }
        //                 }
        //             } 
        //             for(i=0;i<didList.length;i++){
        //                 if(dashCtrl.defaultDashboard[0]){
        //                     if(didList[i]==dashCtrl.defaultDashboard[0].d_id && ridList[i]==dashCtrl.defaultDashboard[0].reports[0].r_id){
        //                         foundDid.push(didList[i]);
        //                         foundRid.push(ridList[i]);
        //                         didList.splice(i,1);
        //                         ridList.splice(i,1);
        //                         i--;
        //                         var DirRep = dashCtrl.defaultDashboard[0].reports[0];
        //                         dashCtrl.addInstance(DirRep);
        //                         dashCtrl.logActivity(dashCtrl.dashboardType == 'summary' ? 'Summary Dashboard' : 'Other Dashboards', 'InstanceViewer', '{\''+DirRep.rname+'\'}');
        //                         if(didList==0){
        //                             sessionStorage.setItem("dash_mode", "false");
        //                             foundFlag = true;
        //                         }
        //                         document.getElementById("gb-full-page-loader").style.display = 'none';
        //                     }
        //                 }
        //             }                   
        //             if(!foundFlag){
        //                 sessionStorage.setItem("dash_mode", "false");
        //                 dashCtrl.info.dashModeErrorMsg = GlobalService.getVal("dashModeError")
        //                 ModalService.alertBox({msg: dashCtrl.info.dashModeErrorMsg});
        //             }
        //             localStorage.setItem("did", foundDid.toString());
        //             localStorage.setItem("rid", foundRid.toString());
        //         }
        //         for(l=0;l<works.length;l++){
        //             var tempRoleAccess = [];
        //             var tempRoleAccessObj = {};
        //             if(works[l].role_access){
        //                 for(m=0;m<works[l].role_access.length;m++){
        //                     tempRoleAccessObj = {};
        //                     tempRoleAccessObj.realName = works[l].role_access[m];
        //                     if(works[l].role_access[m].split('_').length>3){
        //                         tempRoleAccessObj.name = works[l].role_access[m].split('_').splice(3,3).join('_');
        //                     }else {
        //                         tempRoleAccessObj.name = works[l].role_access[m];
        //                     }
        //                     tempRoleAccess.push(tempRoleAccessObj);
        //                 }
        //                 works[l].role_access_dis = tempRoleAccess;
        //             }else {
        //                 works[l].role_access = [];
        //             }
        //         }
        //         if(dashCtrl.defaultDashboard.length>0){
        //             if(dashCtrl.defaultDashboard[0].typ == "Tableau" && dashCtrl.tabSummaryFlag){
        //                 for(k=0;k<works.length;k++){
        //                     if(dashCtrl.defaultDashboard[0].d_id == works[k].id){
        //                         for(m=0;m<works[k].views.length;m++){
        //                             if(dashCtrl.defaultDashboard[0].f_reports[0].r_id==works[k].views[m].id){
        //                                 dashCtrl.tabSummaryFlag = false;
        //                                 dashCtrl.loadTableauSummary(works[k]);
        //                             }
        //                         }
        //                     }
        //                 }       
        //             }
        //         }
        //         dashCtrl.info.allDashboardsList = works;
        //         if (dashCtrl.allDashCount != dashCtrl.gAllDashboards.length) {
        //             dashCtrl.internalDashCount = 0;
        //             for(i=0;i<dashCtrl.gAllDashboards.length;i++){
        //                 if (dashCtrl.gAllDashboards[i].dname) {
        //                     dashCtrl.internalDashCount++;
        //                 }
        //             }
        //             dashCtrl.userCreatedDashCount = 0;
        //             for(i=0;i<dashCtrl.gAllDashboards.length;i++){
        //                 if (dashCtrl.gAllDashboards[i].name) {
        //                     dashCtrl.userCreatedDashCount++;
        //                 }
        //             }
        //         }
        //         dashCtrl.allDashCount = dashCtrl.gAllDashboards.length;              
        //         //filter on query string
        //         works = $filter('filterBooks')(dashCtrl.gAllDashboards, dashCtrl.info.query);
        //         //filter all, internal or user created dashboard
        //         if(dashCtrl.info.dType != 'allDashboards'){
        //         works = dashCtrl.filterOnType(works);
        //      }
        //      //getUserList
        //     dashCtrl.updateCreatorName(works);
        //      dashCtrl.updateOwnerName(works);
        //         //filter on created by string
        //         if(dashCtrl.info.createdBy != 'All'){
        //             works = dashCtrl.filterOnCreator(works);
        //         }
        //         if(dashCtrl.info.owner != 'All'){
        //             works = dashCtrl.filterOnOwner(works);
        //         }
        //         if(dashCtrl.info.lastModified != 'All'){
        //             works = dashCtrl.filterOnLastModified(works);
        //         }
        //         if(dashCtrl.info.datasource != 'All'){
        //             works = dashCtrl.filterOnDatasource(works);
        //         }
        //         if(dashCtrl.info.tagsFilter.length != 0){
        //             works = dashCtrl.filterOnTags(works);
        //         }                
        //         //sort it on name of dashboard
        //         if(dashCtrl.info.orderByField){
        //             works = works.sort(function compare(a,b) {
        //                 if(dashCtrl.info.orderByField == 'name'){
        //                     if(dashCtrl.info.dashboardSortOrder){                            
        //                         if (dashCtrl.getNameOfDashboard(a) < dashCtrl.getNameOfDashboard(b)){return -1;}
        //                         if (dashCtrl.getNameOfDashboard(a) > dashCtrl.getNameOfDashboard(b)){return 1;}
        //                     }else{                     
        //                         if (dashCtrl.getNameOfDashboard(a) < dashCtrl.getNameOfDashboard(b)){return 1;}
        //                         if (dashCtrl.getNameOfDashboard(a) > dashCtrl.getNameOfDashboard(b)){return -1;}                            
        //                     }
        //                 }else if(dashCtrl.info.orderByField == 'creator'){
        //                     if(dashCtrl.info.dashboardSortOrderCB){                            
        //                         if (a.gDUser < b.gDUser){return -1;}
        //                         if (a.gDUser > b.gDUser){return 1;}
        //                     }else{                                         
        //                         if (a.gDUser < b.gDUser){return 1;}
        //                         if (a.gDUser > b.gDUser){return -1;}                          
        //                     }
        //                 }else if(dashCtrl.info.orderByField == 'owner'){
        //                     if(dashCtrl.info.dashboardSortOrderOB){                            
        //                         if (a.gDOwner < b.gDOwner){return -1;}
        //                         if (a.gDOwner > b.gDOwner){return 1;}
        //                     }else{                                         
        //                         if (a.gDOwner < b.gDOwner){return 1;}
        //                         if (a.gDOwner > b.gDOwner){return -1;}                          
        //                     }
        //                 }else if(dashCtrl.info.orderByField == 'type'){
        //                     if(dashCtrl.info.dashboardSortOrderType){ 
        //                         if (a.gDType < b.gDType){return -1;}
        //                         if (a.gDType > b.gDType){return 1;}
        //                     }else{                                         
        //                         if (a.gDType < b.gDType){return 1;}
        //                         if (a.gDType > b.gDType){return -1;}                          
        //                     }
        //                 }else if(dashCtrl.info.orderByField == 'DOFM'){
        //                     if(dashCtrl.info.dashboardSortOrderDOFM){ 
        //                         if (new Date(a.gDTs).getTime() < new Date(b.gDTs).getTime()){return -1;}
        //                         if (new Date(a.gDTs).getTime() > new Date(b.gDTs).getTime()){return 1;}
        //                     }else{                                         
        //                         if (new Date(a.gDTs).getTime() < new Date(b.gDTs).getTime()){return 1;}
        //                         if (new Date(a.gDTs).getTime() > new Date(b.gDTs).getTime()){return -1;}                          
        //                     }
        //                 }
        //             });
        //         }
        //         //fetch data on basis of pagination
        //         if (!!works.length) {
        //             var books = works;
        //             var count = books.length;
        //             paginator(count);
        //             var startIndex = dashCtrl.info.page['current'] * dashCtrl.info.page['count'];
        //             var endIndex = startIndex + dashCtrl.info.page['count'];
        //             if (count <= endIndex) {
        //                 endIndex = count;
        //             }
        //             var tmpArray = [];
        //             for (var key = startIndex; key < endIndex; key++) {
        //                 if(dashCtrl.info.page.selectAll[dashCtrl.info.page.current]){
        //                     if(dashCtrl.showDashBoard(works[key], "tags")){
        //                         works[key].selected = true;
        //                     }
        //                 }
        //                 if(dashCtrl.info.page.unSelectAll[dashCtrl.info.page.current]){
        //                     works[key].selected = false;
        //                 }
        //                 tmpArray.push(works[key]);
        //             }
        //             dashCtrl.gAllDashboards = tmpArray;
        //         }else{
        //             dashCtrl.info.page['pages'] = 0;
        //             dashCtrl.gAllDashboards = [];
        //             return [];
        //         }
        //         if(!dashCtrl.gAllDashboards.length || dashCtrl.gAllDashboards.length == 0) {                    
        //             dashCtrl.info.page['pages'] = 0;
        //         }
        //         //return list;
        //         return dashCtrl.gAllDashboards;
         //   };

            dashCtrl.updateCreatorName = function(works){
                dashCtrl.info.dUserName = [];
                for(var i=0;i<works.length;i++){
                   if(!dashCtrl.isDuplicateArrayObject(dashCtrl.info.dUserName, works[i].gDUser)) {
                        dashCtrl.info.dUserName.push(works[i].gDUser);
                    } 
                }
            }
            dashCtrl.getDCreatorName = function(){
                return dashCtrl.info.dUserName;
            }
            dashCtrl.updateOwnerName = function(works){
                dashCtrl.info.dOwnerName = [];
                for(var i=0;i<works.length;i++){
                   if(!dashCtrl.isDuplicateArrayObject(dashCtrl.info.dOwnerName, works[i].gDOwner)) {
                        dashCtrl.info.dOwnerName.push(works[i].gDOwner);
                    } 
                }
            }
            dashCtrl.getDOwnerName = function(){
                return dashCtrl.info.dOwnerName;
            }
            dashCtrl.getDlastModified = function(){
                return dashCtrl.info.lastModifiedArray;
            }
            dashCtrl.isDuplicateArrayObject = function(list, name) {
                for(var i=0;i<list.length;i++) {
                    if(list[i] == name) {
                        return true;
                    }
                }
                return false;
            };
            dashCtrl.getAllTagsName = function() {
                //ashCtrl.info.allDashboardsList
                var tags = [], tmp=[];
                for(var i=0; i < dashCtrl.info.allDashboardsList.length; i++) {
                    tmp=[];
                    if(dashCtrl.info.allDashboardsList[i]["tags"]){
                        tmp = dashCtrl.info.allDashboardsList[i]["tags"];
                    }
                    if(dashCtrl.info.allDashboardsList[i]["tag"]){
                        tmp = dashCtrl.info.allDashboardsList[i]["tag"];
                    }
                    for(var j=0;j<tmp.length;j++){
                        tags.push(tmp[j]);
                    }                        
                }
                //remove duplicate
                tags = dashCtrl.unique(tags);
                tags.sort();
                return tags;
            }  
            dashCtrl.getAllTagsNameOfSelectedDashboards = function() {
                //ashCtrl.info.allDashboardsList
                var tags = [], tmp=[], list = [];
                allDash = dashCtrl.getAllDashboards();
                for(i=0;i<allDash.length;i++){
                    if(allDash[i].selected){
                        list.push(allDash[i]);
                    }
                }
                for(var i=0; i < list.length; i++) {
                    tmp=[];
                    if(list[i]['selected'] && list[i]["tags"]){
                        tmp = list[i]["tags"];
                    }
                    if(list[i]['selected'] && list[i]["tag"]){
                        tmp = list[i]["tag"];
                    }
                    for(var j=0;j<tmp.length;j++){
                        tags.push(tmp[j]);
                    }                        
                }
                //remove duplicate
                tags = dashCtrl.unique(tags);
                return tags;
            } 
            dashCtrl.unique = function(list) {
                var uList = [];
                for(var i=0;i<list.length;i++) {
                    if(uList.indexOf(list[i]) < 0){
                        uList.push(list[i])
                    }
                }
                return uList;
            }
            dashCtrl.addExistingTag = function(tag){
                //clear and give proper format to the tag list
                dashCtrl.processMultipleTags();
                var tagList = dashCtrl.info.tags.split(',');
                if(tagList.indexOf(tag) != -1){
                    return;
                }
                if(dashCtrl.info.tags == ""){
                    dashCtrl.info.tags = tag
                }else{
                    dashCtrl.info.tags = dashCtrl.info.tags + ',' + tag;
                }
                dashCtrl.isAlphaNumeric();
            }
            dashCtrl.getBookOwnerName = function(book){
                if(book["name"]){
                    if(dashCtrl.info.bookOwnerList && dashCtrl.info.bookOwnerList.length > 0){
                        for(var i=0; i < dashCtrl.info.bookOwnerList.length; i++) {
                            if(dashCtrl.info.bookOwnerList[i]["_id"] == book["owner"]){
                                return dashCtrl.info.bookOwnerList[i]["_name"];
                            }
                        }
                    }
                }else if(book["dname"]){
                    return book["created_by"];
                }
                return "";
            }
            dashCtrl.getVisibility = function(book){
                return book.dashboardSecurityInfo.is_public;
            }
            dashCtrl.getRoleAccessField = function(book){
                if(book["name"]){
                    var dboard = dashCtrl.tableauDashboards;
                    var dboardRemote = WorkbenchService.getWorkbooksLocal();
                    if(dboard && dboard.length > 0){
                        for(var i=0;i<dboardRemote.books.length;i++){
                            if(dboardRemote.books[i]['id'] === book.id){
                                for(j=0;j<dboard.length;j++){
                                    if(dboard[j]['d_id']===book.id){
                                        return dboard[j].role_access;
                                    }
                                }         
                            }
                        }
                    }
                }else if(book["dname"]){
                    return book.dashboardSecurityInfo.is_public;
                }
            }
            dashCtrl.checkOwnerButton = function(book,check){
                var checkFlag = false;
                if(check == "glassBeam"){
                    checkFlag = true;
                }
                if(book["name"]){
                    if(book.gDOwner != metaDataService.getUserEmail()) {
                        if(checkFlag && (dashCtrl.ifGlassbeamUser() || dashCtrl.ifWbDemoUser())){
                            return false;   
                        }else{
                            return true;
                        }
                    }
                }else if(book["dname"]){
                    if(book.dashboardSecurityInfo.owner == "NA" || book.dashboardSecurityInfo.owner == ""){
                        if (!metaDataService.getDashAdmin()) {
                            if(checkFlag && (dashCtrl.ifGlassbeamUser() || dashCtrl.ifWbDemoUser())){
                                return false;   
                            }else{
                                return true;
                            }  
                        }
                    }
                    else if(book.dashboardSecurityInfo.owner != metaDataService.getUserEmail()){
                        if(checkFlag && (dashCtrl.ifGlassbeamUser() || dashCtrl.ifWbDemoUser())){
                            return false;   
                        }else{
                            return true;
                        }
                    }else {
                        if(checkFlag && (dashCtrl.ifGlassbeamUser() || dashCtrl.ifWbDemoUser())){
                            return false;   
                        }else{
                            return true;
                        }
                    }
                }
            }
            dashCtrl.showDashBoard = function(book,type){
                // hide tabs and delete btn for Internal dashboards
                if(book.typ == "Internal" && type == "delete"){
                    return false;
                }else if(type == "delete"){
                    type = "tags";
                }
                if(book.typ == "Internal" && type == "tabs"){
                    return false;
                }else if(type == "tabs"){
                    type = "tags";
                }
                if(dashCtrl.chkAdminFeature()){
                    switch(type) {
                        case 'dashLevel':
                            return true;
                        case 'tags':
                            return true;
                        case 'changeOwner':
                            return true;
                        case 'public':
                            if(book.visibility){
                                return false
                            }else{
                                return true;
                            }
                        case 'private':
                            if(book.visibility){
                                return true;
                            }else{
                                return false;
                            }
                    }
                }else if(book.gDOwner != metaDataService.getUserEmail()) {
                    if(dashCtrl.ifGlassbeamUser()){
                        if(dashCtrl.chkAdminFeature()){
                            switch(type) {
                                case 'dashLevel':
                                    return true;
                                case 'tags':
                                    return false;
                                case 'changeOwner':
                                    return true;
                                case 'public':
                                    return false;
                                case 'private':
                                    return false;
                            }
                        }else {
                            switch(type) {
                                case 'dashLevel':
                                    if(book.visibility){
                                        return true;
                                    }else {
                                        return false;   
                                    }
                                case 'tags':
                                    return false;
                                case 'changeOwner':
                                    return false;
                                case 'public':
                                    return false;
                                case 'private':
                                    return false;
                            }
                        }
                    }else if(dashCtrl.ifWbDemoUser()){
                        switch(type) {
                            case 'dashLevel':
                                return true;
                            case 'tags':
                                return true;
                            case 'changeOwner':
                                return true;
                            case 'public':
                                return true;
                            case 'private':
                                return true;
                        }
                    }else if(dashCtrl.isPowerUser()){
                        switch(type) {
                            case 'dashLevel':
                                return true;
                            case 'tags':
                                return false;
                            case 'changeOwner':
                                return false;
                            case 'public':
                                return false;
                            case 'private':
                                return false;
                        }
                    }else{
                        switch(type) {
                            case 'dashLevel':
                                var userInfo = metaDataService.getUser();
                                if(book.role_access){
                                    if(book.visibility && book.role_access.indexOf(userInfo['role'])!=-1){
                                        return true;
                                    }else {
                                        return false;   
                                    }
                                }else {
                                    return false;
                                }
                            case 'tags':
                                return false;
                            case 'changeOwner':
                                return false;
                            case 'public':
                                return false;
                            case 'private':
                                return false;
                        }
                    }
                }else if(book.gDOwner == metaDataService.getUserEmail()){
                    switch(type) {
                        case 'dashLevel':
                            var userInfo = metaDataService.getUser();
                            if(book.role_access.indexOf(userInfo['role'])!=-1){
                                return true;
                            }else {
                                return false;   
                            }
                        case 'tags':
                            return true;
                        case 'changeOwner':
                            return true;
                        case 'public':
                            if(book.visibility){
                                return false
                            }else{
                                return true;
                            }
                        case 'private':
                            if(book.visibility){
                                return true;
                            }else{
                                return false;
                            }
                    } 
                }
            }
            dashCtrl.getTitle = function(book,type){
                if(book["name"]){
                    switch(type) {                            
                        case 'changeOwner':
                            if(dashCtrl.showDashBoard(book,type)){
                                return "Change Owner";
                            }else {
                                return "Admin Feature";
                            }                            
                        case 'public':
                            if(book.visibility){
                                if(book.gDOwner == metaDataService.getUserEmail() || dashCtrl.chkAdminFeature()){
                                    return "Public";
                                }else {
                                    return "Admin Feature";
                                }
                            }else {
                                if(book.gDOwner == metaDataService.getUserEmail() || dashCtrl.chkAdminFeature()){
                                    return "Public";
                                }else {
                                    return "Admin Feature";
                                }
                            }
                        case 'private':
                            if(!book.visibility){
                                if(book.gDOwner == metaDataService.getUserEmail() || dashCtrl.chkAdminFeature()){
                                    return "Private";
                                }else {
                                    return "Admin Feature";
                                }
                            }else {
                                if(book.gDOwner == metaDataService.getUserEmail() || dashCtrl.chkAdminFeature()){
                                    return "Private";
                                }else {
                                    return "Admin Feature";
                                }
                            }                          
                    }
                }
            }
            dashCtrl.checkAvailableAdmins = function(book){
                if(book["name"]){
                    if(dashCtrl.dashOwnerListTableau){
                        if(dashCtrl.dashOwnerListTableau.length == 1 && dashCtrl.dashOwnerListTableau[0] == book.gDOwner){
                            return true;
                        }else {
                            return false;
                        }
                    }
                }else if(book["dname"]){
                    if(dashCtrl.dashOwnerListLogi){
                        if(dashCtrl.dashOwnerListLogi.length == 1 && dashCtrl.dashOwnerListLogi[0] == book.gDOwner){
                            return true;
                        }else {
                            return false;
                        }
                    }
                }
            }
            dashCtrl.logout = function(){
                if(getCookie("dashModeLogin") == "1" && InstanceHandler.getInstances().length==0){
                    AppService.logoutSessionTimeout();
                }else {
                    dashCtrl.modalInstance.close();
                    sessionStorage.setItem("dash_mode", "false");
                    document.getElementById("gb-full-page-loader").style.display = 'none';
                }
            }
            dashCtrl.getBookChangedOwnerName = function(book){
                return book.dashboardSecurityInfo.owner;
            }
            dashCtrl.chkDashSchedulingFeature = function(){
                if(dashCtrl.info.tempSchFlag) {
                    return true;
                }else {
                    return false;
                }
            }
            dashCtrl.filterOnType = function(list){
                var items = [];
                for(var i=0; i < list.length; i++){                    
                    if(dashCtrl.info.dType == 'internalDashboards') {
                        if(list[i].dname) items.push(list[i]);
                    }else if(dashCtrl.info.dType == 'userCreatedDashboards'){
                        if(list[i].name) items.push(list[i]);
                    }
                }
                return items;
            }
            dashCtrl.filterOnCreator = function(list){
                var items = [];
                for(var i=0; i < list.length; i++){                    
                    if(dashCtrl.info.createdBy != 'All' && dashCtrl.info.createdBy) {
                        if(list[i].gDUser == dashCtrl.info.createdBy) items.push(list[i]);
                    }
                }
                return items;
            }
            dashCtrl.filterOnOwner = function(list){
                var items = [];
                for(j=0;j<dashCtrl.info.ownerFilter.length;j++){
                    for(var i=0; i < list.length; i++){
                        if(list[i].gDOwner.indexOf(dashCtrl.info.ownerFilter[j]) != -1){
                            items.push(list[i]);
                        }
                    }
                }
                return items;
            }
            dashCtrl.filterOnLastModified = function(list){
                var items = [];
                for(var i=0; i < list.length; i++){
                    if(dashCtrl.info.lastModified != 'All' && dashCtrl.info.lastModified) {
                        var d1 = new Date();
                        var d2 = new Date(list[i].modified_ts);
                        switch(dashCtrl.info.lastModified) {
                            case "24hrs":
                                if(dashCtrl.date_diff_indays(d2,d1)<=1){
                                    items.push(list[i]);
                                }
                                break;
                            case "week":
                                if(dashCtrl.date_diff_indays(d2,d1)<=7){
                                    items.push(list[i]);
                                }
                                break;
                            case "month":
                                if(dashCtrl.date_diff_indays(d2,d1)<=30){
                                    items.push(list[i]);
                                }
                                break;
                            case "6month":
                                if(dashCtrl.date_diff_indays(d2,d1)<=180){
                                    items.push(list[i]);
                                }
                                break;
                          }
                    }
                }
                return items;
            }
            dashCtrl.date_diff_indays = function(date1, date2) {
                dt1 = new Date(date1);
                dt2 = new Date(date2);
                return Math.floor((Date.UTC(dt2.getFullYear(), dt2.getMonth(), dt2.getDate()) - Date.UTC(dt1.getFullYear(), dt1.getMonth(), dt1.getDate()) ) /(1000 * 60 * 60 * 24));
            }
            dashCtrl.filterOnDatasource = function(list){
                var items = [];
                for(j=0;j<dashCtrl.info.datasourceFilter.length;j++){
                    for(var i=0; i < list.length; i++){
                        if(list[i].datasource){
                            if(list[i].datasource[0].name.indexOf(dashCtrl.info.datasourceFilter[j]) != -1){
                                items.push(list[i]);
                                break;
                            }
                        }
                    }
                }
                return items;
            }
            dashCtrl.filterOnTags = function(list){
                var items = [];
                for(j=0;j<dashCtrl.info.tagsFilter.length;j++){
                    for(var i=0; i < list.length; i++){
                        if(list[i].tag.indexOf(dashCtrl.info.tagsFilter[j]) != -1){
                            items.push(list[i]);
                            break;
                        }
                    }
                }
                items = dashCtrl.unique(items);
                return items;
            }
            dashCtrl.getNameOfDashboard = function(record, len){
                var name = "";
                if(record.name){ 
                    if(len){
                        if(record.name.length > len){
                            name = record.name.substr(0, len) + "...";
                        }else{
                            name = record.name;
                        }
                    }else{
                        name = record.name;
                    }
                }
                else if(record.dname){ 
                    if(len){
                        if(record.dname.length > len){
                            name = record.dname.substr(0, len) + "...";
                        }else{
                           name = record.dname; 
                        }
                    }else{
                        name = record.dname;
                    }
                }
                name =  name.toLowerCase();
                return name;
            };
            dashCtrl.localFilter = function(){
                // if(dashCtrl.info.page['current'] > 0){
                //     dashCtrl.firstPage();
                // }
            };
            dashCtrl.changeView = function(view) {
                dashCtrl.info.currentView = view;
                dashCtrl.info.currentBook = null;
                // if(dashCtrl.info.currentView == 'list'){
                //     dashCtrl.info.page['count'] = 15;
                // }else if(dashCtrl.info.currentView == 'thumbnail'){
                //     dashCtrl.info.page['count'] = 50;
                // }

                // if(dashCtrl.info.page['current'] > 0){
                //     dashCtrl.firstPage();
                // }
            };
            dashCtrl.addTagInternalDashboards = function(book) {
                dashCtrl.info.selectedBooks = book["d_id"];
                dashCtrl.modalInstance = $modal.open({
                    templateUrl: 'partials/dashboards_internal_add_tag_workbook.html',
                    scope: $scope
                });
            }

            dashCtrl.hideModal = function() {
                dashCtrl.info.tags = "";
                if(dashCtrl.modalInstance){
                    dashCtrl.modalInstance.close('ok');
                }                
            };
            dashCtrl.addTagSingle = function() {
                if(dashCtrl.info.tags && dashCtrl.info.selectedBooks){
                    var tempObj = [];
                    var tempArray = [];
                    for(i=0;i<dashCtrl.info.selectedBooks.length;i++){
                        if(dashCtrl.info.selectedBooks[i].d_id){
                            tempObj[i].did = dashCtrl.info.selectedBooks[i].d_id;
                            tempObj[i].rids = [];
                            for(j=0;j<dashCtrl.info.selectedBooks[i].reports.length;j++){
                                tempArray.push(dashCtrl.info.selectedBooks[i].reports[j].r_id);
                            }
                            tempObj[i].rids = tempArray.join(",")
                        }
                        tempArray = [];
                    }
                    var param = {
                        tagging : {
                            drids : tempObj,
                            tags : dashCtrl.info.tags
                        }
                    }
                    dashCtrl.info.loading = true;
                    // for(i=0;i<dashCtrl.info.selectedBooks.length;i++){
                    //     dashCtrl.info.selectedBooks[i].visibility = !dashCtrl.info.selectedBooks[i].visibility;
                    //     dashCtrl.changeVisibility(dashCtrl.info.selectedBooks[i]);
                    //     dashCtrl.info.selectedBooks[i].visibility = !dashCtrl.info.selectedBooks[i].visibility;
                    // }
                    Dashboards.addTagsToDashboards(param).then(function (response) {
                        dashCtrl.getAllDeatils();
                        dashCtrl.hideModal();
                        dashCtrl.info.selectedBooks = "";
                        dashCtrl.info.tags = "";
                        dashCtrl.info.loading = false;
                    },function(error){                        
                        dashCtrl.hideModal();
                        dashCtrl.info.selectedBooks = "";
                        dashCtrl.info.tags = "";
                        dashCtrl.info.loading = false;
                    });
                }
            };
            dashCtrl.showAddTagsDd = function() {
                var list = dashCtrl.dashboards;
                for(var i=0; i< list.length; i++) {
                    if(list[i]['selected']){
                        return true;
                    }
                }
                return false;
            };
            dashCtrl.showMsg = function() {
                if(dashCtrl.info.errMsg == ""){
                    return false;
                }else{
                    return true;
                }
            };
            dashCtrl.isAlphaNumeric =  function(){
                var all_tags_name = dashCtrl.info.tags.split(/,|\s/), duplicateTagname = [], error=false;
                if(dashCtrl.info.tags == ""){
                    dashCtrl.info.errMsg = "";
                    return;
                }
                var allTags = dashCtrl.getAllTagsNameOfSelectedDashboards();
                for(var j=0; j< all_tags_name.length; j++){
                    var tag_name = all_tags_name[j];
                    if(tag_name == ""){
                        continue;
                    }else if(tag_name.length > dashCtrl.info.tag_max_characters){
                        error = true;
                        dashCtrl.info.errMsg = GlobalService.getVal('dashboard_tagname_max_len');
                        return;
                    }else if(!tag_name.match(/^[0-9a-zA-Z]+$/)){
                        error = true;
                        dashCtrl.info.errMsg = GlobalService.getVal('dashboard_tagname_special_char');
                        return;
                    }                    
                    //check for duplicate
                    for(var i=0; i < allTags.length;i++){
                        if(allTags[i] == tag_name){
                            error = true;
                            duplicateTagname.push(tag_name);
                        }
                    }
                }
                if(duplicateTagname.length > 0){
                    dashCtrl.info.errMsg = GlobalService.getVal('dashboard_tagbname_duplicate') + duplicateTagname.join(', ');
                    return;
                }else if(!error){
                    dashCtrl.info.errMsg = "";
                    return;
                }

            };
            dashCtrl.addTagsMultiple = function() {
                //fetch d_id of all selcted dashbaords
                var list = dashCtrl.getAllDashboards();
                dashCtrl.processMultipleTags();
                dashCtrl.info.selectedBooks = [];
                for(var i=0; i< list.length; i++) {
                    if(list[i]['selected'] && list[i]['d_id']){
                        dashCtrl.info.selectedBooks.push(list[i]);
                    }
                }
                if(dashCtrl.info.tags && dashCtrl.info.selectedBooks.length > 0){
                    var tempObj = [];
                    var tempArray = [];
                    for(i=0;i<dashCtrl.info.selectedBooks.length;i++){
                        if(dashCtrl.info.selectedBooks[i].d_id){
                            tempObj[i] = {};
                            tempObj[i].did = dashCtrl.info.selectedBooks[i].d_id;
                            tempObj[i].rids = [];
                            for(j=0;j<dashCtrl.info.selectedBooks[i].reports.length;j++){
                                tempArray.push(dashCtrl.info.selectedBooks[i].reports[j].r_id);
                            }
                            tempObj[i].rids = tempArray.join(",")
                        }
                        tempArray = [];
                    }
                    var param = {
                        tagging : {
                            drids : tempObj,
                            tags : dashCtrl.info.tags
                        }
                    }
                    // dashCtrl.info.loadinaddTagsMultipleg = true;
                    // for(i=0;i<dashCtrl.info.selectedBooks.length;i++){
                    //     dashCtrl.info.selectedBooks[i].visibility = !dashCtrl.info.selectedBooks[i].visibility;
                    //     dashCtrl.changeVisibility(dashCtrl.info.selectedBooks[i]);
                    //     dashCtrl.info.selectedBooks[i].visibility = !dashCtrl.info.selectedBooks[i].visibility;
                    // }
                    dashCtrl.info.loading = true;
                    Dashboards.addTagsToDashboards(param).then(function (response) {
                        dashCtrl.logActivity('Other Dashboards', 'Add Tags', '{\''+dashCtrl.info.tags+'\'}');
                        var updateDone = false;
                        var count = 0;
                        var dateToUpdate = new Date();
                        var tagArray = dashCtrl.info.tags.split(",");
                        for(i=0;i<dashCtrl.dashboards.length;i++){
                            for(j=0;j<dashCtrl.info.selectedBooks.length;j++){
                                if(dashCtrl.dashboards[i].d_id == dashCtrl.info.selectedBooks[j].d_id){
                                    dashCtrl.dashboards[i].modified_ts = dateToUpdate.toISOString();
                                    dashCtrl.dashboards[i].modified_ts_to_display = moment( dashCtrl.dashboards[i].modified_ts).format("YYYY-MM-DD HH:MM:SS");
                                    dashCtrl.dashboards[i].tag = dashCtrl.dashboards[i].tag.concat(tagArray);
                                    count++;
                                }
                            }
                            if(count == dashCtrl.info.selectedBooks.length){
                                dashCtrl.actionMessage = response.data.Msg;
                                dashCtrl.actionMessageFlag = true;
                                dashCtrl.reloadData();
                            }
                        }
                    },function(error){
                        dashCtrl.hideModal();
                        dashCtrl.info.selectedBooks = [];
                        dashCtrl.info.tags = "";
                        dashCtrl.info.loading = false;
                    });
                }
                $('#gb-add-tag-dd-container .dropdown-toggle').dropdown('toggle');
            };
            dashCtrl.processMultipleTags = function(){
                //trim first and last space(s)
                dashCtrl.info.tags = dashCtrl.info.tags.trim();
                //check if spaces are there within the strings
                dashCtrl.info.tags = dashCtrl.info.tags.replace(/ {1,}/g," ");
                //if space found remove a space or multiple spaces with a comma
                dashCtrl.info.tags = dashCtrl.info.tags.replace(/ /g,",");
                //replace continues mulitpl comma with a single comma
                dashCtrl.info.tags = dashCtrl.info.tags.replace(/,{1,}/g,",");
                //remove comma if it happend on as first character
                dashCtrl.info.tags = dashCtrl.info.tags.replace(/^,/, '');
                //remove comma if it happend on as last character
                dashCtrl.info.tags = dashCtrl.info.tags.replace(/,$/, '');

            }
            dashCtrl.showDashboardTileFrame = function(book) {
                if(!book.visibility && dashCtrl.checkOwnerButton(book)) {

                }else {
                    dashCtrl.info.currentView = 'frames';
                    dashCtrl.info.currentBook = book;   
                }
            };
            dashCtrl.getReportList = function() {
                var book = dashCtrl.info.currentBook;
                if(book.reports){
                    list = book.reports;
                }
                // if(book.views) {
                //     list = book.views;
                // }                
                return list;
            };
            dashCtrl.internalDashboards = function(){
                book = dashCtrl.info.currentBook;
                if(book.reports){
                    return true;
                }
                return false;
            }
            dashCtrl.getReportName = function(report) {
                if(report.rname){
                    return report.rname;
                }
                if(report.name){
                    return report.name;
                }
            };
            dashCtrl.openSettingsMenu = function(event) {
                var menu = $(event.currentTarget)
                if(!menu.hasClass('open')){
                    menu.addClass('open');
                }else{
                    menu.removeClass('open')
                }
            };
            dashCtrl.changeDateFormate = function(dDate) {
                if(!dDate) return "";
                var todayTime   = new Date(dDate);
                if(!todayTime) return "";
                var month       = dashCtrl.makeTwoDigit((todayTime.getMonth() + 1));
                var day         = dashCtrl.makeTwoDigit(todayTime.getDate());
                var year        = dashCtrl.makeTwoDigit(todayTime.getFullYear());
                var hours       = dashCtrl.makeTwoDigit(todayTime.getHours());
                var minutes     = dashCtrl.makeTwoDigit(todayTime.getMinutes());
                var seconds     = dashCtrl.makeTwoDigit(todayTime.getSeconds());
                return month + "-" + day + "-" + year + " " + hours + ":" + minutes + ":" + seconds;
            }
            dashCtrl.makeTwoDigit = function(item){
                item = parseInt(item,10);
                if(item < 10){
                    item = "0"+item;
                }
                return item;
            }
            /*
             * pagination
             *
             * */
            // Populates the page object with the latest data.
            function paginator (count) {
                dashCtrl.info.page['total'] = count;
                dashCtrl.info.page['pages'] = Math.ceil(dashCtrl.info.page['total'] / dashCtrl.info.page['count']);
                if(!dashCtrl.selectAllFlag){
                    for(i=0;i<dashCtrl.info.page['pages'];i++){
                        dashCtrl.info.page.selectAll[i]=false;
                        dashCtrl.info.page.unSelectAll[i]=false;
                    }
                    dashCtrl.selectAllFlag=true;    
                }
            } 
            $scope.$watch('dashCtrl.info.page["total"]', function (newValue, oldValue, scope) {
                if(newValue!=oldValue){
                    dashCtrl.selectAllFlag = false;
                }
            });
            $scope.$watch('dashCtrl.info.page.current', function (newValue, oldValue, scope) {
                if(newValue!=oldValue){
                    for(j=0;j<dashCtrl.gAllDashboards.length;j++){
                        dashCtrl.gAllDashboards[j].selected = false;
                    }
                }
            });
            // Navigates to next page of results
            // dashCtrl.nextPage = function () {
            //     if (dashCtrl.info.page['current'] < dashCtrl.info.page['pages'] - 1) {
            //         dashCtrl.info.page['current'] += 1;
            //         dashCtrl.getAllDashboards();
            //     }
            // };
            // // Navigate to previous page of results
            // dashCtrl.prevPage = function () {
            //     if (dashCtrl.info.page['current'] > 0) {
            //         dashCtrl.info.page['current'] -= 1;
            //         dashCtrl.getAllDashboards();
            //     }
            // };
            dashCtrl.showCheckTag = function (tag) {
                for(i=0;i<dashCtrl.info.tagsFilter.length;i++){
                    if(tag == dashCtrl.info.tagsFilter[i]){
                        return true;
                    }
                }
                return false;
            };
            dashCtrl.showCheckOwner = function (owner) {
                for(i=0;i<dashCtrl.info.ownerFilter.length;i++){
                    if(owner == dashCtrl.info.ownerFilter[i]){
                        return true;
                    }
                }
                return false;
            };
            dashCtrl.showCheckDatasource = function (datasource) {
                for(i=0;i<dashCtrl.info.datasourceFilter.length;i++){
                    if(datasource == dashCtrl.info.datasourceFilter[i]){
                        return true;
                    }
                }
                return false;
            };
            // // Navigate to first page of results
            // dashCtrl.firstPage = function () {
            //     if (dashCtrl.info.page['current'] == 0)
            //         return;
            //     dashCtrl.info.page['current'] = 0;
            //     dashCtrl.getAllDashboards();
            // };
            // // Navigate to last page of results
            // dashCtrl.lastPage = function () {
            //     if (dashCtrl.info.page['current'] == dashCtrl.info.page['pages'] - 1)
            //         return;
            //     dashCtrl.info.page['current'] = dashCtrl.info.page['pages'] - 1;
            //     dashCtrl.getAllDashboards();
            // };
            dashCtrl.getValue = function (key) {
                return GlobalService.getVal(key);
            };
            dashCtrl.deleteWorkbook = function() {
                dashCtrl.info.loading = true;
                GBDashboardService.deleteWorkbook(dashCtrl.selectedDashboard).then(function(response) {
                    dashCtrl.logActivity('Other Dashboards', 'Delete Workbook', '{\'' + dashCtrl.selectedDashboard.dname + '\'}');
                    for(i=0;i<dashCtrl.dashboards.length;i++){
                        if(dashCtrl.selectedDashboard.d_id == dashCtrl.dashboards[i].d_id){
                            dashCtrl.dashboards.splice(i,1);
                            break;
                        }
                    }
                    dashCtrl.actionMessage = response.data.Msg;
                    dashCtrl.actionMessageFlag = true;
                    dashCtrl.reloadData();
                    dashCtrl.modalInstance.close();
                    dashCtrl.modalInstance
                    dashCtrl.selectedDashboard = "";
                }, function(response) {
                    dashCtrl.info.loading = false;
                    dashCtrl.modalInstance.close();
                    dashCtrl.selectedDashboard = "";
                });
            };
            dashCtrl.renderHtml = function (html) {
                return $sce.trustAsHtml(html);
            };
            function successHandler(response) {

            }
            function sessionTimeOutHandler(response) {
                if (!dashCtrl.info.sessionTimedOut && response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/timeout/)) {
                    dashCtrl.info.sessionTimedOut = true;
                    ModalService.sessionTimeout();
                    return true;
                }
            }    
            function setWorkbookLoadStatus(bool) {
                var workbook = WorkbenchService.getWorkbooksLocal();
                workbook['loading'] = bool;
                WorkbenchService.setWorkbooksLocal(workbook);
            }        
            AppService.hidePanelLoading();

            // Function to clear all messages
            $scope.clearMessage = function() {
                dashCtrl.workbenchDown = false;
            }

            $scope.showPanel = function(){
                $scope.showFilterPanel = !$scope.showFilterPanel;
                $('#gbDashboard-filter-panel-body .panel-collapse').collapse('hide');
                // if(dashCtrl.info.filter && Object.keys(dashCtrl.info.filter).length > 0){
                //     $scope.filterApplied = true;
                //     $scope.showIndividualFilterCount = true;
                // }
                // resetFiltersExpanded();
            }
            
            var resetFiltersExpanded = function(){
                dashCtrl.info.filtersExpanded.type = false;
                dashCtrl.info.filtersExpanded.createdBy = false;
                dashCtrl.info.filtersExpanded.owner = false;
                dashCtrl.info.filtersExpanded.datasource = false;
                dashCtrl.info.filtersExpanded.lastModified = false;
                dashCtrl.info.filtersExpanded.tagsFilter = false;
            }

            $scope.updateFilter = function(params){
               // dashCtrl.info.pagination.currentPage = 1;
                dashCtrl.logActivity(params.dashboardType, params.filterType, params.filterName);
                // dashCtrl.firstPage();
                // dashCtrl.getAllDashboards();
                // dashCtrl.logActivity(params.dashboardType, params.filterType, params.filterName);
                // if(params.type=="tagsFilter"){
                //     if(dashCtrl.info[params.type].indexOf(params.value) != -1){
                //         dashCtrl.info[params.type].splice(dashCtrl.info[params.type].indexOf(params.value),1);
                //     }else {
                //         dashCtrl.info[params.type].push(params.value);
                //     }
                //     dashCtrl.info[params.type] = dashCtrl.unique(dashCtrl.info[params.type]);
                // }else {
                //     dashCtrl.info[params.type] = params.value;    
                // }
                // if(dashCtrl.info[params.type] !== 'All' && dashCtrl.info[params.type] != 'allDashboards'){
                //     dashCtrl.info.filter[params.type] = [dashCtrl.info[params.type]];
                // }else if(dashCtrl.info[params.type] == 'allDashboards') {
                //     delete dashCtrl.info.filter[params.type] ;
                    
                // }
                // $scope.filterCount = Object.keys(dashCtrl.info.filter).length;
            };
            
            $scope.showFilterCount = function(){
                $scope.filterCount = Object.keys(dashCtrl.info.filter).length;
            };

            $scope.checkAppliedFilters = function() {
                if(dashCtrl.info.filter){
                    if(Object.keys(dashCtrl.info.filter).length != 0){
                        return true;
                    }
                    return false;
                }
            };
            
            $scope.clearAppliedFilters = function(){
                dashCtrl.info.dType = 'allDashboards';
                dashCtrl.info.createdBy = 'All';
                dashCtrl.info.owner = 'All';
                dashCtrl.info.datasource = 'All';
                dashCtrl.info.lastModified = 'All';
                dashCtrl.info.tagsFilter = [];
                dashCtrl.info.filter = {};
                $scope.filterApplied = false;
            }
            dashCtrl.info.changePage = function (filterInfo, sortInfo) {
                var me = this;
                var filterredData = angular.copy(dashCtrl.dashboards);
                //filter data
                filterredData = dashCtrl.info.applyFilter(filterredData, filterInfo);
                if(!filterredData.length) return [];
                //group data by column
                groupedData = dashCtrl.info.groupbyColumn(filterredData);
                //sort data
                if(sortInfo){
                    filterredData = dashCtrl.info.pagination.sortByColumn(sortInfo, filterredData);
                }
                dashCtrl.info.pagination.data = filterredData;
                //dashCtrl.info.pagination.data = angular.copy(filterredData);
                dashCtrl.info.pagination.process();
                return dashCtrl.info.pagination.currentRecordsSet;
            },
            dashCtrl.info.changePageSize = function(filterInfo, sortInfo, pageSize){
                var me = this;
                var filterredData = angular.copy(dashCtrl.dashboards);
                //filter data
                if(filterInfo && filterInfo.length){
                    filterredData = dashCtrl.info.applyFilter(filterredData, filterInfo);
                }
                if(!filterredData.length) return [];
                //group data by column
                groupedData = dashCtrl.info.groupbyColumn(filterredData);
                //sort data
                if(sortInfo){
                    filterredData = dashCtrl.info.pagination.sortByColumn(sortInfo, filterredData);
                }
                if(pageSize>filterredData.length){
                    dashCtrl.info.pagination.endIndex = filterredData.length;    
                }else {
                    dashCtrl.info.pagination.endIndex = pageSize;
                }
                var msg = true;
                dashCtrl.info.pagination.init(angular.copy(filterredData));
                return dashCtrl.info.pagination.currentRecordsSet;
            }
            dashCtrl.info.applyFilter = function (list,filterList) {
                list = GBDashboardService.filterDashboardsNameTags(list, dashCtrl.info.query);
                var isInTimerange = function (timeRange, targetDateTime) {
                    var ts = new Date().getTime();
                    var oneDay = 24 * 60 * 60 * 1000;
                    var st,et;
                    switch (timeRange) {
                        case 'Last 24 Hrs':
                            var tsYesterday = ts - oneDay;
                            st = new Date(tsYesterday);
                            et = new Date();
                            break;
                        case 'Last Week':
                            var lastweek = ts - (7 * oneDay);
                            st = new Date(lastweek);
                            et = new Date();
                            break;
                        case 'Last Month':
                            var lastmonth = ts - (30 * oneDay);
                            st = new Date(lastmonth);
                            et = new Date();
                            break;
                        case 'Last 6 Month':
                            var last6month = ts - (6 * 30 * oneDay);
                            st = new Date(last6month);
                            et = new Date();
                            break;
                    }
    
                    var currentDataTimeStr = new Date(targetDateTime);
                    var range = moment(currentDataTimeStr).isBetween(st, et);
                    if (range) {
                        return true;
                    }
                    return false;
                }
                return list.filter(function (item) {
                    for (var i = 0; i < filterList.length; i++) {
                        var innerFound = false;
                        var columnName = filterList[i]['columnName'];
                        var columnValueList = filterList[i]['columnValue'];
                        //check if time filter is there then do time comparision
                        if( columnName === 'modified_ts'){
                            if(columnValueList && columnValueList[0]){
                                var targetDateTime = columnValueList[0];
                                if(isInTimerange(targetDateTime,item[columnName])){
                                    innerFound = true;
                                }
                            }
                        }else if( columnName === 'datasource'){
                            for (var j = 0; j < columnValueList.length; j++) {
                                if (item[columnName] && item[columnName][0] && item[columnName][0]['name'] == columnValueList[j]) {
                                    innerFound = true;
                                }
                            }
                        }else if( columnName === 'tag'){
                            for (var j = 0; j < columnValueList.length; j++) {
                                if (item[columnName] && item[columnName].length && (item[columnName].indexOf(columnValueList[j]) != -1)) {
                                    innerFound = true;
                                }
                            }
                        }else{
                            for (var j = 0; j < columnValueList.length; j++) {
                                if (item[columnName] == columnValueList[j]) {
                                    innerFound = true;
                                }
                            }
                        }
                        if(!innerFound){
                            return false;
                        }
                    }
                    return true;
                });
            }
            dashCtrl.info.groupbyColumn = function (dbData) {
                var columnFiltersName = [{
                    columnName : 'type_to_display',
                    columnTitle : "Type",
                    customSelect : false,
                    multiselect : false,
                    data : []
                },{
                    columnName : 'modified_ts',
                    columnTitle : "Last Modified",
                    customSelect : true,
                    multiselect : false,
                    data : GlobalService.getVal("lastModifiedArray")
                },{
                    columnName : 'gDOwner',
                    columnTitle : "Owner",
                    customSelect : false,
                    multiselect : true,
                    data : []
                },{
                    columnName : 'datasource',
                    columnTitle : "Data Sources",
                    customSelect : false,
                    multiselect : true,
                    data : []
                },{
                    columnName : 'tag',
                    columnTitle : "Tags",
                    customSelect : false,
                    multiselect : true,
                    data : []
                }];
                var addItemToListWithCount = function (list, item) {
                    var found = false;
                    if(list.length == 0){
                        list.push(item);
                    }else{
                        //increase count if it has match or add as a new item
                        //check if it is new
                        for(var i=0;i<list.length;i++){
                            if(list[i]['name'] == item.name){
                                list[i]['count'] += 1;
                                found = true;
                                break;
                            }
                        }
                        if(!found){
                            list.push(item)
                        }
                    }
                };
                var tmp = {};
                dbData.map(function(game) {
                    if (game['type_to_display']) {
                        tmp = {
                            name: game['type_to_display'],
                            count: 1,
                            selected : false
                        }
                        addItemToListWithCount(columnFiltersName[0].data, tmp);
                    }
                    if (game['gDOwner']) {
                        tmp = {
                            name: game['gDOwner'],
                            count: 1,
                            selected : false
                        }
                        addItemToListWithCount(columnFiltersName[2].data, tmp);
                    }
                    // if (game['datasource']) {
                    //     tmp = {
                    //         name: game['datasource'][0]['name'],
                    //         count: 1,
                    //         selected : false
                    //     }
                    //     addItemToListWithCount(columnFiltersName[3].data, tmp);
                    // }
                    if (game['tag']) {
                        var tagList = game['tag'];
                        for(var i=0;i<tagList.length;i++){
                            tmp = {
                                name: tagList[i],
                                count: 1,
                                selected : false
                            }
                            addItemToListWithCount(columnFiltersName[4].data, tmp);
                        }
                    }
                });
                return columnFiltersName;
            }

        }])

    
    .controller('SubscribeController', ['$scope', 'content', 'schedules', '$modalInstance', 'WorkbenchService', 'ModalService', 'x2js',
        function ($scope, content, schedules, $modalInstance, WorkbenchService, ModalService, x2js) {
            var subscribeCtrl = this;
            subscribeCtrl.schedules = schedules;
            subscribeCtrl.schedule = schedules[0];
            subscribeCtrl.content = content;
            subscribeCtrl.emailSubject = content.name;
            
            subscribeCtrl.hideModal = function() {
                $modalInstance.close('ok');
            };
            
            subscribeCtrl.subscribe = function() {
                var data = {
                    subject: subscribeCtrl.emailSubject,
                    content_type: !!content.hasOwnProperty('views') ? 'Workbook': 'View',
                    content_id: content.id,
                    schedule_id: subscribeCtrl.schedule._id
                };
                setWorkbookLoadStatus(true);
                WorkbenchService.createSubscription(data).then(function(response) {
                    setWorkbookLoadStatus(false);
                    var result = x2js.xml_str2json(response.data)['tsResponse'];
                    if(result.hasOwnProperty('subscription')) {
                        var subscriptionsList = WorkbenchService.getSubscriptionsList();
                        subscriptionsList.push(result['subscription']);
                        WorkbenchService.setSubscriptionsList(subscriptionsList);
                        ModalService.alertBox({msg: 'Subscribed successfully'});
                    } else {
                        ModalService.alertBox({msg: 'Unable to subscribe'});
                    }
                }, function(response) {
                    setWorkbookLoadStatus(false);
                    ModalService.alertBox({msg: 'Unable to subscribe'});
                });
                subscribeCtrl.hideModal();
            };
            
            function setWorkbookLoadStatus(bool) {
                var workbook = WorkbenchService.getWorkbooksLocal();
                workbook['loading'] = bool;
                WorkbenchService.setWorkbooksLocal(workbook);
            }
        }])
        
        
    .controller('UpdateSubscriptionController', ['$scope', 'content', 'schedules', 'subscription', '$modalInstance', 'WorkbenchService', 'ModalService', 'x2js',
        function ($scope, content, schedules, subscription, $modalInstance, WorkbenchService, ModalService, x2js) {
            
            var subscribeCtrl = this;
            
            subscribeCtrl.hideModal = function() {
                $modalInstance.close('ok');
            };
            
            if(!Array.isArray(subscription) || subscription.length != 1) {
                subscribeCtrl.hideModal();
                ModalService.alertBox({msg: 'Subscription not found'});
                return;
            }
            
            subscription = subscription[0];
            
            subscribeCtrl.schedules = schedules;
            subscribeCtrl.content = content;
            subscribeCtrl.emailSubject = subscription._subject;
            
            for(var i = 0; i < schedules.length; i++) {
                if(schedules[i]._id == subscription.schedule._id) {
                    subscribeCtrl.schedule = schedules[i];
                }
            }

            subscribeCtrl.updateSubscription = function() {
                var data = {
                    new_subject: subscribeCtrl.emailSubject,
                    new_schedule_id: subscribeCtrl.schedule._id
                };
                setWorkbookLoadStatus(true);
                WorkbenchService.updateSubscription(subscription._id, data).then(function(response) {
                    setWorkbookLoadStatus(false);
                    var result = x2js.xml_str2json(response.data)['tsResponse'];
                    if(result.hasOwnProperty('subscription')) {
                        var subscriptionsList = WorkbenchService.getSubscriptionsList();
                        for(var i = 0; i < subscriptionsList.length; i++) {
                            if(subscriptionsList[i]._id == subscription._id) {
                                subscriptionsList[i] = result['subscription'];
                                break;
                            }
                        }
                        WorkbenchService.setSubscriptionsList(subscriptionsList);
                        ModalService.alertBox({msg: 'Updated subscription successfully'});
                    } else {
                        ModalService.alertBox({msg: 'Unable to update subscription'});
                    }
                }, function(response) {
                    setWorkbookLoadStatus(false);
                    ModalService.alertBox({msg: 'Unable to update subscription'});
                });
                subscribeCtrl.hideModal();
            };
            
            function setWorkbookLoadStatus(bool) {
                var workbook = WorkbenchService.getWorkbooksLocal();
                workbook['loading'] = bool;
                WorkbenchService.setWorkbooksLocal(workbook);
            }
        }])
        
    .controller('UnsubscribeController', ['$scope', 'content', 'subscription', '$modalInstance', 'WorkbenchService', 'ModalService', 'x2js',
        function ($scope, content, subscription, $modalInstance, WorkbenchService, ModalService, x2js) {
            
            var subscribeCtrl = this;
            
            subscribeCtrl.hideModal = function() {
                $modalInstance.close('ok');
            };
            
            if(!Array.isArray(subscription) || subscription.length != 1) {
                subscribeCtrl.hideModal();
                ModalService.alertBox({msg: 'Subscription not found'});
                return;
            }
            
            subscription = subscription[0];
            subscribeCtrl.content = content;

            subscribeCtrl.unsubscribe = function() {
                setWorkbookLoadStatus(true);
                WorkbenchService.deleteSubscription(subscription._id).then(function(response) {
                    setWorkbookLoadStatus(false);
                    if(!response.data) {
                        var subscriptionsList = WorkbenchService.getSubscriptionsList();
                        var subscriptionIndex = 0;
                        for(var i = 0; i < subscriptionsList.length; i++) {
                            if(subscriptionsList[i]._id == subscription._id) {
                                subscriptionIndex = i;
                                break;
                            }
                        }
                        subscriptionsList.splice(subscriptionIndex, 1);
                        WorkbenchService.setSubscriptionsList(subscriptionsList);
                        ModalService.alertBox({msg: 'Unsubscribed successfully'});
                    } else {
                        ModalService.alertBox({msg: 'Unable to unsubscribe'});
                    }
                }, function(response) {
                    setWorkbookLoadStatus(false);
                    ModalService.alertBox({msg: 'Unable to unsubscribe'});
                });
                subscribeCtrl.hideModal();
            };
            
            function setWorkbookLoadStatus(bool) {
                var workbook = WorkbenchService.getWorkbooksLocal();
                workbook['loading'] = bool;
                WorkbenchService.setWorkbooksLocal(workbook);
            }
        }])

    .controller('AddTagController', ['$scope', 'workbook', '$modalInstance', 'WorkbenchService', 'ModalService', 'Dashboards',
        function ($scope, workbook, $modalInstance, WorkbenchService, ModalService, Dashboards) {
            var addTagCtrl = this;
            addTagCtrl.info = {};
            addTagCtrl.workbook = workbook;
            addTagCtrl.tagList = [{tagName: ""}];
            
            addTagCtrl.addTagRow = function() {
                addTagCtrl.tagList.push({tagName: ""});
            };            
            addTagCtrl.hideModal = function() {
                $modalInstance.close('ok');
            };
            
            addTagCtrl.addTagToWorkbook = function() {
                var tagsToAdd = [];
                angular.forEach(addTagCtrl.tagList, function(tag) {
                    if(!!tag.tagName.length) {
                        tagsToAdd.push(tag.tagName);
                    }
                })
                if(!!tagsToAdd.length) {                       
                    setWorkbookLoadStatus(true);
                    WorkbenchService.addTagsToWorkbook(addTagCtrl.workbook.id, tagsToAdd).then(function(response) {
                        setWorkbookLoadStatus(false);
                        WorkbenchService.updateWorkbooks();
                    }, function(response) {
                        setWorkbookLoadStatus(false);
                        sessionTimeOutHandler(response);
                    });
                }
                addTagCtrl.hideModal();
            };
            
            function setWorkbookLoadStatus(bool) {
                var workbook = WorkbenchService.getWorkbooksLocal();
                workbook['loading'] = bool;
                WorkbenchService.setWorkbooksLocal(workbook);
            }
            
            function sessionTimeOutHandler(response) {
                if (!addTagCtrl.info.sessionTimedOut && response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/timeout/)) {
                    addTagCtrl.info.sessionTimedOut = true;
                    addTagCtrl.hideModal();
                    ModalService.sessionTimeout();
                }
            }
        }])

    .controller('UpdateWorkbookController', ['$scope', 'workbook', '$modalInstance', 'WorkbenchService', 'metaDataService', 'x2js', 'ModalService',
        function ($scope, workbook, $modalInstance, WorkbenchService, metaDataService, x2js, ModalService) {
            var updateWorkbookCtrl = this;
            updateWorkbookCtrl.workbook = workbook;
            updateWorkbookCtrl.info = {};
            updateWorkbookCtrl.info.usersLoading = true;
            updateWorkbookCtrl.info.showTabs = updateWorkbookCtrl.workbook.tabs == true ? true : false;
            
            WorkbenchService.getUsers().then(function(response) {
                updateWorkbookCtrl.info.usersLoading = false;
                var users = x2js.xml_str2json(response.data)['tsResponse']['users']['user'];
                if(Array.isArray(users)) {
                    updateWorkbookCtrl.info.supportedUsers = [];
                    for(var i in users) {
                        if(users[i]['_name'] != WorkbenchService.getTableauUser() && users[i]['_siteRole'] != "ServerAdministrator") {
                            updateWorkbookCtrl.info.supportedUsers.push(users[i]);
                        }
                    }
                    if(!!updateWorkbookCtrl.info.supportedUsers.length) {
                        updateWorkbookCtrl.info.changeOwner = true;
                        updateWorkbookCtrl.info.changedOwner = "";
                    } else {
                        updateWorkbookCtrl.info.changeOwner = false;
                    }
                } else {
                    updateWorkbookCtrl.info.changeOwner = false;
                }
            }, function(response) {
                updateWorkbookCtrl.info.usersLoading = false;
                sessionTimeOutHandler(response);
            });
            
            updateWorkbookCtrl.hideModal = function() {
                $modalInstance.close('ok');
            };
            
            updateWorkbookCtrl.updateWorkbook = function() {
                var data = {
                    bookId: updateWorkbookCtrl.workbook.id,
                    showTabs: updateWorkbookCtrl.info.showTabs
                };
                if(updateWorkbookCtrl.info.changeOwner && updateWorkbookCtrl.info.changedOwner) {
                    data['newOwnerId'] = updateWorkbookCtrl.info.changedOwner['_id'];
                }
                setWorkbookLoadStatus(true);
                WorkbenchService.updateWorkbook(data).then(function(response) {
                    setWorkbookLoadStatus(false);
                    WorkbenchService.updateWorkbooks();
                }, function(response) {
                    setWorkbookLoadStatus(false);
                    sessionTimeOutHandler(response);
                });
                
                updateWorkbookCtrl.hideModal();
            };
            
            function setWorkbookLoadStatus(bool) {
                var workbook = WorkbenchService.getWorkbooksLocal();
                workbook['loading'] = bool;
                WorkbenchService.setWorkbooksLocal(workbook);
            }
            
            function sessionTimeOutHandler(response) {
                if (!updateWorkbookCtrl.info.sessionTimedOut && response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/timeout/)) {
                    updateWorkbookCtrl.info.sessionTimedOut = true;
                    updateWorkbookCtrl.hideModal();
                    ModalService.sessionTimeout();
                }
            }
        }])
        
        .controller('DeleteWorkbookController', ['$scope', 'workbook', '$modalInstance', 'WorkbenchService', '$sce', 'ModalService','UserTrackingService',
        function ($scope, workbook, $modalInstance, WorkbenchService, $sce, ModalService,UserTrackingService) {
            var deleteWorkbookCtrl = this;
            deleteWorkbookCtrl.info = {};
            deleteWorkbookCtrl.workbook = workbook;
            deleteWorkbookCtrl.msg = "Are you sure you want to delete the report <b>" + deleteWorkbookCtrl.workbook.name + "</b>";
            
            deleteWorkbookCtrl.hideModal = function() {
                $modalInstance.close('ok');
            };
            deleteWorkbookCtrl.logActivity = function (activity, details) {
                UserTrackingService.standard_user_tracking("Dashboard", "Other Dashboard", activity, details).then(successHandler, sessionTimeOutHandler);
            };
            function successHandler(response) {

            }
            function sessionTimeOutHandler(response) {
                if (!deleteWorkbookCtrl.info.sessionTimedOut && response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/timeout/)) {
                    deleteWorkbookCtrl.info.sessionTimedOut = true;
                    ModalService.sessionTimeout();
                    return true;
                }
            }
            deleteWorkbookCtrl.deleteWorkbook = function() {
                setWorkbookLoadStatus(true);
                WorkbenchService.deleteWorkbook(deleteWorkbookCtrl.workbook).then(function(response) {
                    setWorkbookLoadStatus(false);
                    deleteWorkbookCtrl.logActivity('Delete Workbook', JSON.stringify(deleteWorkbookCtrl.workbook));
                    WorkbenchService.updateWorkbooks();
                }, function(response) {
                    setWorkbookLoadStatus(false);
                    sessionTimeOutHandler(response);
                });
                deleteWorkbookCtrl.hideModal();
            };
            
            deleteWorkbookCtrl.renderHtml = function (html) {
                return $sce.trustAsHtml(html);
            };
            
            function setWorkbookLoadStatus(bool) {
                var workbook = WorkbenchService.getWorkbooksLocal();
                workbook['loading'] = bool;
                WorkbenchService.setWorkbooksLocal(workbook);
            }
            
            function sessionTimeOutHandler(response) {
                if (!deleteWorkbookCtrl.info.sessionTimedOut && response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/timeout/)) {
                    deleteWorkbookCtrl.info.sessionTimedOut = true;
                    deleteWorkbookCtrl.hideModal();
                    ModalService.sessionTimeout();
                }
            }
        }])
        
/// LogiCtrl - To load the external logi dashboards
    .controller('LogiCtrl', ['$scope', '$sce',
        function ($scope, $sce) {
            // sets the given url as the secure url to load on the ui.
            $scope.sceURL = function (url) {
                return $sce.trustAsResourceUrl(url);
            };
        }])

// Controller to open health check dashboards
    .controller('HealthCheckDashboardsCtrl', ['$scope', '$sce', '$modal', '$filter', 'Dashboards', 'GlobalService', 'AppService', 'ErrorService', 'UserTrackingService', '$timeout', '$window', '$cookies', '$location', 'InstanceHandler', 'ModalService', 'metaDataService','UtilService',
        function ($scope, $sce, $modal, $filter, Dashboards, GlobalService, AppService, ErrorService, UserTrackingService, $timeout, $window, $cookies, $location, InstanceHandler, ModalService, metaDataService, UtilService) {
            var healthCtrl = this;
            healthCtrl.supportEmaill = GlobalService.getVal("supportEmail");
            healthCtrl.info = {};
            
            var key,value,tmpObj={};
            healthCtrl.info.page = {
                "total": 0,
                "current": 0,
                "pages": 0,
                "count": 5,
                "selectAll" : [],
                "unSelectAll" : []
            }; 
            healthCtrl.dashboardType = 'summary';
            healthCtrl.summaryDash = [];
            healthCtrl.flatMenuList = [];
            healthCtrl.currentSelectedDashboardObj = {};
            healthCtrl.mainSelectedCategory = '';
            healthCtrl.roleAssignTitle = GlobalService.getVal("roleAssignTitle");
            healthCtrl.info.currentView = 'list';
            // Defines the completion of the request for dashboards.
            healthCtrl.info.complete = false;
            healthCtrl.info.listViewError = false;
            healthCtrl.info.currentView = 'list';
            healthCtrl.info.noSummary = false;
            healthCtrl.roles = [];
            healthCtrl.loaded  = false;
            healthCtrl.info.loadCount = 0;
            healthCtrl.info.createdBy = 'All';
            // Defines whether or not to show the dashboards category.
            healthCtrl.info.show_category = GlobalService.getVal('show_category');
            // Stores whether session is timed out or not
            healthCtrl.info.sessionTimedOut = false;
            // Flag to check internal or external user
            healthCtrl.info.internalLogin = false;
            // Holds all the dashboards.
            healthCtrl.health_check_dashboards = [];
            healthCtrl.info.securityToken = "";
            // Holds all the end customers for the customers
            healthCtrl.endcustomers = [];
            healthCtrl.info.application = GlobalService.getVal('navHealth');
       	    healthCtrl.endcustomerObjArray = [];
            healthcheck_dashboard_url = "";
            end_cust_label="";
            end_cust_value="";

            healthCtrl.info.dashboardSortOrder = true;
            healthCtrl.info.dashboardSortOrderCB = true;
            healthCtrl.info.dashboardSortOrderOB = true;
            healthCtrl.info.dashboardSortOrderDOFM = true;
            healthCtrl.info.tag_max_characters = GlobalService.getVal('tag_maxlimit');
            healthCtrl.menuList = [];
            healthCtrl.healthcheckModules = GlobalService.getVal("healthcheckModules");
            $scope.orderProperty = 'dname';
            var htmconst_url = "../config/constants/healthcheck_constants.json";
            $.get(htmconst_url, function (response, status) {
               $scope.htmconstdata = response;
            });

            
            AppService.getClinsightUrl().then(function (response) {
                GlobalService.setVal('clinsightReportUrl', response.data.Data);
                GlobalService.setVal('clinsightFlag', response.data.Data.length > 0 ? true : false);
                healthCtrl.info.clinsightFlag = GlobalService.getVal('clinsightFlag') || false;
                healthCtrl.getMenuList();
                //calling this to get unread count to show on icon
                Dashboards.getNotificationList(0, GlobalService.getVal('notification_page_size'), false).then(function (response) {
                    var count = response.data.Count;
                    healthCtrl.info.unreadCount = count > 999 ? "999+" : count;
                    healthCtrl.info.unreadCount_actual = count > 999 ? count : healthCtrl.info.unreadCount;
                }, function (response) {

                    console.error("Unable to load templates");
                    if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
                        GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
                        $scope.info.addRuleMsg = {
                            type: 'failure',
                            msg: GlobalService.getVal('rulesMsgs')['h2_down_msg']
                        };
                    }
                });

            }, function (response) {
                if (sessionStorage.getItem("clin_mode") == "true") {
                    sessionStorage.setItem("clin_mode", "false");
                }
                console.error("Unable to load templates");
                if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
                    GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
                    $scope.info.addRuleMsg = {
                        type: 'failure',
                        msg: GlobalService.getVal('rulesMsgs')['h2_down_msg']
                    };
                }
            });

            healthCtrl.loadUnreadCountNotification = function(){
                  //calling this to get unread count to show on icon
                  Dashboards.getNotificationList(0, GlobalService.getVal('notification_page_size'), false).then(function (response) {
                    var count = response.data.Count;
                    healthCtrl.info.unreadCount = count > 999 ? "999+" : count;
                    healthCtrl.info.unreadCount_actual = count > 999 ? count : healthCtrl.info.unreadCount;
                }, function (response) {

                    console.error("Unable to load templates");
                    if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
                        GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
                        $scope.info.addRuleMsg = {
                            type: 'failure',
                            msg: GlobalService.getVal('rulesMsgs')['h2_down_msg']
                        };
                    }
                });
            }

            healthCtrl.closeModal = function(){
                $scope.modalInstance.close();
            };

            Dashboards.getSecurityToken().then(function (response) {
                healthCtrl.info.securityToken = response.data.Data;
            });
            healthCtrl.logout = function(){
                AppService.logoutSessionTimeout();
            }
            healthCtrl.checkRoleSubmit = function () {
                var tempArray = [];
                for(i=0;i<healthCtrl.roles.length;i++){
                    if(healthCtrl.roles[i].selected){
                        tempArray.push(healthCtrl.roles[i].name); 
                    }
                }
                if(tempArray.length != 0 && healthCtrl.showAddTagsDd()){
                    return false;
                }else {
                    return true;
                }
                 
            };
            healthCtrl.checkCurrentRole = function (role) {
                var userInfo = metaDataService.getUser();
                if (userInfo['role'] == role.realName) {
                    if(healthCtrl.chkAdminFeature()){
                        return true;
                    }else {
                        return false;
                    }
                }
                return true;
            };
            healthCtrl.addRoleConf = function(){
                var roleArray = [];
                for(i=0;i<healthCtrl.roles.length;i++){
                    if(healthCtrl.roles[i].selected){
                        roleArray.push(healthCtrl.roles[i].name); 
                    }
                }
                $scope.roles = roleArray.length;;
                // $scope.addRoleConfMsg = "Do you want to add "+roles+" roles to selected dashboards?";
                $scope.modal1 = ModalService.openModal('partials/healthChk_add_role_conf.html', $scope, false, true);
            };
            healthCtrl.addRoleSubmit = function () {
                var roleArray = [];
                for(i=0;i<healthCtrl.roles.length;i++){
                    if(healthCtrl.roles[i].selected){
                        roleArray.push(healthCtrl.roles[i].realName); 
                    }
                }
                var roles = roleArray.toString();
                var list = healthCtrl.getAllDashboards();
                healthCtrl.info.selectedBooks = [];
                var selectedWorkbenchs = [];
                for(var i=0; i< list.length; i++) {
                    if(list[i]['selected'] && list[i]['d_id']){
                        healthCtrl.info.selectedBooks.push(list[i]);
                    }else{
                        if(list[i]['selected']){
                            //selectedWorkbenchs.push(list[i]["id"]);
                            healthCtrl.info.selectedBooks.push(list[i]);
                        }
                    }                            
                }
                var tempObj = [];
                var tempArray = [];
                for(i=0;i<healthCtrl.info.selectedBooks.length;i++){
                    if(healthCtrl.info.selectedBooks[i].d_id){
                        tempObj[i] = {};
                        tempObj[i].did = healthCtrl.info.selectedBooks[i].d_id;
                        tempObj[i].rids = [];
                        for(j=0;j<healthCtrl.info.selectedBooks[i].f_reports.length;j++){
                            tempArray.push(healthCtrl.info.selectedBooks[i].f_reports[j].r_id);
                        }
                        tempObj[i].rids = tempArray.join(",")
                    }else {
                        tempObj[i] = {};
                        tempObj[i].did = healthCtrl.info.selectedBooks[i].id;
                        tempObj[i].rids = [];
                        for(j=0;j<healthCtrl.info.selectedBooks[i].f_views.length;j++){
                            tempArray.push(healthCtrl.info.selectedBooks[i].f_views[j].id);
                        }
                        tempObj[i].rids = tempArray.join(",")
                    }
                    tempArray = [];
                }
                var param = {
                    roleaccess : {
                        drids : tempObj,
                        roles : roles
                    }
                }
                Dashboards.addRolesToDashboards(param).then(function (response) {
                    healthCtrl.getDetails();
                    healthCtrl.info.selectedBooks = "";
                    healthCtrl.info.tags = "";
                    healthCtrl.info.loading = false;
                    for(i=0;i<healthCtrl.roles.length;i++){
                        healthCtrl.roles[i].selected = false;
                    }
                    healthCtrl.info.assignRole = "Select Roles";
                },function(error){    
                    healthCtrl.info.selectedBooks = "";
                    healthCtrl.info.tags = "";
                    healthCtrl.info.loading = false;
                });
            };
            healthCtrl.showUsers = function() {
                healthCtrl.roleListLoading = true;
                healthCtrl.modalInstance = $modal.open({
                    templateUrl: 'partials/healtchk_user_role_list.html',
                    scope: $scope
                });
                Dashboards.showUsers().then(function (response) {
                    var data = response.data.Data;
                    var tempArray = [];
                    var tempObj = {};
                    healthCtrl.roleUserList = [];
                    for(i=0;i<data.length;i++){
                        tempObj.name = data[i].first_name+" "+data[i].last_name;
                        tempObj.email = data[i].email;
                        if(data[i].role.split('_').length>3){
                            tempObj.role = data[i].role.split('_').splice(3,3).join('_');
                        }else {
                            tempObj.role = data[i].role;
                        }
                        tempArray.push(tempObj);
                        tempObj={};
                    }
                    var roleList = [];
                    for(i=0;i<healthCtrl.roles.length;i++){
                        roleList.push(healthCtrl.roles[i].name);
                    }
                    for(j=0;j<tempArray.length;j++){
                        if(roleList.indexOf(tempArray[j].role) == -1){
                            tempArray.splice(j,1);
                            j--;
                        }
                    }
                    healthCtrl.roleUserList = tempArray;
                    healthCtrl.roleListLoading = false;
                });
            };
            healthCtrl.getNameOfDashboard = function(record, len){
                var name = "";
                if(record.dname){ 
                    if(len){
                        if(record.dname.length > len){
                            name = record.dname.substr(0, len) + "...";
                        }else{
                           name = record.dname; 
                        }
                    }else{
                        name = record.dname;
                    }
                }
                name =  name.toLowerCase();
                return name;
            };
            healthCtrl.getAllTagsName = function() {
                //ashCtrl.info.allDashboardsList
                var tags = [], tmp=[];
                if(healthCtrl.health_check_dashboardsDuplicate != undefined){
                    for(var i=0; i < healthCtrl.health_check_dashboardsDuplicate.length; i++) {
                        tmp=[];
                        if(healthCtrl.health_check_dashboardsDuplicate[i]["tags"]){
                            tmp = healthCtrl.health_check_dashboardsDuplicate[i]["tags"];
                        }
                        if(healthCtrl.health_check_dashboardsDuplicate[i]["tag"]){
                            tmp = healthCtrl.health_check_dashboardsDuplicate[i]["tag"];
                        }
                        for(var j=0;j<tmp.length;j++){
                            tags.push(tmp[j]);
                        }                        
                    }
                    //remove duplicate
                    tags = healthCtrl.unique(tags);
                    return tags;
                }
            }
            healthCtrl.unique = function(list) {
                var uList = [];
                for(var i=0;i<list.length;i++) {
                    if(uList.indexOf(list[i]) < 0){
                        uList.push(list[i])
                    }
                }
                return uList;
            }
            healthCtrl.getSheetThumbnailImage = function(workbook, sheet) {
                if(!workbook || workbook == "") return "";

                var imgUrl = "";
                var workbookId = "";
                var sheetId = "";
                //for internal dashboard
                if(workbook["d_id"]){
                    workbookId = workbook["d_id"];
                    return GlobalService.getVal('dashboard_img_logi_path')+'/'+workbookId+'.png';
                }else if(workbook["id"]){
                    workbookId = workbook["id"];
                }             
                imgUrl = healthCtrl.info.workbenchApiRootDir + '/' + workbookId + '/' + sheetId;
                return imgUrl;
            };
            healthCtrl.removeTagFromWorkbook = function(book, tag) {
                    healthCtrl.loaded = false;
                    var id=book["d_id"] || book["id"];
                    Dashboards.removeTag(id, tag).then(function(response) {
                        healthCtrl.logActivity('Other Dashboards', 'Remove Tag', '{\''+tag+'\'}');
                        healthCtrl.getDetails();
                        healthCtrl.loaded = true;
                    }, function(response) {
                        healthCtrl.getDetails();
                        healthCtrl.loaded = true;
                    });
            };
            healthCtrl.processMultipleTags = function(){
                //trim first and last space(s)
                healthCtrl.info.tags = healthCtrl.info.tags.trim();
                //check if spaces are there within the strings
                healthCtrl.info.tags = healthCtrl.info.tags.replace(/ {1,}/g," ");
                //if space found remove a space or multiple spaces with a comma
                healthCtrl.info.tags = healthCtrl.info.tags.replace(/ /g,",");
                //replace continues mulitpl comma with a single comma
                healthCtrl.info.tags = healthCtrl.info.tags.replace(/,{1,}/g,",");
                //remove comma if it happend on as first character
                healthCtrl.info.tags = healthCtrl.info.tags.replace(/^,/, '');
                //remove comma if it happend on as last character
                healthCtrl.info.tags = healthCtrl.info.tags.replace(/,$/, '');

            }
            healthCtrl.addTagsMultiple = function() {
                var list = healthCtrl.getAllDashboards();
                healthCtrl.processMultipleTags();
                healthCtrl.info.selectedBooks = [];
                for(var i=0; i< list.length; i++) {
                    if(list[i].selected){
                        healthCtrl.info.selectedBooks.push(list[i]);
                    }                            
                }
                if(healthCtrl.info.tags && healthCtrl.info.selectedBooks.length > 0){
                    var tempObj = [];
                    var tempArray = [];
                    for(i=0;i<healthCtrl.info.selectedBooks.length;i++){
                        tempObj[i] = {};
                        tempObj[i].did = healthCtrl.info.selectedBooks[i].d_id;
                        tempObj[i].rids = [];
                        for(j=0;j<healthCtrl.info.selectedBooks[i].f_reports.length;j++){
                            tempArray.push(healthCtrl.info.selectedBooks[i].f_reports[j].r_id);
                        }
                        tempObj[i].rids = tempArray.join(",")
                        tempArray = [];
                    }
                }
                var param = {
                    tagging : {
                        drids : tempObj,
                        tags : healthCtrl.info.tags
                    }
                }
                healthCtrl.info.loadinaddTagsMultipleg = true;
                for(i=0;i<healthCtrl.info.selectedBooks.length;i++){
                    healthCtrl.info.selectedBooks[i].visibility = !healthCtrl.info.selectedBooks[i].visibility;
                    healthCtrl.changeVisibility(healthCtrl.info.selectedBooks[i]);
                    healthCtrl.info.selectedBooks[i].visibility = !healthCtrl.info.selectedBooks[i].visibility;
                }
                Dashboards.addTagsToDashboards(param).then(function (response) {
                    healthCtrl.logActivity('Other Healthcheck Dashboards', 'Add Tags', '{\''+healthCtrl.info.tags+'\'}');
                    healthCtrl.getDetails();
                    healthCtrl.hideModal();
                    healthCtrl.info.selectedBooks = [];
                    healthCtrl.info.tags = "";
                    healthCtrl.info.loading = false;
                },function(error){                        
                    healthCtrl.hideModal();
                    healthCtrl.info.selectedBooks = [];
                    healthCtrl.info.tags = "";
                    healthCtrl.info.loading = false;
                });
            }
            healthCtrl.changeVisibility = function(book){
                healthCtrl.info.loading = true;
                    var tempArray = [];
                    var tempObj = {};
                    book.visibility = !book.visibility;
                    for(i=0;i<book.f_reports.length;i++){
                        tempObj.did = book.d_id;
                        tempObj.rids = book.f_reports[i].r_id;
                        tempArray.push(tempObj);
                    }
                    var param = {
                        visibility : {
                            drids : tempArray,
                            isPublic : book.visibility,
                            isTableau:false
                        }
                    }
                    book.visibility = !book.visibility;
                    Dashboards.changeVisibility(param).then(function (response) {
                        healthCtrl.info.loading = false;
                        healthCtrl.logActivity('Other Dashboards', 'Change Visibility', '{\''+book["dname"]+'\'}');
                        healthCtrl.getDetails();
                    }, function (response) {
                    });
            }
            healthCtrl.addExistingTag = function(tag){
                //clear and give proper format to the tag list
                healthCtrl.processMultipleTags();
                var tagList = healthCtrl.info.tags.split(',');
                if(tagList.indexOf(tag) != -1){
                    return;
                }
                if(healthCtrl.info.tags == ""){
                    healthCtrl.info.tags = tag
                }else{
                    healthCtrl.info.tags = healthCtrl.info.tags + ',' + tag;
                }                
                healthCtrl.isAlphaNumeric();
            }
            healthCtrl.toggleSelectAll = function(param){
                if(param == 'all'){
                    for(i=0;i<healthCtrl.info.page.selectAll.length;i++){
                        if(i!=healthCtrl.info.page.current){
                            healthCtrl.info.page.selectAll[i]=false;
                            healthCtrl.info.page.unSelectAll[i]=false;
                        }   
                    }
                    //healthCtrl.info.page.selectAll[healthCtrl.info.page.current] = !healthCtrl.info.page.selectAll[healthCtrl.info.page.current];
                    if(!healthCtrl.info.page.selectAll[healthCtrl.info.page.current]){
                        healthCtrl.info.page.unSelectAll[healthCtrl.info.page.current] = true;
                    }else{
                        healthCtrl.info.page.unSelectAll[healthCtrl.info.page.current] = false;
                    }
                }else{
                    //param.selected = !param.selected;
                    healthCtrl.info.page.unSelectAll[healthCtrl.info.page.current] = false;
                    healthCtrl.info.page.selectAll[healthCtrl.info.page.current] = false;
                }
                var list = healthCtrl.getAllDashboards();
                var tempList = [];
                for(i=0;i<list.length;i++){
                    if(list[i].selected){
                        tempList.push(list[i]);
                    }
                }
                healthCtrl.formatData();
            }
            healthCtrl.localFilter = function(){
                if(healthCtrl.info.page['current'] > 0){
                    healthCtrl.firstPage();
                }
                healthCtrl.formatData();
            };
            healthCtrl.showAddTagsDd = function() {
                var list = healthCtrl.getAllDashboards();
                for(var i=0; i< list.length; i++) {
                    if(list[i]['selected']){
                        return true;
                    }
                }
                return false;
            };
            healthCtrl.changeView = function(view) {
                healthCtrl.info.currentView = view;
                healthCtrl.info.currentBook = null;
                if(healthCtrl.info.currentView == 'list'){
                    healthCtrl.info.page['count'] = 15;
                }else if(healthCtrl.info.currentView == 'thumbnail'){
                    healthCtrl.info.page['count'] = 50;
                }

                if(healthCtrl.info.page['current'] > 0){
                    healthCtrl.firstPage();
                }
            };
            healthCtrl.userPermitted = function () {
                var userInfo = metaDataService.getUser();
                var featureInfo = metaDataService.getFeatures()
                if (featureInfo.workbench || userInfo['org_type'] == 1000 || (userInfo['org_type'] == 100 && AppService.isGbStudioApp())) {
                    return true;
                }
                return false;
            };
            healthCtrl.chkAdminFeature = function(){
                if(metaDataService.getFeatures().admin){
                    return true;
                }else {
                    return false;
                }
            }
            healthCtrl.ifGlassbeamUser = function () {
                var userOrg = metaDataService.getUserOrgType();
                var gbOrg = GlobalService.getVal('gbUserOrgType');
                if(userOrg == gbOrg) {
                    return true;
                }else {
                    return false;
                }
            };
            healthCtrl.getBookOwnerName = function(book){
                return book["created_by"];
            }
            healthCtrl.changeDateFormate = function(dDate) {
                if(!dDate) return "";
                var todayTime   = new Date(dDate);
                if(!todayTime) return "";
                var month       = healthCtrl.makeTwoDigit((todayTime.getMonth() + 1));
                var day         = healthCtrl.makeTwoDigit(todayTime.getDate());
                var year        = healthCtrl.makeTwoDigit(todayTime.getFullYear());
                var hours       = healthCtrl.makeTwoDigit(todayTime.getHours());
                var minutes     = healthCtrl.makeTwoDigit(todayTime.getMinutes());
                var seconds     = healthCtrl.makeTwoDigit(todayTime.getSeconds());
                return month + "-" + day + "-" + year + " " + hours + ":" + minutes + ":" + seconds;
            }
            healthCtrl.makeTwoDigit = function(item){
                item = parseInt(item,10);
                if(item < 10){
                    item = "0"+item;
                }
                return item;
            }
            healthCtrl.getBookChangedOwnerName = function(book){
                if(book.dashboardSecurityInfo.owner){
                    return book.dashboardSecurityInfo.owner;
                }
                else{
                    return book.created_by;   
                }
            }
            healthCtrl.showDashBoard = function(book,type){
                if(book["dname"]){
                    if(healthCtrl.chkAdminFeature()){
                        switch(type) {
                            case 'dashLevel':
                                return true;
                            case 'tags':
                                return true;
                            case 'changeOwner':
                                return true;
                            case 'public':
                                if(book.visibility){
                                    return false;
                                }else{
                                    return true;
                                }
                            case 'private':
                                if(book.visibility){
                                    return true;
                                }else{
                                    return false;
                                }
                        }
                    }else if(book.gDOwner == metaDataService.getUserEmail()){
                        switch(type) {
                            case 'dashLevel':
                                var userInfo = metaDataService.getUser();
                                if(book.role_access.indexOf(userInfo['role'])!=-1){
                                    return true;
                                }else {
                                    return false;   
                                }
                            case 'tags':
                                return true;
                            case 'changeOwner':
                                return true;
                            case 'public':
                                if(book.visibility){
                                    return false
                                }else{
                                    return true;
                                }
                            case 'private':
                                if(book.visibility){
                                    return true;
                                }else{
                                    return false;
                                }
                        }
                    }else if(healthCtrl.gDOwner != metaDataService.getUserEmail()){
                        if(healthCtrl.ifGlassbeamUser()){
                            if(healthCtrl.chkAdminFeature()){
                                switch(type) {
                                    case 'dashLevel':
                                        return true;
                                    case 'tags':
                                        return false;
                                    case 'changeOwner':
                                        return true;
                                    case 'public':
                                        return false;
                                    case 'private':
                                        return false;
                                }
                            }else {
                                switch(type) {
                                    case 'dashLevel':
                                        if(book.visibility){
                                            return true
                                        }else{
                                            return false;
                                        }
                                    case 'tags':
                                        return false;
                                    case 'changeOwner':
                                        return false;
                                    case 'public':
                                        return false;
                                    case 'private':
                                        return false;
                                }
                            }   
                        }else if(book.visibility){
                            switch(type) {
                                case 'dashLevel':
                                    if(book.admin_dashboard && metaDataService.getDashAdmin()){
                                        return true;   
                                    }else if(!book.admin_dashboard) {
                                        var userInfo = metaDataService.getUser();
                                        if(book.role_access.indexOf(userInfo['role'])!=-1){
                                            return true;
                                        }else {
                                            return false;   
                                        }
                                    }else {
                                        return false;
                                    }
                                case 'tags':
                                    return false;
                                case 'changeOwner':
                                    return false;
                                case 'public':
                                    return false;
                                case 'private':
                                    return false;
                            }
                        }else {
                            switch(type) {
                                case 'dashLevel':
                                    return false;
                                case 'tags':
                                    return false;
                                case 'changeOwner':
                                    return false;
                                case 'public':
                                    return false;
                                case 'private':
                                    return false;
                            } 
                        }
                    }else if(healthCtrl.ifGlassbeamUser()){
                        switch(type) {
                            case 'dashLevel':
                                return true;
                            case 'tags':
                                return false;
                            case 'changeOwner':
                                return true;
                            case 'public':
                                return false;
                            case 'private':
                                return false;
                        }
                    }else {
                        switch(type) {
                            case 'dashLevel':
                                return false;
                            case 'tags':
                                return false;
                            case 'changeOwner':
                                return false;
                            case 'public':
                                return false;
                            case 'private':
                                return false;
                        } 
                    }
                }
            };
            if(healthCtrl.userPermitted()) {
                healthCtrl.info.addDeleteTag = true;
            } else {
                healthCtrl.info.addDeleteTag = false;
            }
            healthCtrl.getAllDashboards = function(){
                return healthCtrl.health_check_dashboards;
            }
            healthCtrl.updateOwnerConf = function(user,book){
                // $scope.ownerConfMsg = "Do you want to change ownership to "+user.email;
                $scope.ownerName = user.email;
                $scope.userUpdate = user;
                $scope.bookUpdate = book;
                $scope.modal1 = ModalService.openModal('partials/healthcheck_owner_conf.html', $scope, false, true);
            };
            healthCtrl.updateOwner = function(user,book){
                healthCtrl.loaded = false;
                var tempArray = [];
                var tempObj = {};
                for(i=0;i<book.f_reports.length;i++){
                    tempObj.did = book.d_id;
                    tempObj.rids = book.f_reports[i].r_id;
                    tempArray.push(tempObj);
                }
                var userInfo = metaDataService.getUser();
                var param = {
                    ownership : {
                        drids : tempArray,
                        owner : user.email,
                        role: $scope.userUpdate.role,
                        isTableau:false
                    }
                }                
                Dashboards.updateOwner(param).then(function (response) {
                    healthCtrl.logActivity('Other Dashboards', 'Change Owner', '{\''+book["dname"]+'\'}');
                    healthCtrl.loaded = true;
                    healthCtrl.getDetails();
                }, function (response) {
                });
            }
            healthCtrl.healthDashboardLoading = function () {
                healthCtrl.info.loadCount++;              
                $timeout(function () {
                    healthCtrl.hideLoadingMsg();
                });
                if(((healthCtrl.info.loadCount % 2 === 0) && (navigator.userAgent.match(/Chrome/) || navigator.userAgent.match(/Safari/))) || ((navigator.userAgent.match(/Firefox/) || navigator.userAgent.match(/Edge/)))) {
                    if(angular.element('#content-loader-health-dboard')) {
                        angular.element('#content-loader-health-dboard').addClass("gb-hide");
                    }     
                    if(angular.element('#health-dashboard-iframe-div')) {
                        angular.element('#health-dashboard-iframe-div').removeClass("gb-hide");
                    }    
                }
            };

            // sets the given url as the secure url to load on the ui.
            healthCtrl.sceURL = function (url) {
                if(url!=undefined && healthCtrl.endcustomers[0] != undefined){
                    healthCtrl.endcustomersobj = healthCtrl.endcustomers[0];
                    healthCtrl.info.endcustlabel = healthCtrl.endcustomersobj;
                    healthCtrl.info.endcustvalue = healthCtrl.endcustomersobj;
                    if(healthCtrl.info.internalLogin){
                        healthCtrl.info.endcustlabel = "None";
                        healthCtrl.info.endcustvalue = "None";
                    }
                    // url = url + '&' + GlobalService.getVal('dashboard_link_endcustomer_label')+'='+ healthCtrl.info.endcustlabel + '&' + GlobalService.getVal('dashboard_link_endcustomer_value')+'='+ healthCtrl.info.endcustvalue;
                    return $sce.trustAsResourceUrl(url);
                }
            };
            healthCtrl.sceHTML = function (html) {
                return $sce.trustAsHtml(html);
            };
            // In case of system error, it doesn't wait to show error messages
            $scope.$watch('healthCtrl.info.complete', function() {
                if(healthCtrl.info.complete){ 
                    AppService.hidePanelLoading();
                }
            })
            //Event to check when application is ready
            $scope.$on('AppLoadEvent-healthcheck', function (event, args) {
                console.log("tab active")
                if(healthCtrl.info.complete){  
                    AppService.hidePanelLoading();
                    healthCtrl.showLoadingMsg();
                    healthCtrl.setDashboard('summary');
                    healthCtrl.info.createdBy='All';
                    healthCtrl.getDetails();
                    GlobalService.getVal('clinsightFlag') && healthCtrl.loadUnreadCountNotification();
                }
            });

            if (ErrorService.getErrors('gbApp')) {
                healthCtrl.info.complete = true;
            }
            healthCtrl.showEndCustomerList = function(){
                //don't show end customer list for external user
                
                if( healthCtrl.endcustomers.length > 1 && healthCtrl.health_check_dashboards.length > 0){
                    return true;
                }
                if(healthCtrl.health_check_dashboards.length > 1 || healthCtrl.info.internalLogin){
                    return true
                }
                return false;
            }
            healthCtrl.showDashboardList = function(){
                if(healthCtrl.health_check_dashboards.length > 1){
                    return true;
                }
                if(healthCtrl.endcustomers.length > 1 && healthCtrl.health_check_dashboards.length > 0){
                    return true;
                }
                return false;
            }
            healthCtrl.showSingleDashboard = function(){
                if(healthCtrl.endcustomers.length >= 1 && healthCtrl.health_check_dashboards.length == 1)        {
                    return true;
                }
                return false;
            }
            healthCtrl.setDashboard = function (dtype) {
                healthCtrl.dashboardType = dtype;
            };
            healthCtrl.updateCreatorName = function(works){
                healthCtrl.info.dUserName = [];
                for(var i=0;i<works.length;i++){
                   if(!healthCtrl.isDuplicateArrayObject(healthCtrl.info.dUserName, works[i].created_by)) {
                        healthCtrl.info.dUserName.push(works[i].created_by);
                    } 
                }
            }
            healthCtrl.getDCreatorName = function(){
                return healthCtrl.info.dUserName;
            }
            healthCtrl.isDuplicateArrayObject = function(list, name) {
                for(var i=0;i<list.length;i++) {
                    if(list[i] == name) {
                        return true;
                    }
                }
                return false;
            };
            // Adds the given dashboard to instance viewer
            healthCtrl.addInstance = function (report) {
                healthcheck_dashboard_url = report["r_link"];
                if ((!healthCtrl.info.selectedItem || healthCtrl.info.selectedItem == "") ) {
                    ModalService.alertBox({"msg": "Please select customer!"});
                    return;
                }
                end_cust_label = healthCtrl.info.selectedItem.label;
                end_cust_value = healthCtrl.info.selectedItem.value;
                // create instance viewer object
                var instanceConfig = {
                    'type': 'dashboard',
                    'healthCheck': true,
                    'name': report.rname,
                    'data': {
                        'report': report
                    }
                };
                InstanceHandler.addInstance(instanceConfig, $scope);
            };
            function paginator (count) {
                healthCtrl.info.page['total'] = count;
                healthCtrl.info.page['pages'] = Math.ceil(healthCtrl.info.page['total'] / healthCtrl.info.page['count']);
                if(!healthCtrl.selectAllFlag){
                    for(i=0;i<healthCtrl.info.page['pages'];i++){
                        healthCtrl.info.page.selectAll[i]=false;
                        healthCtrl.info.page.unSelectAll[i]=false;
                    }
                    healthCtrl.selectAllFlag=true;    
                }
            }
            healthCtrl.formatData = function () {
                var works = $filter('filterBooks')(healthCtrl.health_check_dashboardsDuplicate, healthCtrl.info.query);
                if (!!works.length) {
                    var books = works;
                    var count = books.length;
                    paginator(count);
                    var startIndex = healthCtrl.info.page['current'] * healthCtrl.info.page['count'];
                    var endIndex = startIndex + healthCtrl.info.page['count'];
                    if (count <= endIndex) {
                        endIndex = count;
                    }
                    var tmpArray = [];
                    for (var key = startIndex; key < endIndex; key++) {
                        if(healthCtrl.info.page.selectAll[healthCtrl.info.page.current]){
                            if(healthCtrl.showDashBoard(works[key], "tags")){
                                works[key].selected = true;
                            }
                        }
                        if(healthCtrl.info.page.unSelectAll[healthCtrl.info.page.current]){
                            works[key].selected = false;
                        }
                        tmpArray.push(works[key]);
                    }
                    healthCtrl.health_check_dashboards = tmpArray;
                }else{
                    healthCtrl.info.page['pages'] = 0;
                    healthCtrl.health_check_dashboards = [];
                    return [];
                }
                if(!healthCtrl.health_check_dashboards.length || healthCtrl.health_check_dashboards.length == 0) {                    
                    healthCtrl.info.page['pages'] = 0;
                }
            };
                                            
            healthCtrl.nextPage = function () {
                if (healthCtrl.info.page['current'] < healthCtrl.info.page['pages'] - 1) {
                    healthCtrl.info.page['current'] += 1;
                    healthCtrl.getDetails();
                }
            };
            // Navigate to previous page of results
            healthCtrl.prevPage = function () {
                if (healthCtrl.info.page['current'] > 0) {
                    healthCtrl.info.page['current'] -= 1;
                    healthCtrl.getDetails();
                }
            };
            // Navigate to first page of results
            healthCtrl.firstPage = function () {
                if (healthCtrl.info.page['current'] == 0)
                    return;
                healthCtrl.info.page['current'] = 0;
                healthCtrl.getDetails();
            };
            // Navigate to last page of results
            healthCtrl.lastPage = function () {
                if (healthCtrl.info.page['current'] == healthCtrl.info.page['pages'] - 1)
                    return;
                healthCtrl.info.page['current'] = healthCtrl.info.page['pages'] - 1;
                healthCtrl.getDetails();
            }; 
            // XHR to get the dashboards.
            healthCtrl.getDetails = function () {
                if(healthCtrl.dashOwnerListLogi == undefined){
                    Dashboards.getLogiAdmin().then(function (responseLogi) {
                        healthCtrl.dashOwnerListLogi = responseLogi.data.Data;
                    });
                }
                Dashboards.allDetails().then(function (response) {
                    Dashboards.getRolesHealthChk().then(function (response) {
                        var data = response.data.Data;
                        healthCtrl.roles = [];
                        for(i=0;i<data.length;i++){
                            if(data[i]!=""){
                                var tempObj = {};
                                var testArray = data[i].split('_');
                                if(testArray.length>3){
                                    tempObj.name = testArray.splice(3,3).join('_');
                                }else {
                                    tempObj.name = data[i];
                                }
                                tempObj.realName = data[i];
                                tempObj.selected = false;
                                healthCtrl.roles.push(tempObj);
                            }
                        }
                    })
                    var userInfo = metaDataService.getUser();
                    healthCtrl.info.internalLogin = userInfo ? !userInfo["is_external"] : false;

                    //check if landed from notification
                    if (sessionStorage.getItem("clin_mode") == "true") {

                        if (GlobalService.getVal('clinsightReportUrl').length) {
                            var clin_url = new URL(GlobalService.getVal('clinsightReportUrl'))
                            var urlParams = new URLSearchParams(clin_url.search);

                            //replace rd report value and fill query search object
                            var url_obj = {}

                            //loop over url params
                            urlParams.forEach(function (value, key) {
                                if (key == "rdReport") {
                                    url_obj[key] = GlobalService.getVal("healthcheck_rd_report");
                                } else {
                                    url_obj[key] = value;
                                }
                            });

                            //loop over session object
                            Object.keys(sessionStorage).forEach(function (key) {
                                if (key != "clin_mode" || key != "mps" || key != "notificationId") {
                                    url_obj[key] = sessionStorage.getItem(key);
                                }
                            })

                            //create custom report url for clinsights
                            var url_pad = Object.keys(url_obj).reduce(function (acc, key) {
                                var value = url_obj[key];
                                if (key == "rdReport") {
                                    acc = acc + key + "=" + value;
                                } else {
                                    acc = acc + "&" + key + "=" + value;
                                }
                                return acc;
                            }, "?")

                            //pad end the url
                            clin_url.search = url_pad;

                            //change the url of the summary dashboard as per the generated url
                            healthCtrl.summaryDash = $filter('filter')(response.data.Data.dashboards, { 'd_type': GlobalService.getVal('HealthCheckSummary') });
                            if (healthCtrl.summaryDash.length > 0) {
                                healthCtrl.summaryDash[0].reports[0].r_link = clin_url.href
                            }
                            //intensional console
                            console.log(clin_url.href)

                            sessionStorage.setItem("clin_mode", "false");

                            //when clicked on a push notification if we have the notification id then mark it as read.
                            if (sessionStorage.getItem("notificationId")) {
                                var payload = {
                                    "notificationIds": [sessionStorage.getItem("notificationId")]
                                }
                                //api call
                                healthCtrl.markReadNotification(payload, true);
                                healthCtrl.logActivity('Push Notification clicked', JSON.stringify(payload));
                            }
                        }
                        else{
                            sessionStorage.setItem("clin_mode", "false");
                            healthCtrl.summaryDash = $filter('filter')(response.data.Data.dashboards, { 'd_type': GlobalService.getVal('HealthCheckSummary') });
                        }

                        
                        

                    } else {
                        healthCtrl.summaryDash = $filter('filter')(response.data.Data.dashboards, { 'd_type': GlobalService.getVal('HealthCheckSummary') });
                    }
                    
                    healthCtrl.health_check_dashboards = $filter('filter')(response.data.Data.dashboards, {'d_type': 'External'});
                    if(healthCtrl.summaryDash.length){
                        healthCtrl.health_check_dashboards.push(healthCtrl.summaryDash[0]);
                    }
                    healthCtrl.health_check_dashboardsDuplicate = healthCtrl.health_check_dashboards;
                    healthCtrl.updateCreatorName(healthCtrl.health_check_dashboards);
                    healthCtrl.copyOfDashBoards = angular.copy(healthCtrl.health_check_dashboards);
                    if(healthCtrl.summaryDash.length==0 || healthCtrl.summaryDash == undefined){
                        healthCtrl.setDashboard('other');
                        healthCtrl.info.noSummary = true;
                    }
                    console.log(healthCtrl.summaryDash);
                    for(i=0;i<healthCtrl.health_check_dashboards.length;i++){
                        healthCtrl.health_check_dashboards[i].gDUser = healthCtrl.getBookOwnerName(healthCtrl.health_check_dashboards[i]);
                        healthCtrl.health_check_dashboards[i].visibility = healthCtrl.health_check_dashboards[i].dashboardSecurityInfo.is_public;
                        healthCtrl.health_check_dashboards[i].gDOwner = healthCtrl.getBookChangedOwnerName(healthCtrl.health_check_dashboards[i]);
                        healthCtrl.health_check_dashboards[i].gDTs = healthCtrl.changeDateFormate(healthCtrl.health_check_dashboards[i].modified_ts);
                        var tempRoleAccess = [];
                        var tempRoleAccessObj = {};
                        if(healthCtrl.health_check_dashboards[i].role_access){
                            for(m=0;m<healthCtrl.health_check_dashboards[i].role_access.length;m++){
                                tempRoleAccessObj = {};
                                tempRoleAccessObj.realName = healthCtrl.health_check_dashboards[i].role_access[m];
                                if(healthCtrl.health_check_dashboards[i].role_access[m].split('_').length>3){
                                    tempRoleAccessObj.name = healthCtrl.health_check_dashboards[i].role_access[m].split('_').splice(3,3).join('_');
                                }else {
                                    tempRoleAccessObj.name = healthCtrl.health_check_dashboards[i].role_access[m];
                                }
                                tempRoleAccess.push(tempRoleAccessObj);
                            }
                            healthCtrl.health_check_dashboards[i].role_access_dis = tempRoleAccess;
                        }else {
                            healthCtrl.health_check_dashboards[i].role_access = [];
                        }
                    }
                    Dashboards.getEndCustomers().then(function (response) {            
                        healthCtrl.endcustomers = response.data.Data;
                        healthCtrl.endcustomersobj = metaDataService.getUserEndCustomer()
                        if(healthCtrl.info.internalLogin){
                            if(!healthCtrl.endcustomers || !healthCtrl.endcustomers.length || healthCtrl.endcustomers.length < 1){
                                healthCtrl.hideLoadingMsg();
                                ErrorService.setError(healthCtrl.info.application, GlobalService.getVal('no_end_customer'));
                                healthCtrl.info.listViewError = true;
                                healthCtrl.info.listViewErrorMsg = "End customer list is missing, please contact " + GlobalService.getVal('dashmodeadminemail');
                                return false;
                            }
                            else {
                                if(healthCtrl.endcustomersobj === "" || healthCtrl.endcustomersobj === "NA"){
                                    var endCustomerArray = ["All"];
                                    for(var i=0; i < healthCtrl.endcustomers.length; i++){
                                        endCustomerArray.push(healthCtrl.endcustomers[i].endcustomer_name)
                                    }
                                    endCustomerArray = endCustomerArray.filter(function (x, i, a) { 
                                        return a.indexOf(x) == i; 
                                    });
                                    healthCtrl.endcustomerObjArray = []
                                    for(var i=0;i < endCustomerArray.length; i++){
                                        key = endCustomerArray[i];
                                        value = endCustomerArray[i];
                                        tempObj = {};
                                        tempObj.label = key;
                                        tempObj.value = value;
                                        healthCtrl.endcustomerObjArray.push(tempObj);
                                    }
                                    //healthCtrl.endcustomerObjArray.unshift({"label":"None", "value":"None"});
                                    healthCtrl.endcustomers = healthCtrl.endcustomerObjArray; 
                                    healthCtrl.info.selectedItem = healthCtrl.endcustomerObjArray[0];
                                    healthCtrl.setCustomerName();
                                    healthCtrl.formatData();
                                }else{
                                    healthCtrl.endcustomersobj = metaDataService.getUserEndCustomer();
                                    healthCtrl.info.endcustlabel = healthCtrl.endcustomersobj;
                                    healthCtrl.info.endcustvalue = healthCtrl.endcustomersobj;
                                    healthCtrl.info.selectedItem = {};
                                    var obj = {
                                        label: healthCtrl.info.endcustlabel,
                                        value: healthCtrl.info.endcustvalue
                                    }
                                    healthCtrl.endcustomerObjArray.push(obj);
                                    healthCtrl.info.selectedItem = healthCtrl.endcustomerObjArray[0];
                                    var test = healthCtrl.endcustomers.filter(function(item){
                                        return item.endcustomer_name === healthCtrl.info.endcustlabel
                                    });
                                    healthCtrl.info.ec_group_map = {};
                                    healthCtrl.endcustomers.map(function(item) {
                                        if(item.group_name.length){
                                            healthCtrl.info.ec_group_map[item.endcustomer_name] = item.group_name;
                                        }
                                    });
                                    flatten(test[0].group_name);
                                    healthCtrl.setCustomerName();
                                    healthCtrl.formatData();
                                    healthCtrl.hideLoadingMsg();
                                }
                            }              
                        } else {
                            //for external user: get domain name associated with the user i.e current login
                            // this API will return always single end customer as list
                            // Fetch end customer list
                            // healthCtrl.endcustomers = metaDataService.getUserEndCustomer();
                            if(healthCtrl.endcustomers == "NA" || healthCtrl.endcustomers == null){
                                healthCtrl.hideLoadingMsg();
                                healthCtrl.noUserEndCustomerError = GlobalService.getVal('noUserEndCustomerError');
                                healthCtrl.supportEmail = GlobalService.getVal('supportEmail');
                                $scope.modal1 = ModalService.openModal('partials/noUserEndcustomerPopup.html', $scope, false, true);
                                return false;
                            }
                            healthCtrl.endcustomerObjArray = [];
                            healthCtrl.endcustomersobj = metaDataService.getUserEndCustomer();
                            healthCtrl.info.endcustlabel = healthCtrl.endcustomersobj;
                            healthCtrl.info.endcustvalue = healthCtrl.endcustomersobj;
                            healthCtrl.info.selectedItem = {};
                            var obj = {
                                label: healthCtrl.info.endcustlabel,
                                value: healthCtrl.info.endcustvalue
                            }
                            healthCtrl.endcustomerObjArray.push(obj);
                            healthCtrl.info.selectedItem = healthCtrl.endcustomerObjArray[0];
                            var test = healthCtrl.endcustomers.filter(function(item){
                                return item.endcustomer_name === healthCtrl.info.endcustlabel
                            });
                            healthCtrl.info.ec_group_map = {};
                            healthCtrl.endcustomers.map(function(item) {
                                if(item.group_name.length){
                                    healthCtrl.info.ec_group_map[item.endcustomer_name] = item.group_name;
                                }
                            });
                            flatten(test[0].group_name);
                            // healthCtrl.info.selectedItem.label = healthCtrl.info.endcustlabel;
                            // healthCtrl.info.selectedItem.value = healthCtrl.info.endcustvalue;
                            healthCtrl.setCustomerName();
                            healthCtrl.hideLoadingMsg();
                        }
                        healthCtrl.hideLoadingMsg();
                    }, function(response) {
                        healthCtrl.apiFailed(response);
                    });
                }, function (response) {
                    healthCtrl.apiFailed(response);
                });
            };

            function flatten (arr) {
                for (var i = 0; i < arr.length; i++) {
                    var map = healthCtrl.endcustomerObjArray.map(function(item){
                       return item.label;
                    });
                    var obj = {};
                    obj.label = arr[i];
                    obj.value = arr[i];
                    if(map.indexOf(arr[i]) == -1){
                        healthCtrl.endcustomerObjArray.push(obj);
                    }
                    if(healthCtrl.info.ec_group_map[arr[i]] && healthCtrl.info.ec_group_map[arr[i]].length){
                        flatten(healthCtrl.info.ec_group_map[arr[i]])
                    }
                }
            }

            healthCtrl.getDetails();
            healthCtrl.apiFailed = function(response){                
                healthCtrl.hideLoadingMsg();
                healthCtrl.health_check_dashboards.length = 0;
                if(!sessionTimeOutHandler(response)) {
                    ErrorService.setError(healthCtrl.info.application, GlobalService.getVal('data_fail'));
                }
            }
            healthCtrl.loadSingleDashboard = function() {
                $timeout(function () {
                    healthCtrl.loaded = true;
                }, 5000);
        
                healthCtrl.r_link = healthCtrl.health_check_dashboards[0].reports[0].r_link;
                healthCtrl.r_name = healthCtrl.health_check_dashboards[0].reports[0].rname;
                healthCtrl.d_name = healthCtrl.health_check_dashboards[0].dname;
                // User tracking for default loading of dashboard.
                healthCtrl.logActivity('Default Load', '{\'' + healthCtrl.r_name + '\'}');
            }
            healthCtrl.hideLoadingMsg = function(){
                healthCtrl.loaded = true;
            }
            healthCtrl.showLoadingMsg = function(){
                healthCtrl.loaded = false;
            }
            // Method to log the user activity from the UI template.
            healthCtrl.logActivity = function (activity, details) {
                UserTrackingService.standard_user_tracking(healthCtrl.info.application, healthCtrl.info.application, activity, details).then(successHandler, sessionTimeOutHandler);
            };
            healthCtrl.logClinsightsActivity = function (module, activity, details) {
                UserTrackingService.standard_user_tracking("clinsights Web", module , activity, details).then(successHandler, sessionTimeOutHandler);
            };
            // Returns the filter expression to filter the dashboards based the search term typed by the user.
            healthCtrl.search = function () {
                return {
                    "rdesc": healthCtrl.info.query
                };
            };
            healthCtrl.setCustomerName = function () {
                var obs = healthCtrl.info.selectedItem;
                var openInstance = InstanceHandler.getInstances();
                end_cust_label = obs.label;
                end_cust_value = obs.value;
                var domain = GlobalService.getVal('primaryDomain');
                var new_url = "";
                if(healthCtrl.summaryDash.length){
                    new_url = healthCtrl.summaryDash[0].reports[0].r_link;
                }
                document.cookie = GlobalService.getVal('dashboard_link_endcustomer_label')+'=' + end_cust_label + ";domain=." + domain + ";path=/";
                document.cookie = GlobalService.getVal('dashboard_link_endcustomer_value')+'=' + end_cust_value + ";domain=." + domain + ";path=/";
                for(i=0;i<openInstance.length;i++){
                    if(openInstance[i].healthCheck){
                        var iframe = document.getElementsByClassName("idashboard-"+openInstance[i].md5);
                        iframe[0].src = iframe[0].src;
                    }
                }
                if(new_url != ""){
                    document.getElementById('health-dashboardiframe').contentWindow.location.replace(new_url);
                }
            };
            // Toggles the visibilty of the dashboards.
            healthCtrl.toggleDashboard = function (dashboard) {
                // if (!!healthCtrl.info.query) {
                //     ModalService.alertBox({msgKey: 'dashboard_collapse'});
                // } else {
                    dashboard.expand = !dashboard.expand;
                // }
            };
            // Returns whether dashboards are there after filtering or not so as to display the proper message on the UI when no dashboards are matched.
            healthCtrl.filterResult = function () {
                var i, bool = true;
                if (healthCtrl.info.complete && healthCtrl.getError() && !healthCtrl.getError().length) {
                    for (i in healthCtrl.health_check_dashboards) {
                        if (healthCtrl.health_check_dashboards[i].f_reports != null && healthCtrl.health_check_dashboards[i].f_reports.length) {
                            bool = false;
                        }
                    }
                    return bool;
                } else {
                    return false;
                }
            };
            healthCtrl.removeRoleConf = function(book,role){
                $scope.roleToRemove = role;
                $scope.roleEditBook = book;
                // $scope.removeRoleConfMsg = "Do you want to remove '"+role.name+"' role?";
                $scope.roleName = role.name;
                $scope.modal1 = ModalService.openModal('partials/dashboard_remove_role_conf_healthChk.html', $scope, false, true);
            };
            healthCtrl.removeRoleFromWorkbook = function(book, role) {
                healthCtrl.showLoadingMsg()
                var id=book["d_id"] || book["id"];
                Dashboards.removeRole(id, role.realName).then(function(response) {
                    healthCtrl.logActivity('Healthchk Dashboards', 'Remove Role', '{\''+role+'\'}');
                    healthCtrl.getDetails();
                    healthCtrl.hideLoadingMsg();
                }, function(response) {
                    healthCtrl.getDetails();
                    healthCtrl.hideLoadingMsg();
                });
            };
            healthCtrl.getError = function () {
                return ErrorService.getErrors(healthCtrl.info.application);
            };
            // Returns the no match found message for the given filter.
            healthCtrl.getMessage = function () {
                return GlobalService.getVal('filter_fail');
            };
            healthCtrl.renderHtml = function (html) {
                return $sce.trustAsHtml(html);
            };
            function successHandler(response) {

            }
            function sessionTimeOutHandler(response) {
                if (!healthCtrl.info.sessionTimedOut && response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/timeout/)) {
                    healthCtrl.info.sessionTimedOut = true;
                    ModalService.sessionTimeout();
                    return true;
                }
            }

            healthCtrl.sortItems = function(propertyName) {
                if ($scope.orderProperty === propertyName) {
                    $scope.orderProperty = '-' + propertyName;
                } else if ($scope.orderProperty === '-' + propertyName) {
                    $scope.orderProperty = propertyName;
                } else {
                    $scope.orderProperty = propertyName;
                }
            }

            healthCtrl.filterByHealthCheckCreator = function(type,itemToFilter){
                var array = angular.copy(healthCtrl.copyOfDashBoards);
                if(type === 'All'){
                    healthCtrl.health_check_dashboards = array;
                }else{
                    healthCtrl.health_check_dashboards = $filter('filterArrayItems')(array, type, itemToFilter);
                }
                for(i=0;i<healthCtrl.health_check_dashboards.length;i++){
                    healthCtrl.health_check_dashboards[i].gDUser = healthCtrl.getBookOwnerName(healthCtrl.health_check_dashboards[i]);
                    healthCtrl.health_check_dashboards[i].visibility = healthCtrl.health_check_dashboards[i].dashboardSecurityInfo.is_public;
                    healthCtrl.health_check_dashboards[i].gDOwner = healthCtrl.getBookChangedOwnerName(healthCtrl.health_check_dashboards[i]);
                    healthCtrl.health_check_dashboards[i].gDTs = healthCtrl.changeDateFormate(healthCtrl.health_check_dashboards[i].modified_ts);
                }
            }

            healthCtrl.hideModal = function() {
                healthCtrl.info.tags = "";
                if(healthCtrl.modalInstance){
                    healthCtrl.modalInstance.close('ok');
                }                
            };
            
            healthCtrl.selectAllRole = function () {
                var tempArray = [];
                for(i=0;i<healthCtrl.roles.length;i++){
                    healthCtrl.roles[i].selected = true;
                    tempArray.push(healthCtrl.roles[i].name);
                }
                healthCtrl.info.assignRole = tempArray.toString();                 
            };
            
            healthCtrl.clearAllRole = function () {
                for(i=0;i<healthCtrl.roles.length;i++){
                    healthCtrl.roles[i].selected = false;
                    healthCtrl.info.assignRole = "Select Roles";
                }                 
            };

            healthCtrl.showMsg = function() {
                if(healthCtrl.info.errMsg == ""){
                    return false;
                }else{
                    return true;
                }
            };
            healthCtrl.getHealthDashLength = function() {
                var count=0;
                for(var i=0;i<healthCtrl.health_check_dashboards.length;i++){
                    if(healthCtrl.showDashBoard(healthCtrl.health_check_dashboards[i],'dashLevel')){
                        count++;
                    }
                }
                return count;
            }
            
            healthCtrl.getAllTagsNameOfSelectedDashboards = function() {
                var tags = [], tmp=[], list;
                list = healthCtrl.getAllDashboards();
                for(var i=0; i < list.length; i++) {
                    tmp=[];
                    if(list[i]['selected'] && list[i]["tags"]){
                        tmp = list[i]["tags"];
                    }
                    if(list[i]['selected'] && list[i]["tag"]){
                        tmp = list[i]["tag"];
                    }
                    for(var j=0;j<tmp.length;j++){
                        tags.push(tmp[j]);
                    }                        
                }
                //remove duplicate
                tags = healthCtrl.unique(tags);
                return tags;
            } 
            
            healthCtrl.isAlphaNumeric =  function(){
                var all_tags_name = healthCtrl.info.tags.split(/,|\s/), duplicateTagname = [], error=false;
                if(healthCtrl.info.tags == ""){
                    healthCtrl.info.errMsg = "";
                    return;
                }
                var allTags = healthCtrl.getAllTagsNameOfSelectedDashboards();
                for(var j=0; j< all_tags_name.length; j++){
                    var tag_name = all_tags_name[j];
                    if(tag_name == ""){
                        continue;
                    }else if(tag_name.length > healthCtrl.info.tag_max_characters){
                        error = true;
                        healthCtrl.info.errMsg = GlobalService.getVal('dashboard_tagname_max_len');
                        return;
                    }else if(!tag_name.match(/^[0-9a-zA-Z]+$/)){
                        error = true;
                        healthCtrl.info.errMsg = GlobalService.getVal('dashboard_tagname_special_char');
                        return;
                    }                    
                    //check for duplicate
                    for(var i=0; i < allTags.length;i++){
                        if(allTags[i] == tag_name){
                            error = true;
                            duplicateTagname.push(tag_name);
                        }
                    }
                }
                if(duplicateTagname.length > 0){
                    healthCtrl.info.errMsg = GlobalService.getVal('dashboard_tagbname_duplicate') + duplicateTagname.join(', ');
                    return;
                }else if(!error){
                    healthCtrl.info.errMsg = "";
                    return;
                }
            
            }; 
            


            healthCtrl.openTagSubscription = function () {
                healthCtrl.info.tagLoading = true;
                healthCtrl.info.allTagaSelected = false;
                healthCtrl.info.tagUnsubscribeBtn = true;
                healthCtrl.info.tagSubscribeBtn = true;
                //getPredefinedTagList
                $scope.modalInstance = ModalService.openModal('partials/dashboards/tagSubscription.html', $scope, "gb-tag-subscription-modal", true,'static');
                Dashboards.getPredefinedTagList().then(function (response) {
                    healthCtrl.info.pretagList = _.sortBy(response.data.Data, 'tag_name').map(function (t,i) { 
                        t.selected = false; 
                        return t;
                     });
                    healthCtrl.info.tagLoading = false;
                   
                }, function (response) {
                    healthCtrl.info.pretagList = [];
                    healthCtrl.info.tagLoading = false;
                    console.error("Unable to load templates");
                    if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
                        GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
                        $scope.info.addRuleMsg = {
                            type: 'failure',
                            msg: GlobalService.getVal('rulesMsgs')['h2_down_msg']
                        };
                    }
                });
            }
            
            healthCtrl.reloadTags = function () {
                Dashboards.getPredefinedTagList().then(function (response) {
                    healthCtrl.info.pretagList = response.data.Data.map(function (t) { t.selected = false; return t });
                    healthCtrl.info.tagLoading = false;
                }, function (response) {
                    healthCtrl.info.pretagList = [];
                    healthCtrl.info.tagLoading = false;
                    console.error("Unable to load templates");
                    if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
                        GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
                        $scope.info.addRuleMsg = {
                            type: 'failure',
                            msg: GlobalService.getVal('rulesMsgs')['h2_down_msg']
                        };
                    }
                });
            }
            

            //select/unselect all tags function
            healthCtrl.selectAllTags = function(){
                if(healthCtrl.info.allTagaSelected){
                    healthCtrl.info.pretagList.forEach(function(tag){
                    tag.selected = true;
                    }) 
                }
                else{
                    healthCtrl.info.pretagList.forEach(function(tag){
                        tag.selected = false;
                    }) 
                }
                healthCtrl.updateBtnStatus();
            }



            healthCtrl.subscribeTag = function (tag, type, bulk) {
                healthCtrl.info.tagLoading = true;
                if (bulk) {
                    var subscribePayload = {
                        "tag_ids": healthCtrl.getBulkTagId(type),
                        "emailId": metaDataService.getUserEmail()
                    }
                } else {
                    var subscribePayload = {
                        "tag_ids": [tag.tag_id],
                        "emailId": metaDataService.getUserEmail()
                    }
                }
                // add tag subscription
                Dashboards.subscribeUnsubscribeTag(subscribePayload, type).then(function (response) {

                    healthCtrl.info.addTemplateMsg = {
                        type: 'success',
                        msg: type ? "subscribed successfully" : "unsubscribed successfully"
                    };
                    setTimeout(function () { healthCtrl.clearMessage(); }, 3000);
                    healthCtrl.reloadTags();
                    healthCtrl.logClinsightsActivity(healthCtrl.healthcheckModules.subscription ,type ? "Subscribe Tag" : "Unsubscribe Tag", JSON.stringify(subscribePayload));
                }, function (response) {
                    console.error("Unable to subscribe");
                    healthCtrl.info.addTemplateMsg = {
                        type: 'failure',
                        msg: type ? "failed to subscribe" : "failed to Unsubscribe"
                    };
                    healthCtrl.info.tagLoading = false;
                    setTimeout(function () { healthCtrl.clearMessage(); }, 3000);
                    if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
                        GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
                        $scope.info.addRuleMsg = {
                            type: 'failure',
                            msg: GlobalService.getVal('rulesMsgs')['h2_down_msg']
                        };
                    }
                });
            }


            healthCtrl.getBulkTagId = function (type) {
                if (type) {
                    var selectedTagsIds = healthCtrl.info.pretagList.filter(function (i) {
                        return ((i.rules_subscribed === 0 && i.enabled_rules > 0) || (i.enabled_rules > i.rules_subscribed) && i.rules_subscribed != 0) && i.selected
                    }).map(function (tag) { return tag.tag_id })
                } else {
                    var selectedTagsIds = healthCtrl.info.pretagList.filter(function (i) {
                        return (((i.rules_subscribed === i.enabled_rules) && i.enabled_rules != 0) || (i.enabled_rules > i.rules_subscribed) && i.rules_subscribed != 0) && i.selected
                    }).map(function (tag) { return tag.tag_id })
                }

                return selectedTagsIds;
            }


            //update button status
            healthCtrl.updateBtnStatus = function () {
                if (healthCtrl.info.pretagList.filter(function (i) {
                    return ((i.rules_subscribed === 0 && i.enabled_rules > 0) || (i.enabled_rules > i.rules_subscribed) && i.rules_subscribed != 0) && i.selected
                }).length > 0) {
                    healthCtrl.info.tagSubscribeBtn = false;
                } else {
                    healthCtrl.info.tagSubscribeBtn = true
                }

                if (healthCtrl.info.pretagList.filter(function (i) {
                   return (((i.rules_subscribed === i.enabled_rules) && i.enabled_rules != 0) || (i.enabled_rules > i.rules_subscribed) && i.rules_subscribed != 0) && i.selected
                }).length > 0) {
                    healthCtrl.info.tagUnsubscribeBtn = false;
                } else {
                    healthCtrl.info.tagUnsubscribeBtn = true
                }
            }

            //Start of Notification code

           

           

            //Initialize notification
            $scope.initNotification = function () {
                //create pagination object
                healthCtrl.info.noti_pagination = {};
                healthCtrl.info.noti_pagination.pageSize = GlobalService.getVal('notification_page_size');
                healthCtrl.info.noti_pagination.startIndex = 0;
                healthCtrl.info.noti_pagination.endIndex = healthCtrl.info.noti_pagination.pageSize;
                healthCtrl.info.noti_pagination.total = 0;
                healthCtrl.info.noti_pagination.paginationText = "showing " + (healthCtrl.info.noti_pagination.startIndex+1) + " to " + healthCtrl.info.noti_pagination.endIndex + " of " + healthCtrl.info.noti_pagination.total
                healthCtrl.info.noti_pagination.unreadFilter = true;
                healthCtrl.info.noti_pagination.readFilter = false;
                healthCtrl.info.noti_pagination.allFilter = false;

                //remember scroll position
                healthCtrl.info.scrollPosition = 0;

                //stores the unread notification actual cout to display in tooltip
                healthCtrl.info.unreadCount_actual = 0

            }

             //stores the unread notification count
             healthCtrl.info.unreadCount = 0
             
            //filter
            healthCtrl.info.noti_filter = {
                unread: false,
                read: false,
                all: true
            }

            //function to update the unread notification count
            healthCtrl.updateUnreadCount = function (res) {
                if(healthCtrl.info.noti_filter.unread){
                    var count = res.data.Count;
                    healthCtrl.info.unreadCount = count > 999 ? "999+" : count;
                    healthCtrl.info.unreadCount_actual = count > 999 ? count : healthCtrl.info.unreadCount;
                }
                if(healthCtrl.info.noti_filter.all || healthCtrl.info.noti_filter.read){
                     //calling this to get unread count to show on icon
                Dashboards.getNotificationList(0, GlobalService.getVal('notification_page_size'), false).then(function (response) {
                    var count = response.data.Count;
                    healthCtrl.info.unreadCount = count > 999 ? "999+" : count;
                    healthCtrl.info.unreadCount_actual = count > 999 ? count : healthCtrl.info.unreadCount;
                }, function (response) {

                    console.error("Unable to load templates");
                    if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
                        GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
                        $scope.info.addRuleMsg = {
                            type: 'failure',
                            msg: GlobalService.getVal('rulesMsgs')['h2_down_msg']
                        };
                    }
                });
                }
               
            }

            //set local time from UTC
            healthCtrl.setNotificationTime = function (time) {
                var local = new Date(time);
                if (new Date().getDate() == local.getDate() && (new Date().getMonth() + 1) == (local.getMonth() + 1)) {
                    return "Today at " + local.getHours() + ":" + local.getMinutes() + ":" + local.getSeconds();
                } else {
                    return local.getDate() + "-" + (local.getMonth() + 1) + '-' + local.getFullYear() + " " + local.getHours() + ":" + local.getMinutes() + ":" + local.getSeconds();
                }
            }




            healthCtrl.fetchNotification = function (flag, callback) {
                !flag && $scope.initNotification();
                healthCtrl.info.notificationLoading = true;
                healthCtrl.info.deletebtnStatus = true;
                healthCtrl.info.readbtnStatus = true;
                healthCtrl.info.allNotificationSelected = false;
                healthCtrl.info.selectedTagsCount = 0
                healthCtrl.info.notificationList = [];
                var st = healthCtrl.info.noti_pagination.startIndex;
                var et = healthCtrl.info.noti_pagination.endIndex;
                var ft = null;
                if (healthCtrl.info.noti_filter.unread) {
                    ft = false;
                }
                else if (healthCtrl.info.noti_filter.read) {
                    ft = true
                }

                healthCtrl.notiMapFn = function (n) {
                    n.selected = false;
                    n.display_time = healthCtrl.setNotificationTime(n.sent_time);
                    n.alert_filter = n.alert_filter.length? JSON.parse(n.alert_filter): {};
                    n.readLessText = $sce.trustAsHtml(n.body.substring(0,115) + "...");
                    n.moreBtn =  true;
                    n.lessBtn = false;
                    n.details = $sce.trustAsHtml( n.body + " <br />  " + n.details.replace(/\n/g, " <br />  "));
                    return n;
                }

                //getNotificationList
                Dashboards.getNotificationList(st, et, ft).then(function (response) {
                    
                    if (flag) {
                        healthCtrl.info.notificationList = [];
                        healthCtrl.info.notificationList = response.data.Data.map(healthCtrl.notiMapFn)
                    } else {
                        healthCtrl.info.notificationList = healthCtrl.info.notificationList.map(function (n) {
                            n.selected = false;
                            return n;
                        }).concat(response.data.Data.map(healthCtrl.notiMapFn));
                        
                    }
                    
                    healthCtrl.info.noti_pagination.total = response.data.Count;
                    healthCtrl.updatePageinationText();
                    healthCtrl.updateUnreadCount(response);
                    healthCtrl.showHideNotiLoading(false);
                    callback && callback();
                    setTimeout(function () {
                        flag && healthCtrl.setScrollPosition();
                       
                    })
                    

                }, function (response) {
                    healthCtrl.showHideNotiLoading(false);
                    healthCtrl.showFail();
                    healthCtrl.info.notificationList = [];
                    console.error("Unable to load templates");
                    if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
                        GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
                        $scope.info.addRuleMsg = {
                            type: 'failure',
                            msg: GlobalService.getVal('rulesMsgs')['h2_down_msg']
                        };
                    }
                });
            }



            healthCtrl.getSelectedNotification = function () {
                return healthCtrl.info.notificationList.filter(function (i) {
                    return i.selected;
                })
            }
            //function to select all notification
            healthCtrl.selectallNotification = function () {
                if (healthCtrl.info.allNotificationSelected) {
                    healthCtrl.info.notificationList.forEach(function (tag) {
                        tag.selected = true;
                    })
                }
                else {
                    healthCtrl.info.notificationList.forEach(function (tag) {
                        tag.selected = false;
                    })
                }
                healthCtrl.updateNotificationSelectedCount();
            }

            healthCtrl.getMarkRadPayload = function () {
                return {
                    "notificationIds": healthCtrl.info.notificationList.filter(function (t) {
                        return t.selected && !t.read;
                    }).map(function (item) {
                        return item.notification_id;
                    })
                }
            }

            //single mark read
            healthCtrl.singleMarkRead = function(noti){
                //noti.read = true;
                var payload = {
                    "notificationIds": [noti.notification_id]
                }
                //api call
                healthCtrl.info.notificationLoading = true;
                Dashboards.markReadNotification(payload, true).then(function (response) {
                    healthCtrl.resetPagination()
                    healthCtrl.fetchNotification(false, healthCtrl.showSuccess);
                    healthCtrl.logClinsightsActivity(healthCtrl.healthcheckModules.notification, 
                        'Mark read Notification',  JSON.stringify(payload));
                }, function (response) {
                    healthCtrl.showHideNotiLoading(false);
                    healthCtrl.showFail();
                    console.error("Unable to mark notification as read");
                    if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
                        GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
                        $scope.info.addRuleMsg = {
                            type: 'failure',
                            msg: GlobalService.getVal('rulesMsgs')['h2_down_msg']
                        };
                    }
                });
            }

            //mark read notification
            healthCtrl.markReadNotification = function (singlePayload,flag) {
                if(flag){
                    Dashboards.markReadNotification(singlePayload, true).then(function (response) {
                        healthCtrl.logClinsightsActivity(healthCtrl.healthcheckModules.notification, 'Mark read Notification',  JSON.stringify(singlePayload));
                    }, function (response) {
    
                        console.error("Unable to mark notification as read");
                        if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
                            GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
                            $scope.info.addRuleMsg = {
                                type: 'failure',
                                msg: GlobalService.getVal('rulesMsgs')['h2_down_msg']
                            };
                        }
                    });
                }else{
                healthCtrl.info.notificationLoading = true;
                var markedPayload = healthCtrl.getMarkRadPayload()
                Dashboards.markReadNotification(markedPayload, true).then(function (response) {
                    healthCtrl.resetPagination()
                    healthCtrl.fetchNotification(false, healthCtrl.showSuccess);
                    healthCtrl.logClinsightsActivity(healthCtrl.healthcheckModules.notification, 'Mark read Notification',  JSON.stringify(markedPayload));
                }, function (response) {
                    healthCtrl.showHideNotiLoading(false);
                    healthCtrl.showFail();
                    console.error("Unable to mark notification as read");
                    if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
                        GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
                        $scope.info.addRuleMsg = {
                            type: 'failure',
                            msg: GlobalService.getVal('rulesMsgs')['h2_down_msg']
                        };
                    }
                });
                }
            }

            //delete single notification
            healthCtrl.singleDelete = function(noti){
                var deletePayload = {
                    "notificationIds": [noti.notification_id]
                }
                healthCtrl.deleteNotification(deletePayload);
            }

            healthCtrl.deleteNotification = function (single) {
                healthCtrl.info.notificationLoading = true;
                if(single){
                    var deletePayload = single; 
                }else{
                    var deletePayload = {
                        "notificationIds": healthCtrl.getSelectedNotification().map(function (item) {
                            return item.notification_id;
                        })
                    }
                }
                
                Dashboards.deleteNotification(deletePayload, true).then(function (response) {
                    healthCtrl.resetPagination()
                    healthCtrl.fetchNotification(false, healthCtrl.showSuccess);
                    healthCtrl.logClinsightsActivity(healthCtrl.healthcheckModules.notification,'Notification Deleted', JSON.stringify(deletePayload));
                }, function (response) {
                    healthCtrl.showHideNotiLoading(false);
                    healthCtrl.showFail();
                    console.error("Unable to load templates");
                    if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
                        GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
                        $scope.info.addRuleMsg = {
                            type: 'failure',
                            msg: GlobalService.getVal('rulesMsgs')['h2_down_msg']
                        };
                    }
                });
            }

            //updte selection count
            healthCtrl.updateNotificationSelectedCount = function () {
                healthCtrl.info.selectedNotificationCount = healthCtrl.info.notificationList.filter(function (t) {
                    return t.selected;
                }).length
                if (healthCtrl.info.selectedNotificationCount > 0) {
                    healthCtrl.info.deletebtnStatus = false;
                    healthCtrl.info.readbtnStatus = healthCtrl.info.notificationList.filter(function (t) {
                        return t.selected && !t.read;
                    }).length > 0 ? false : true
                }
                else {
                    healthCtrl.info.deletebtnStatus = true;
                    healthCtrl.info.readbtnStatus = true;
                }
            }

            //function to clear noti message
            healthCtrl.clearMessage = function () {
                healthCtrl.info.successMsg = "";
                healthCtrl.info.errorMsg = "";
                healthCtrl.info.addTemplateMsg = {};

            };

            //funcion to open log alert dashboarf on click of notification
            healthCtrl.notificationClick = function (notification) {
                if(!notification.read){
                    notification.read = true;
                    var payload = {
                        "notificationIds": [notification.notification_id]
                    }
                    healthCtrl.markReadNotification(payload,true);
                    healthCtrl.loadUnreadCountNotification();

                }
                healthCtrl.saveScrollPosition();
                healthCtrl.info.notificationLoading = true;
                healthCtrl.showLoadingMsg();
                // //intentional
                console.log(notification);
                var clin_url = new URL(GlobalService.getVal('clinsightReportUrl'))
                var urlParams = new URLSearchParams(clin_url.search);

                //replace rd report value and fill query search object
                var url_obj = {
                }
                urlParams.forEach(function (value, key) {
                    if (key == "rdReport") {
                        url_obj[key] = GlobalService.getVal("healthcheck_rd_report");
                    } else {
                        url_obj[key] = value;
                    }
                });
                Object.keys(notification.alert_filter).forEach(function (key) {

                    url_obj[key] = notification.alert_filter[key]

                })
                //create custom report url for clinsights
                var url_pad = Object.keys(url_obj).reduce(function (acc, key) {
                    var value = url_obj[key];
                    if (key == "rdReport") {
                        acc = acc + key + "=" + value
                    } else {
                        acc = acc + "&" + key + "=" + value
                    }
                    return acc;
                }, "?")

                clin_url.search = url_pad;
                if (healthCtrl.summaryDash.length > 0) {
                    console.log(clin_url.href);
                    healthCtrl.summaryDash[0].reports[0].r_link = clin_url.href
                    document.getElementById('health-dashboardiframe').contentWindow.location.replace(clin_url.href);
                } else {
                    //intentional
                    console.lg("error: no summary /clinsights dasboard available");
                }
                setTimeout(function () {
                    healthCtrl.hideLoadingMsg();
                },3000)
                

                healthCtrl.info.notificationLoading = false;
                healthCtrl.logClinsightsActivity(healthCtrl.healthcheckModules.notification, 'Notification clicked', JSON.stringify(notification));
            }

            //filter change function
            healthCtrl.notificationFilterChange = function (keyName, value) {

                  for (var key in healthCtrl.info.noti_filter) {
                    healthCtrl.info.noti_filter[key] = (key === keyName) ? value : false;
                  }
                  if (!Math.max.apply(null, Object.values(healthCtrl.info.noti_filter))) healthCtrl.info.noti_filter.unread = true;
                


                healthCtrl.resetPagination()
                healthCtrl.fetchNotification();
                healthCtrl.logClinsightsActivity(healthCtrl.healthcheckModules.notification, 'Notification filter changed', JSON.stringify(healthCtrl.info.noti_filter));
            };

            //function to load more notification
            healthCtrl.showMore = function () {
                healthCtrl.saveScrollPosition();
                healthCtrl.info.noti_pagination.endIndex = healthCtrl.getPageEndIndex();
                healthCtrl.updatePageinationText();
                healthCtrl.fetchNotification(true);
            };

            //reset pagination
            healthCtrl.resetPagination = function () {
                healthCtrl.info.noti_pagination.startIndex = 0;
                healthCtrl.info.noti_pagination.endIndex = GlobalService.getVal('notification_page_size');
            }

            //function to get page end index
            healthCtrl.getPageEndIndex = function () {
                if (healthCtrl.info.noti_pagination.endIndex + healthCtrl.info.noti_pagination.pageSize > healthCtrl.info.noti_pagination.total) {
                    return healthCtrl.info.noti_pagination.total;
                } else {
                    return healthCtrl.info.noti_pagination.endIndex + healthCtrl.info.noti_pagination.pageSize
                }
            }

            //save scroll position
            healthCtrl.saveScrollPosition = function () {
                var el = document.getElementsByClassName("notification-main-container");
                healthCtrl.info.scrollPosition = el[0].scrollTop;
            }

            //set scroll position
            healthCtrl.setScrollPosition = function () {
                var el = document.getElementsByClassName("notification-main-container");
                el[0].scrollTop = healthCtrl.info.scrollPosition;
            }

            // reset scroll position
            healthCtrl.resetScrollPosition = function () {
                var el = document.getElementsByClassName("notification-main-container");
                el[0].scrollTop = 0;
            }

            
            // update pagination text
            healthCtrl.updatePageinationText = function () {
                healthCtrl.info.noti_pagination.paginationText = "showing " + (healthCtrl.info.noti_pagination.startIndex+1) + " to " 
                + ( healthCtrl.info.noti_pagination.endIndex < healthCtrl.info.notificationList.length ? healthCtrl.info.noti_pagination.endIndex :healthCtrl.info.notificationList.length) + 
                " of " + healthCtrl.info.noti_pagination.total
            }
            healthCtrl.backToTop = function(){
                healthCtrl.resetScrollPosition();
            }

            //function to show hide notification loading
            healthCtrl.showHideNotiLoading = function(flag){
                healthCtrl.info.notificationLoading = flag;
            }

            //foreground notification broadcast to call unread api and update the count
            $scope.$on('updateUnreadCount', function() {
                healthCtrl.loadUnreadCountNotification();
            });

            //function to show hide notification loading
            healthCtrl.showSuccess = function () {
                healthCtrl.info.notiSuccess = true;

                setTimeout(function () {
                    healthCtrl.info.notiSuccess = false;
                }, 1900);
            }

           
            //function to show hide notification loading
            healthCtrl.showFail = function () {
                healthCtrl.info.notifail = true;

                setTimeout(function () {
                    healthCtrl.info.notifail = false;
                }, 1900);
            }

            //log show details activity
            healthCtrl.logShowDetails = function(noti){
                healthCtrl.logClinsightsActivity(healthCtrl.healthcheckModules.notification, 'Notification show details', JSON.stringify(noti));
            }

            healthCtrl.getMenuList = function(){
                Dashboards.getMenuList().then(function(response){
                    var currentSelectedDashboard = response.data.Data.clinsights_landing_page_report_url;
                    healthCtrl.menuList = response.data.Data.clinsights_menu;
                    healthCtrl.flatMenuList = flat(healthCtrl.menuList);
                    healthCtrl.info.clinsights_base_url = response.data.Data.clinsights_base_url;
                    healthCtrl.info.clinsights_alert_msg = response.data.Data.clinsights_alert_msg;
                    healthCtrl.menuList.map(function(item){
                        recurse(item);
                    })
                    getParentNode(currentSelectedDashboard);
                })
            }
            
            recurse = function(node) {
                for(var i = 0, count = node.children.length; i < count; i++) {
                  node.expanded = false;
                  recurse(node.children[i]);
                }
            } 

            flat = function(array) {
                var result = [];
                array.forEach(function (a) {
                  result.push(a);
                  if (Array.isArray(a.children)) {
                    result = result.concat(this.flat(a.children));
                  }
                }, this);
                return result;
            }

            getParentNode = function(item){
                healthCtrl.flatMenuList.map(function(menuItem){
                  if(item === menuItem.report_url){
                    healthCtrl.currentSelectedDashboardObj = menuItem;
                  }
                })
              }

            healthCtrl.showSubMenu = function(item, mainItem){
                if(item.disable){
                    ModalService.alertBox({msg: healthCtrl.info.clinsights_alert_msg});
                    return;
                }
                if(item.children.length){
                    item.expanded = !item.expanded;
                }
                // healthCtrl.menuList.map(function(menuItem){
                //   if((menuItem.name !== item.name && menuItem.id !== item.parent_node_id)){
                //     recurse(menuItem)
                //   }
                // })
                if(item.report_url){
                    getParentNode(item.report_url);
                    if(item.parent_node_id === mainItem.id){
                        healthCtrl.mainSelectedCategory = mainItem;
                    }
                    var baseUrl = healthCtrl.info.clinsights_base_url;
                    var reportUrl = item.report_url;
                    if(baseUrl.includes('?cust_name=')){
                        healthCtrl.summaryDash[0].reports[0].r_link = baseUrl +"&rdReport="+reportUrl;
                    }else{
                        healthCtrl.summaryDash[0].reports[0].r_link = baseUrl +"?rdReport="+reportUrl;
                    } 
                }
            }
        }]);

angular.module('gbApp.services.dashboards', []).factory('Dashboards', ['$http', 'GlobalService', 'metaDataService',
    function ($http, GlobalService, metaDataService) {
        var dashboards = [];
        return {
            setDashboard: function(list, book){
                dashboards = list;
                if(book && book.length){
                    dashboards = dashboards.concat(book);
                }
            },
            updateDashboards: function(list){
                dashboards = list;
            },
            getDashboards : function(){
                return dashboards;
            },
            getRoles: function () {
                var umsDomain = GlobalService.getVal('umsDomain');
                return $http.get(umsDomain + '/admin/role/names/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'), {
                    cache: false
                });
            },
            setSummaryDash: function (d_id, r_id) {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                var url = infoserverDomain + '/dashboards/set/summary/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + d_id + '/' + r_id;
                return $http.post(url);
            },
            getRolesHealthChk: function () {
                var umsDomain = GlobalService.getVal('umsDomain');
                return $http.get(umsDomain + '/admin/role/healthcheck/names/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'), {
                    cache: false
                });
            },
            allDetails: function () {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                var user = metaDataService.getUser().email.toLowerCase();
                return $http.get(infoserverDomain + '/dashboards/all/details/merged/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/NA/' + user + '/NA?tableau=false', {
                    cache: false
                });
            },
            showUsers: function () {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                return $http.get(infoserverDomain + '/dashboards/users/list/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'), {
                    cache: false
                });
            },
            getTableauAdmin: function () {
                var umsDomain = GlobalService.getVal('umsDomain');
                return $http.get(umsDomain + '/user/tableauadmin/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'), {
                    cache: false
                });
            },
            getLogiAdmin: function () {
                var umsDomain = GlobalService.getVal('umsDomain');
                return $http.get(umsDomain + '/user/dashboardadmin/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'), {
                    cache: false
                });
            },
            getSchedulingData: function (d_id,r_id) {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                return $http.get(infoserverDomain + '/dashboards/details/scheduling/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + d_id + '/' + r_id, {
                    cache: false
                });
            },
            updateSceduling: function (param) {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                var url = infoserverDomain + '/dashboards/add/scheduling/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + param.d_id + '/' + param.r_id;
                return $http.post(url, param);
            },
            changeVisibility: function (param) {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                var url = infoserverDomain + '/dashboards/update/visbility/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema');
                return $http.post(url, param);
            },
            updateOwner: function (param) {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                var url = infoserverDomain + '/dashboards/update/owner/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema');
                return $http.post(url, param);
            },
            getEndCustomers: function (user) {
                var umsDomain = GlobalService.getVal('umsDomain');
                if(user){
                    return $http.get(umsDomain + '/healthcheck/ec/details/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '?fnCallSrcOpt=ADMIN_CONSOLE', {
                        cache: true
                    });
                }else{
                    return $http.get(umsDomain + '/healthcheck/ec/details/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '?fnCallSrcOpt=ADMIN_CONSOLE', {
                        cache: true
                    });
                }
            },
            addRolesToDashboards: function (param) {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                var url = infoserverDomain + '/dashboards/add/role/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema');                
                return $http.post(url, param);
            },
            addTagsToDashboards: function (param) {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                var url = infoserverDomain + '/dashboards/add/tag/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema');                
                return $http.post(url, param);
            },
            removeRole : function(dId, role) {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                return $http.post(infoserverDomain + '/dashboards/remove/role/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' +dId + '/' +role);
            },
            removeTag : function(dId, tag) {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                return $http.post(infoserverDomain + '/dashboards/remove/tag/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' +dId + '/' +tag);
            },
	
            getSecurityToken: function () {
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                return $http.get(infoserverDomain + '/dashboards/trusted/ticket/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'), {
                    cache: false
                });
            },

            //Get predefined tag list
            getPredefinedTagList: function () {
                //var url = 'stat/tagList.json';
                var user = metaDataService.getUser().email.toLowerCase();
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                var url = infoserverDomain + '/rules/tags/rules/list/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema')+ '/' + user;
                return $http.get(url);

            },

            //subscribe tag
            subscribeUnsubscribeTag: function(payload, type){
                var infoserverDomain = GlobalService.getVal('infoserverDomain');
                var url = infoserverDomain + '/tags/subscription/bulk_tags_subscription/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema')+ '/' + type;
                return $http.post(url,payload);
            },

            //fetch notification list
            getNotificationList: function (st, et, ft) {
                //var url = 'stat/tagList.json';
                var user = metaDataService.getUser().email.toLowerCase();
                var umsDomain = GlobalService.getVal('umsDomain');
                var delete_filter = "&deleted=false";
                if(ft == null){
                    var url = umsDomain + '/notification/list/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema')+ '/' + user  + "/" + st + "/"  + et + "?" + delete_filter;
                }else{
                    var url = umsDomain + '/notification/list/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema')+ '/' + user  + "/" + st + "/"  + et + "?read=" + ft + delete_filter;
                }
                
                return $http.get(url);

            },

            
            //markReadNotification 
            markReadNotification: function(payload,type){
                var user = metaDataService.getUser().email.toLowerCase();
                var umsDomain = GlobalService.getVal('umsDomain');
                var url = umsDomain + '/notification/bulk_update/read/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema')+ '/' + user +'/' + type;
                return $http.post(url,payload);
            },

             //Delete Notification 
             deleteNotification: function(payload,type){
                var user = metaDataService.getUser().email.toLowerCase();
                var umsDomain = GlobalService.getVal('umsDomain');
                var url = umsDomain + '/notification/bulk_update/delete/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema')+ '/' + user +'/' + type;
                return $http.post(url,payload);
            },

            getMenuList: function(){
                var user = metaDataService.getUser().email.toLowerCase();
                var umsDomain = GlobalService.getVal('umsDomain');
                var url = umsDomain + '/cs/mps/menu/tree/' +  GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + "?user=" + user;
                return $http.get(url);
            }
        };
    }]);

/* Controllers */

// Controller that holds the entire model for the logvault app.
angular.module('gbApp.controllers.logvault', ['gbApp.services.logvault', 'gbApp.services.analytics', 'gbApp.globals', 'ngTable'])
 .controller('LogVaultCtrl', ['$scope', 'metaDataService' , '$filter', 'InstanceHandler', 'UserTrackingService', 'LogVaultService', 'Dashboards', 'ngTableParams', 'GlobalService', 'AppService', 'ModalService', '$cookies', '$window', '$timeout', '$interval','ExplorerService', 'NavigationService', 'MenuService', 'DefaultFilterService', 'SectionsMetaService', 'ConfigDiffService', 'RulesService', 'RulesTestWithLogvault', '$sce',
 function($scope, metaDataService, $filter,  InstanceHandler, UserTrackingService, LogVaultService, Dashboards, ngTableParams, GlobalService, AppService, ModalService, $cookies, $window, $timeout, $interval, ExplorerService, NavigationService, MenuService, DefaultFilterService, SectionsMetaService, ConfigDiffService, RulesService, RulesTestWithLogvault, $sce) {
    $scope.d3Data = [];
    $scope.todayDate = metaDataService.getTodayDate();
    $scope.enableFacetStats = GlobalService.getVal('enableFacetStats');
    $scope.d3Attr = {
        height: 180,
        width: 800
    };
    var htmconst_url = "../config/constants/logvault_constants.json";
    $.get(htmconst_url, function (response, status) {
        $scope.htmconstdata = response;
    });
    $scope.reloadGraph = function(data) {
        var fdata = [], chartLabel = "";
        if(!data || !data['obs_date'] || !data['obs_date'].counts || data['obs_date'].counts.length == 0) { 
            $scope.d3Data = [];
            return;
        }
        if (data['obs_date']['gap'].indexOf("YEAR") >= 0) {            
            chartLabel = "Year View (UTC)";
            for ( i = 0; i < data['obs_date'].counts.length / 2; ++i) {
                t_data = {};
                t_date = new Date(data['obs_date'].counts[(i * 2)].replace(/-/g, "/").replace('T', ' ').substring(0, 19));
                t_data['name'] = t_date.getFullYear().toString();
                t_data['value'] = data['obs_date'].counts[(i * 2) + 1];
                t_data['link'] = "j-drillDown-" + data['obs_date'].counts[(i * 2)];
                t_data['title'] = chartLabel;
                fdata.push(t_data);
            }
        }else if (data['obs_date']['gap'].indexOf("MONTH") >= 0) {
            chartLabel = "Month View (UTC)";
            for ( i = 0; i < data['obs_date'].counts.length / 2; ++i) {
                t_data = {};
                t_date = new Date(data['obs_date'].counts[(i * 2)].replace(/-/g, "/").replace('T', ' ').substring(0, 19));
                t_data['name'] = t_date.getFullYear() + "-" + t_date.getMonthName().substring(0, 3);
                t_data['value'] = data['obs_date'].counts[(i * 2) + 1];
                t_data['link'] = "j-drillDown-" + data['obs_date'].counts[(i * 2)];
                t_data['title'] = chartLabel;
                fdata.push(t_data);
            }
        }else if (data['obs_date']['gap'].indexOf("DAY") >= 0) {
            chartLabel = "Day of Month View (UTC)";
            for ( i = 0; i < data['obs_date'].counts.length / 2; ++i) {
                t_data = {};
                t_date = new Date(data['obs_date'].counts[(i * 2)].replace(/-/g, "/").replace('T', ' ').substring(0, 19));
                t_data['name'] = (t_date.getDate() > 9 ? t_date.getDate() : "0" + t_date.getDate()) + " " + t_date.getMonthName().substring(0, 3);
                t_data['value'] = data['obs_date'].counts[(i * 2) + 1];
                t_data['link'] = "j-drillDown-" + data['obs_date'].counts[(i * 2)];
                t_data['title'] = chartLabel;
                fdata.push(t_data);
            }
        }else if (data['obs_date']['gap'].indexOf("HOUR") >= 0) {
            chartLabel = "Hours View (UTC) (HH:MM Month-Date)";
            for ( i = 0; i < data['obs_date'].counts.length / 2; ++i) {
                t_data = {};
                var strDate = data['obs_date'].counts[(i * 2)].replace(/-/g, "/").replace('T', ' ').replace('Z', '');
                t_date = new Date(strDate);
                t_data['name'] = (t_date.getHours() > 9 ? t_date.getHours() : "0" + t_date.getHours()) + ":" + (t_date.getMinutes() > 9 ? t_date.getMinutes() : "0" + t_date.getMinutes()) + " " + t_date.getMonthName().substring(0, 3) + " " + t_date.getDate();
                t_data['value'] = data['obs_date'].counts[(i * 2) + 1];
                t_data['link'] = "j-drillDown-" + data['obs_date'].counts[(i * 2)];
                t_data['title'] = chartLabel;
                fdata.push(t_data);
            }
        }else if (data['obs_date']['gap'].indexOf("MINUTES") >= 0) {
            chartLabel = "Minutes View (UTC) (HH:MM)";
            for ( i = 0; i < data['obs_date'].counts.length / 2; ++i) {
                t_data = {};
                var strDate = data['obs_date'].counts[(i * 2)].replace(/-/g, "/").replace('T', ' ').replace('Z', '');
                t_date = new Date(strDate);                
                var d_name = (t_date.getHours() > 9 ? t_date.getHours() : "0" + t_date.getHours()) + ":" + (t_date.getMinutes() > 9 ? t_date.getMinutes() : "0" + t_date.getMinutes());                
                t_data['name'] = d_name;
                t_data['value'] = data['obs_date'].counts[(i * 2) + 1];
                t_data['link'] = "j-drillDown-" + data['obs_date'].counts[(i * 2)];
                t_data['title'] = chartLabel;
                fdata.push(t_data);
            }
        } else if (data['obs_date']['gap'].indexOf("SECONDS") >= 0) {
            chartLabel = "Seconds View (UTC) (MM:SS)";
            for ( i = 0; i < data['obs_date'].counts.length / 2; ++i) {
                t_data = {};
                var strDate = data['obs_date'].counts[(i * 2)].replace(/-/g, "/").replace('T', ' ').replace('Z', '');
                t_date = new Date(strDate);                
                var d_name = (t_date.getSeconds() > 9 ? t_date.getSeconds() : "0" + t_date.getSeconds());                
                t_data['name'] = d_name;
                t_data['value'] = data['obs_date'].counts[(i * 2) + 1];
                t_data['title'] = chartLabel;
                fdata.push(t_data);
            }
        }else {
             chartLabel = "Year View (UTC)";
            for ( i = 0; i < data['obs_date'].counts.length / 2; ++i) {
                t_data = {};
                t_date = new Date(data['obs_date'].counts[(i * 2)].replace(/-/g, "/").replace('T', ' ').substring(0, 19));
                t_data['name'] = t_date;
                t_data['value'] = data['obs_date'].counts[(i * 2) + 1];
                t_data['link'] = "j-drillDown-" + data['obs_date'].counts[(i * 2)];
                t_data['title'] = chartLabel;
                fdata.push(t_data);
            }
        }        
        //reverse it for asceding oredr
        fdata.reverse();
         
        $scope.d3Data = fdata;
        var stop =  $interval(function(){
             var cntrHeight = d3.select(".d3-chart-container").node().getBoundingClientRect().height;
             if(cntrHeight){
                $interval.cancel(stop);
                $scope.d3BarRender();
             }
        }, 100); 
        $window.onresize = function() {
            $scope.svg.selectAll("rect").remove();
            return $scope.d3BarRender();
        };
    };
  
    $scope.d3BarRender = function() {
        var data = $scope.d3Data;
        if(ExplorerService.getDrillDown()){
            $scope.svg.selectAll("rect").remove();
        }
        if($scope.svg === undefined){
            d3v4.selectAll(".d3-chart-container svg").remove();
            $scope.d3margin = {top: 30, right: 30, bottom: 20, left: 80},
            $scope.d3width = d3v4.select(".d3-chart-container").node().getBoundingClientRect().width - $scope.d3margin.left - $scope.d3margin.right,
            $scope.d3height = d3v4.select(".d3-chart-container").node().getBoundingClientRect().height - $scope.d3margin.bottom - $scope.d3margin.top;
            $scope.svg = d3v4.select(".d3-chart-container")
            
            .append("svg")
                .attr("width", $scope.d3width + $scope.d3margin.left + $scope.d3margin.right)
                .attr("height", $scope.d3height + $scope.d3margin.top + $scope.d3margin.bottom)
            .append("g")
                .attr("transform",
                    "translate(" + $scope.d3margin.left + "," + $scope.d3margin.top + ")");
            // Initialize the X axis
            $scope.x = d3v4.scaleBand()
                .range([ 0, $scope.d3width ])
                .padding(0.2);
            $scope.xAxis = $scope.svg.append("g")
                .attr("transform", "translate(0," + $scope.d3height + ")").attr("class", "myXaxis");
            $scope.svg.append("text")
            .attr("text-anchor", "end")
            .attr("transform", "rotate(-90)")
            .attr("y", -$scope.d3margin.left+15)
            .attr("x", -$scope.d3margin.top)
            .text("Count")
            .style("font-size", "10px")

            
            // Initialize the Y axis
            $scope.y = d3v4.scaleLinear()
                .range([ $scope.d3height, 0]);
            $scope.yAxis = $scope.svg.append("g")
                .attr("class", "myYaxis")
        }
        if(data.length == 0) {
            d3v4.selectAll(".d3-chart-container svg").remove();
            $scope.svg = undefined;
            d3v4.select(".d3-chart-container")
            .append("svg")
                .attr("width", $scope.d3width + $scope.d3margin.left + $scope.d3margin.right)
                .attr("height", $scope.d3height + $scope.d3margin.top + $scope.d3margin.bottom)
            .append("g")
                .attr("transform",
                    "translate(" + $scope.d3margin.left + "," + $scope.d3margin.top + ")")
            .append("text")
                .attr("x", ($scope.d3width / 2))             
                .attr("y", ($scope.d3height / 2)) 
                .style("font-size", "12px") 
                .text("No Data Found");
        }else {
            $scope.updateGraphData(data);   
        }
                   
    };
    $scope.updateGraphData = function(data) {
        var maxY = d3v4.max(data, function(d) {
            return d.value;
        });
        if($scope.graphtooltip === undefined){
            $scope.graphtooltip = d3.select("body").append("div").attr("class", "graphtoolTip");
        }
        d3v4.selectAll(".chartTitleLog").remove();
        $scope.svg.attr("class", "chartlevel-"+$scope.info.chartLevel);
        // Update the X axis
      $scope.x.domain(data.map(function(d) { return d.name; }));
      if($scope.x.domain().length <= 10) {
        $scope.xAxis.call(d3v4.axisBottom($scope.x)).selectAll("text").attr("x","0");
      }else if($scope.x.domain().length > 10 && $scope.x.domain().length < 50) {
        $scope.xAxis.call(d3v4.axisBottom($scope.x).tickValues($scope.x.domain().filter(function(d,i){ return !(i%3)}))).selectAll("text").attr("x","0");
      }else {
        $scope.xAxis.call(d3v4.axisBottom($scope.x).tickValues($scope.x.domain().filter(function(d,i){ return !(i%10)}))).selectAll("text").attr("x","0");   
      }
    
      // Update the Y axis
      $scope.y.domain([-(maxY * .02), d3v4.max(data, function(d) { return d.value }) ]);
      $scope.yAxis.transition().duration(1000).call(d3v4.axisLeft($scope.y).tickValues([0, d3v4.max(data, function(d) { return d.value }) - (d3v4.max(data, function(d) { return d.value })*0.6666), d3v4.max(data, function(d) { return d.value }) - (d3v4.max(data, function(d) { return d.value })*0.3333), d3v4.max(data, function(d) { return d.value })]));
      $scope.svg.append("text")
      .attr("x", ($scope.d3width / 2))             
      .attr("y", 0 - ($scope.d3margin.top / 2)) 
      .attr("class", "chartTitleLog")
      .style("font-size", "12px") 
      .text(data[0].title);
      // Create the u variable
      var u = $scope.svg.selectAll("rect").data(data)
      u
        .enter()
        .append("rect").on("click", function(d) {
            if($scope.info.chartLevel != 'SECONDS'){
                $scope.graphtooltip.remove();
                $scope.graphtooltip = undefined;
                drillDown(d.link);
            }
        }) // Add a new rect for each new elements
        .merge(u) // get the already existing elements as well
        .on("mousemove", function(d){
            $scope.graphtooltip
              .style("left", d3v4.event.pageX - 50 + "px")
              .style("top", d3v4.event.pageY - 70 + "px")
              .style("display", "inline-block")
              .html("<small>"+ (d.name) + "</small><br><b>" + (d.value) +"</b>");
            })
            .on("mouseout", function(d){ $scope.graphtooltip.style("display", "none");})
            .attr("x", function(d) { return ($scope.x.bandwidth() + $scope.x(d.name))*-1; })
            .attr("transform","rotate(180)")
            .attr("y", $scope.y(-(maxY * .02))*-1)
            .attr("title", function(d){ return d.value})
        .transition() // and apply changes to all of them
        .duration(1000)
          .attr("width", $scope.x.bandwidth())
          .attr("height", function(d) { if(d.value === 0) {return 0;} else {return $scope.d3height - $scope.y(d.value)}; })
          .attr("fill", "#0079c1");
    
      // If less group in the new dataset, I delete the ones not in use anymore
      u
        .exit()
        .remove()
        $scope.svg.selectAll("rect").attr("class", "cursor-pointer");
        $scope.svg.selectAll("circle").attr("class", "cursor-pointer");
    }
    $scope.timelineGraphDrilDown = [];
 // Defines whether the customDateFilter is being displayed on the UI or not.
    $scope.customDateFilter = true;
    
    $scope.customDateFilterApplied = true;

    // Defines the text that is being displayed if customDateFilter is false.
    $scope.dateRangeFilterName = GlobalService.getVal('customdate');

    // Holds all the facets selected by the user.
    $scope.selectedFacets = {};

    // Holds all the facets selected by the user in the flattened list format.
    $scope.selectedFacetsList = [];

    // Holds the selected file list for download.
    $scope.bundleList = [];

    // Applied facets from the applied view, which can't be removed from the UI.
    $scope.appliedFacets = {};

    // Holder for all the app info
    $scope.info = {};

    // Defines the completion of initial load.
    $scope.info.init = false;

    // Defines a boolean representing error in resultset.
    $scope.info.no_result = false;

    // Defines the uploaded_by field for out of the box filters.
    $scope.info.uploaded_by = null;

    // Defines the file lists for given bundles.
    $scope.info.fileLists = [];

    // Defines whether logvault is in pristine state or not ??
    $scope.info.pristine = true;

    //Defines whether change filter is triggered or not
    $scope.info.changedFilter = false;

    // Holds all the info about the default filter.
    $scope.info.defaultFilterInfo = {};

    // Defines whether NSR is enabled or not from the cookie set on the domain.

    //change this value
    $scope.info.nsr_enabled =  metaDataService.getDomain()["nsr_enabled"];
    
    // Defines whether default data is loaded or not
    $scope.info.resultLoading = true;

    // Defines whether facets are being loaded ??
    $scope.info.facetLoading = true;

    // Defines whether the results are being loaded ??
    $scope.info.dataLoading = true;

    // Defines whether the quick filter is being done or not ??
    $scope.info.quick = null;

    // Defines whether to display the original time or not ??
    $scope.info.showOTime = false;

    // Holds the current selection of from date for the query.
    $scope.info.fromDate = null;

    // Holds the current selection of from time for the query.
    $scope.info.fromTime = {};

    // Holds the current selection of to date for the query.
    $scope.info.toDate = null;

    // Holds the current selection of to time for the query.
    $scope.info.toTime = {};

    // Holds the data for the fushion chart
    $scope.info.fData = [];

    // Holds the boolean defining whether the all config call in completed or not.
    $scope.info.allConfigLoading = true;

    // Holds the default number of days for the range.
    $scope.info.default_days = 0;

    // Holds the default fields to be displayed in the results.
    $scope.info.fields = [];

    // Holds the current chart level
    $scope.info.chartLevel = "YEAR";

    // Holds the default level for the chart based on default days.
    $scope.info.defaultLevel = "YEAR";

    // Counts the number of times refresh is called.
    $scope.info.refCount = 0;
    
    $scope.info.dashboardsLoadCount = 0;

    //Defines whether any default saved filter is selected or not
    $scope.info.defaultFilterSelected = false;

    // Defines whether logvault is in default state
    $scope.info.defaultState = true;

    // Specifies the ID of current View
    $scope.info.currentViewID = null;

    $scope.info.facetLimit = GlobalService.getVal('facets_limit');

    $scope.info.initialLoading = false;
    
    $scope.info.dashboardsLoaded = false;
    
    $scope.info.firstDataLoaded = false;
    
    $scope.info.application = GlobalService.getVal('navLog');

    $scope.info.logvault_to_explorer = false;

    $scope.toggleChartCnt = true;
    
    $scope.info.toggleTimeline = true;

    $scope.fromRulesTestPage = RulesTestWithLogvault;

    $scope.testBundleMsg = "Select Bundles";

    $scope.showMessageToSelectBundleToUploadModal = null;

    $scope.selectBundleToUploadForTest = GlobalService.getVal('select_bundle_to_upload_for_test');

    $scope.showTestRuleIcon = false;

    $scope.selectBundleNotification = false;

    //$scope.info.graphData = null;

    // Initial empty response object which will eventually be filled with results.
    $scope.info.response = {
        docs : [],
        numFound : 0
    };

    // Holds the name of selected saved filter
    $scope.info.selectedFilterName = "Select View";

    // Defines the page object for pagination.
    $scope.info.page = {
        "total" : 0,
        "current" : 0,
        "pages" : 0,
        "count" : 10
    };

    // Holds all the facetCharts.
    $scope.info.facetCharts = [];

    // Defines the sort order selection on the UI.
    $scope.info.sort_order = {
        "label" : "Latest",
        "val" : "desc"
    };
    
    $scope.info.NSRReportUrl = "";
    
    // Stores whether session is timed out or not
    $scope.info.sessionTimedOut = false;

    $scope.openFacetStatsPopup = function(facet,index) {
        $scope.facetStats = facet.label;
        var data = [];
        var sumValue = 0;
        $scope.meanFacetValue = 0;
        var sumstdDev = 0;
        for(i=0;i<facet.data.length;i++){
            data.push(facet.data[i]);
            sumValue = sumValue+facet.data[i].value;
        }
        $scope.facetValueSum = sumValue;
        $scope.meanFacetValue = sumValue/facet.data.length;
        for(i=0;i<data.length;i++){
            data[i].perc = (data[i].value*100/sumValue).toFixed(2);
            data[i].stdDev = (data[i].value - $scope.meanFacetValue)*(data[i].value - $scope.meanFacetValue);
        }
        $scope.facetData = data;
        var top10 = data.sort(function(a, b) { return a.value < b.value ? 1 : -1; }).slice(0, 10); 
        var bottom10 = data.sort(function(a, b) { return a.value > b.value ? 1 : -1; }).slice(0, 10);
        for(i=0;i<data.length;i++){
            sumstdDev = Math.floor(sumstdDev + data[i].stdDev);
        }
        $scope.stdDevValue = Math.sqrt(sumstdDev/data.length); 
        $scope.top10facet = top10.sort(function (a, b) {
            return d3.descending(a.value, b.value);
        });
        $scope.bottom10facet = bottom10.sort(function (a, b) {
            return d3.descending(a.value, b.value);
        });
        $scope.maxFacetValue = $scope.top10facet[0].value;
        $scope.minFacetValue = $scope.bottom10facet[0].value;
        $scope.modalInstance = ModalService.openModal('partials/explorer/facetstats.html', $scope);
        UserTrackingService.standard_user_tracking($scope.info.application, $scope.info.events ? "Event" : "Section", "Open facet stats popup", JSON.stringify(facet)).then(userTrackingSuccess, handleSessionTimeout);
    };
    $scope.updateBreadCrumb = function(fdate, tdate){
        $scope.customDateFilterApplied = false;
        $scope.customDateFilter = true;
        $scope.dateRangeFilterName = GlobalService.getVal('customdate');
        $scope.info.changedFilter = false;
        $scope.info.drillDown = true;
        $scope.info.uploaded_by = null;
        //check if there is no hisotry, store from and to date from custome date time - convert it to UTC
        if($scope.timelineGraphDrilDown.length == 0){
            var date = new Date($scope.info.fromDate.getFullYear(), $scope.info.fromDate.getMonth(), $scope.info.fromDate.getDate(), $scope.info.fromTime.hr, $scope.info.fromTime.min, $scope.info.fromTime.sec);
            fdate = moment(date);
            fdate = new Date(fdate.year(), fdate.month(), fdate.date(), fdate.hour(), fdate.minute(), fdate.second());
            var date = new Date($scope.info.toDate.getFullYear(), $scope.info.toDate.getMonth(), $scope.info.toDate.getDate(), $scope.info.toTime.hr, $scope.info.toTime.min, $scope.info.toTime.sec);
            tdate = moment(date); 
            tdate = new Date(tdate.year(), tdate.month(), tdate.date(), tdate.hour(), tdate.minute(), tdate.second());
            $scope.timelineGraphDrilDown.push({ts:$scope.info.chartLevel,from: fdate, to: tdate, st:new Date().getTime(), "isQuicktimeFilter": !!$scope.info.quick, "quicktimeFilter": $scope.info.quick, "quicktimeFilterName": $scope.dateRangeFilterName});
        }else{
            $scope.timelineGraphDrilDown.push({ts:$scope.info.chartLevel,from: fdate, to: tdate, st:new Date().getTime(), "isQuicktimeFilter": !!$scope.info.quick, "quicktimeFilter": $scope.info.quick, "quicktimeFilterName": $scope.dateRangeFilterName});
        }
        $scope.info.quick = 0;
    }
    $scope.isShowBreadCrumb = function(){
        return $scope.timelineGraphDrilDown.length;
    }
    $scope.changeBreadCrumb = function(){
        var currentData = $scope.timelineGraphDrilDown.pop();
        $scope.loadDataForBreadCrumb(currentData);
    };
    $scope.breadCrumbHistoryAction =  function(node, index){
        for(var i=0;i<$scope.timelineGraphDrilDown.length;i++){
            if($scope.timelineGraphDrilDown[i].ts == node.ts){
                index = i;
                break;
            }
        }
        $scope.timelineGraphDrilDown.splice(index,1);
        $scope.loadDataForBreadCrumb(node);
    }
    $scope.loadDataForBreadCrumb = function(node){
        var tliData, d, d1;
        $scope.info.currentFacet = null;
        $scope.info.drillDown = true;

        //reset quick filter
        $scope.customDateFilterApplied = false;
        $scope.customDateFilter = true;
        $scope.info.changedFilter = false;
        $scope.dateRangeFilterName = GlobalService.getVal('customdate');
        $scope.info.uploaded_by = null;
        $scope.info.quick = 0;
        if(node.isQuicktimeFilter && node.quicktimeFilter && (node.quicktimeFilter == 1 || node.quicktimeFilter == 5 || node.quicktimeFilter == 10) )
        {
            $scope.info.quick = node.quicktimeFilter;
            $scope.customDateFilter = false;
            $scope.info.drillDown = false;
            switch(node.quicktimeFilter){
                case 1 :
                    $scope.dateRangeFilterName = GlobalService.getVal('mostrecent');
                    break;
                case 5 :
                    $scope.dateRangeFilterName = GlobalService.getVal('last5');
                    break;
                case 10 :
                    $scope.dateRangeFilterName = GlobalService.getVal('last10');
                    break;
            }
        }
        
        var currentData = node;
        var chartLevel = currentData.ts;

        tliData = currentData;
        if($scope.timelineGraphDrilDown.length == 0){
            $scope.setFromTo(tliData.from, tliData.to);
            return;
        }

        d = new Date(tliData.from);
        d1 = new Date(tliData.to);
        switch(chartLevel) {
            case 'YEAR' :
                $scope.setFromTo(d, d1);
                break;
            case 'MONTH' :
                d.setMonth(0);
                d.setDate(1);
                d.setHours(0);
                d.setMinutes(0);
                d.setSeconds(0);
                d1.setMonth(12);
                d1.setDate(0);
                d1.setHours(23);
                d1.setMinutes(59);
                d1.setSeconds(59);
                $scope.setFromTo(d, d1);
                break;
            case 'DAY' :
                d.setDate(1);
                d.setHours(0);
                d.setMinutes(0);
                d.setSeconds(0);
                d1.setMonth(d1.getMonth() + 1);
                d1.setDate(0);
                d1.setHours(23);
                d1.setMinutes(59);
                d1.setSeconds(59);
                $scope.setFromTo(d, d1);
                break;
            case 'HOUR' :
                d.setHours(0);
                d.setMinutes(0);
                d.setSeconds(0);
                d1.setHours(23);
                d1.setMinutes(59);
                d1.setSeconds(59);
                $scope.setFromTo(d, d1);
                break;
            case 'MINUTES' :
                d.setMinutes(0);
                d.setSeconds(0);
                d1.setMinutes(59);
                d1.setSeconds(59);
                $scope.setFromTo(d, d1);
                break;
        }        
    }


    function handleSessionTimeout(response) {
        if(!$scope.info.sessionTimedOut && response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/timeout/)) {
            $scope.info.sessionTimedOut = true;
            ModalService.sessionTimeout();
        }
    };

    // Updates the from n to time from the given date objects
    $scope.setFromTo = function(fdate, tdate, noLoad) {
        if(!isDate(fdate)) {
            fdate = new Date(fdate);
        }
        if(!isDate(tdate)) {
            tdate = new Date(tdate);
        }
        $scope.info.fromDate = fdate;
        $scope.info.fromTime.hr = fdate.getHours();
        $scope.info.fromTime.min = fdate.getMinutes();
        $scope.info.fromTime.sec = fdate.getSeconds();
        $scope.info.toDate = tdate;
        $scope.info.toTime.hr = tdate.getHours();
        $scope.info.toTime.min = tdate.getMinutes();
        $scope.info.toTime.sec = tdate.getSeconds();
        if(!noLoad){
            $scope.tableParams.reload();
        }
    };
    
    //Fix related to bg-9472
    // $scope.loadDashboards = function() {
    //     Dashboards.allDetails().then(function(response) {
    //         $scope.info.dashboardsLoadCount++;
    //         $scope.dashboards = $filter('filter')(response.data.Data.dashboards, {
    //             'd_type' : 'NSR'
    //         });
    //         if (!Array.isArray($scope.dashboards)) {
    //             $scope.dashboards = [];
    //         }
    //         if ($scope.dashboards[0] && $scope.dashboards[0].reports && $scope.dashboards[0].reports[0] && $scope.dashboards[0].reports[0].r_link) {
    //             $scope.info.NSRReportUrl = $scope.dashboards[0].reports[0].r_link;
    //         } else {
    //             if($scope.info.dashboardsLoadCount < 4) {
    //                 $scope.loadDashboards();
    //                 return;
    //             } else {
    //                 $scope.info.nsr_enabled = false;
    //             }
    //         }
    //         $scope.info.dashboardsLoaded = true;
    //         if($scope.info.firstDataLoaded) {
    //             $scope.info.resultLoading = false;
    //         }
    //     }, function(response) {
    //         $scope.info.dashboardsLoaded = true;
    //         if($scope.info.firstDataLoaded) {
    //             $scope.info.resultLoading = false;
    //         }
    //         $scope.info.nsr_enabled = false;
    //         handleSessionTimeout(response);
    //     });
    // };
    //NSR report link
    //get NSR report URL by calling dashboard API

    // Bug fix related to BG-9472
    // if(!!$scope.info.nsr_enabled) {
    //     $scope.loadDashboards();
    // }
    
    
    $scope.getNSRReportURl = function(bundle) {
        var url = "";
        var paramObj = GlobalService.getVal('nsrParams');
        var i = 0;
        for (var key in paramObj) {
            if(key == 'obs_date') {
                var date = $filter('toTimeStr')(bundle[key]);
                if (i == 0) {
                    url = paramObj[key] + '=' + date;
                } else {
                    url += '&' + paramObj[key] + '=' + date;
                }
                i++;
                continue;
            }
            if (i == 0) {
                url = paramObj[key] + '=' + bundle[key];
            } else {
                url += '&' + paramObj[key] + '=' + bundle[key];
            }
            i++;
        }
        return $scope.info.NSRReportUrl + '&' + url;
    };
    
    $scope.loadBundleData = function(bundle) {
        // var parentScope = $rootScope.$new();
        // $controller('AppCtrl', {
            // '$scope': parentScope
        // });
        $scope.$parent.changeCurrentPage('apps', bundle);
    }

    $scope.openNSRInstanceViewer = function(bundle) {
        if ($scope.info.NSRReportUrl == "") {
            ModalService.alertBox({msgKey: 'nsr_alert_msg'});
            return;
        }
        var reportUrl = $scope.getNSRReportURl(bundle);
        $scope.addInstance({
            'rname' : 'NSR',
            'r_link' : reportUrl
        });
    };
    // Adds the given instance to the instance viewer
    $scope.addInstance = function(report) {
        var instance;
        // create instance viewer object
        var instanceConfig = {
            'type' : 'nsr',
            'name' : report.rname,
            'data' : {
                'report' : report
            }
        };

        instance = JSON.parse(angular.toJson(instanceConfig));
        InstanceHandler.addInstance(instance, $scope);
        dashboard_url = report.r_link;
        details = dashboard_url.split('?');
        dashboard_details = details[1].split('&');
        dashboard_str = dashboard_details[0];
        arr_dashboard_name = dashboard_str.split('=');
        dashboard_name = arr_dashboard_name.pop();
        pattern = /\./g;
        if(pattern.test(dashboard_name))
        {
            arr_dashboard_name = dashboard_name.split('.');
            dashboard_name = arr_dashboard_name.pop();
            dashboard_name = dashboard_name.replace(/\_/g,' ');
        }

        UserTrackingService.standard_user_tracking($scope.info.application, $scope.info.application, 'Open NSR', '{\''+dashboard_name+'\'}').then(function(response) {

        }, handleSessionTimeout);
    };

    // Gets the values from the globals based on the given key.
    $scope.getValue = function(key) {
        return GlobalService.getVal(key);
    };
    
    //Changes filter accessibility of selected filter
    $scope.changeFilterAccessibility = function(view) {
        $scope.savedFiltersListLoading = true;
        LogVaultService.changeFilterAccessibility(view).then(function(response) {
            $scope.getSavedFilters();
            var activity = view.public ? 'Set View Private' : 'Set View Public';
            var details = {
                'View Name': view.view_name
            };
            UserTrackingService.standard_user_tracking($scope.info.application, $scope.info.application, activity, JSON.stringify(details)).then(userTrackingSuccess, handleSessionTimeout);
        }, function(response) {
            $scope.savedFiltersListNotFound = true;
            $scope.savedFiltersListLoading = false;
            handleSessionTimeout(response);
        });
    };
    
    //Changes the default filter for a user
    $scope.changeDefaultFilter = function(view, outOfBox) {
        $scope.savedFiltersListLoading = true;
        if(!outOfBox) {
            LogVaultService.setResetDefaultFilter(view).then(function(response) {
                view.default = !view.default;
                var activity = "";
                if(view.default) {
                   // $scope.loadView(view);
                    activity = "Set Default View";
                } else {
                    if(view.view_name == $scope.info.selectedFilterName) {
                        $scope.selectedFacets = {};
                        $scope.info.defaultFilterInfo = {};
                        //$scope.reset();
                    }
                    activity = "Reset Default View";
                }
                var details = {
                    'View Name': view.view_name
                };
                UserTrackingService.standard_user_tracking($scope.info.application, $scope.info.application, activity, JSON.stringify(details)).then(userTrackingSuccess, handleSessionTimeout);
                $scope.getSavedFilters();
                // $scope.getAllSavedFilter();
            }, function(response) {
                $scope.savedFiltersListLoading = false;
                handleSessionTimeout(response);
            });
        } else {
        }
    };
    

    $scope.dateRangeFilterName = GlobalService.getVal('customdate');
    // Applies the quick filter based on the user selection
    $scope.changeQuickFilter = function(item) {
        $scope.info.defaultState = false;
        $scope.info.pristine = false;
        $scope.info.changedFilter = false;
        $scope.info.drillDown = false;
        //$scope.info.currentFacet = null;
        var d,d1;
        d = metaDataService.getTodayDate();//moment(moment.utc().format('YYYY-MM-DD HH:mm:ss'), 'YYYY-MM-DD HH:mm:ss').toDate();
        d1 = metaDataService.getTodayDate();//moment(moment.utc().format('YYYY-MM-DD HH:mm:ss'), 'YYYY-MM-DD HH:mm:ss').toDate();
        if (item != 'customdate') {
            $scope.customDateFilter = false;
            $scope.dateRangeFilterName = GlobalService.getVal(item);
            $scope.info.quick = 0;
            $scope.info.uploaded_by = null;
            $scope.info.quickFilter = true;
            switch(item) {
            case 'lasthour' :
            case GlobalService.getVal('lasthour') :
                d.setHours(d.getHours() - 1);
                $scope.info.currentFacet = null;
                $scope.setFromTo(d, d1);
                $scope.dateRangeFilterName = GlobalService.getVal('lasthour');
                break;
            case 'today' :
            case GlobalService.getVal('today') :
                d.setHours(0);
                d.setMinutes(0);
                d.setSeconds(0);
                $scope.info.currentFacet = null;
                $scope.setFromTo(d, d1);
                $scope.dateRangeFilterName = GlobalService.getVal('today');
                break;
            case 'yesterday' :
            case GlobalService.getVal('yesterday') :
                d.setDate(d.getDate() - 1);
                d.setHours(0);
                d.setMinutes(0);
                d.setSeconds(0);
                d1.setDate(d1.getDate() - 1);
                d1.setHours(23);
                d1.setMinutes(59);
                d1.setSeconds(59);
                $scope.info.currentFacet = null;
                $scope.setFromTo(d, d1);
                $scope.dateRangeFilterName = GlobalService.getVal('yesterday');
                break;
            case 'thisweek' :
            case GlobalService.getVal('thisweek') :
                d.setDate(d.getDate() - d.getDay() + 1);
                d.setHours(0);
                d.setMinutes(0);
                d.setSeconds(0);
                $scope.info.currentFacet = null;
                $scope.setFromTo(d, d1);
                $scope.dateRangeFilterName = GlobalService.getVal('thisweek');
                break;
            case 'thismonth' :
            case GlobalService.getVal('thismonth') :
                d.setDate(1);
                d.setHours(0);
                d.setMinutes(0);
                d.setSeconds(0);
                $scope.info.currentFacet = null;
                $scope.setFromTo(d, d1);
                $scope.dateRangeFilterName = GlobalService.getVal('thismonth');
                break;
            case 'last2days' :
            case GlobalService.getVal('last2days') :
                d.setDate(d.getDate() - 2);
                d.setHours(0);
                d.setMinutes(0);
                d.setSeconds(0);
                $scope.info.currentFacet = null;
                $scope.setFromTo(d, d1);
                $scope.dateRangeFilterName = GlobalService.getVal('last2days');
                break;
            case 'last7days' :
            case GlobalService.getVal('last7days') :
                d.setDate(d.getDate() - 7);
                d.setHours(0);
                d.setMinutes(0);
                d.setSeconds(0);
                $scope.info.currentFacet = null;
                $scope.setFromTo(d, d1);
                $scope.dateRangeFilterName = GlobalService.getVal('last7days');
                break;
            case 'last30days' :
            case GlobalService.getVal('last30days') :
                d.setDate(d.getDate() - 30);
                d.setHours(0);
                d.setMinutes(0);
                d.setSeconds(0);
                $scope.info.currentFacet = null;
                $scope.setFromTo(d, d1);
                $scope.dateRangeFilterName = GlobalService.getVal('last30days');
                break;
            case 'mostrecent' :
            case GlobalService.getVal('mostrecent') :
                $scope.info.quick = 1;
                if ($scope.info.max_days_allowed) {
                    d.setDate(d.getDate() - $scope.info.max_days_allowed);
                } else {
                    d.setFullYear(d.getFullYear() - 10);
                }
                $scope.info.currentFacet = null;
                $scope.setFromTo(d, d1);
                // $scope.tableParams.reload();
                $scope.dateRangeFilterName = GlobalService.getVal('mostrecent');
                break;
            case 'last5' :
            case GlobalService.getVal('last5') :
                $scope.info.quick = 5;
                if ($scope.info.max_days_allowed) {
                    d.setDate(d.getDate() - $scope.info.max_days_allowed);
                } else {
                    d.setFullYear(d.getFullYear() - 10);
                }
                $scope.info.currentFacet = null;
                $scope.setFromTo(d, d1);
                // $scope.tableParams.reload();
                $scope.dateRangeFilterName = GlobalService.getVal('last5');
                break;
            case 'last10' :
            case GlobalService.getVal('last10') :
                $scope.info.quick = 10;
                if ($scope.info.max_days_allowed) {
                    d.setDate(d.getDate() - $scope.info.max_days_allowed);
                } else {
                    d.setFullYear(d.getFullYear() - 10);
                }
                $scope.info.currentFacet = null;
                $scope.setFromTo(d, d1);
                // $scope.tableParams.reload();
                $scope.dateRangeFilterName = GlobalService.getVal('last10');
                break;
            default :
                // alert("Nothing");
                ModalService.alertBox({msg: 'Nothing'});
                $scope.dateRangeFilterName = GlobalService.getVal('customdate');
                break;
            }
        } else {
            $scope.customDateFilter = true;
            $scope.customDateFilterApplied = true;
            $scope.info.quick = 0;
            $scope.info.uploaded_by = null;         
            $scope.dateRangeFilterName = GlobalService.getVal(item);
            // $scope.tableParams.reload();
        }
    };
    
    // XHR to fetch all the meta info.
    LogVaultService.getAllConfig().then(function(response) {
        var i,
            keys,
            field;
        $scope.facets = [],
        responseData = response.data.Data;
        if(responseData && responseData.ec_sysid_map){
            if(responseData.ec_sysid_map.sysid1 == ""){
                responseData.ec_sysid_map.sysid1 ="sysid1";
            }
        }
        if(AppService.isGbStudioApp()) {
            responseData['config'] = !!responseData['default_config'] ? responseData['default_config'] : responseData['config'];
        }
        metaDataService.setGbConfig(responseData['config']);
        angular.forEach(responseData.facet_label_map, function(facet) {
            angular.forEach(facet, function(label, key) {
                if(key !== 'namespace') {
                    var f = {};
                    f['key'] = key;
                    f['label'] = label;
                    f['data'] = [];
                    f['expanded'] = false;
                    $scope.facets.push(f);
                    $scope.selectedFacets[key] = [];
                }
            });
        });
        // DEFAULT_PERIOD_IN_SEC needs to change as DEFAULT_PERIOD_IN_SEC
        $scope.info.default_days = responseData['config']['LOGVAULT_DEFAULT_PERIOD_IN_SEC'];
        $scope.info.max_days_allowed = responseData['config']['LOGVAULT_MAX_DAY_RANGE_ALLOWED'];
        $scope.info.MinDate = new Date(metaDataService.getTodayDate());
        $scope.info.MinDate.setDate(metaDataService.getTodayDate().getDate() - $scope.info.max_days_allowed) 
        //convert seconds to milliseconds
        if($scope.info.default_days) $scope.info.default_days = 1000 * $scope.info.default_days;

        if(!!metaDataService.getFeatures()['explorer']) {
            $scope.info.logvault_to_explorer = responseData['config']['lv_to_exp'];
        }
        
        $scope.info.appsFeatureEnabled = responseData['config']['lv_to_apps'];
        
        $scope.info.logvault_to_viewer = responseData['config']['lv_to_iviewer'];
        
        var sectionKeys = Object.keys(responseData.sections_content);
        sectionKeys.sort();
        for(var i = 0; i < sectionKeys.length; i++) {
            if(responseData.sections_content[sectionKeys[i]]['nsType'] == "SECTION") {
                $scope.info.ivSection = sectionKeys[i];
                break;
            }
        }
        
        // $scope.info.fields = response.data['config']['fields'];
        $scope.info.allConfigLoading = false;
        $scope.loadDefaultFilter();

        keys = Object.keys(responseData['config']['fields']);
        for (i in keys) {
            field = {};
            field['key'] = keys[i];
            field['label'] = responseData['config']['fields'][keys[i]];
            $scope.info.fields.push(field);
        }
        DefaultFilterService.setConfigDiffFields($scope.info.fields);
        $scope.info.sysId = responseData['ec_sysid_map']['sysid1'];
        //update breadcrumb deault value
        var d = metaDataService.getTodayDate();//moment(moment.utc().format('YYYY-MM-DD HH:mm:ss'), 'YYYY-MM-DD HH:mm:ss').toDate();
        var d1 = metaDataService.getTodayDate();//moment(moment.utc().format('YYYY-MM-DD HH:mm:ss'), 'YYYY-MM-DD HH:mm:ss').toDate();
        if ($scope.info.default_days) {
            d.setTime(d.getTime() - $scope.info.default_days);
        } else {
            d.setFullYear(d.getFullYear() - 10);
        }
    }, function(response) {
        handleSessionTimeout(response);
        console.error(response);
    });
    
    $scope.addAppsInstance = function(result) {
        result.namespace = "random.namespace.by.apps";
        result.currentNS = "random.namespace.by.apps";
        result.namespace_id = $filter('bundleName')(result.obs_url) + '-0';
        result.serial_num = result[$scope.info.sysId];        
        var instance = {
            "type": 'apps',
            "title": 'View section/config diff',
            "name": $filter('bundleName')(result.obs_url),
            "module" : $scope.info.application,
            "data": {
                "result": result,
                "bundle": $filter('bundleName')(result.obs_url),
                "sysId": result[$scope.info.sysId],
                "sysId2": null,
                "instanceDisplay": $scope.info.fields,
                "start_time": $scope.getFrom(),
                "end_time": $scope.getTo(),
                'observation': result.obs_date,
                'observationStr': result.obs_date_str
            }
        };
        if(result.sysid2){
            instance.data.sysId2 = result.sysid2;
        };
       InstanceHandler.addInstance(instance);
       UserTrackingService.standard_user_tracking($scope.info.application, "Apps", 'Table View', JSON.stringify(result)).then(userTrackingSuccess, handleSessionTimeout);
    };    
    $scope.toggleTimelineGraph = function(){
        $scope.toggleChartCnt = !$scope.toggleChartCnt; 
        $scope.logToggleTimeline($scope.toggleChartCnt);        
        $scope.info.toggleTimeline = !$scope.info.toggleTimeline;
    };
    $scope.setInitialViewSectionViewer = function(instance){
        DefaultFilterService.setDefaultSysId({sys_id: instance.data["sysId"]});
        var bundle_name = instance.data.result["filename"];
        var obs_time    = instance.data.result["obs_date"];
        var obs_url     = instance.data.result["obs_url"];
        DefaultFilterService.setSelectedObservation({'bundle_name':bundle_name,'obs_time':obs_time,'obs_url':obs_url});
        DefaultFilterService.setDefaultObservation({'bundle_name':bundle_name,'obs_time':obs_time,'obs_url':obs_url});
        $timeout(function(){
            NavigationService.setUrl('sectionview');
            MenuService.setCurrentLabel('Section View');
            InstanceHandler.addInstance(instance);
            $timeout(function(){
                SectionsMetaService.getS2().then(function(response){
                    DefaultFilterService.setSubSys(response.data.Data);
                    SectionsMetaService.getDefault().then(function(response){

                        var view = response.data.Data, haveDefault=false, me = this;
                        SectionsMetaService.getAll().then(function (response) {
                            var obs = DefaultFilterService.getDefaultObservation();
                            var sorted_data = $filter("filter")(response.data.Data, {
                            "namespace_type": "!EVENT"
                            });
                            sorted_data = $filter("filter")(sorted_data, {
                            "namespace_type": "!UNPARSED"
                            });
                            sorted_data = $filter("orderBy")(sorted_data, "label");
                            SectionsMetaService.setSections(DefaultFilterService.getDefaultObservation(), sorted_data);
                            
                            if(view){
                                 SectionsMetaService.applyViewFromLogVault(view);
                                 haveDefault = true;
                            }
                            //clear all selected section
                            if(!haveDefault){
                                SectionsMetaService.clearSectionView();
                            }
                            //call for config diff

                            $scope.setInitialViewConfigDiff(instance);
                        },function(response){}, me);                        
                    },function(response){});
                }, function(response){
                    DefaultFilterService.setSubSys([]);
                });
            }, 500, $scope);
        }, 100, $scope);
     };
     $scope.setInitialViewConfigDiff = function(instance){        
        var sysId = instance.data['sysId'];
        var ec = DefaultFilterService.getDefaultEndCust();
        ConfigDiffService.setClusterId(sysId);
        ConfigDiffService.getAll()
            .then(function (response) {
                sorted_data = $filter("filter")(response.data.Data, {
                    "namespace_type": "!UNPARSED"
                });
                sorted_data = $filter("filter")(sorted_data, {
                    "namespace_type": "!EVENT"
                });
                sorted_data = $filter("orderBy")(sorted_data, "label");
                sections = sorted_data;
                ConfigDiffService.setSections(sections);
                //get all saved view
                ConfigDiffService.getDefault().then(function(response){
                    var view = response.data.Data;
                    var me = this,haveDefault=false;
                    if(view){
                        ConfigDiffService.applyViewFromLogVault(view);
                        haveDefault = true;
                    }
                    //clear all selected section
                    if(!haveDefault){
                        ConfigDiffService.clearConfigDiff();
                    }
                    /*if(view){
                        ConfigDiffService.loadView(view)
                            .then(function (response) {
                                var appliedView;
                                appliedView = response.data.Data[0];
                                ConfigDiffService.setSectionLoading(false);
                                if (!!appliedView) {
                                    // XHR to fetch the view metadata.
                                    ConfigDiffService.applyView(appliedView, $scope, ConfigDiffService.getSections(), ec, sysId, DefaultFilterService.getDefaultObservation());
                                   // configCtrl.info.currentViewName = view.view_name;                    
                                    ConfigDiffService.getAppliedView(view);
                                    UserTrackingService.standard_user_tracking($scope.info.application, 'Config Diff', 'Apply View', "{\'" + view['view_name'] + "\'}")
                                        .then(function (response){}, function(response){});
                                }
                            }, function (response) {
                                ConfigDiffService.setSectionLoading(false);
                            }, me);
                    }else{
                        //clear selected section
                        var sections = ConfigDiffService.getSections();
                        for (var i in sections) {
                            sections[i]['selected'] = false;
                            sections[i]['default'] = false;
                            sections[i]['count'] = 2;
                            ConfigDiffService.resetFilter(sections[i]);
                        }
                        ConfigDiffService.setSections(sections);
                        ConfigDiffService.setAppliedView(null);
                        //configCtrl.info.currentViewName = 'Select view';
                        UserTrackingService.standard_user_tracking($scope.info.application, 'Config Diff', 'Clear Filter', "{}")
                                    .then(function(response){}, function(response){});
                    }*/
                },function(response){});
           },function(response){})       
     };
    // Returns the string required for the From time in the XHR query
    $scope.getFrom = function() {   
        var date = new Date($scope.info.fromDate.getFullYear(), $scope.info.fromDate.getMonth(), $scope.info.fromDate.getDate(), $scope.info.fromTime.hr, $scope.info.fromTime.min, $scope.info.fromTime.sec);
        $scope.info.fromDate = date;
        return date.getFullYear() + "-" + $scope.makeT2DigitValue(parseInt(date.getMonth() + 1)) + "-" + $scope.makeT2DigitValue(date.getDate()) + "T" + $scope.makeT2DigitValue($scope.info.fromTime.hr) + ":" + $scope.makeT2DigitValue($scope.info.fromTime.min) + ":" + $scope.makeT2DigitValue($scope.info.fromTime.sec) + "Z";
    };
    $scope.makeT2DigitValue = function(value){
        if(parseInt(value) < 10) return "0"+value;
        return value;
    };
    
    $scope.$watch('info.toDate', function() {
        var currentUTC = metaDataService.getTodayDate();//moment(moment.utc().format('YYYY-MM-DD HH:mm:ss'), 'YYYY-MM-DD HH:mm:ss').toDate();
        if(currentUTC < $scope.info.toDate){
            $scope.info.toDate = currentUTC;
            $scope.info.toTime.hr = $scope.info.toDate.getHours();
            $scope.info.toTime.min = $scope.info.toDate.getMinutes();
            $scope.info.toTime.sec = $scope.info.toDate.getSeconds();
        }
    });
    $scope.$watch('info.resultLoading', function() {
        if(!$scope.info.resultLoading){     
            AppService.hidePanelLoading();   
        }
    });
    //Event to check when application is ready
    $scope.$on('AppLoadEvent-logvault', function (event, reload) {
        if(!$scope.info.resultLoading){
            AppService.hidePanelLoading();
        }
        if(reload && !$scope.info.allConfigLoading) {
            $scope.loadDefaultFilter();
        }
        $scope.updateWhetherToShowUploadBundleToTest();
    });
    // Returns the string required for the To time in the XHR query    
    $scope.getTo = function() {
        var currentUTC = metaDataService.getTodayDate();//moment(moment.utc().format('YYYY-MM-DD HH:mm:ss'), 'YYYY-MM-DD HH:mm:ss').toDate();
        var date = new Date($scope.info.toDate.getFullYear(), $scope.info.toDate.getMonth(), $scope.info.toDate.getDate(), $scope.info.toTime.hr, $scope.info.toTime.min, $scope.info.toTime.sec);
        if(currentUTC < date){
            date = currentUTC;
            $scope.info.toTime.hr = date.getHours();
            $scope.info.toTime.min = date.getMinutes();
            $scope.info.toTime.sec = date.getSeconds();
        }
        $scope.info.toDate = date;
        return date.getFullYear() + "-" + $scope.makeT2DigitValue(parseInt(date.getMonth() + 1)) + "-" + $scope.makeT2DigitValue(date.getDate()) + "T" + $scope.makeT2DigitValue($scope.info.toTime.hr) + ":" + $scope.makeT2DigitValue($scope.info.toTime.min) + ":" + $scope.makeT2DigitValue($scope.info.toTime.sec) + "Z";
    };

    // Refreshes the data based on customDateFilter
    $scope.done = function() {
        $('.gb-datetime.open').removeClass('open');
        $scope.tableParams.reload();
    };

    // Closes the customDateFilter widget
    $scope.cancel = function() {
        $('.gb-datetime.open').removeClass('open');
    };

    // The ng-table reference that holds the results
    $scope.tableParams = new ngTableParams({
        page : 1, // show first page
        count : 10 // count per page
    }, {
        total : $scope.info.response.numFound, // length of data
        getData : function($defer, params) {
            if (!$scope.info.allConfigLoading) {
                $scope.refresh($defer);
            } else {
                $defer.resolve([]);
            }
        }
    });
    // $scope.tableParams.settings().$scope = $scope;
    // Populates the page object with the latest data.
    $scope.paginator = function(count) {
        $scope.info.page['total'] = count;
        $scope.info.page['pages'] = Math.ceil($scope.info.page['total'] / $scope.info.page['count']);
        if($scope.info.page['current'] >= $scope.info.page['pages']) {
            $scope.info.page['current'] = $scope.info.page['pages'] - 1;
            if($scope.info.page['current'] < 0){
                $scope.info.page['current'] = 0;
            }
            $scope.tableParams.page($scope.info.page['current'] + 1);
            // $scope.tableParams.reload();
        }      
    };
    //Change page size
    $scope.changePageSize = function() {
        $scope.info.page['count'] = parseInt($scope.info.page['count']);
        $scope.info.page['pages'] = Math.ceil($scope.info.page['total'] / $scope.info.page['count']);
        $scope.info.page['current'] = 0;        
        $scope.tableParams.count($scope.info.page['count']);
        $scope.info.changePageSize = true;
        $scope.tableParams.page($scope.info.page['current'] + 1);
        $scope.refresh();
        
    };

    // Navigates to next page of results
    $scope.nextPage = function() {
        if ($scope.info.page['current'] < $scope.info.page['pages'] - 1) {
            $scope.info.page['current'] += 1;
            $scope.info.paginate = true;
            $scope.tableParams.page($scope.info.page['current'] + 1);
        }
    };

    // Navigate to previous page of results
    $scope.prevPage = function() {
        if ($scope.info.page['current'] > 0) {
            $scope.info.page['current'] -= 1;
            $scope.info.paginate = true;
            $scope.tableParams.page($scope.info.page['current'] + 1);
        }
    };

    // Navigate to first page of results
    $scope.firstPage = function() {
        if ($scope.info.page['current'] == 0)
            return;
        $scope.info.page['current'] = 0;
        $scope.info.paginate = true;
        $scope.tableParams.page($scope.info.page['current'] + 1);
    };

    // Navigate to last page of results
    $scope.lastPage = function() {
        if ($scope.info.page['current'] == $scope.info.page['pages'] - 1)
            return;
        $scope.info.page['current'] = $scope.info.page['pages'] - 1;
        $scope.info.paginate = true;
        $scope.tableParams.page($scope.info.page['current'] + 1);
    };
    //fix BG-8787
    $scope.searchFromUI = function(){
        if(!$scope.customDateFilter){
            return;
        }
        $scope.info.drillDown = false;
        var date = new Date($scope.info.fromDate.getFullYear(), $scope.info.fromDate.getMonth(), $scope.info.fromDate.getDate(), $scope.info.fromTime.hr, $scope.info.fromTime.min, $scope.info.fromTime.sec);
        $scope.info.fromDate = date;
        var date = new Date($scope.info.toDate.getFullYear(), $scope.info.toDate.getMonth(), $scope.info.toDate.getDate(), $scope.info.toTime.hr, $scope.info.toTime.min, $scope.info.toTime.sec);
        $scope.info.toDate = date;
        $scope.tableParams.reload()
    };
    $scope.getFacetName= function(key){
        for(var i=0;i<$scope.facets.length;i++){
            if($scope.facets[i]['key'] == key){
                return $scope.facets[i]['label'];
            }
        }
    }
    $scope.getFacet= function(key){
        for(var i=0;i<$scope.facets.length;i++){
            if($scope.facets[i]['key'] == key){
                return $scope.facets[i];
            }
        }
    }
    $scope.sortRawData = function(){
        $scope.info.drillDown = false;
        $scope.tableParams.reload();
    }
    // Refresh all the client-side data.
    $scope.refresh = function(defer) {
        if(!$scope.info.fromDate || !$scope.info.toDate) {
            return;
        }
        $scope.info.refCount++;
        var i,
            j,
            selectedFacets = {},
            keys = Object.keys($scope.selectedFacets);
        $scope.listSelectedFacets();
        $scope.info.dataLoading = true;
        for (i in keys) {
            for (j in $scope.selectedFacets[keys[i]]) {
                if (Array.isArray(selectedFacets[keys[i]])) {
                    selectedFacets[keys[i]].push($scope.selectedFacets[keys[i]][j].label.replace(/\?/g, '%3F'));
                } else {
                    selectedFacets[keys[i]] = [];
                    selectedFacets[keys[i]].push($scope.selectedFacets[keys[i]][j].label.replace(/\?/g, '%3F'));
                }
            }
            if (!Array.isArray(selectedFacets[keys[i]])) {
                selectedFacets[keys[i]] = [];
            }
        }
        
        if(!$scope.info.toDate || !$scope.info.fromDate) {
            return;
        }
        
        if(!!$scope.info.viewLoad) {
            $scope.info.viewLoad = false;
        } else {
            $scope.info.selectedFilterName = "Select View";
        }       
        // XHR to fetch the results based on the user selection of facets n other parameters on the UI.
        LogVaultService.getData($scope.tableParams.page(), $scope.tableParams.count(), selectedFacets, $scope.getFrom($scope.info.drillDown), $scope.getTo($scope.info.drillDown), $scope.info.sort_order['val'], 0, $scope.info.quick, $scope.info.uploaded_by, $scope.dateRangeFilterName, $scope.info.drillDown).then(function(d_response) {
            var data = {};
            $scope.testBundleMsg = "Select Bundles";
            data.data = d_response.data.Data;
            data.Msg = d_response.data.Msg;
            d_response = data;
            $scope.info.firstDataLoaded = true;
            $scope.info.resultLoading = false;
            // if($scope.info.nsr_enabled) {
            //     if($scope.info.dashboardsLoaded) {
            //         $scope.info.resultLoading = false;
            //     }
            // } else {
            //     $scope.info.resultLoading = false;
            // }
            //reset bread-crumb
            if(!$scope.info.sorting && !$scope.info.drillDown) {
                $scope.timelineGraphDrilDown = [];
            }
            var details = {};
            var activity;
            
            if(!$scope.info.clearFilter && !$scope.info.sorting && !$scope.info.changePageSize) {
                var facetDetails = {};
                angular.forEach(selectedFacets, function(value, key) {
                    if(value.length) {
                        angular.forEach(value, function(facet) {
                            if(!facetDetails.hasOwnProperty(key)) {
                                facetDetails[key] = [];
                            }
                            facetDetails[key].push(facet);
                        });
                    }
                });
                
                if(!!Object.keys(facetDetails).length) {
                    details['Facets Selected'] = facetDetails;
                }
                if(!!$scope.dateRangeFilterName) {
                    details['Quick Filter'] = $scope.dateRangeFilterName;
                }
                details['Date Range'] = $scope.getFrom() + ' - ' + $scope.getTo();
                details['Sort Order'] = $scope.info.sort_order['val'] == 'desc' ? 'Descending' : 'Ascending';
            } else if($scope.info.changePageSize) {
                details['Count'] = $scope.tableParams.count();
            }
            
            if($scope.info.drillDown == true) {
                activity = 'Drill Down';
                $scope.info.drillDown = false;
            } else if($scope.info.clearFilter == true) {
                activity = 'Clear Filter';
                $scope.info.clearFilter = false;
            } else if($scope.info.sorting == true) {
                activity = 'Sort ' + ($scope.info.sort_order['val'] == 'desc' ? 'Descending' : 'Ascending');
                $scope.info.sorting = false;
            } else if($scope.info.changePageSize == true) {
                activity = 'Change Page Count';
                $scope.info.changePageSize = false;
            } else if($scope.info.quickFilter == true) {
                activity = $scope.dateRangeFilterName;
                $scope.info.quickFilter = false;
            } else {
                activity = 'filter';
            }
            
            if($scope.info.paginate == true) {
                $scope.info.paginate = false;
            } else {
                UserTrackingService.standard_user_tracking($scope.info.application, $scope.info.application, activity, JSON.stringify(details), data.data.solr_query).then(function(response) {
                
                }, handleSessionTimeout);
            }
            
            // Passing data to the chart
            if (d_response.data && d_response.data.response && d_response.data.response.numFound == 0) {
                $scope.info.no_result = true;
                $scope.info.dataLoading = false;
                $scope.info.facetLoading = false;
                $scope.info.response = null;
                $scope.reloadGraph(null);
                $scope.tableParams.total(0);
                $scope.resetFacetsData();
                if(defer){
                    defer.resolve([]);
                }
            } else if(d_response.data && d_response.data.hasOwnProperty('gb_error')) {
                if (d_response.data['gb_error'] == 'ERR_0') {
                    $window.location.href = GlobalService.getVal('redirect_login_url');
                }else{                    
                    $scope.info.no_result = true;
                    $scope.info.dataLoading = false;
                    $scope.info.facetLoading = false;
                    $scope.info.response = null;
                    $scope.reloadGraph(null);
                    $scope.tableParams.total(0);
                    $scope.d3BarRender();
                    $scope.resetFacetsData();
                    if(defer){
                        defer.resolve([]);
                    }
                }
                
            } else {
                if(!d_response.data){
                    return;
                }
                $scope.info.response = d_response.data.response;
                $scope.info.no_result = false;
                $scope.info.dataLoading = false;
                $scope.info.facetLoading = false;
                    
                //set from and date time field with server data(obs_date->end=obs_date->start) 
                var fromDateFromResponse = d_response.data.facet_counts.facet_ranges.obs_date.start;
                var todateFromResponse = d_response.data.facet_counts.facet_ranges.obs_date.end;
                if(fromDateFromResponse){
                    fromDateFromResponse = fromDateFromResponse.replace("T", " ");
                    fromDateFromResponse = fromDateFromResponse.replace("Z","");                    
                    $scope.info.fromDate = metaDataService.getStringToDate(fromDateFromResponse);//moment(fromDateFromResponse, 'YYYY-MM-DD HH:mm:ss').toDate();
                }
                if(todateFromResponse){
                    todateFromResponse = todateFromResponse.replace("T", " ");
                    todateFromResponse = todateFromResponse.replace("Z","");
                    $scope.info.toDate = metaDataService.getStringToDate(todateFromResponse);//moment(todateFromResponse, 'YYYY-MM-DD HH:mm:ss').toDate();
                }
                $scope.info.fromTime.hr = $scope.info.fromDate.getHours();
                $scope.info.fromTime.min = $scope.info.fromDate.getMinutes();
                $scope.info.fromTime.sec = $scope.info.fromDate.getSeconds();
                $scope.info.toTime.hr = $scope.info.toDate.getHours();
                $scope.info.toTime.min = $scope.info.toDate.getMinutes();
                $scope.info.toTime.sec = $scope.info.toDate.getSeconds(); 

                $scope.reloadGraph(d_response.data.facet_counts.facet_ranges);
                $scope.tableParams.total($scope.info.response.numFound);
                $scope.paginator($scope.info.response.numFound);
                $scope.info.chartLevel = d_response.data.facet_counts.facet_ranges['obs_date']['gap'].split('/')[1];
                if(defer){
                    defer.resolve($scope.info.response.docs);
                }
                
                if (!!$scope.info.response.numFound) {
                    $scope.updateFacets(d_response);
                }
                $scope.info.init = true;
            }
            
            //Hide manage drop down list
            var ddElm = angular.element(document.getElementById('expandElement'));
            if(ddElm.hasClass('open')){
                ddElm.removeClass('open');
            }
        
        }, function(d_response) {
            $scope.info.no_result = true;
            $scope.info.dataLoading = false;
            $scope.info.resultLoading = false;
            $scope.info.facetLoading = false;
            $scope.info.response = null;
            $scope.info.drillDown = false;
            $scope.info.clearFilter = false;
            $scope.info.sorting = false;
            $scope.info.changePageSize = false;
            $scope.info.paginate = false;
            $scope.reloadGraph(null);
            $scope.tableParams.total(0);
            $scope.resetFacetsData();
            defer.resolve([]);
            handleSessionTimeout(d_response);
        });
    };
    $scope.resetFacetsData = function(){
        var i;
        for (i in $scope.facets) {
            $scope.facets[i]['data'] = [];
        }
    };
    $scope.closeModal = function(){
        $scope.modalInstance.close();
        if($scope.events_export_limit == undefined || $scope.events_export_limit == 0) {
            $scope.csvpage.noOfRecordsCsv = 1;
        }
    };
    $scope.isFacetsData = function(){        
        var i;
        for (i in $scope.facets) {
            if($scope.facets[i]['data'].length > 0){
                return true;
            }
        }
        return false;
    };
    $scope.updateFacets = function(d_response){  
        var i,
            j,
            k,
            facet_data,
            tempFacet;        
        for (i in $scope.facets) {
            if (!!$scope.info.currentFacet) {
                if ($scope.facets[i].key != $scope.info.currentFacet.key) {
                    $scope.facets[i]['data'] = [];
                    if (!!d_response.data.facet_counts.facet_fields[$scope.facets[i]['key']]) {
                        for ( j = 0; j < d_response.data.facet_counts.facet_fields[$scope.facets[i]['key']].length / 2; ++j) {
                            facet_data = {};
                            facet_data['title'] = $scope.facets[i].label;
                            facet_data['label'] = d_response.data.facet_counts.facet_fields[$scope.facets[i]['key']][j * 2];
                            facet_data['value'] = d_response.data.facet_counts.facet_fields[$scope.facets[i]['key']][parseInt(j * 2 + 1)];
                            if (!!$scope.selectedFacets[$scope.facets[i]['key']] && $scope.selectedFacets[$scope.facets[i]['key']].length) {
                                for (k in $scope.selectedFacets[$scope.facets[i]['key']]) {
                                    if ($scope.selectedFacets[$scope.facets[i]['key']][k].label == facet_data['label']) {
                                        $scope.selectedFacets[$scope.facets[i]['key']][k]['value'] = facet_data['value'];
                                        $scope.facets[i]['data'].push($scope.selectedFacets[$scope.facets[i]['key']][k]);
                                        break;
                                    }
                                }
                                if (k >= $scope.selectedFacets[$scope.facets[i]['key']].length) {
                                    facet_data['selected'] = false;
                                    $scope.facets[i]['data'].push(facet_data);
                                }
                            } else {
                                facet_data['selected'] = false;
                                $scope.facets[i]['data'].push(facet_data);
                            }
                        }
                    }
                    $scope.facets[i]['expanded'] = false;
                } else {
                    $scope.facets[i]['expanded'] = ($scope.facets[i]['expanded'] == undefined) ? false : $scope.facets[i]['expanded'];
                }
            } else {
                $scope.facets[i]['data'] = [];
                if (!!d_response.data.facet_counts.facet_fields[$scope.facets[i]['key']]) {
                    for ( j = 0; j < d_response.data.facet_counts.facet_fields[$scope.facets[i]['key']].length / 2; ++j) {
                        facet_data = {};
                        facet_data['title'] = $scope.facets[i].label;
                        facet_data['label'] = d_response.data.facet_counts.facet_fields[$scope.facets[i]['key']][j * 2];
                        facet_data['value'] = d_response.data.facet_counts.facet_fields[$scope.facets[i]['key']][parseInt(j * 2 + 1)];
                        if (!!$scope.selectedFacets[$scope.facets[i]['key']] && $scope.selectedFacets[$scope.facets[i]['key']].length) {
                            for (k in $scope.selectedFacets[$scope.facets[i]['key']]) {
                                if ($scope.selectedFacets[$scope.facets[i]['key']][k].label == facet_data['label']) {
                                    $scope.selectedFacets[$scope.facets[i]['key']][k]['value'] = facet_data['value'];
                                    $scope.facets[i]['data'].push($scope.selectedFacets[$scope.facets[i]['key']][k]);
                                    break;
                                }
                            }
                            if (k >= $scope.selectedFacets[$scope.facets[i]['key']].length) {
                                facet_data['selected'] = false;
                                $scope.facets[i]['data'].push(facet_data);
                            }
                        } else {
                            facet_data['selected'] = false;
                            $scope.facets[i]['data'].push(facet_data);
                        }
                    }
                }
                $scope.facets[i]['expanded'] = false;
            }
            if (!!($scope.selectedFacets[$scope.facets[i].key] && $scope.selectedFacets[$scope.facets[i].key].length)) {
                for (k in $scope.selectedFacets[$scope.facets[i].key]) {
                    for ( j = 0; j < $scope.facets[i].data.length; j++) {
                        if ($scope.selectedFacets[$scope.facets[i].key][k].label == $scope.facets[i].data[j].label) {
                            break;
                        }
                    }
                    if (j >= $scope.facets[i].data.length) {
                        $scope.facets[i]['data'].push($scope.selectedFacets[$scope.facets[i].key][k]);
                    }
                }
            }
        }
    };
    // Triggered whenever a facet is selected/deselected.
    $scope.checkChange = function(facet, f_data) {
        $scope.info.defaultState = false;
        $scope.info.changedFilter = false;
        $scope.info.pristine = false;
        $scope.info.drillDown = false;
        if (f_data.selected) {
            $scope.addSelected(facet, f_data);
        } else {
            $scope.removeSelected(facet, f_data);
        }
    };

    $scope.isNoFilteredFacetFound = function(facet){
        var filter = facet.filter;
        if(!filter) return false;
        var list = facet.data.filter(function(item){
            if(!item.label) return false;

            if((item.label.toLowerCase()).indexOf(filter.toLowerCase()) != -1) return true;
            return false;
        })
        return !(list.length > 0);
    }
    $scope.facetSelectAll = function(facet) {
        var f_data = facet.data;
        var filter = facet.filter;
        f_data.map(function(item){
            if(!item.label) return false;
            if(item.label.toLowerCase().indexOf(filter.toLowerCase()) != -1){ item.selected = true;}
            else { item.selected = false;}
        });
        $scope.facetApplyMultiple(facet);
    };
    $scope.getSelectedFacetData = function(index){
        return $scope.facets[index];
    }
    // Triggered whenever a facet is sseelct all option
    $scope.facetApplyMultiple = function(facet) {
        var filteredFacets = facet.data,f_data,selected_f_data,found;
        var duplicateFacet_data_selected = filteredFacets.filter(function(f_data){
            if(f_data.selected){
               return true
            }
            return false;
        });
        for(var i=0;i<duplicateFacet_data_selected.length;i++){
            selected_f_data = duplicateFacet_data_selected[i];
            $scope.addSelected(facet, selected_f_data, true);
        }; 
        $scope.info.defaultState = false;
        $scope.info.changedFilter = false;
        $scope.info.currentFacet = facet;
        $scope.info.pristine = false;
        $scope.tableParams.page(1);
        $scope.tableParams.reload();
    };
    // Triggered whenever a facet is sseelct all option
    $scope.facetApplyFromMoreWindow = function(facetgroup, list, index) {
        //select original facet
        var tempList = $scope.facets[index].data;
        tempList.map(function(item){
            item.selected = false;
            for(var i=0;i<list.length;i++){
                if(list[i].label == item.label){
                    item.selected = true;
                    break;
                }
            };
        });
        //remove pre. selected facet
        if ($scope.selectedFacets[facetgroup.key]) {
            $scope.selectedFacets[facetgroup.key] = [];
        }
        for(var i=0;i<list.length;i++){
            $scope.addSelected(facetgroup, list[i], true);
        };
        $scope.info.defaultState = false;
        $scope.info.changedFilter = false;
        $scope.info.currentFacet = facetgroup;
        $scope.info.pristine = false;
        $scope.tableParams.page(1);
        $scope.tableParams.reload();
    };

    // Add the given facet to the selectedFacets list and also sets the same as currentFacet.
    $scope.addSelected = function(facet, f_data, notToReload) {
        $scope.info.defaultState = false;
        $scope.info.changedFilter = false;
        $scope.info.currentFacet = facet;
        if (!$scope.selectedFacets[facet.key]) {
            $scope.selectedFacets[facet.key] = [];
        }
        if(!$scope.isCheckSelectedFacetExist($scope.selectedFacets[facet.key], f_data)){
            $scope.selectedFacets[facet.key].push(f_data);
        } 
        if(!notToReload){
            $scope.info.pristine = false;
            $scope.tableParams.page(1);
            $scope.tableParams.reload();
        }
    };
    $scope.isCheckSelectedFacetExist = function(data,f_data){
        for(var i=0;i<data.length;i++){
            if(data[i].label == f_data.label){
                return true;
            }
        }
        return false;
    };

    // Removes the given facet from the selectedFacets list and also sets the same as the currentFacet.
    $scope.removeSelected = function(facet, f_data) {
        $scope.info.defaultState = false;
        $scope.info.changedFilter = false;
        $scope.info.currentFacet = facet;
        $scope.info.drillDown = false;
        $scope.selectedFacets[facet.key].splice($scope.selectedFacets[facet.key].indexOf(f_data), 1);
        var flag = false;
        for (var i in $scope.selectedFacets) {
            for (var j = 0; j < $scope.selectedFacets[i].length; j++) {
                if (!$scope.selectedFacets[i][j].disabled) {
                    flag = true;
                    break;
                }
            }
        }
        if (flag || !$scope.customDateFilter){
            $scope.info.pristine = false;
        }
        else{
            $scope.info.pristine = true;
            $scope.info.currentFacet = null;
        }
        $scope.tableParams.page(1);
        $scope.tableParams.reload();
    };

    // Updates the flattened list of selected facets with every change to selectedFacets.
    $scope.listSelectedFacets = function() {
        var i,
            j,
            keys = Object.keys($scope.selectedFacets),
            selectedFacet;
        $scope.selectedFacetsList.length = 0;
        for (i in keys) {
            for (j in $scope.selectedFacets[keys[i]]) {
                selectedFacet = {};
                selectedFacet['f_data'] = $scope.selectedFacets[keys[i]][j];
                selectedFacet['key'] = keys[i];
                $scope.selectedFacetsList.push(selectedFacet);
            }
        }
        //group by facet group name

    };

    // Removes the given facet from the selectedFacets from the click of remove icon.
    $scope.removeFacet = function(key, facet) {
        $scope.info.defaultState = false;
        $scope.info.changedFilter = false;
        $scope.info.page['current'] = 0;
        $scope.info.pristine = false;
        $scope.info.drillDown = false;
        facet.selected = false;
        $scope.info.currentFacet = $scope.getFacet(key);
        //update current facets data to unselect facet
        for(var index = 0;index < $scope.info.currentFacet.data.length;index++){
            if(facet.label === $scope.info.currentFacet.data[index]['label']){
                $scope.info.currentFacet.data[index]['selected'] = false;
            }
        }

        var flag = false;
        $scope.selectedFacets[key].splice($scope.selectedFacets[key].indexOf(facet), 1);
        //$scope.selectedFacets[key].count = $scope.selectedFacets[key].length;
        if($scope.selectedFacets[key].length == 0){
            $scope.selectedFacets[key] = [];
        }        
        for (var i in $scope.selectedFacets) {
            for (var j = 0; j < $scope.selectedFacets[i].length; j++) {
                if (!$scope.selectedFacets[i][j].disabled) {
                    flag = true;
                    break;
                }
            }
        }
        if (flag || !$scope.customDateFilter)
            $scope.info.pristine = false;
        else
            $scope.info.pristine = true;
        $scope.tableParams.page(1);
        $scope.tableParams.reload();
    };
    $scope.removeFacetGroup = function(key,facet) {
        $scope.info.defaultState = false;
        $scope.info.currentFacet = null;
        $scope.info.pristine = false;
        facet.selected = false;
        var flag = false;
        var tempCount = $scope.selectedFacets[key].length;
        for(i=0;i<tempCount;i++){
            $scope.selectedFacets[key].splice($scope.selectedFacets[key].indexOf($scope.selectedFacets[key][i]), 1);
        }
        //$scope.selectedFacets[key].count = $scope.selectedFacets[key].length;
        if($scope.selectedFacets[key].length == 0){
            $scope.selectedFacets[key] = [];
        }        
        for (var i in $scope.selectedFacets) {
            for (var j = 0; j < $scope.selectedFacets[i].length; j++) {
                if (!$scope.selectedFacets[i][j].disabled) {
                    flag = true;
                    break;
                }
            }
        }
        if (flag || !$scope.customDateFilter)
            $scope.info.pristine = false;
        else
            $scope.info.pristine = true;
        $scope.tableParams.page(1);
        $scope.tableParams.reload();
    };

    // Reset will remove all the user selection on the UI
    $scope.resetAll = function() {
        var i,
            j,
            d,
            d1;
        for (i in $scope.facets) {
            if (Array.isArray($scope.selectedFacets[$scope.facets[i].key])) {
                $scope.selectedFacets[$scope.facets[i].key].length = 0;
            }
            for (j in $scope.facets[i].data) {
                $scope.facets[i].data[j].selected = false;
            }
        }
        $scope.customDateFilter = true;
        $scope.dateRangeFilterName = GlobalService.getVal('customdate');
        d =  metaDataService.getTodayDate();//moment(moment.utc().format('YYYY-MM-DD HH:mm:ss'), 'YYYY-MM-DD HH:mm:ss').toDate();
        d1 =  metaDataService.getTodayDate();//moment(moment.utc().format('YYYY-MM-DD HH:mm:ss'), 'YYYY-MM-DD HH:mm:ss').toDate();
        if ($scope.info.default_days) {
            d.setTime(d.getTime() - $scope.info.default_days);
        } else {
            d.setFullYear(d.getFullYear() - 10);
        }
        $scope.setFromTo(d, d1);
        $scope.info.pristine = true;
    };

    // Reset will remove all the user selection on the UI and brings the UI to default state. Keeps the defaulf filter intact.
    $scope.reset = function() {
        var d,
            d1,
            i,
            j,
            keys;
       // if ($scope.info.defaultFilterInfo['default_filter_type'] != 'outofboxsearch' || ($scope.info.defaultFilterInfo['default_filter_type'] == 'outofboxsearch' && $scope.info.defaultFilterInfo['default_filter_status'] == 'off') || ($scope.info.defaultFilterInfo['default_filter_type'] == 'outofboxsearch' && $scope.info.defaultFilterInfo['default_filter_status'] == 'on' && $scope.info.defaultFilterInfo['out_of_box_search'] != $scope.info.quick)) {
            $scope.info.quick = 0;
            $scope.info.uploaded_by = null;
            $scope.info.disable_time = false;
            $scope.info.selectedFilterName = "Select View";

            //for (var member in $scope.info.defaultFilterInfo) delete $scope.info.defaultFilterInfo[member];
       //}
         for (i in $scope.facets) {
            if (Array.isArray($scope.selectedFacets[$scope.facets[i].key])) {
                $scope.selectedFacets[$scope.facets[i].key].length = 0;
            }
            for (j in $scope.facets[i].data) {
                $scope.facets[i].data[j].selected = false;
                $scope.facets[i].expanded = false;
            }
            if($scope.facets[i].filter){
                $scope.facets[i].filter = "";
            }
        }

        $scope.customDateFilter = true;
        $scope.dateRangeFilterName = GlobalService.getVal('customdate');
        d =  metaDataService.getTodayDate();//moment(moment.utc().format('YYYY-MM-DD HH:mm:ss'), 'YYYY-MM-DD HH:mm:ss').toDate();
        d1 =  metaDataService.getTodayDate();//moment(moment.utc().format('YYYY-MM-DD HH:mm:ss'), 'YYYY-MM-DD HH:mm:ss').toDate();
        if ($scope.info.max_days_allowed) {
            d.setTime(d.getTime() - $scope.info.default_days);
        } else {
            d.setFullYear(d.getFullYear() - 10);
        }
        $scope.setFromTo(d, d1);
        $scope.info.pristine = true;
    };    
    // Reset from the UI
    $scope.resetFromUI = function() {       
        $scope.info.selectedFilterName = "Select View";
        $scope.info.currentFacet = null;
        $scope.info.clearFilter = true;
        $scope.customDateFilter = true;
        $scope.info.uploaded_by = null;
        $scope.customDateFilterApplied = true;
        $scope.info.page['current'] = 0;
        $scope.reset();
    };

    // Loads a saved view.
    $scope.loadView = function(view) {
        $scope.info.defaultState = false;
        $scope.info.drillDown = false;
        $scope.info.selectedFilterName = view.search_type != "OUTOFBOX" ? view.view_name : $scope.getValue('last' + view.last_n_log_by_user + 'byme');
        $scope.applyView($scope.parseView(view));
        var details = {
            'View Name': $scope.info.selectedFilterName
        };
        UserTrackingService.standard_user_tracking($scope.info.application, $scope.info.application, 'Apply View', JSON.stringify(details)).then(userTrackingSuccess, handleSessionTimeout);
    };
    
    // Removes the out of box filters from the applied filters
    $scope.removeOutOfBox = function() {
        $scope.info.defaultState = false;
        $scope.info.changedFilter = false;
        $scope.info.quick = 0;
        $scope.info.disable_time = false;
        $scope.info.uploaded_by = null;
        $scope.info.defaultFilterSelected = false;
        $scope.info.pristine = true;
        $scope.info.selectedFilterName = "Select View";
        $scope.tableParams.reload();
        $scope.refresh();
    };
    
    $scope.trackLogBundle = function(bundle_name) {
        var details = {
            'Bundle Name': $filter('bundleName')(bundle_name)
        };
        UserTrackingService.standard_user_tracking($scope.info.application, $scope.info.application, 'Search Log Bundle', JSON.stringify(details)).then(function(response) {
            
        }, handleSessionTimeout);
    };

    // Parses the given facets list into JSON.
    $scope.parseView = function(view) {
        var i,
            p_view = {},
            s_facets;
        if (view.facet_filters[0] != "NA") {
            p_view['facets'] = {};
            p_view['facetKeys'] = {};
            s_facets = view.facet_filters[0].match(/`([^`]+)`/g);
            for (i in s_facets) {
                s_facets[i] = s_facets[i].replace(/`/g, '');
                if (!p_view['facets'].hasOwnProperty(s_facets[i].split('^')[0])) {
                    p_view['facets'][s_facets[i].split('^')[0]] = [];
                }
                if (s_facets[i].split('^')[0] == 'namespace' || s_facets[i].split('^')[0] == 'events') {
                    p_view['facets'][s_facets[i].split('^')[0]].push(s_facets[i].split('^')[1]);
                    p_view['facetKeys'][s_facets[i].split('^')[1]] = s_facets[i].split('^')[2];
                } else {
                    p_view['facets'][s_facets[i].split('^')[0]].push(s_facets[i].split('^')[1]);
                }
            }
        }
        if(!!view.extraFacets) {
        	var extraFacetFound = false;
        	angular.forEach(view.extraFacets, function(values, facet) {
        		if(!!p_view['facets'][facet]) {
                    angular.forEach(values, function(value) {
                    	if(facet == 'namespace' && $scope.sectionsContent[value]["nsType"] == "EVENT") {
		                    facet = 'events';
		                }
                        if((facet == "namespace" || facet == "events") && p_view['facets'][facet].indexOf($scope.sectionsContent[value]['description']) == -1) {
                    		p_view['facets'][facet].push($scope.sectionsContent[value]['description']);
                    		p_view['facetKeys'][$scope.sectionsContent[value]['description']] = value;
                    		extraFacetFound = true;
                    	} else if(!(facet == "namespace" || facet == "events") && p_view['facets'][facet].indexOf(value) == -1) {
                    		p_view['facets'][facet].push(value);
                    		extraFacetFound = true;
                    	}
                    });	
                } else {
                	p_view['facets'][facet] = [];
            		angular.forEach(values, function(value) {
            			if(facet == 'namespace' && $scope.sectionsContent[value]["nsType"] == "EVENT") {
		                    facet = 'events';
		                }
		                if(facet == 'namespace' || facet == 'events') {
		                	p_view['facets'][facet].push($scope.sectionsContent[value]['description']);
		                	p_view['facetKeys'][$scope.sectionsContent[value]['description']] = value;
		                	extraFacetFound = true;
		                } else {
		                	p_view['facets'][facet].push(value);
		                	extraFacetFound = true;
		                }
                    });	
                }
            });
            if(!!extraFacetFound) {
            	$scope.info.selectedFilterName = "Select View";
            }
        }
        p_view['start_time'] = view.start_ts;
        p_view['out_of_box'] = view.search_type == 'OUTOFBOX';
        p_view['end_time'] = view.end_ts;
        p_view['lastn'] = view.last_n_log;
        p_view['lastnbyme'] = view.last_n_log_by_user;
        p_view['default'] = view.default;
        return p_view;
    };

    // Applies the given parsed view.
    $scope.applyView = function(p_view) {
        var i,
            j,
            k,
            l,
            m,
            keys = [],
            facet;
            
        $scope.info.viewLoad = true;
        if(!p_view['out_of_box']) {
            if (!!p_view['facets']) {
                keys = Object.keys(p_view['facets']);
            }
            $scope.resetFacets();
            $scope.info.disable_time = false;
            $scope.info.pristine = false;
            $scope.info.quick = 0;
            $scope.info.uploadedBy = null;
            for (i in keys) {
                for (j in $scope.facets) {
                    if (keys[i] != 'relativetimefilter' && keys[i] === $scope.facets[j].key) {
                        if (!Array.isArray($scope.selectedFacets[keys[i]])) {
                            $scope.selectedFacets[keys[i]] = [];
                        }
                        for ( k = 0; k < p_view['facets'][keys[i]].length; k++) {
                            for ( l = 0; l < $scope.facets[j].data.length; ++l) {
                                if (p_view['facets'][keys[i]][k] == $scope.facets[j].data[l].label) {
                                    if (!!$scope.selectedFacets[keys[i]] && !!$scope.selectedFacets[keys[i]].length) {
                                        for ( m = 0; m < $scope.selectedFacets[keys[i]].length; ++m) {
                                            if ($scope.facets[j].data[l].label == $scope.selectedFacets[keys[i]][m].label) {
                                                $scope.facets[j].data[l].disabled = true;
                                                $scope.selectedFacets[keys[i]][m].disabled = true;
                                                break;
                                            }
                                        }
                                        if (m >= $scope.selectedFacets[keys[i]].length) {
                                            // alert("Facet doesn't exist in selectedFacets, so adding " + $scope.facets[j].data[l].label);
                                            $scope.facets[j].data[l].selected = true;
                                            // if (p_view.default) {
                                                // $scope.facets[j].data[l].disabled = true;
                                            // } else {
                                                $scope.facets[j].data[l].disabled = false;
                                            // }
                                            $scope.selectedFacets[keys[i]].push($scope.facets[j].data[l]);
                                        }
                                    } else {
                                        // alert("No selected facets " + $scope.facets[j].data[l].label);
                                        $scope.facets[j].data[l].selected = true;
                                        // if (p_view.default) {
                                            // $scope.facets[j].data[l].disabled = true;
                                        // } else {
                                            $scope.facets[j].data[l].disabled = false;
                                        // }
                                        // if (!$scope.selectedFacets[keys[i]]) {
                                            // $scope.selectedFacets[keys[i]] = [];
                                        // }
                                        $scope.selectedFacets[keys[i]].push($scope.facets[j].data[l]);
                                    }
                                    break;
                                }
                            }
                            if (l >= $scope.facets[j].data.length) {
                                // alert("Facet doesn't exist in $scope.facets" + p_view['facets'][keys[i]][k]);
                                facet = {};
                                facet['label'] = p_view['facets'][keys[i]][k];
                                if (p_view['facetKeys'].hasOwnProperty(p_view['facets'][keys[i]][k])) {
                                    facet['key'] = p_view['facetKeys'][p_view['facets'][keys[i]][k]];
                                }
                                facet['value'] = 0;
                                facet['selected'] = true;
                                // if (p_view.default) {
                                    // facet['disabled'] = true;
                                // } else {
                                    facet['disabled'] = false;
                                // }
                                $scope.facets[j].data.push(facet);
                                $scope.selectedFacets[keys[i]].push(facet);
                            }
                        }
                    }
                }
            }
            if (keys.indexOf("relativetimefilter") != -1) {
                $scope.changeQuickFilter(p_view['facets']['relativetimefilter'][0]);
                // if (p_view.default) {
                    // $scope.info.defaultState = true;
                // }
            } else {
                $scope.customDateFilter = true;
                $scope.customDateFilterApplied = true;
                var fromDateFromResponse = p_view['start_time'].replace("T", " ");
                fromDateFromResponse = fromDateFromResponse.replace("Z","");
                var toDateFromResponse = p_view['end_time'].replace("T", " ");
                toDateFromResponse = toDateFromResponse.replace("Z","");
                fromDateFromResponse = metaDataService.getStringToDate(fromDateFromResponse); //moment(fromDateFromResponse, 'YYYY-MM-DD HH:mm:ss').toDate();
                toDateFromResponse = metaDataService.getStringToDate(toDateFromResponse); //moment(toDateFromResponse, 'YYYY-MM-DD HH:mm:ss').toDate();
                $scope.setFromTo(fromDateFromResponse,toDateFromResponse);
            }
        } else {
            $scope.loadLogsByMe(p_view['lastnbyme'], true);
        }
        
    };

    //Checks if facet should be disabled
    $scope.checkDisabled = function(facet, f_data) {
        for (var i in $scope.selectedFacets[facet.key]) {
            if ($scope.selectedFacets[facet.key][i].label === f_data.label && $scope.selectedFacets[facet.key][i].disabled) {
                f_data.disabled = true;
                return true;
            }
        }
        return false;
    };

    // Resets the facet selection
    $scope.resetFacets = function() {
        var i,
            j;
        for (i in $scope.facets) {
            if (Array.isArray($scope.selectedFacets[$scope.facets[i].key])) {
                $scope.selectedFacets[$scope.facets[i].key].length = 0;
            }
            for (j in $scope.facets[i].data) {
                if ($scope.facets[i].data[j].selected == true) {
                    $scope.facets[i].data[j].selected = false;
                }
            }
        }
    };

    //Save view related methods...

    $scope.saveModal = {};
    $scope.form = {};
    
    
    $scope.showSaveFilterModal = function() {
        if ($scope.savedFiltersList.length >= GlobalService.getVal('max_views_limit')) {
            ModalService.alertBox({
                msgKey : 'max_views_msg'
            });
            return;
        }
        $scope.saveModal = {};
        $scope.saveModal.saveStatus = "initiated";
        $scope.saveModal.message = "";
        $scope.saveModal.filters = "";
        $scope.saveModal.filtersString = "";
        $scope.saveModal.searchQuery = $scope.info.filterSuggest;
        $scope.saveModal.timeRange = $scope.getFrom(true).replace(/T|Z/g, " ") + "To " + $scope.getTo(true).replace(/T|Z/g, " ");
        var tmpKey = "";
        if ($scope.customDateFilter == false) {
            $scope.saveModal.timeRange = $scope.dateRangeFilterName;
            $scope.saveModal.filtersString += '`relativetimefilter' + '^' + $scope.dateRangeFilterName + '`';
        }
        var keys = Object.keys($scope.selectedFacets);
        for (var i in keys) {
            for (var j in $scope.selectedFacets[keys[i]]) {
                if ($scope.saveModal.filtersString) {
                    $scope.saveModal.filtersString += ',';
                }
                $scope.saveModal.filtersString += '`' + keys[i] + "^" + $scope.selectedFacets[keys[i]][j].label + ($scope.selectedFacets[keys[i]][j].hasOwnProperty('key') ? "^" + $scope.selectedFacets[keys[i]][j].key : '') + '`';

                if ($scope.saveModal.filters != "") {
                    $scope.saveModal.filters = $scope.saveModal.filters + ', ' + $scope.selectedFacets[keys[i]][j].label;
                } else {
                    $scope.saveModal.filters = $scope.selectedFacets[keys[i]][j].label;
                }
            }
        }
        $scope.modal = ModalService.openModal('partials/logvault-save-filter.html', $scope, false, true);

        $scope.form = {
            visible : true,
            message : ""
        };
    };
         
    $scope.saveModal.viewOverwrite = false;
    $scope.saveModal.viewOverwriteIsDefault = false;
    $scope.checkViewName = function(){  
    
        $scope.saveModal.viewOverwrite = false;
        $scope.saveModal.viewOverwriteIsDefault = false;
        if($scope.savedFiltersList && $scope.savedFiltersList.length && $scope.savedFiltersList.length > 0){
            var found = false;
            for(var i=0; i< $scope.savedFiltersList.length; i++) {
                if($scope.savedFiltersList[i].view_name == $scope.saveModal.filterName) {                   
                    if($scope.savedFiltersList[i].currentUser) {
                        $scope.saveModal.viewOverwrite = true;
                        if($scope.savedFiltersList[i].default){
                            $scope.saveModal.viewOverwriteIsDefault = true;
                        }
                        continue;
                    }else{                          
                        found = true;
                        break;
                    }
                }
            }   
            if(found) {
                // mark it as invalid
                $scope.form.saveViewModal.viewName.$setValidity('duplicate', false)
            }else{
                $scope.form.saveViewModal.viewName.$setValidity('duplicate', true)          
            }
            
        }else{
            $scope.getSavedFilters();
        }
    }
    $scope.saveFilter = function() {
        if (!$scope.form.saveViewModal.$valid) {
            return;
        }
        $scope.callSaveViewAPI();

    };
    
    $scope.callSaveViewAPI = function() {
        var saveParam = {
            "last_n_log" : $scope.info.quick > 1 ? $scope.info.quick : 0,
            "last_n_log_uploaded_by_me" : $scope.info.quick == 1 ? $scope.info.quick : 0,
            "facet_string" : $scope.saveModal.filtersString,
            "start_time" : $scope.getFrom(),
            "end_time" : $scope.getTo(),
            "search_name" : $scope.saveModal.filterName,
            "search_desc" : escape($scope.saveModal.desc),
            "is_public" : $scope.saveModal.access == 'public' ? true : false,
            "is_default" : $scope.info.defaultFilterInfo.view_name == $scope.saveModal.filterName ? true : false
        };
        $scope.saveModal.saveStatus = "progress";
        LogVaultService.saveFilter(saveParam).then(function(response) {
            var details = {
                "View Name" : $scope.saveModal.filterName,
                "Facet String" : $scope.saveModal.filtersString,
                "Time Range" : $scope.getFrom() + "--" + $scope.getTo()
            };
            UserTrackingService.standard_user_tracking($scope.info.application, $scope.info.application, 'Save View', "{\'" + JSON.stringify(details) + "\'}").then(userTrackingSuccess, handleSessionTimeout);

            $scope.saveModal.saveStatus = "success";
            $scope.saveModal.message = "View saved successfully.";
            // if($scope.info.defaultFilterInfo.view_name == $scope.saveModal.filterName) {
                // $scope.loadDefaultFilter();
            // }
            $scope.getSavedFilters();
            // $scope.getAllSavedFilter();
        }, function(response) {
            $scope.saveModal.saveStatus = "error";
            $scope.saveModal.message = "Oops! Something went wrong!";
            handleSessionTimeout(response);
        });
    };

    // Closes the modal held by $scope.modal
    $scope.hideModal = function() {
        $scope.modal.close();
    };
    /*
     * Load and set filter list
     */
    $scope.savedFiltersList = [];
    $scope.savedFiltersListNotFound = false;
    $scope.allUsersInfo = [];
    $scope.currentUserId = null;
    $scope.savedFiltersListLoading = true;

    $scope.getSavedFilters = function(track) {
        $scope.savedFiltersListLoading = true;
        LogVaultService.getSavedFilters().then(function(response) {
            populateSavedViewsList(response, track);

        }, function(response) {
            handleSessionTimeout(response);
            $scope.savedFiltersListLoading = false;
            $scope.savedFiltersListNotFound = true;
        });
    };
    
    function populateSavedViewsList(response, track) {
        $scope.savedFiltersList = [];
        $scope.allFilterList = response.data.Data;
        angular.forEach($scope.allFilterList, function(view) {
            if(view.search_type != "OUTOFBOX") {
                $scope.savedFiltersList.push(view);
            }
        });
        var defaultFilterArr = $filter('filter')($scope.allFilterList, {created_by: $scope.getLoggedInUserName(), default: true}) || [];
        $scope.info.defaultFilterInfo = defaultFilterArr.length ? defaultFilterArr[0] : {};
        $scope.savedFiltersListLoading = false;
        if ($scope.savedFiltersList && $scope.savedFiltersList.length > 0) {
            $scope.savedFiltersListNotFound = false;
        } else {
            $scope.savedFiltersListNotFound = true;
        }
        
        var viewsList = [];
        //Process respone and insert field "currentUser" true/false
        for (var i = 0; i < $scope.savedFiltersList.length; i++) {
            $scope.savedFiltersList[i].currentUser = $scope.savedFiltersList[i].created_by == $scope.getLoggedInUserName() ? true : false;
            viewsList.push($scope.savedFiltersList[i].view_name);
        }
        
        if(track) {
            var details = {
                'Name of views': viewsList
            };
            UserTrackingService.standard_user_tracking($scope.info.application, $scope.info.application, 'List view', JSON.stringify(details)).then(userTrackingSuccess, handleSessionTimeout);
        }
        //check for duplicate name during add a new view
        if ($scope.saveModal.filterName && $scope.form.saveViewModal) {
            var found = false;
            for (var i = 0; i < $scope.savedFiltersList.length; i++) {
                if ($scope.savedFiltersList[i].view_name == $scope.saveModal.filterName) {
                    if ($scope.savedFiltersList[i].currentUser) {
                        $scope.saveModal.viewOverwrite = true;
                        continue;
                    } else {
                        found = true;
                        break;
                    }
                }
            }

            if (found && $scope.form.saveViewModal.viewName) {
                // mark it as invalid
                $scope.form.saveViewModal.viewName.$setValidity('duplicate', false);
            } else {
                $scope.form.saveViewModal.viewName.$setValidity('duplicate', true);
            }
        }
    }
    
    $scope.getViewCreaterName = function(id) {
        for (var i = 0; i < $scope.allUsersInfo.length; i++) {
            if($scope.allUsersInfo[i][0] == id){
                return $scope.allUsersInfo[i][2] + ' ' + $scope.allUsersInfo[i][3];
            }
        }
    };
    $scope.getViewCreatedByEmail = function(id) {
        for (var i = 0; i < $scope.allUsersInfo.length; i++) {
            if($scope.allUsersInfo[i][0] == id){
                return $scope.allUsersInfo[i][1] ;
            }
        }
    };
    /*
     * Get current user name i.e logged in user name
     */
    $scope.getLoggedInUserName = function() {   
        var user = metaDataService.getUser();       
        return user.email;
    };
    /*
     * Track user selection for filter list
     */
    $scope.info.filterBtn = 'all';
    $scope.getFilterScope = function(filter) {
        if ($scope.info.filterBtn == 'all') {
            return (filter.currentUser || (!filter.currentUser && filter.public));
        } else if ($scope.info.filterBtn == 'my') {
            return filter.currentUser;
        } else {
            return !filter.currentUser && filter.public;
        }       
    };
    $scope.getFilterOtherScope = function(filter) {
        return !filter.currentUser && filter.public;
    };

    $scope.info.setDefaultFilterOperation = {
        filterId : null,
        statusCode : 0
    };

    $scope.hideLeftMenu = false;
    $scope.hideFacets = function(isHide) {
        if (isHide) {
            $(".gb-data-contrainer").addClass('gb-fullscreen');
        } else {

            $(".gb-data-contrainer").removeClass('gb-fullscreen');
        }
        $timeout(function() {
            $scope.d3BarRender();
        }, 500);
        
    };

    $scope.deleteSavedFilter = function(selectedFilter, event) {
        //AppService.toggleProfileOption();
        $scope.modal = ModalService.openModal('partials/logvault_delete_filter.html', $scope, false, true);
        $scope.deleteModal = {};
        $scope.deleteModal.filter = {};
        $scope.deleteModal.filter.name = selectedFilter.view_name;
        $scope.deleteModal.filter.desc = decodeURIComponent(selectedFilter.desc);
        $scope.deleteModal.filter.id = selectedFilter.view_name;
        $scope.deleteModal.filter.isDefault = selectedFilter.default; 
        //$scope.info.defaultFilterInfo.search_id == selectedFilter[0] && $scope.info.defaultFilterInfo.default_filter_status === 'on' ? true : false;
        $scope.deleteModal.status = "initiated";
        $scope.deleteModal.deleteOperationMsg = "";
    };

    //Deletes the selected filter permanently
    $scope.deleteFilterRequest = function(filterName) {
        $scope.deleteModal.status = "progress";
        LogVaultService.deleteSavedFilter(filterName).then(function(response) {
            $scope.deleteModal.status = "success";
            if($scope.info.selectedFilterName == filterName) {
                $scope.info.selectedFilterName = "Select View";
            }
            $scope.deleteModal.deleteOperationMsg = "Deleted successfully";
            var details = {
                "View Name" : $scope.deleteModal.filter.name
            };
            UserTrackingService.standard_user_tracking($scope.info.application, $scope.info.application, 'Delete View', "{\'" + JSON.stringify(details) + "\'}").then(userTrackingSuccess, handleSessionTimeout);

            if ($scope.deleteModal.filter.isDefault) {
                $scope.info.defaultFilterInfo = "";
                $scope.resetFromUI();
            }
            $scope.getSavedFilters();
        }, function(response) {
            $scope.deleteModal.status = "error";
            $scope.deleteModal.deleteOperationMsg = "Error : " + response.data.msg;
            $scope.savedFiltersListNotFound = true;
            handleSessionTimeout(response);
        });
    };

    // To open the facet chart.
    $scope.openFacetChart = function(f_data, facetLabel) {
        var dateRange = "Time Range: " + $scope.facetSubCaptionDateFormat($scope.info.fromDate) + " TO " + $scope.facetSubCaptionDateFormat($scope.info.toDate);
        var f_conf = {};
        f_conf['cData'] = f_data;
        f_conf['cType'] = "bar2d";
        f_conf['facetChartMax'] = false;
        f_conf['exportImage'] = 0;
        f_conf['exportPdf'] = 0;
        f_conf['facetLabel'] = facetLabel ? facetLabel : "";
        f_conf['dateRange'] = dateRange;
        $scope.info.facetCharts.push(f_conf);
    };

    // To close the current facet chart.
    $scope.closeFacetChart = function(modal) {
        $scope.info.facetCharts.splice($scope.info.facetCharts.indexOf(modal), 1);
    };

    // To initiate download of facet chart as image
    $scope.exportAsImage = function(modal) {
        modal.exportImage = parseInt(modal.exportImage + 1);
    };

    // To initiate download of facet chart as pdf
    $scope.exportAsPDF = function(modal) {
        modal.exportPdf = parseInt(modal.exportPdf + 1);
    };

    // To add or remove a given bundle from the list of bundles.
    $scope.addRemoveBundle = function(bundle) {
        var len  = $scope.tableParams.data.length, count=0;
        for(var i=0;i<len;i++){
            if($scope.tableParams.data[i].selected){
                count++;
            }
        }
        if(count > 0){
            $scope.testBundleMsg = "Upload "+count+ " Bundles";
        }else{
            $scope.testBundleMsg = "Select Bundles";
        }        
    };

    // To bring up the list of files for a given bundle.
    $scope.listFiles = function(bundle) {
        var index = $scope.info.fileLists.length,
            url = bundle.obs_url;
        var sysId = bundle[$scope.info.sysId];
        var obsDate = bundle['obs_date'];

        $scope.info.fileLists[index] = {
            'loading' : true
        };
        LogVaultService.getFileList(url, sysId, bundle['obs_date']).then(function(response) {
            if (response.data.Status == 'Success') {
                // hack code for temp. fix
                // var bundlesFiles = response.data.Data.bundles.files[0];
                // bundlesFiles = bundlesFiles.split(',');              
                // response.data.Data.bundles.files = bundlesFiles;
                // hack code ends
                
                response.data.Data.bundles['sys_id'] = sysId;
                response.data.Data.bundles['obs_date'] = obsDate;
                
                //response.data.Data.bundles[0] = tmp;
                $scope.info.fileLists[index] = response.data.Data.bundles;
            }
        }, function(response) {
            handleSessionTimeout(response);
            console.error(response);
        });
    };

    // Close list of files
    $scope.closeFileList = function(modal) {
        $scope.info.fileLists.splice($scope.info.fileLists.indexOf(modal), 1);
    };

    // Brings up the list of bundles selected for download.
    $scope.showDownloadList = function() {
        $scope.bundleList = [];
        for(var i in $scope.tableParams.data) {
            if(!!$scope.tableParams.data[i].selected) {
                $scope.bundleList.push($scope.tableParams.data[i]);
            }
        }
        if ($scope.bundleList.length) {
            $scope.modal = ModalService.openModal('custom/download_list', $scope, false, true);
        } else {
            ModalService.alertBox({msg: 'Please select one or more bundle to start the download.'});
        }
    };

    // Returns the total size of all the bundles selected...
    $scope.getTotalSize = function() {
        var i,
            sum = 0;
        for (i in $scope.bundleList) {
            sum += parseInt($scope.bundleList[i].obs_size);
        }
        return sum;
        // return 12312312;
    };

    // Returns the string for download of single file.
    $scope.generateUrlForFile = function(bundle, file) {
        var url = {},
            t_bundle = {};
        t_bundle['bundle_name'] = bundle.bundle_name;
        t_bundle['files'] = [];
        t_bundle['obs_date'] = bundle.obs_date;
        t_bundle['files'].push(file);
        url['bundles'] = [];
        url['bundles'].push(t_bundle);
        url['download_type'] = "files";
        return JSON.stringify(url);
    };

    $scope.generateUrlForBundle = function() {
                
        // var size = $scope.getTotalSize();
        // var download_max_limit = GlobalService.getVal('download_max_limit');
        // if (size > download_max_limit) {
            // // alert(GlobalService.getVal('download_message'));
            // ModalService.alertBox({msgKey: 'download_message'});
            // return;
        // }
        var i,
            url = "", sid2;
        if (arguments.length) {
            url += "obs_url=" + arguments[0].obs_url;
        } else {
            for (i in $scope.bundleList) {
                if (url != "") {
                    url += "&";
                }
				sid2 = $scope.bundleList[i]['sysid2'];
                if(!sid2){
                    sid2 = 'NA';
                }

                url += "obs_url=" + $scope.bundleList[i].obs_url + "#-#" + $scope.bundleList[i]['sysid1'] + "#-#" + sid2 + "#-#"  + $scope.bundleList[i]['obs_date'];
            }
        }
        return url;
    };

    $scope.generateUrlForBundleGroup = function() {

        var size = $scope.getTotalSize();
        var download_max_limit = GlobalService.getVal('download_max_limit');
        if (size > download_max_limit) {
            $scope.info.dataLoading = false;
            $scope.info.resultLoading = false;
            $scope.info.facetLoading = false;
            var modal = ModalService.alertBox({msgKey: 'download_message'}, false);
            $scope.info.fadeModal = true;
            modal.close = function(){
                $scope.info.fadeModal = false;
                this.dismiss();
            }
            return;
        }
        var i,
            url = "", sid2;
        if (arguments.length) {
            url += "obs_url=" + arguments[0].bundle_name;
        } else {
            for (i in $scope.bundleList) {
                if (url != "") {
                    url += "&";
                }
                sid2 = $scope.bundleList[i]['sysid2'];
                if(!sid2){
                    sid2 = 'NA';
                }
                url += "obs_url=" + $scope.bundleList[i].obs_url + "#-#" + $scope.bundleList[i]['sysid1'] + "#-#" + sid2 + "#-#"  + $scope.bundleList[i]['obs_date']+"#-#"+ $scope.bundleList[i]['bundle_id'] ;
            }
        }
        return url;
    };
    $scope.facetSubCaptionDateFormat = function(value) {
        var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
        var d = new Date(value),
            month = months[d.getMonth()],
            day = '' + d.getDate(),
            year = d.getFullYear();

        if (day.length < 2)
            day = '0' + day;

        return [day, month, year].join('-');
    };

    /*
     * Load all user information and Default filter object
     *
     */
    
    var firstTimeLoaded = false;
    
    $scope.loadDefaultFilter = function() {
        var dashboardView = LogVaultService.getLoadView();
        if(!!dashboardView) {
            if(dashboardView.type == "custom") {
                var view = dashboardView['view'];
                view.view_name = 'Select View';
                var facet_filters = "";
                angular.forEach(view.facet_filters, function(values, facet) {
                    angular.forEach(values, function(value) {
                        var tmpString = "`" + facet + "^" + value + "`";
                        facet_filters += (!!facet_filters.length ? ',' : '') + tmpString;
                    });
                });
                view.facet_filters = [facet_filters];
                firstTimeLoaded = true;
                $scope.loadView(view);
            } else if(dashboardView.type == "savedView") {
                $scope.info.dataLoading = true;
                $scope.info.facetsLoading = true;
                LogVaultService.getSavedFilters().then(function(response) {
                    $scope.info.dataLoading = false;
                    $scope.info.facetsLoading = false;
                    var view = $filter('filter')(response.data.Data, {view_name: dashboardView.view}, true) || [];
                    if(view.length == 1) {
                    	if(!!dashboardView.facets) {
                    		view[0].extraFacets = dashboardView.facets;
                    	}
                        $scope.loadView(view[0]);
                    } else {
                        ModalService.alertBox({msg: "View not found"});
                        if(!firstTimeLoaded) {
                            LogVaultService.setLoadView(null);
                            $scope.loadDefaultFilter();
                        } else {
                            firstTimeLoaded = true;
                        }
                    }
                }, function(response) {
                    
                });
            }
            LogVaultService.setLoadView(null);
        }
        LogVaultService.getDefaultFilterInfo().then(function(response) {
            var d,
                d1,
                view_name;
            $scope.info.defaultFilterInfo = response.data.Data;
            if ($scope.info.defaultFilterInfo == '') {
                $scope.info.defaultFilterInfo = {};
                if(!dashboardView) {
                    firstTimeLoaded = true;
                    $scope.resetAll();
                }else if(dashboardView.source && dashboardView.source == 'test_rule'){
                    firstTimeLoaded = true;
                    $scope.resetAll();
                    $scope.updateWhetherToShowUploadBundleToTest();
                }
            } else if ( typeof $scope.info.defaultFilterInfo === 'object') {
                if(!dashboardView) {
                    firstTimeLoaded = true;
                    $scope.loadView($scope.info.defaultFilterInfo);
                }else if(dashboardView.source && dashboardView.source == 'test_rule'){
                    firstTimeLoaded = true;
                    $scope.loadView($scope.info.defaultFilterInfo);
                    $scope.updateWhetherToShowUploadBundleToTest();
                }
            }
        }, function(response) {
            console.error("Unable to fetch default filter.");
            handleSessionTimeout(response);
        });
        
    };
    
    $scope.logShowTime = function() {
        var details = {};
        var activity = ($scope.info.showOTime ? 'Show' : 'Hide') + ' Original Time';
        UserTrackingService.standard_user_tracking($scope.info.application, $scope.info.application, activity, JSON.stringify(details)).then(function(response) {
            
        }, handleSessionTimeout);
    };
    
    $scope.logToggleTimeline = function(showTimeline) {
        var details = {};
        details['Timeline'] = !!showTimeline ? 'Show Timeline' : 'Hide Timeline';
        var activity = 'Toggle Timeline';
        UserTrackingService.standard_user_tracking($scope.info.application, $scope.info.application, activity, JSON.stringify(details)).then(function(response) {
            
        }, handleSessionTimeout);
    };
    
    function userTrackingSuccess(response) {
        
    };
    $scope.redirectSearchPage = function(bundle){
        var logBundle=bundle.obs_url;
        var bundlename=bundle.obs_url;
        var bundle_id=bundle.bundle_id;
        var bundleData = {};
        bundleData['Log Bundle'] = logBundle;
        bundleData['bundlename'] = bundlename;
        bundleData['bundle_id'] = bundle_id;
        ExplorerService.setBundleData(bundleData);
        $scope.$emit('changePageEvent', 'explorer');
    }

    $scope.showMoreOption = function(data){
        return data.length > $scope.info.facetLimit;
    };
    $scope.openRulesTestPage = function(){
        $scope.bundleList = [];
        for(var i in $scope.tableParams.data) {
            if(!!$scope.tableParams.data[i].selected) {
                $scope.bundleList.push($scope.tableParams.data[i]);
            }
        }
        if ($scope.bundleList.length == 0) {
            ModalService.alertBox({msg: 'Please select one or more bundle to test.'});
            return;
        }
        var params = {
            app: 'rules_and_alerts'
        }
        RulesService.setLogBundle($scope.bundleList);
        $window.moveToApplication(params);
    };
    $scope.updateWhetherToShowUploadBundleToTest = function(){
        if($scope.fromRulesTestPage.page && ($scope.fromRulesTestPage.page == 'test_rule_history')){
            if($scope.fromRulesTestPage.rules && $scope.fromRulesTestPage.rules.length > 0){
                $scope.showTestRuleIcon= true;
                $scope.selectBundleNotification = true;
                return;
            }
        }
        $scope.showTestRuleIcon = false;
        $scope.selectBundleNotification = false;
    };

    $scope.renderHtml = function (html) {
        return $sce.trustAsHtml(html);
    };
}]);

angular.module('gbApp.services.logvault', []).factory('LogVaultService', ['$http', '$location', 'UserTrackingService', 'GlobalService',
function($http, $location, UserTrackingService, GlobalService) {
	
	var loadView = null;

	return {
	    
	    getLoadView: function() {
	        return loadView;
	    },
	    
	    setLoadView: function(view) {
	        loadView = view;
	    },

		// Service method to make an XHR to fetch all config meta info
		getAllConfig : function() {
			return UserTrackingService.getAllConfig();
		},
		// Service method to make an XHR to fetch the results based on parameters given
		getData : function(start, rows, facets, start_date, end_date, sort_order, cl_timezone, quick_filter, uploaded_by,quick_filter_name, drill_down) {	
			start =  (start - 1) * rows;
			if(start < 0) {
				start = 0;
			}
			var conf = {};
			if(!!uploaded_by){
				conf['uploaded_by'] = uploaded_by;
			}
			if (!!quick_filter) {
				conf['quick_filter'] = quick_filter;
			}
			if(sort_order) {
				conf["sortby"] = "obs_date " + sort_order;
			}
			if(drill_down){
				conf["drill_down"] = drill_down;
			}

			var t_facets = "";
			if(facets) {
				for(var key in facets) {
					if(facets[key] && facets[key].length && facets[key].length > 0) {
						
						for(var l=0; l < facets[key].length; l++){
							if( l == 0) {
								if(t_facets == "") {
									t_facets = key;							
								}else{
									t_facets += " ~||~ " + key
								}							
								t_facets += "=" + "\""+facets[key][l];
							}else{
								t_facets += "~" + facets[key][l];
							}
						}
						t_facets += "\"";
					}
				}
			}
			if(t_facets) {
				conf["filter"] = t_facets;
			}
			var infoserverDomain = GlobalService.getVal('infoserverDomain');
			var url = infoserverDomain + "/logvault/"+ GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + "/" + start_date + "/" + end_date+ "/" + start + "/" +rows;
			var tParam = angular.copy(conf);
            var mParam = angular.copy(conf);
            delete mParam.filter;
            return $http.post(url, {filter:tParam.filter}, {params : mParam});
		},
        
        //Service method for saving a filter
        saveFilter : function(param) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            var url = infoserverDomain + "/logvault/view/add/"+ GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + "/" + param.is_public + "/" + param.search_name + "/" + param.is_default;
            var data = {
                desc : param.search_desc,
                start_time : param.start_time,
                end_time : param.end_time,
                facet_filters : param.facet_string,
                search_type : param.search_type,
                last_n_log : param.last_n_log,
                last_n_log_by_me : param.last_n_log_uploaded_by_me
            };
            
            return $http.post(url, data);
        },
        
		//Service method to get saved filters
        getSavedFilters : function() {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http.get(infoserverDomain + "/logvault/view/list/all/"+ GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'));
        },
		
		// Service method to set default filter
        setResetDefaultFilter : function(view) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            var url = infoserverDomain + '/logvault/view/' + (view.default ? 'resetdefault' : 'setdefault') + '/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + view.view_name;
            return $http.post(url);
        },
		
		//Service method for deleting saved filter
        deleteSavedFilter : function(filterName) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http.post(infoserverDomain + "/logvault/view/delete/"+ GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + filterName);
        },
        
		//Service method to change filter accessibility
        changeFilterAccessibility : function(view) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http.post(infoserverDomain + "/logvault/view/setpublic/" + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + !view.public + '/' + view.view_name);
        },
        
		//Service method for getting default filter info
        getDefaultFilterInfo : function(param) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http.get(infoserverDomain + '/logvault/view/getdefault/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'));
        },
        
		getFileList : function(url, sysId, obsDate) {
			var infoserverDomain = GlobalService.getVal('infoserverDomain');
			return $http({
				url : infoserverDomain + '/bundles/files/named/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/'+ GlobalService.getVal('manufacturer') + '/'+ sysId+ '/'+ obsDate,				
				method : 'GET',
				params : {
					'obs_url' : url
				}
			});
		},
		getDownloadUrl : function(param){
			var infoserverDomain = GlobalService.getVal('infoserverDomain');
			return $http.post(infoserverDomain + '/logvault/download/bundles/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'), 
				{'download': JSON.parse(param)},
				{ headers: {
			        	"Content-Type": "application/json"
			    	}
			    });
		}
	};
}]);

var reloadGraph = function(data) {
	var i, j, fdata = [], t_data, barChart, chartLabel = "", t_date;
	var chart_config = {
		"chart" : {
			"animation" : "1",
			"bgcolor" : "FFFFFF",
			"canvasbgColor" : "FAFAFA",
			"canvasbgAlpha" : "100",
			"bgAlpha" : "100",
			"canvasBorderColor" : "000000",
			"canvasBorderThickness" : "0.1",
			"paletteColors" : "#51BBFD",
			"plotGradientColor" : "4682B4",
			"plotFillAlpha" : "95,100",
			"plotFillRatio" : "20,80",
			"plotBorderColor" : "51BBFD",
			"plotSpacePercent" : "40",
			"caption" : "",
			"xaxisname" : "",
			"yaxisname" : "Log Count",
			"showvalues" : "0",
			"decimals" : "0",
			"formatnumberscale" : "0",
			"numDivLines" : "0",
			"toolTipSepChar" : " : ",
			"baseFontSize" : "9",
			"baseFontColor" : "286594",
			"chartLeftMargin" : "5",
			//"chartRightMargin" : "3",
			"chartBottomMargin" : "3",
			"chartTopMargin" : "5",
			"captionPadding" : "3",
			"labelDisplay" : "ROTATE",
			"labelPadding" : "10",
			"rotatelabels" : "1",
			"slantlabels" : "1"
		}
	};
	if (!!data) {
		if (data['obs_date']['gap'].indexOf("YEAR") >= 0) {
			chartLabel = "Year View (UTC)";
			chart_config.chart.caption = chartLabel;
			chart_config.chart.rotatelabels = 0;
			chart_config.chart.slantlabels = 0;
			chart_config.chart.labelDisplay = 'auto';
			for ( i = 0; i < data['obs_date'].counts.length / 2; ++i) {
				t_data = {};
				t_date = new Date(data['obs_date'].counts[(i * 2)].replace(/-/g, "/").replace('T', ' ').substring(0, 19));
				t_data['label'] = t_date.getFullYear().toString();
				t_data['value'] = data['obs_date'].counts[(i * 2) + 1];
				t_data['link'] = "j-drillDown-" + data['obs_date'].counts[(i * 2)];
				fdata.push(t_data);
			}

			if (FusionCharts('myOwnChart')) {
				FusionCharts('myOwnChart').setJSONData({
					"chart" : chart_config.chart,
					"data" : fdata
				});
				FusionCharts('myOwnChart').render("fchart");
			} else {
				barChart = new FusionCharts({
					type : "column2d",
					renderAt : "fchart",
					width : "100%",
					id : 'myOwnChart',
					height : "100%",
					dataFormat : "json",
					dataSource : {
						"chart" : chart_config.chart,
						"data" : fdata
					}
				});
				barChart.render("fchart");
			}
		} else if (data['obs_date']['gap'].indexOf("MONTH") >= 0) {
			chartLabel = "Month View (UTC)";
			chart_config.chart.caption = chartLabel;
			chart_config.chart.rotatelabels = 0;
			chart_config.chart.slantlabels = 0;
			chart_config.chart.labelDisplay = 'auto';
			for ( i = 0; i < data['obs_date'].counts.length / 2; ++i) {
				t_data = {};
				t_date = new Date(data['obs_date'].counts[(i * 2)].replace(/-/g, "/").replace('T', ' ').substring(0, 19));
				t_data['label'] = t_date.getFullYear() + "-" + t_date.getMonthName().substring(0, 3);
				t_data['value'] = data['obs_date'].counts[(i * 2) + 1];
				t_data['link'] = "j-drillDown-" + data['obs_date'].counts[(i * 2)];
				t_data['color'] = '0099FF';
				fdata.push(t_data);
			}
			if (FusionCharts('myOwnChart')) {
				FusionCharts('myOwnChart').setJSONData({
					"chart" : chart_config.chart,
					"data" : fdata
				});
				FusionCharts('myOwnChart').render("fchart");
			} else {
				barChart = new FusionCharts({
					type : "column2d",
					renderAt : "fchart",
					width : "100%",
					id : 'myOwnChart',
					height : "100%",
					dataFormat : "json",
					dataSource : {
						"chart" : chart_config.chart,
						"data" : fdata
					}
				});
				barChart.render("fchart");
			}
		} else if (data['obs_date']['gap'].indexOf("DAY") >= 0) {
			chartLabel = "Day of Month View (UTC)";
			chart_config.chart.caption = chartLabel;
			for ( i = 0; i < data['obs_date'].counts.length / 2; ++i) {
				t_data = {};
				t_date = new Date(data['obs_date'].counts[(i * 2)].replace(/-/g, "/").replace('T', ' ').substring(0, 19));
				t_data['label'] = (t_date.getDate() > 9 ? t_date.getDate() : "0" + t_date.getDate()) + " " + t_date.getMonthName().substring(0, 3);
				t_data['value'] = data['obs_date'].counts[(i * 2) + 1];
				t_data['link'] = "j-drillDown-" + data['obs_date'].counts[(i * 2)];
				t_data['color'] = '0099FF';
				fdata.push(t_data);
			}
			if (FusionCharts('myOwnChart')) {
				FusionCharts('myOwnChart').setJSONData({
					"chart" : chart_config.chart,
					"data" : fdata
				});
				FusionCharts('myOwnChart').render("fchart");
			} else {
				barChart = new FusionCharts({
					type : "column2d",
					renderAt : "fchart",
					width : "100%",
					id : 'myOwnChart',
					height : "100%",
					dataFormat : "json",
					dataSource : {
						"chart" : chart_config.chart,
						"data" : fdata
					}
				});
				barChart.render("fchart");
			}
		} else if (data['obs_date']['gap'].indexOf("HOUR") >= 0) {
			chartLabel = "Hours View (UTC) (HH:MM Month-Date)";
			chart_config.chart.caption = chartLabel;
			chart_config.chart.rotatelabels = 0;
			chart_config.chart.slantlabels = 0;
			chart_config.chart.labelDisplay = 'wrap';
			for ( i = 0; i < data['obs_date'].counts.length / 2; ++i) {
				t_data = {};
				t_date = new Date(data['obs_date'].counts[(i * 2)].replace(/-/g, "/").replace('T', ' ').substring(0, 19));
				t_data['label'] = (t_date.getHours() > 9 ? t_date.getHours() : "0" + t_date.getHours()) + ":" + (t_date.getMinutes() > 9 ? t_date.getMinutes() : "0" + t_date.getMinutes()) + " " + t_date.getMonthName().substring(0, 3) + " " + t_date.getDate();
				t_data['value'] = data['obs_date'].counts[(i * 2) + 1];
				t_data['link'] = "j-drillDown-" + data['obs_date'].counts[(i * 2)];
				t_data['color'] = '0099FF';
				fdata.push(t_data);
			}
			if (FusionCharts('myOwnChart')) {
				FusionCharts('myOwnChart').setJSONData({
					"chart" : chart_config.chart,
					"data" : fdata
				});
				FusionCharts('myOwnChart').render("fchart");
			} else {
				barChart = new FusionCharts({
					type : "column2d",
					renderAt : "fchart",
					width : "100%",
					id : 'myOwnChart',
					height : "100%",
					dataFormat : "json",
					dataSource : {
						"chart" : chart_config.chart,
						"data" : fdata
					}
				});
				barChart.render("fchart");
			}
		} else if (data['obs_date']['gap'].indexOf("MINUTES") >= 0) {
			chartLabel = "Minutes View (UTC) (HH:MM)";
			chart_config.chart.caption = chartLabel;
			for ( j = 0; j < 60; ++j) {
				for ( i = 0; i < data['obs_date'].counts.length / 2; ++i) {
					t_date = new Date(data['obs_date'].counts[(i * 2)].replace(/-/g, "/").replace('T', ' ').substring(0, 19));
					if (t_date.getMinutes() == j) {
						break;
					}
				}
				t_data = {};
				if (i < data['obs_date'].counts.length / 2) {
					t_data['value'] = data['obs_date'].counts[(i * 2) + 1];
				} else {
					t_data['value'] = 0;
				}
				t_data['label'] = (t_date.getHours() > 9 ? t_date.getHours() : "0" + t_date.getHours()) + ":" + (j > 9 ? j : "0" + j);
				t_data['link'] = "j-drillDown-" + data['obs_date'].counts[(i * 2)];
				t_data['color'] = '0099FF';
				fdata.push(t_data);
			}
			if (FusionCharts('myOwnChart')) {
				FusionCharts('myOwnChart').setJSONData({
					"chart" : chart_config.chart,
					"data" : fdata
				});
				FusionCharts('myOwnChart').render("fchart");
			} else {
				barChart = new FusionCharts({
					type : "column2d",
					renderAt : "fchart",
					width : "100%",
					id : 'myOwnChart',
					height : "100%",
					dataFormat : "json",
					dataSource : {
						"chart" : chart_config.chart,
						"data" : fdata
					}
				});
				barChart.render("fchart");
			}
		} else if (data['obs_date']['gap'].indexOf("SECONDS") >= 0) {
			chartLabel = "Seconds View (UTC) (MM:SS)";
			chart_config.chart.caption = chartLabel;
			for ( j = 0; j < 60; ++j) {
				for ( i = 0; i < data['obs_date'].counts.length / 2; ++i) {
					t_date = new Date(data['obs_date'].counts[(i * 2)].replace(/-/g, "/").replace('T', ' ').substring(0, 19));
					if (t_date.getSeconds() == j) {
						break;
					}
				}
				t_data = {};
				if (i < data['obs_date'].counts.length / 2) {
					t_data['value'] = data['obs_date'].counts[(i * 2) + 1];
				} else {
					t_data['value'] = 0;
				}
				t_data['label'] = (t_date.getSeconds() > 9 ? t_date.getSeconds() : "0" + t_date.getSeconds()) + ":" + (j > 9 ? j : "0" + j);
				//t_data['link'] = "j-drillDown-" + data['obs_date'].counts[(i * 2)];
				t_data['color'] = '0099FF';
				fdata.push(t_data);
			}
			if (FusionCharts('myOwnChart')) {
				FusionCharts('myOwnChart').setJSONData({
					"chart" : chart_config.chart,
					"data" : fdata
				});
				FusionCharts('myOwnChart').render("fchart");
			} else {
				barChart = new FusionCharts({
					type : "column2d",
					renderAt : "fchart",
					width : "100%",
					id : 'myOwnChart',
					height : "100%",
					dataFormat : "json",
					dataSource : {
						"chart" : chart_config.chart,
						"data" : fdata
					}
				});
				barChart.render("fchart");
			}
		} else {
			chartLabel = "Year View (UTC)";
			chart_config.chart.caption = chartLabel;
			for ( i = 0; i < data['obs_date'].counts.length / 2; ++i) {
				t_data = {};
				t_date = new Date(data['obs_date'].counts[(i * 2)].replace(/-/g, "/").replace('T', ' ').substring(0, 19));
				t_data['label'] = t_date;
				t_data['value'] = data['obs_date'].counts[(i * 2) + 1];
				t_data['link'] = "j-drillDown-" + data['obs_date'].counts[(i * 2)];
				t_data['color'] = '0099FF';
				fdata.push(t_data);
			}
			if (FusionCharts('myOwnChart')) {
				FusionCharts('myOwnChart').setJSONData({
					"chart" : chart_config.chart,
					"data" : fdata
				});
				FusionCharts('myOwnChart').render("fchart");
			} else {
				barChart = new FusionCharts({
					type : "column2d",
					renderAt : "fchart",
					width : "100%",
					id : 'myOwnChart',
					height : "100%",
					dataFormat : "json",
					dataSource : {
						"chart" : chart_config.chart,
						"data" : fdata
					}
				});
				barChart.render("fchart");
			}
		}
	} else {
		if (FusionCharts('myOwnChart')) {
			FusionCharts('myOwnChart').setJSONData({
				"chart" : {
					"caption" : chartLabel,
					"canvasBgColor" : "F6F6F6",
					"showBorder" : 1,
					"yAxisName" : "Log Count",
					"theme" : "zune"
				},
				"data" : []
			});
			FusionCharts('myOwnChart').render("fchart");
		} else {
			barChart = new FusionCharts({
				type : "column2d",
				renderAt : "fchart",
				width : "100%",
				id : 'myOwnChart',
				height : "100%",
				dataFormat : "json",
				dataSource : {
					"chart" : {
						"caption" : chartLabel,
						"canvasBgColor" : "F6F6F6",
						"showBorder" : 1,
						"yAxisName" : "Log Count",
						"theme" : "zune"
					},
					"data" : []
				}
			});
			barChart.render("fchart");
		}
	}
};

var drillDown = function(input) {
	
	var d, d1;
	d = new Date(input.replace('j-drillDown-', '').replace(/-/g, "/").replace('T', ' ').substring(0, 19));
	d1 = new Date(input.replace('j-drillDown-', '').replace(/-/g, "/").replace('T', ' ').substring(0, 19));
	
	angular.element('.gb-logvault').scope().customDateFilterApplied = false;
    angular.element('.gb-logvault').scope().getUTCTime = false;
    angular.element('.gb-logvault').scope().info.currentFacet = null;
    angular.element('.gb-logvault').scope().info.drillDown = true;

    //reset quick filter
	angular.element('.gb-logvault').scope().info.changedFilter = false;
	angular.element('.gb-logvault').scope().info.uploaded_by = null;

	switch(angular.element('.gb-logvault').scope().info.chartLevel) {
		case 'YEAR' :
			d.setMonth(0);
			d.setDate(1);
			// d.setHours(0);
			// d.setMinutes(0);
			// d.setSeconds(0);
			d1.setMonth(12);
			d1.setDate(0);
			d1.setHours(23);
			d1.setMinutes(59);
			d1.setSeconds(59);
			break;
		case 'MONTH' :
			d.setDate(1);
			// d.setHours(0);
			// d.setMinutes(0);
			// d.setSeconds(0);
			d1.setMonth(d1.getMonth() + 1);
			d1.setDate(0);
			d1.setHours(23);
			d1.setMinutes(59);
			d1.setSeconds(59);
			break;
		case 'DAY' :
			// d.setHours(0);
			// d.setMinutes(0);
			// d.setSeconds(0);
			d1.setHours(23);
			d1.setMinutes(59);
			d1.setSeconds(59);
			break;
		case 'HOUR' :
			// d.setMinutes(0);
			// d.setSeconds(0);
			d1.setMinutes(59);
			d1.setSeconds(59);
			break;
		case 'MINUTES' :
			// d.setSeconds(0);
			d1.setSeconds(59);
			break;
	}
	angular.element('.gb-logvault').scope().updateBreadCrumb(d, d1);
	angular.element('.gb-logvault').scope().setFromTo(d, d1);
};

var facetChart = function() {
	var f_div = $('<div class="gb-facet-chart-window"><div class="gb-facet-chart-window-title"><label class="radio-inline pull-left gb-modal-toolbar-radio-label"><input type="radio" name="facetChartType" value="bar"> Bar Chart </label><label class="radio-inline pull-left gb-modal-toolbar-radio-label"><input type="radio" name="facetChartType" value="line"> Line Chart</label><span class="icon-file-pdf gb-modal-toolbar-icon gb-modal-toolbar-icon-sendToPFD pull-left" title="Export As PDF"></span><span class="icon-image2 gb-modal-toolbar-icon pull-left" title="Export As Image"></span><span class="icon-close2 pull-right gb-modal-toolbar-controller gb-modal-toolbar-icon-close" title="close window"></span><span class="pull-right gb-modal-toolbar-controller" title="maximize window"></span>	</div><div class="gb-facet-chart-window-body"><div class="chart"></div>	</div></div>');
	$("body").append(f_div);
};

// Controller to handle the change of page
angular.module('gbApp.controllers.rules', ['gbApp', 'gbApp.controllers', 'ngTable', 'ngDraggable']).controller('RulesCtrl', ['$scope', '$sce', 'GlobalService', 'ErrorService', 'ModalService', 'RulesService', 'AppService', 'InstanceHandler', 'metaDataService','$rootScope',
function($scope, $sce, GlobalService, ErrorService, ModalService, RulesService, AppService, InstanceHandler, metaDataService, $rootScope) {
	//get all constants for html files
	
	RulesService.getRulesConstants().then(function(response) {
		$scope.rulesconstants = response.data;
	}, function(response) {});
	
	// Object to store information on Rules page change
	$scope.info = {};

	// Stores the value of current selected page
	$scope.info.current = 'rules_list';

	// Stores whether session is timed out or not
	$scope.info.sessionTimedOut = false;

	// Stores the list of pages
	$scope.info.pagesList = GlobalService.getVal('rulesPages')[$scope.info.current];

	metaDataService.setRaACurrentPage($scope.info.current);
	// Function to get the URL of selected page from globals.js
	$scope.getRulesUrl = function() {
		return GlobalService.getVal($scope.info.current);
	};

	// Defines whether the instance viewer is full screen or not.
	$scope.instanceViewerFullscreen = function() {
		return (InstanceHandler.isVisible());
	};

	// Defines whether instance viewer is active or not.
	$scope.isThereInstanceViewer = function() {
		return (InstanceHandler.getNumberOfInstances());
	};

	$scope.loadHelpMessage = function(selector,link){
		$('#'+selector+'').load(link +'#main');
	}

	// Function to change the current page
	$scope.changeCurrentPage = function(page) {
		metaDataService.setRaACurrentPage(page);
		if(page == 'api_admin_config'){
			$scope.$broadcast("broadPageChange",page);
		}
		
		if ($scope.info.current == 'test_rule_history' && !!RulesService.getLogMoving()) {
			ModalService.alertBox({
				msg : 'Please wait till the log is being moved to the parser'
			});
			return;
		} else if ((page == 'rules_list' && RulesService.getRuleSavedStatus()) || ($scope.info.current == 'add_edit_template' && RulesService.getTemplateSavedStatus()) || ($scope.info.current == 'add_edit_API_template' && RulesService.getAPITemplateSavedStatus()) ) {
			$scope.info.targetPage = page;
			$scope.title = $scope.info.current == 'add_edit_template' ? 'Navigate from Add/Edit Template page' : 'Navigate from Add/Edit Rule page';
			$scope.msg = GlobalService.getVal('rulesMsgs')['add_rule_navigate'];
			$scope.modal = ModalService.openModal("partials/rules-and-alerts/navigate_add_rule.html", $scope, false, 'static');
		} else {
			if(($scope.info.current=='rules_list' && page=='manage_template') || ($scope.info.current=='add_edit_template' && $scope.isFromListPage('manage_template') && page != 'rules_list')){
				//console.log($scope.isFromListPage('manage_template'));
				$scope.info.current = page;
				$scope.info.pagesList = GlobalService.getVal('rulesPages')['manage_email_template_from_list_page'];
				return;
			}
			if(($scope.info.current=='rules_list' && page=='manage_API_template') || ($scope.info.current=='add_edit_API_template' && $scope.isFromListPage('manage_API_template') && page != 'rules_list')){
				$scope.info.current = page;
				$scope.info.pagesList = GlobalService.getVal('rulesPages')['manage_API_template_from_list_page'];
				return;
			}
			if($scope.info.current=='rules_list' && page=='add_category'){
				$scope.info.current = page;
				$scope.info.pagesList = GlobalService.getVal('rulesPages')['add_category_from_list_page'];
				return;
			}
			if(page=='add_edit_template' && $scope.isFromListPage('manage_template')){
				$scope.info.current = page;
				$scope.info.pagesList = GlobalService.getVal('rulesPages')['add_edit_template_from_list_page'];
				return;
			}
			if(page=='add_edit_API_template' && $scope.isFromListPage('manage_API_template')){
				$scope.info.current = page;
				$scope.info.pagesList = GlobalService.getVal('rulesPages')['add_edit_API_template_from_list_page'];
				return;
			}
			$scope.info.current = page;
			$scope.info.pagesList = GlobalService.getVal('rulesPages')[$scope.info.current];
		}
	};

	$scope.isFromListPage = function(src){
		if(src == 'manage_template'){
			var breadCrumb =  [{
				name: 'rules_list',
				label: 'Rules List'
			},{
				name: 'manage_template',
				label: 'Manage Templates'
			}];
			//compare it with $scope.info.pagesList
			return ($scope.info.pagesList[0]['name'] == breadCrumb[0]['name'] && $scope.info.pagesList[1]['name'] == breadCrumb[1]['name']);
		}
		if(src == 'manage_API_template'){
			var breadCrumb =  [{
				name: 'rules_list',
				label: 'Rules List'
			},{
				name: 'manage_API_template',
				label: 'Manage API Templates'
			}];
			//compare it with $scope.info.pagesList
			return ($scope.info.pagesList[0]['name'] == breadCrumb[0]['name'] && $scope.info.pagesList[1]['name'] == breadCrumb[1]['name']);
		}
		
	}
	// Function to navigate to Rules List page from Add/Edit Rule page
	$scope.changeCurrentPageConfirm = function() {
		RulesService.setTemplateSavedStatus(false);
		RulesService.setAPITemplateSavedStatus(false);
		if ($scope.info.targetPage == 'rules_list') {
			RulesService.setRuleSavedStatus(false);
		}
		if (($scope.info.current == 'rules_list' && $scope.info.targetPage == 'manage_template') || ($scope.info.current == 'add_edit_template' && $scope.isFromListPage('manage_template') && $scope.info.targetPage != 'rules_list')) {
			//console.log($scope.isFromListPage('manage_template'));
			$scope.info.current = $scope.info.targetPage;
			$scope.info.pagesList = GlobalService.getVal('rulesPages')['manage_email_template_from_list_page'];

		}
		else if (($scope.info.current == 'rules_list' && $scope.info.targetPage == 'manage_API_template') || ($scope.info.current == 'add_edit_API_template' && $scope.isFromListPage('manage_API_template') && $scope.info.targetPage != 'rules_list')) {
			$scope.info.current = $scope.info.targetPage;
			$scope.info.pagesList = GlobalService.getVal('rulesPages')['manage_API_template_from_list_page'];

		}
		else {
			$scope.info.current = $scope.info.targetPage;
			$scope.info.pagesList = GlobalService.getVal('rulesPages')[$scope.info.current];
		}

	};

	//Event to check when application is ready
	$scope.$on('AppLoadEvent-rules_and_alerts', function(event, args) {
		AppService.hidePanelLoading();

		// Execute this block when landed from explorer/apps to rules
		if (RulesService.getloadExplorerRules()) {
			RulesService.setRuleSavedStatus(false);
			RulesService.setRuleMode('new');
			$scope.info.targetPage = 'add_rule';
			$scope.$broadcast("loadExplorerRulesEvent");
			$scope.changeCurrentPageConfirm();
		}
	});

	// Function to get any system errors
	$scope.getError = function() {
		return ErrorService.getErrors('gbApp');
	};

	// Function to render text in html format
	$scope.renderHtml = function(html) {
		return $sce.trustAsHtml(html);
	};

}])

// Controller to handle the manage templates page
.controller('ManageTemplateCtrl', ['$scope', '$sce', '$timeout', '$filter', 'ngTableParams', 'RulesService', 'GlobalService', 'ModalService', 'UserTrackingService', 'AppService',
function($scope, $sce, $timeout, $filter, ngTableParams, RulesService, GlobalService, ModalService, UserTrackingService, AppService) {
	// Object to store the information for manage template page
	$scope.info = {};

	// Stores application name which is used for user tracking
	$scope.info.application = GlobalService.getVal('navRules');

	// Object that stores all the filter information
	$scope.info.filter = {};

	// Stores success messages
	$scope.info.successMsg = "";

	// Stores error messages
	$scope.info.errorMsg = "";

	// Stores whether session is timed out or not
	$scope.info.sessionTimedOut = false;

	// Stores the list of columns
	$scope.columns = $filter('filter')(GlobalService.getVal('templatesColumns'), {
		enabled : true
	});

	// Stores the field of initial Sorting
	$scope.info.initialSortField = GlobalService.getVal('templatesSortField');

	// Initializing the filter model of each column
	for (var i in $scope.columns) {
		$scope.info[$scope.columns[i]['field']] = "";
	}

	// Sets the object of initial sorting
	$scope.info.initialSorting = {};
	$scope.info.initialSorting[$scope.info.initialSortField] = 'desc';

	// Object that stores the page information for custom pagination
	$scope.info.page = {
		"total" : 0,
		"current" : 1,
		"pages" : 0,
		"count" : 10,
		"sortField" : $scope.info.initialSortField + "desc"
	};

	// Defines whether templates are loading
	$scope.info.templatesLoading = true;

	// Populate the table data for first load
	$scope.populateTable = function() {
		$scope.tableParams = new ngTableParams({
			page : 1, // show first page
			count : $scope.info.page['count'], // count per page
			sorting : $scope.info.initialSorting // Initial Sorting
		}, {
			total : $scope.templatesList.length, // length of data
			getData : function($defer, params) {
				var orderedData = params.sorting() ? $filter('orderBy')($scope.templatesList, params.orderBy()) : $scope.templatesList;
				orderedData = $filter('filterTemplates')(orderedData, $scope.info.filter);
				params.total(orderedData.length);
				$scope.info.page['total'] = orderedData.length;
				$scope.info.page['pages'] = Math.ceil($scope.info.page['total'] / $scope.info.page['count']);
				$defer.resolve(orderedData.slice((params.page() - 1) * params.count(), params.page() * params.count()));
			}
		});
	};

	// Function to reload templates
	$scope.reloadTemplates = function() {
		RulesService.getTemplates().then(function(response) {
			var templatesData = response.data.Data;
			if (!!templatesData.length) {
				for (var i = 0; i < templatesData.length; i++) {
					templatesData[i].subject = templatesData[i].subject.replace(/\{[^\.]+\./g, '{');
				}
			}
			$scope.templatesList = templatesData;
			$scope.clearAppliedFilters();
			$scope.info.page['current'] = 1;
			$scope.tableParams.reload();
			$scope.tableParams.page(1);
			$scope.info.templatesLoading = false;
			RulesService.setTemplatesList(response.data.Data);
			$scope.info.rulesList = RulesService.getRulesList();
			$scope.setTemplatesLabelMap();
		}, function(response) {
			$scope.templatesList = "";
			$scope.clearAppliedFilters();
			$scope.info.page['current'] = 1;
			$scope.tableParams.reload();
			$scope.tableParams.page(1);
			$scope.info.templatesLoading = false;
			if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
				$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['h2_down_msg'];
			} else {
				if ($scope.info.errorMsg == "") {
					$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['temp_load_failed'];
				} else {
					$scope.info.errorMsg += "<br>" + GlobalService.getVal('rulesMsgs')['temp_load_failed'];
				}
			}

			handleSessionTimeout(response);
		});
	};

	// Function to clear all messages
	$scope.clearMessage = function() {
		if (!$scope.info.templatesLoading) {
			$scope.info.successMsg = "";
			$scope.info.errorMsg = "";
		}
	};

	// Stores the list of templates
	RulesService.getTemplates().then(function(response) {
		var templatesData = response.data.Data;
		if (!!templatesData.length) {
			for (var i = 0; i < templatesData.length; i++) {
				templatesData[i].subject = templatesData[i].subject.replace(/\{[^\.]+\./g, '{');
			}
		}
		$scope.templatesList = templatesData;
		$scope.populateTable();
		$scope.info.templatesLoading = false;
		RulesService.setTemplatesList(response.data.Data);
		$scope.info.rulesList = RulesService.getRulesList();
		$scope.setTemplatesLabelMap();
	}, function(response) {
		$scope.templatesList = "";
		$scope.populateTable();
		$scope.info.templatesLoading = false;
		console.error('Error loading templates list');
		if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
			GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
			$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['h2_down_msg'];
		} else {
			if ($scope.info.errorMsg == "") {
				$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['temp_load_failed'];
			} else {
				$scope.info.errorMsg += "<br>" + GlobalService.getVal('rulesMsgs')['temp_load_failed'];
			}
		}
		handleSessionTimeout(response);
	});

	// Function to set the templates label map
	$scope.setTemplatesLabelMap = function() {
		var map = {};
		for (var i = 0; i < $scope.templatesList.length; i++) {
			map[$scope.templatesList[i]['template_name']] = true;
		}
		RulesService.setTemplatesLabelMap(map);
	};

	// Changes page size
	$scope.changePageSize = function() {
		$scope.info.page['count'] = parseInt($scope.info.page['count']);
		$scope.tableParams.count($scope.info.page['count']);
		$scope.info.page['pages'] = Math.ceil($scope.info.page['total'] / $scope.info.page['count']);
		if ($scope.info.page['current'] > $scope.info.page['pages']) {
			$scope.info.page['current'] = $scope.info.page['pages'];
			$scope.tableParams.page($scope.info.page['current']);
		}
	};

	// Switch to next page if current page is not last page
	$scope.nextPage = function() {
		if ($scope.info.page['current'] < $scope.info.page['pages']) {
			$scope.info.page['current'] += 1;
			$scope.tableParams.page($scope.info.page['current']);
		}
	};

	// Switch to previous page if current page is not first page
	$scope.prevPage = function() {
		if ($scope.info.page['current'] > 1) {
			$scope.info.page['current'] -= 1;
			$scope.tableParams.page($scope.info.page['current']);
		}
	};

	// Switch to first page if not on first page
	$scope.firstPage = function() {
		if ($scope.info.page['current'] == 1)
			return;
		$scope.info.page['current'] = 1;
		$scope.tableParams.page($scope.info.page['current']);
	};

	// Switch to last page if not on last page
	$scope.lastPage = function() {
		if ($scope.info.page['current'] == $scope.info.page['pages'])
			return;
		$scope.info.page['current'] = $scope.info.page['pages'];
		$scope.tableParams.page($scope.info.page['current']);
	};

	// Select/unselect select all checkbox based on templates selection
	$scope.checkTemplatesSelection = function() {
		for (var i in $scope.templatesList) {
			if (!$scope.templatesList[i].selected) {
				$scope.info.selectAll = false;
				return;
			}
		}
		$scope.info.selectAll = true;
	};

	// Select/unselect all templates on the page
	$scope.checkSelectAll = function() {
		if (!!$scope.info.selectAll) {
			for (var i = 0; i < $scope.templatesList.length; i++) {
				$scope.templatesList[i].selected = true;
			}
		} else {
			for (var i = 0; i < $scope.templatesList.length; i++) {
				delete $scope.templatesList[i].selected;
			}
		}
	};

	// Check if any template is selected
	$scope.checkTemplateSelected = function() {
		if (!!$scope.tableParams) {
			var selectedTemplates = $filter('filter')($scope.tableParams.data, {
				selected : true
			});
			if (!!selectedTemplates.length) {
				return true;
			}
		}
		return false;
	};

	// Function to add a new template
	$scope.addNewTemplate = function() {
		RulesService.setTemplateMode('new');
		$scope.$parent.changeCurrentPage('add_edit_template');
	};

	// Function to edit a template
	$scope.editTemplate = function(template) {
		RulesService.setTemplateMode('edit', template);
		$scope.$parent.changeCurrentPage('add_edit_template');
	};

	// Function to delete a single template
	$scope.deleteTemplate = function(template) {
		for (var i = 0; i < $scope.info.rulesList.length; i++) {
			if (!$scope.info.rulesList[i].email_template_id) {
				continue;
			}
			if (template.template_id == parseInt($scope.info.rulesList[i].email_template_id)) {
				ModalService.alertBox({
					msg : GlobalService.getVal('rulesMsgs')['temp_rule_associated']
				});
				return;
			}
		}
		$scope.delTemplate = template;
		$scope.msg = GlobalService.getVal('rulesMsgs')['temp_del_single'][0] + template.template_name + GlobalService.getVal('rulesMsgs')['temp_del_single'][1];
		$scope.modal = ModalService.openModal("partials/rules-and-alerts/delete_template.html", $scope, false, 'static');
	};

	// Confirm the deletion of template
	$scope.deleteTemplateConfirm = function() {
		var template = $scope.delTemplate;
		$scope.info.templatesLoading = true;
		RulesService.deleteTemplate(template.template_id).then(function(response) {
			UserTrackingService.standard_user_tracking($scope.info.application, 'Manage Template', 'delete', template.template_name).then(function(response) {

			}, handleSessionTimeout);
			$scope.reloadTemplates();
			if ($scope.info.successMsg == "") {
				$scope.info.successMsg = GlobalService.getVal('rulesMsgs')['temp_del_success'][0] + template.template_name + GlobalService.getVal('rulesMsgs')['temp_del_success'][1];
			} else {
				$scope.info.successMsg += "<br>" + GlobalService.getVal('rulesMsgs')['temp_del_success'][0] + template.template_name + GlobalService.getVal('rulesMsgs')['temp_del_success'][1];
			}
		}, function(response) {
			console.error('Unable to delete ' + template.template_name);
			$scope.info.templatesLoading = false;
			if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
				$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['h2_down_msg'];
			} else {
				if ($scope.info.errorMsg == "") {
					$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['temp_del_failed'][0] + template.template_name + GlobalService.getVal('rulesMsgs')['temp_del_failed'][1];
				} else {
					$scope.info.errorMsg += "<br>" + GlobalService.getVal('rulesMsgs')['temp_del_failed'][0] + template.template_name + GlobalService.getVal('rulesMsgs')['temp_del_failed'][1];
				}
			}
			handleSessionTimeout(response);
		});
	};

	// Function to delete selected templates
	$scope.deleteSelectedTemplates = function() {
		$scope.selectedTemplates = $filter('filter')($scope.tableParams.data, {
			selected : true
		});


		var emailtempidstodelete = $scope.rulesList.map(function (ob) {
			if (ob.email_template_id > 0) {
				for (var i = 0; i < $scope.selectedTemplates.length; i++) {
					if ($scope.selectedTemplates[i].template_id == ob.email_template_id) {
						$scope.selectedTemplates.splice(i, 1)
					}
				}
				return ob.email_template_id;

			}
		});
		if ($scope.selectedTemplates.length == 0) {
			ModalService.alertBox({
				msg: GlobalService.getVal('rulesMsgs')['map_temp_multiple_Del_none']
			});
			return;
		}

		// var templatesString = "<br>";
		// for (var i = 0; i < selectedTemplates.length; i++) {
		// 	if (i != selectedTemplates.length - 1) {
		// 		templatesString += "<strong>" + selectedTemplates[i].template_name + "<strong>, ";
		// 	} else {
		// 		templatesString += "<strong>" + selectedTemplates[i].template_name + "<strong>";
		// 	}
		// }
		$scope.msg = GlobalService.getVal('rulesMsgs')['temp_del_multiple']; ///+ templatesString;
		//$scope.modal = ModalService.openModal("partials/rules-and-alerts/delete_templates.html", $scope, false, 'static');
		$scope.modal = ModalService.openModal("partials/rules-and-alerts/delete_email_template_multiple.html", $scope, false, 'static');
	};

	
	// Function to confirm the deletion of selected templates
	$scope.deleteSelectedTemplatesConfirm = function() {
		$scope.info.doneDeletions = 0;
		$scope.info.delFailed = 0;
		$scope.info.deletedTemplates = [];
		 $scope.selectedTemplates = $filter('filter')($scope.tableParams.data, {
			selected : true
		});
		if ($scope.selectedTemplates.length > 0) {
			$scope.info.templatesLoading = true;
		}
		for (var i = 0; i < $scope.selectedTemplates.length; i++) {
			var tempFound = false;
			// for (var j = 0; j < $scope.info.rulesList.length; j++) {
			// 	if (parseInt($scope.info.rulesList[j].email_template_id) == 0) {
			// 		continue;
			// 	}
			// 	if (parseInt(selectedTemplates[i].template_id) == parseInt($scope.info.rulesList[j].email_template_id)) {
			// 		tempFound = true;
			// 		$scope.info.doneDeletions++;
			// 		$scope.printErrorRuleAssociation(selectedTemplates[i].template_name);
			// 		$scope.info.delFailed++;
			// 		break;
			// 	}
			// }
				$scope.callDeleteTemplate($scope.selectedTemplates[i], $scope.selectedTemplates.length);
				$scope.info.delFailed++;
			
		}
		if ($scope.info.delFailed == $scope.selectedTemplates.length) {
			$scope.info.templatesLoading = false;
		}
	};

	// Prints error message after waiting for 700ms
	$scope.printErrorRuleAssociation = function(tempName) {
		$timeout(function() {
			if ($scope.info.errorMsg == "") {
				$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['temp_del_rule_associated'][0] + tempName + GlobalService.getVal('rulesMsgs')['temp_del_rule_associated'][1];
			} else {
				$scope.info.errorMsg += "<br>" + GlobalService.getVal('rulesMsgs')['temp_del_rule_associated'][0] + tempName + GlobalService.getVal('rulesMsgs')['temp_del_rule_associated'][1];
			}
		}, 700);
	};

	// Function to call the delete API for each selected template
	$scope.callDeleteTemplate = function(template, total) {
		RulesService.deleteTemplate(template.template_id).then(function(response) {
			$scope.info.doneDeletions++;
			$scope.info.deletedTemplates.push(template.template_name);
			if ($scope.info.doneDeletions == total) {
				UserTrackingService.standard_user_tracking($scope.info.application, 'Manage Template', 'multiple delete', "[" + $scope.info.deletedTemplates.toString() + "]").then(function(response) {

				}, handleSessionTimeout);
				$scope.reloadTemplates();
			}
			if ($scope.info.successMsg == "") {
				$scope.info.successMsg = GlobalService.getVal('rulesMsgs')['temp_del_success'][0] + template.template_name + GlobalService.getVal('rulesMsgs')['temp_del_success'][1];
			} else {
				$scope.info.successMsg += "<br>" + GlobalService.getVal('rulesMsgs')['temp_del_success'][0] + template.template_name + GlobalService.getVal('rulesMsgs')['temp_del_success'][1];
			}
		}, function(response) {
			console.error('Unable to delete');
			$scope.info.doneDeletions++;
			if ($scope.info.doneDeletions == total) {
				if ($scope.info.deletedTemplates.length) {
					UserTrackingService.standard_user_tracking($scope.info.application, 'Manage Template', 'multiple delete', "[" + $scope.info.deletedTemplates.toString() + "]").then(function(response) {

					}, function(response) {

					});
				}
				$scope.reloadTemplates();
			}
			if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
				$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['h2_down_msg'];
			} else {
				if ($scope.info.errorMsg == "") {
					$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['temp_del_failed'][0] + template.template_name + GlobalService.getVal('rulesMsgs')['temp_del_failed'][1];
				} else {
					$scope.info.errorMsg += "<br>" + GlobalService.getVal('rulesMsgs')['temp_del_failed'][0] + template.template_name + GlobalService.getVal('rulesMsgs')['temp_del_failed'][1];
				}
			}
			handleSessionTimeout(response);
		});
	};

	// Update the filter object if any of the filter model is updated
	$scope.searchTemplate = function(field) {
		if ($scope.info[field] != "") {
			$scope.info.filter[field] = $scope.info[field];
		} else {
			if (!!$scope.info.filter[field]) {
				delete $scope.info.filter[field];
			}
		}
		$scope.tableParams.reload();
		if ($scope.info.page['current'] > $scope.info.page['pages']) {
			if ($scope.info.page['pages'] == 0) {
				$scope.info.page['current'] = 1;
			} else {
				$scope.info.page['current'] = $scope.info.page['pages'];
			}
			$scope.tableParams.page($scope.info.page['current']);
		}
	};

	// Sort the column on clicking the column header
	$scope.sortColumn = function(field) {
		if (!(document.activeElement.tagName == "INPUT" || document.activeElement.tagName == "BUTTON")) {
			$scope.tableParams.sorting(field, $scope.tableParams.isSortBy(field, 'asc') ? 'desc' : 'asc');
			$scope.info.page['sortField'] = field + ($scope.tableParams.isSortBy(field, 'asc') ? 'asc' : 'desc');
		}
	};

	// Clear all the applied filters
	$scope.clearAppliedFilters = function() {
		if (Object.keys($scope.info.filter).length != 0) {
			for (var i in $scope.columns) {
				delete $scope.columns[i].filterString;
			}

			for (var i in $scope.columns) {
				$scope.info[$scope.columns[i]['field']] = "";
			}

			$scope.info.filter = {};
			$scope.tableParams.reload();

			$scope.info.page['current'] = 1;
			$scope.tableParams.page($scope.info.page['current']);
		}
		if ($scope.info.page['sortField'] != $scope.info.initialSortField + 'desc') {
			$scope.tableParams.sorting($scope.info.initialSortField, 'desc');
			$scope.info.page['sortField'] = $scope.info.initialSortField + 'desc';
		}
	};

	// Check if any filter is applied or not
	$scope.checkAppliedFilters = function() {
		var filters = false;
		if (Object.keys($scope.info.filter).length != 0)
			filters = true;
		if (filters || $scope.info.page['sortField'] != $scope.info.initialSortField + 'desc') {
			return true;
		}
		return false;
	};

	//fetches the rule list
	$scope.rulesList = RulesService.getRulesList();

	// Function to render text in html format
	$scope.renderHtml = function(html) {
		return $sce.trustAsHtml(html);
	};

	// Function to handle session timeout
	function handleSessionTimeout(response) {
		if (!$scope.info.sessionTimedOut && response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/timeout/)) {
			$scope.info.sessionTimedOut = true;
			ModalService.sessionTimeout();
		}
	};
}])

// Controller to handle adding and editing of templates
.controller('AddEditTemplateCtrl', ['$scope', '$sce', '$timeout', '$filter', 'ModalService', 'RulesService', 'GlobalService', 'UserTrackingService', 'AppService',
function($scope, $sce, $timeout, $filter, ModalService, RulesService, GlobalService, UserTrackingService, AppService) {

	// Object to store all information about Add/Edit Template page
	$scope.info = {};

	// Stores application name which is used for user tracking
	$scope.info.application = GlobalService.getVal('navRules');

	// Defines whether the page is loading
	$scope.info.pageLoading = false;

	// Specifies whether rule is added
	$scope.info.templateAdded = false;

	// Stores the message to be displayed on top
	$scope.info.addTemplateMsg = {};

	// Stores whether session is timed out or not
	$scope.info.sessionTimedOut = false;

	var manufacturer = GlobalService.getVal('manufacturer');
	var product = GlobalService.getVal('product');
	var schema = GlobalService.getVal('schema');

	// Stores the contants to be shown on templates page
	$scope.info.commonConstants = $filter('filter')(GlobalService.getVal('templateConstants')['common'], {
		enabled : true
	});
	$scope.info.customerConstants = $filter('filter')(GlobalService.getVal('templateConstants')['customer'][manufacturer], {
		enabled : true
	});
	$scope.info.templateConstants = [];
	$scope.info.templateConstants.push.apply($scope.info.templateConstants, $scope.info.commonConstants);
	$scope.info.templateConstants.push.apply($scope.info.templateConstants, $scope.info.customerConstants);

	// Load templates list if not already loaded
	if (!RulesService.getTemplatesList()) {
		$scope.info.pageLoading = true;
		RulesService.getTemplates().then(function(response) {
			$scope.templatesList = response.data.Data;
			RulesService.setTemplatesList($scope.templatesList);
			$scope.setTemplatesLabelMap();
			$scope.info.pageLoading = false;
		}, function(response) {
			$scope.info.pageLoading = false;
			if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
				$scope.info.addTemplateMsg = {
					type : 'failure',
					msg : GlobalService.getVal('rulesMsgs')['h2_down_msg']
				};
			} else {
				$scope.info.addTemplateMsg = {
					type : 'failure',
					msg : GlobalService.getVal('rulesMsgs')['temp_load_failed']
				};
			}
			handleSessionTimeout(response);
		});
	}

	// Function to clear all messages
	$scope.clearMessage = function() {
		if (!$scope.info.pageLoading) {
			$scope.info.addTemplateMsg = {};
		}
	};

	// Function to set the templates label map
	$scope.setTemplatesLabelMap = function() {
		var map = {};
		for (var i = 0; i < $scope.templatesList.length; i++) {
			map[$scope.templatesList[i]['template_name']] = true;
		}
		RulesService.setTemplatesLabelMap(map);
	};

	// Function to populate add template data
	$scope.populateAddTemplate = function() {
		$scope.info.pageLabel = 'Add New Template';
		$scope.info.templateName = "";
		$scope.info.initialTemplateName = null;
		$scope.info.toAddress = "";
		$scope.info.cc = "";
		$scope.info.bcc = "";
		$scope.info.subject = "";
		$scope.info.body = "";
		$scope.info.alertPerRow = 'TRUE';
		$scope.setSavedMode();
	};

	// Function to populate edit template data
	$scope.populateEditTemplate = function() {
		$scope.info.pageLabel = 'Edit Template - ' + RulesService.getTemplateMode()['data']['template_name'];
		$scope.info.templateID = RulesService.getTemplateMode()['data']['template_id'];
		$scope.info.templateName = RulesService.getTemplateMode()['data']['template_name'];
		$scope.info.initialTemplateName = RulesService.getTemplateMode()['data']['template_name'];
		$scope.info.toAddress = RulesService.getTemplateMode()['data']['to'];
		$scope.info.cc = RulesService.getTemplateMode()['data']['cc'];
		$scope.info.bcc = RulesService.getTemplateMode()['data']['bcc'];
		$scope.info.subject = RulesService.getTemplateMode()['data']['subject'].replace(/\{[^\.]+\./g, '{');
		$scope.info.body = RulesService.getTemplateMode()['data']['body'].replace(/\{[^\.]+\./g, '{');
		$scope.info.alertPerRow = RulesService.getTemplateMode()['data']['alertperrow'];
		$scope.setSavedMode();
	};

	// Function to set template in saved mode
	$scope.setSavedMode = function() {
		RulesService.setTemplateSavedStatus(false);
	};

	// Function to set template in unsaved mode
	$scope.setUnsavedMode = function() {
		RulesService.setTemplateSavedStatus(true);
	};

	// Set form elements according to new or edit mode
	if (RulesService.getTemplateMode() && RulesService.getTemplateMode()['mode'] == 'edit') {
		$scope.populateEditTemplate();
	} else {
		$scope.populateAddTemplate();
	}

	// Function to add new template
	$scope.addNewTemplate = function() {
		RulesService.setTemplateMode('new');
		$scope.info.templateAdded = false;
		$scope.info.addTemplateMsg = {};
		$scope.populateAddTemplate();
	};

	// Function to save the template
	$scope.saveTemplate = function() {
		if (!$scope.validateTemplate()) {
			return;
		}

		$scope.info.pageLoading = true;

		var subject = $scope.info.subject;
		var body = $scope.info.body;
		for (var i = 0; i < $scope.info.commonConstants.length; i++) {
			if (subject.indexOf($scope.info.commonConstants[i].value) != -1) {
				subject = subject.replace($scope.info.commonConstants[i].value, '{rule.' + $scope.info.commonConstants[i].value.substring(1, $scope.info.commonConstants[i].value.length - 1) + '}');
			}
			if (body.indexOf($scope.info.commonConstants[i].value) != -1) {
				body = body.replace($scope.info.commonConstants[i].value, '{rule.' + $scope.info.commonConstants[i].value.substring(1, $scope.info.commonConstants[i].value.length - 1) + '}');
			}
		}
		if (Array.isArray($scope.info.customerConstants)) {
			for (var i = 0; i < $scope.info.customerConstants.length; i++) {
				if (subject.indexOf($scope.info.customerConstants[i].value) != -1) {
					subject = subject.replace($scope.info.customerConstants[i].value, '{context.' + $scope.info.customerConstants[i].value.substring(1, $scope.info.customerConstants[i].value.length - 1) + '}');
				}
				if (body.indexOf($scope.info.customerConstants[i].value) != -1) {
					body = body.replace($scope.info.customerConstants[i].value, '{context.' + $scope.info.customerConstants[i].value.substring(1, $scope.info.customerConstants[i].value.length - 1) + '}');
				}
			}
		}

		if (RulesService.getTemplateMode() && RulesService.getTemplateMode()['mode'] == 'edit') {
			RulesService.editTemplate($scope.info.templateID, $scope.info.templateName.replace(/\'/g, "\'\'").replace(/^\s+|\s+$/g, ''),  subject.replace(/\'/g, "\'\'").replace(/^\s+|\s+$/g, ''), body.replace(/\'/g, "\'\'").replace(/^\s+|\s+$/g, ''), $scope.info.alertPerRow).then(function(response) {
				$scope.info.addTemplateMsg = {
					type : 'success',
					msg : GlobalService.getVal('rulesMsgs')['add_template_success']
				};

				if ($scope.info.initialTemplateName != $scope.info.templateName) {
					var details = {};
					details['old'] = $scope.info.initialTemplateName;
					details['new'] = $scope.info.templateName;
					details = JSON.stringify(details);
				} else {
					var details = $scope.info.templateName;
				}
				UserTrackingService.standard_user_tracking($scope.info.application, 'Add_Edit template', 'edit', details).then(function(response) {

				}, handleSessionTimeout);

				$scope.info.templateAdded = true;
				$scope.info.pageLoading = false;

				var newData = {
					template_id : response.data.Data,
					template_name : $scope.info.templateName.replace(/^\s+|\s+$/g, ''),
					to : $scope.info.toAddress.replace(/^\s+|\s+$/g, ''),
					cc : $scope.info.cc.replace(/^\s+|\s+$/g, ''),
					bcc : $scope.info.bcc.replace(/^\s+|\s+$/g, ''),
					subject : subject.replace(/^\s+|\s+$/g, ''),
					body : body.replace(/^\s+|\s+$/g, ''),
					alertperrow : $scope.info.alertPerRow
				};

				if ($scope.info.initialTemplateName != $scope.info.templateName) {
					var templatesLabelMap = RulesService.getTemplatesLabelMap();
					delete templatesLabelMap[$scope.info.initialTemplateName];
					templatesLabelMap[$scope.info.templateName.replace(/^\s+|\s+$/g, '')] = true;
					RulesService.setTemplatesLabelMap(templatesLabelMap);
				}

				RulesService.setTemplateMode('edit', newData);
				$scope.populateEditTemplate();
			}, function(response) {
				if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
					GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
					$scope.info.addTemplateMsg = {
						type : 'failure',
						msg : GlobalService.getVal('rulesMsgs')['h2_down_msg']
					};
				} else {
					$scope.info.addTemplateMsg = {
						type : 'failure',
						msg : GlobalService.getVal('rulesMsgs')['add_template_fail']
					};
				}
				$scope.info.templateAdded = false;
				$scope.info.pageLoading = false;
				handleSessionTimeout(response);
			});
		} else {
			RulesService.addTemplate($scope.info.templateName.replace(/\'/g, "\'\'").replace(/^\s+|\s+$/g, ''),  subject.replace(/\'/g, "\'\'").replace(/^\s+|\s+$/g, ''), body.replace(/\'/g, "\'\'").replace(/^\s+|\s+$/g, ''), $scope.info.alertPerRow).then(function(response) {
				$scope.info.addTemplateMsg = {
					type : 'success',
					msg : GlobalService.getVal('rulesMsgs')['add_template_success']
				};

				UserTrackingService.standard_user_tracking($scope.info.application, 'Add_Edit template', 'add', $scope.info.templateName).then(function(response) {

				}, handleSessionTimeout);

				$scope.info.templateAdded = true;
				$scope.info.pageLoading = false;

				var newData = {
					template_id : response.data.Data,
					template_name : $scope.info.templateName.replace(/^\s+|\s+$/g, ''),
					to : $scope.info.toAddress.replace(/^\s+|\s+$/g, ''),
					cc : $scope.info.cc.replace(/^\s+|\s+$/g, ''),
					bcc : $scope.info.bcc.replace(/^\s+|\s+$/g, ''),
					subject : subject.replace(/^\s+|\s+$/g, ''),
					body : body.replace(/^\s+|\s+$/g, ''),
					alertperrow : $scope.info.alertPerRow
				};

				var templatesLabelMap = RulesService.getTemplatesLabelMap();
				templatesLabelMap[$scope.info.templateName] = true;
				RulesService.setTemplatesLabelMap(templatesLabelMap);

				RulesService.setTemplateMode('edit', newData);
				$scope.populateEditTemplate();
			}, function(response) {
				if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
					GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
					$scope.info.addTemplateMsg = {
						type : 'failure',
						msg : GlobalService.getVal('rulesMsgs')['h2_down_msg']
					};
				} else {
					$scope.info.addTemplateMsg = {
						type : 'failure',
						msg : GlobalService.getVal('rulesMsgs')['add_template_fail']
					};
				}
				$scope.info.templateAdded = false;
				$scope.info.pageLoading = false;
				handleSessionTimeout(response);
			});
		}
	};

	// Function to validate the template details entered
	$scope.validateTemplate = function() {
		if (/^\s*$/.test($scope.info.templateName)) {
			ModalService.alertBox({
				msg : "Template Name" + GlobalService.getVal('rulesMsgs')['temp_field_blank']
			});
			return;
		}

		var templatesLabelMap = RulesService.getTemplatesLabelMap();
		if (!!$scope.info.initialTemplateName) {
			if ($scope.info.templateName != $scope.info.initialTemplateName && templatesLabelMap.hasOwnProperty($scope.info.templateName)) {
				ModalService.alertBox({
					msg : GlobalService.getVal('rulesMsgs')['temp_exists'][0] + $scope.info.templateName + GlobalService.getVal('rulesMsgs')['temp_exists'][1]
				});
				return;
			}
		} else {
			if (templatesLabelMap.hasOwnProperty($scope.info.templateName)) {
				ModalService.alertBox({
					msg : GlobalService.getVal('rulesMsgs')['temp_exists'][0] + $scope.info.templateName + GlobalService.getVal('rulesMsgs')['temp_exists'][1]
				});
				return;
			}
		}

		// if (/^\s*$/.test($scope.info.toAddress)) {
		// 	ModalService.alertBox({
		// 		msg : "To Address" + GlobalService.getVal('rulesMsgs')['temp_field_blank']
		// 	});
		// 	return;
		// }

		var supportedDomains = GlobalService.getVal('templateSupportedDomains');

		var emailAddressSoFar = {};

		var emailRegex = /^([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$/i;
		//var toAddresses = $scope.info.toAddress.split(',');
		// for (var i = 0; i < toAddresses.length; i++) {
		// 	if (/^\s*$/.test(toAddresses[i])) {
		// 		ModalService.alertBox({
		// 			msg : GlobalService.getVal('rulesMsgs')['temp_email_error']
		// 		});
		// 		return;
		// 	}
		// 	if (!emailRegex.test(toAddresses[i].replace(/^\s+|\s+$/g, ''))) {
		// 		ModalService.alertBox({
		// 			msg : toAddresses[i].replace(/^\s+|\s+$/g, '') + GlobalService.getVal('rulesMsgs')['temp_email_invalid']
		// 		});
		// 		return;
		// 	}

		// 	//check for domains if enabled
		// 	if(GlobalService.getVal('emailDomainCheck')){
		// 		var domainMatch = toAddresses[i].match(/\@([^\s]+)\s*$/);
		// 		var domainFound = false;
		// 		for (var j = 0; j < supportedDomains.length; j++) {
		// 			if (supportedDomains[j] == domainMatch[1]) {
		// 				domainFound = true;
		// 				break;
		// 			}
		// 		}
		// 		if (!domainFound) {
		// 			ModalService.alertBox({
		// 				msg : domainMatch[1] + GlobalService.getVal('rulesMsgs')['temp_email_unsupported']
		// 			});
		// 			return;
		// 		}
		// 	}
		

		// 	if (emailAddressSoFar.hasOwnProperty(toAddresses[i].replace(/^\s*|\s*$/g, ""))) {
		// 		ModalService.alertBox({
		// 			msg : GlobalService.getVal('rulesMsgs')['temp_email_repeated']
		// 		});
		// 		return;
		// 	} else {
		// 		emailAddressSoFar[toAddresses[i].replace(/^\s*|\s*$/g, "")] = true;
		// 	}
		// }

		// if (!/^\s*$/.test($scope.info.cc)) {
		// 	var ccs = $scope.info.cc.split(',');
		// 	for (var i = 0; i < ccs.length; i++) {
		// 		if (/^\s*$/.test(ccs[i])) {
		// 			ModalService.alertBox({
		// 				msg : GlobalService.getVal('rulesMsgs')['temp_email_error']
		// 			});
		// 			return;
		// 		}
		// 		if (!emailRegex.test(ccs[i].replace(/^\s+|\s+$/g, ''))) {
		// 			ModalService.alertBox({
		// 				msg : ccs[i].replace(/^\s+|\s+$/g, '') + GlobalService.getVal('rulesMsgs')['temp_email_invalid']
		// 			});
		// 			return;
		// 		}
				
		// 		//check for domains if enabled
		// 		if(GlobalService.getVal('emailDomainCheck')){
		// 			var domainMatch = ccs[i].match(/\@([^\s]+)\s*$/);
		// 			var domainFound = false;
		// 			for (var j = 0; j < supportedDomains.length; j++) {
		// 				if (supportedDomains[j] == domainMatch[1]) {
		// 					domainFound = true;
		// 					break;
		// 				}
		// 			}
		// 			if (!domainFound) {
		// 				ModalService.alertBox({
		// 					msg : domainMatch[1] + GlobalService.getVal('rulesMsgs')['temp_email_unsupported']
		// 				});
		// 				return;
		// 			}
		// 		}
			
		// 		if (emailAddressSoFar.hasOwnProperty(ccs[i].replace(/^\s*|\s*$/g, ""))) {
		// 			ModalService.alertBox({
		// 				msg : GlobalService.getVal('rulesMsgs')['temp_email_repeated']
		// 			});
		// 			return;
		// 		} else {
		// 			emailAddressSoFar[ccs[i].replace(/^\s*|\s*$/g, "")] = true;
		// 		}
		// 	}
		// }

		if (/^\s*$/.test($scope.info.subject)) {
			ModalService.alertBox({
				msg : "Subject" + GlobalService.getVal('rulesMsgs')['temp_field_blank']
			});
			return;
		}

		var constantMatches = $scope.info.subject.match(/\{[^\}]+\}/g);
		if (!!constantMatches) {
			for (var i = 0; i < constantMatches.length; i++) {
				var found = false;
				if (constantMatches[i] == '{alert_msg}') {
					ModalService.alertBox({
						msg : constantMatches[i] + " is allowed only in template body"
					});
					return;
				}
				for (var j = 0; j < $scope.info.templateConstants.length; j++) {
					if (constantMatches[i] == $scope.info.templateConstants[j].value) {
						found = true;
						break;
					}
				}
				if (!found) {
					ModalService.alertBox({
						msg : constantMatches[i] + GlobalService.getVal('rulesMsgs')['temp_invalid_constant']
					});
					return;
				}
			}
		}

		if (/^\s*$/.test($scope.info.body)) {
			ModalService.alertBox({
				msg : "Body" + GlobalService.getVal('rulesMsgs')['temp_field_blank']
			});
			return;
		}

		constantMatches = $scope.info.body.match(/\{[^\}]+\}/g);
		if (!!constantMatches) {
			for (var i = 0; i < constantMatches.length; i++) {
				var found = false;
				for (var j = 0; j < $scope.info.templateConstants.length; j++) {
					if (constantMatches[i] == $scope.info.templateConstants[j].value) {
						found = true;
						break;
					}
				}
				if (!found) {
					ModalService.alertBox({
						msg : constantMatches[i] + GlobalService.getVal('rulesMsgs')['temp_invalid_constant']
					});
					return;
				}
			}
		}

		return true;
	};

	// Function to render text in html format
	$scope.renderHtml = function(html) {
		return $sce.trustAsHtml(html);
	};

	// Function to handle session timeout
	function handleSessionTimeout(response) {
		if (!$scope.info.sessionTimedOut && response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/timeout/)) {
			$scope.info.sessionTimedOut = true;
			ModalService.sessionTimeout();
		}
	};
}])

// Controller to handle the page to show list of rules
.controller('RulesListCtrl', ['$scope','$q', '$sce', 'GlobalService', '$window', '$filter', '$timeout', 'ngTableParams', 'RulesService', 'ModalService', 'UserTrackingService', 'AppService', 'metaDataService', 'RulesTestWithLogvault','$cookies','$document', 'UtilService', 
function($scope, $q, $sce, GlobalService, $window, $filter, $timeout, ngTableParams, RulesService, ModalService, UserTrackingService, AppService, metaDataService, RulesTestWithLogvault, $cookies, $document, UtilService) {

	$scope.supportEmail = GlobalService.getVal('supportEmail');
	// Object to store all information about Rules list page
	if(!RulesService.getInfoData()){
		$scope.info = {};
	}else{
		$scope.info = RulesService.getInfoData();
	}

	// Stores application name which is used in user tracking
	$scope.info.application = GlobalService.getVal('navRules');

	// Object that stores the filter information for all the columns
	$scope.info.filter = {};

	// Stores list of rules
	$scope.rulesList = [];
	$scope.filterCount = 0;

	// Defines whether rules are loading
	$scope.info.rulesLoading = true;

	// Defines whether rules are loading
	$scope.info.rulesPageLoading = true;

	// Stores whether session is timed out or not
	$scope.info.sessionTimedOut = false;

	// Stores the list of columns
	$scope.columns = $filter('filter')(GlobalService.getVal('rulesColumns'), {
		enabled : true
	});
	// Stores the list of columns for export CSV
	$scope.columnsToExport = $filter('filter')(GlobalService.getVal('rulesColumnsForExport'), {
		enabled : true
	});

	// Stores the field of initial Sorting
	$scope.info.initialSortField = GlobalService.getVal('rulesSortField');

	// Stores the message to be displayed
	$scope.info.rulesListMsg = {};

	// Stores the number of recursions done
	$scope.info.recursionDone = 0;

	// Stores the count of maximum recursions allowed
	$scope.info.recursionLimit = GlobalService.getVal('rescursionLimit');

	$scope.hasAccessToUnsupportedRules = GlobalService.getVal('hasAccessToUnsupportedRules');

	$scope.multipleRulesDeleteReq = [];
	$scope.showColumnFilterPanel = false;
	$scope.showColumnFilterPanelLoading = false;
	
	$scope.showAnalyticsDashboards = false;
	//Stores owner details
	$scope.availableRulesOwnerList = [];
	// Stores the list of supported rule status
	$scope.info.supportedStatus = GlobalService.getVal('rulesSupportedStatus');
	// Stores the list of supported rule status
	$scope.info.rulesHistoryTypesOfChanges = GlobalService.getVal('rulesHistoryTypesOfChanges');
	// Sets the object of initial sorting
	$scope.info.initialSorting = {};
	$scope.info.initialSorting[$scope.info.initialSortField] = 'desc';	
	//thse used to change ownership	
	$scope.currentRule = "";
	$scope.currentOwner = "";
	$scope.amIAdmin = (metaDataService.getFeatures()?metaDataService.getFeatures()["admin"] || false:false);
	$scope.amIRuleCreator = (metaDataService.getFeatures()?metaDataService.getFeatures()[GlobalService.getVal('ruleCreatorFielName')]:false);
	$scope.myEmail = metaDataService.getUser()['email'];
	
	$scope.selectedRuleForRuleLabelAnalytics = {};

	//For multiple owner change
	$scope.multipleRuleOwnerChange = [];
	$scope.multipleRuleOwnerChangeRuleIds = [];
	$scope.multipleRulesSelectedOwner = null;
	$scope.multipleRulesOernerFilter = "";
	$scope.selectedRuleName = "";

	$scope.info.enableRuleComments = "";
	$scope.info.enableRuleCommentsLimitMin = GlobalService.getVal('ruleStatusChangeCommentMinLen');
	$scope.info.enableRuleCommentsLimitMax = GlobalService.getVal('ruleStatusChangeCommentMaxLen');

	$scope.info.ruleHistoryTableExpandAll = false;
	$scope.changeDetails = []; 

	$scope.timefilter = GlobalService.getVal('ruleListTimeFilter');
	$scope.showSelectNotify = false;

	$scope.info.actionMessageFlag = false;

	//clinsights enabled flag
	$scope.info.clinsightFlag = GlobalService.getVal('clinsightFlag') || false;

	RulesService.getPriorities().then(function(response) {
		$scope.info.priorities = response.data.Data;
		
	}, function(response) {
		$scope.info.priorities = [];
		if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
			GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
			$scope.info.addRuleMsg = {
				type : 'failure',
				msg : GlobalService.getVal('rulesMsgs')['h2_down_msg']
			};
		}
		handleSessionTimeout(response);
	});




	RulesService.getSeverities().then(function(response) {
		$scope.info.severities = response.data.Data;
		RulesService.setSeveritiesList($scope.info.severities);
	}, function(response) {
		$scope.info.severities = [];
		if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
			GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
			$scope.info.addRuleMsg = {
				type : 'failure',
				msg : GlobalService.getVal('rulesMsgs')['h2_down_msg']
			};
		}
		handleSessionTimeout(response);
	});


		// Stores the list of categories
		RulesService.getCategories().then(function(response) {
			$scope.info.categories = response.data.Data;
		
		}, function(response) {
			$scope.info.categories = [];
			if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
				$scope.info.addRuleMsg = {
					type : 'failure',
					msg : GlobalService.getVal('rulesMsgs')['h2_down_msg']
				};
			}
			console.error("Unable to load categories");
			handleSessionTimeout(response);
		});

		// RulesService.getallSubscriberList().then(function(response){
		// 	$scope.info.allSubscriberList = response.data.Data.length ? response.data.Data: [];
		// 	console.log($scope.info.allSubscriberList)
		// })


	// Initializes the models for each column filter
	// for (var i in $scope.columns) {
	// 	if ($scope.columns[i]['field'] == 'label_display' || $scope.columns[i]['field'] == 'description' || $scope.columns[i]['field'] == 'author' || $scope.columns[i]['field'] == 'rule_name' || $scope.columns[i]['field'] == 'created_ts' || $scope.columns[i]['field'] == 'modified_ts') {
	// 		$scope.info[$scope.columns[i]['field']] = "";
	// 	} else {
	// 		$scope.info[$scope.columns[i]['field']] = {};
	// 	}
	// }
	// Object that stores the page information for custom pagination
	$scope.info.page = {
		"total" : 0,
		"current" : 1,
		"pages" : 0,
		"count" : 10,
		"sortField" : $scope.info.initialSortField + "desc"
	};
	if(RulesService.getPageState())
	{
		$scope.info.page['current'] = RulesService.getPageState();
	}
	$scope.rulesTypeSelected = RulesService.getRuleType();
	//User to change rules type
	$scope.rulesType = [{
		label: 'supported',
		selected: true
	},{
		label: 'unsupported',
		selected: false
	}];
	$scope.isInSupportedRuleListPage = function(){
		return  $scope.rulesTypeSelected=='supported';
	}
	//used to reset to frst page if any filter is applied
	$scope.resettofirst = false;

	$scope.rulesTypeChange = function(item){
		if($scope.rulesTypeSelected == item.label) return ;
		RulesService.setStateGroupData(undefined);
		$scope.showColumnFilterPanel = false;
		RulesService.setFilterState(undefined);
		RulesService.setPageState(undefined);
		$scope.clearAppliedFilters();
		$scope.showFilterCount();
		$scope.rulesTypeSelected = item.label;
		RulesService.setRuleType($scope.rulesTypeSelected);		
		$scope.reloadRules();
	};	
	// Function to clear all messages
	$scope.clearMessage = function() {
		if (!$scope.info.rulesLoading) {
			$scope.info.rulesListMsg = {};
		}
	};
	//Control variables for analytics
	$scope.ruleAnalyticsConfig = GlobalService.getVal('ruleAnalyticsConfig');
	
	$scope.$watch('info.rulesPageLoading', function() {
		if (!$scope.info.rulesPageLoading) {
			AppService.hidePanelLoading();
		}
	})
	// Function to populate the table initially
	$scope.populateTable = function() {
		$scope.tableParams = new ngTableParams({
			page : $scope.resettofirst ? 1: $scope.info.page['current']  , // show first page
			count : $scope.info.page['count'], // count per page
			sorting : $scope.info.initialSorting // Initial sorting
		}, {
			total : $scope.rulesList.length, // length of data
			getData : function($defer, params) {
				//sort it by date
				if (params.sorting() && params.sorting()[$scope.info.initialSortField]) {
					orderedData = $scope.rulesList.sort(function (item1, item2) {
						var tm1 = new Date(item1[$scope.info.initialSortField] + "").getTime();
						tm1 = tm1.toString();
						var tm2 = new Date(item2[$scope.info.initialSortField] + "").getTime();
						tm2 = tm2.toString();
						if (params.orderBy() == ('+' + $scope.info.initialSortField)) {
							return (tm1.localeCompare(tm2));
						} else if (params.orderBy() == ('-' + $scope.info.initialSortField)) {
							return ((-1) * tm1.localeCompare(tm2));
						} else {
							return (tm1.localeCompare(tm2));
						}
					});
				} else if (params.sorting() && params.sorting()['created_ts']) {
					orderedData = $scope.rulesList.sort(function (item1, item2) {
						var tm1 = new Date(item1['created_ts'] + "").getTime();
						tm1 = tm1.toString();
						var tm2 = new Date(item2['created_ts'] + "").getTime();
						tm2 = tm2.toString();
						if (params.orderBy() == ('+created_ts')) {
							return (tm1.localeCompare(tm2));
						} else if (params.orderBy() == ('-created_ts')) {
							return ((-1) * tm1.localeCompare(tm2));
						} else {
							return (tm1.localeCompare(tm2));
						}
					});
				} else {
					orderedData = params.sorting() ? $filter('orderBy')($scope.rulesList, params.orderBy()) : $scope.rulesList;
				}
				orderedData = $scope.getFilterredRules(orderedData);
				$scope.orderedData = orderedData;
				params.total(orderedData.length);
				$scope.info.page['total'] = orderedData.length;
				$scope.info.page['pages'] = Math.ceil($scope.info.page['total'] / $scope.info.page['count']);
				if (RulesService.getPageState()) {
					if (RulesService.getPageState() > $scope.info.page['pages']) {
						$scope.info.page['current'] = $scope.info.page['pages']
					}
					else {
						$scope.info.page['current'] = RulesService.getPageState();;
					}
				} else {
					$scope.info.page['current'] = 1
				}
				if ($scope.resettofirst == true) {
					$scope.info.page['current'] = 1
				}
				// current selected length from rule list
				$scope.currentSelected = orderedData.filter(function (x, i) {
					return x.selected;
				}).length;
				//current rule list in ui
				$scope.currentRuleList = orderedData
				//current page data in ui
				$scope.CurrentPageList = orderedData.slice(($scope.info.page['current'] - 1) * params.count(), $scope.info.page['current'] * params.count());
				//check if all is selected in page the toggle select all
				if ($scope.CurrentPageList.filter(function (x, i) {
					return x.selected;
				}).length == $scope.info.page['count']) {
					$scope.info.selectAllCurrentPage = true;
				}
				else {
					$scope.info.selectAllCurrentPage = false;
				}

				$scope.showSelectNotify = $scope.currentSelected > 0 ? true : false
				$defer.resolve(orderedData.slice(($scope.info.page['current'] - 1) * params.count(), $scope.info.page['current'] * params.count()));
				$scope.resettofirst = false
			}
		});
	};
	// if(Object.keys(RulesService.getFilterState().length !=0))
	if(RulesService.getFilterState())
	{
		$scope.info.filter = RulesService.getFilterState()
	}
	$scope.getFilterredRules = function(orderedData){
		return $filter('filterRules')(orderedData, $scope.info.filter);
	};
	$scope.$watch('info', function (newVal, oldVal) {
		RulesService.setInfoData(newVal);
	}, true);
	// Stores the list of rules
	$scope.loadRules = function() {
		//////

		if(RulesService.getFilterState()){
			$scope.showColumnFilterPanel = Object.keys(RulesService.getFilterState()).length ? true : false;	
		}
		else{
			$scope.showColumnFilterPanel = false;
		}

		//$scope.showColumnFilterPanel = false;
		RulesService.getAllConfig().then(function(response) {
			if(!response.data.Data.config.api_template_feature){
				$scope.showAlertApiFeature = false;
			}
			var responseData = response.data.Data;
			if (AppService.isGbStudioApp()) {
				responseData['config'] = !!responseData['default_config'] ? responseData['default_config'] : responseData['config'];
				responseData['file_upload_config'] = !!responseData['default_file_upload_config'] ? responseData['default_file_upload_config'] : responseData['file_upload_config'];
			}

			if (!RulesService.getStagingDomain() || !RulesService.getStagingKeyspace()) {
				RulesService.setStagingDomain(responseData.config.is_stage_domain);
				RulesService.setStagingKeyspace(responseData.config.is_stage_keyspace);

				var infoserverDomain = GlobalService.getVal('infoserverDomain');
				var umsDomain = GlobalService.getVal('umsDomain');
				var infoserverDomainStaging = responseData.config.is_stage_domain;

				if (infoserverDomain && umsDomain) {
					var tArray = infoserverDomain.split('/');
					var version = tArray.pop();
					var slaves = {};
					slaves[tArray.join("/")] = "/" + version + "/xproxy";

					tArray = umsDomain.split('/');
					version = tArray.pop();
					slaves[tArray.join("/")] = "/" + version + "/xproxy";

					if (infoserverDomainStaging) {
						tArray = infoserverDomainStaging.split('/');
						version = tArray.pop();
						slaves[tArray.join("/")] = "/" + version + "/xproxy";
					}
					xdomain.slaves(slaves);
				}
			}

			RulesService.getAllRules($scope.rulesTypeSelected).then(function(response) {
			    
				if (!response.data.hasOwnProperty('Data') && $scope.info.recursionDone < $scope.info.recursionLimit) {
					$scope.info.recursionDone++;
					if ($scope.info.recursionDone == $scope.info.recursionLimit) {
						$scope.rulesList = "";
						$scope.info.rulesLoading = false;
						return;
					}
					$scope.loadRules();
					return;
				}
				$scope.rulesList = $filter('filterMultiples')((response.data.Data), {
					status : [$scope.info.supportedStatus.Enabled, $scope.info.supportedStatus.Disabled, $scope.info.supportedStatus.Draft]
				}) || [];
				//apply user role and usr permission lavel filter
				/* Get user details i.e role and permission */
				$scope.FilterRulesBasedOnUserRoleAndPermission();
				$scope.populateTable();
				if (!RulesService.getloadExplorerRules()) {
					$scope.info.rulesLoading = false;
					$scope.info.rulesPageLoading = false;
				}
				RulesService.setRulesList($scope.rulesList);

				
				$scope.setRulesLabelMap();
				$scope.setAllRulesMap();
				if (response.status == 303) {
					$scope.info.rulesListMsg = {
						type : 'failure',
						msg : GlobalService.getVal('rulesMsgs')['rules_load_failed']
					}
				}
				
				$scope.rulesList.forEach(function (rule,i) {
					if (rule.email_template_id > 0) {
						var ss = rule["subscribed_users"];
						rule["subscribed_users"] = ss.length ? (ss[ss.length-1] == "," ? ss.substring(0,ss.length-1): ss) : ss;
						rule["subscriberCount"] = rule.subscribed_users.length ? rule.subscribed_users.split(",").filter(Boolean).length : 0
						rule["subscriptionEmailList"] = rule.subscribed_users.length ? rule.subscribed_users.split(",").filter(Boolean) : [];
						if (rule.status == "ENABLED") {
							if (rule.subscription_enabled == false) {
								if (rule.subscriptionEmailList.includes($cookies.username)) {
									rule["subscribeIcon"] = false
									rule["mySubscriedRule"] = rule.subscriptionEmailList.includes($cookies.username) ? 'My Subscribed Rules' : 'Subscribable Rules';
								}else{
									//delete rule.subscribeIcon;
								}
								// rule["mySubscriedRule"] = rule.subscriptionEmailList.includes($cookies.username) ? 'My Subscribed Rules' : 'Subscribable Rules';
							} else if (rule.subscription_enabled == true) {
								rule["subscribeIcon"] = rule.subscriptionEmailList.includes($cookies.username) ? false : true;
								rule["mySubscriedRule"] = rule.subscriptionEmailList.includes($cookies.username) ? 'My Subscribed Rules' : 'Subscribable Rules';
							}
	
						}
						
						// rule.subscription_enabled = true
						// rule["subscribeIcon"] = Math.random() < 0.5;
						// rule["subscriptionEmailList"] = ["siemensqa@glassbeam.com"]

						
						// rule['tag'] = Array.apply(null, Array(3)).map(function (item, index) {
						// 	return {
						// 		"tag_id":Math.floor((Math.random() * 10) + 1),
						// 		"tag_name": $scope.info.tag_list[Math.floor(Math.random() * $scope.info.tag_list.length)]
						// 	};
						// })
							// rule['tag'] = Array.apply(null, Array(Math.floor((Math.random() * (4-1) + 1)))).map(function (item, index) {
							// 	return  $scope.info.tag_list[Math.floor(Math.random() * $scope.info.tag_list.length)]
								
							// });
						
						
						// rule['tag'] = $scope.info.tag_list[Math.floor(Math.random() * $scope.info.tag_list.length)];
					}
					if(rule.tags.length){
						rule.tags.forEach(function(tg){
							tg.label = tg.tag_name;
						})
					}
					
				})
				
				//add api template name to corresponding rule as we dont get it in rule list
				// $scope.rulesList.forEach(function (rule) {
				// 	if ($scope.showAlertApiFeature) {
				// 		$scope.apitemp = RulesService.getApiTemplateList();
				// 		if ($scope.apitemp) {
				// 			if (rule.api_template_id > 0) {
				// 				rule.api_template_name = $scope.mapApiTempName(rule.api_template_id);
				// 			}

				// 		}
				// 	}
				// })

				//check for state data  if not preesent process new data with new rule list
				if (!RulesService.getStateGroupData()) {
					$scope.groupedFilterData = RulesService.getgroupdata($scope.rulesList);
					if (!$scope.showAlertApiFeature) {
						$scope.groupedFilterData.forEach(function (item) {
							if (item.field == "api_template_name") {
								item.enabled = false;
							}
						})
					}
					//check if the length of data is 0, if so dont show it
					$scope.groupedFilterData.forEach(function (groupedItem) {
						if (groupedItem.multiselect) {
							if (groupedItem.data.length) {
								groupedItem.enabled = true;
							}
						}
						groupedItem.expanded = false;	
					})
				}
				//else get the state maintained data with new rule list
				else {
					$scope.groupedFilterData = RulesService.getgroupdata($scope.rulesList);
					$scope.info = RulesService.getInfoData();
					if (!$scope.showAlertApiFeature) {
						$scope.groupedFilterData.forEach(function (item) {
							if (item.field == "api_template_name") {
								item.enabled = false;
							}
						})
					}

					//check if data field is empty for each multiselect filter object and disable it
					$scope.groupedFilterData.forEach(function (groupedItem) {
						if (groupedItem.multiselect) {
							if (!groupedItem.data.length) {
								delete $scope.info.filter[groupedItem.field];
								groupedItem.enabled = false;
								groupedItem.expanded = false;
								groupedItem.selected = false;
							}
							else {
								groupedItem.enabled = true;
							}

						}
						//updating info object when a keyword is searched (applicable only for textbox search in filter)
						if (groupedItem['field'] == 'label_display' || groupedItem['field'] == 'description' ||
							groupedItem['field'] == 'author' || groupedItem['field'] == 'rule_name') {
							for (var key in $scope.info.filter) {
								if (key == [groupedItem['field']]) {
									$scope.info[groupedItem['field']] = $scope.info.filter[groupedItem['field']];
								}
							}
						}
					});
					//example scenario: if apitemplate filter is applied and the rule is edited and the template is replaced by another template the while returning
					//the filter object $scope.info.filter must be updated.
					var keys = Object.keys($scope.info.filter);
					$scope.groupedFilterData.forEach(function (dta) {
						if (dta.multiselect && keys.indexOf(dta.field) != -1) {
							var fitdata = $scope.info.filter[dta.field];
							var gpdata =[];
							dta.data.forEach(function(it){
								gpdata.push(it.label);
						   });
							for (i = 0; i < fitdata.length; i++) {
								if (gpdata.indexOf(fitdata[i]) == -1) {
									fitdata.splice(i, 1);
								}
							}
							$scope.info.filter[dta.field] = fitdata;
							if(!fitdata.length){
								delete $scope.info.filter[dta.field];
							}
						}
					})
				}
			}, function(response) {
				$scope.rulesList = "";
				$scope.populateTable();
				if (!RulesService.getloadExplorerRules()) {
					$scope.info.rulesLoading = false;
					$scope.info.rulesPageLoading = false;
				}
				if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
					GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
					$scope.info.rulesListMsg = {
						type : 'failure',
						msg : GlobalService.getVal('rulesMsgs')['h2_down_msg']
					};
				} else {
					$scope.info.rulesListMsg = {
						type : 'failure',
						msg : GlobalService.getVal('rulesMsgs')['rules_load_failed']
					};
				}
				handleSessionTimeout(response);
				console.error('Unable to load Rules List');
				$scope.clearAppliedFilters();
			});
		}, function(response) {
			$scope.info.rulesListMsg = {
				type : 'failure',
				msg : GlobalService.getVal('rulesMsgs')['rules_load_failed']
			};
			handleSessionTimeout(response);
		});
		//read version column name
		UserTrackingService.getAllConfig().then(function(response) {
			if(response && response.data.Data){
				if(response.data.Data.config.col_ver_name){
					$scope.info.addRuleVersionFields =  GlobalService.setVal('addRuleVersionFields', response.data.Data.config.col_ver_name.split(','));
				}
			}			
		}, function(error){

		});
	};

	$scope.loadRules();

	$scope.loadFilterPanelData = function(){
		// $scope.columns.map(function(item){
		// 	item.expanded = false;
		// });
		$scope.showColumnFilterPanel = true;
		RulesService.setStateGroupData($scope.groupedFilterData);
		// $scope.showColumnFilterPanelLoading = true;
		// $('.panel-collapse').collapse('hide');
		//group value by field name
		// $timeout(function(){
		// 	$scope.reloadFilterPanelData();
		// }, 1000);
	}
	// $scope.mapApiTempName = function (id) {
	// 	$scope.namelist = $scope.apitemp.filter(function (temp) {
	// 		return temp.apiTemplateId == id;
	// 	});
	// 	if ($scope.namelist.length) {
	// 		return $scope.namelist[0]["apiTemplateName"];
	// 	}
	// 	else {
	// 		return "";
	// 	}
	// }
	$scope.reloadFilterPanelData = function () {
		//$scope.showColumnFilterPanelLoading = true;
		$scope.rulesList.forEach(function (rule) {
			if (!$scope.showAlertApiFeature) {
				$scope.groupedFilterData.filter(function (item) {
					if (item.field == "api_template_name") {
						item.enabled = false;
					}
				});
				// $scope.apitemp = RulesService.getApiTemplateList();
				// if ($scope.apitemp) {
				// 	if (rule.api_template_id > 0) {
				// 		rule.api_template_name = $scope.mapApiTempName(rule.api_template_id);
				// 	}

				// }
			}
			// else {
			// 	$scope.groupedFilterData.filter(function (item) {
			// 		if (item.field == "api_template_name") {
			// 			item.enabled = false;
			// 		}
			// 	});
			// }
			$scope.groupedFilterData.forEach(function (column) {
				if (column.field != 'label_display' || column.field != 'description' || column.field != 'author' || column.field != 'rule_name' || column.field != 'created_ts' || column.field != 'modified_ts' || column.field != 'rule_owner') {
					if (!column.data) {
						column.data = [];
					} else {
						if (rule[column.field] && rule[column.field].trim() != "" && rule[column.field] && rule[column.field].trim() != null && column.data.indexOf(rule[column.field]) == -1) {
							column.data.push(rule[column.field]);
						}
					}
				}
			});
		});
		$scope.showColumnFilterPanelLoading = false;
	};
	$scope.countListBasedOnStatus = function(field){
		if(!$scope.rulesList || !$scope.rulesList.length) return 0;
		if($scope.orderedData){
		 return ($scope.orderedData.reduce(function(total, item){
			 if(item.status.toLowerCase() === field.toLowerCase()){
				return total + 1;
			 }
			return total;
		},0));
	}
	}
	$scope.filterListBasedOnStatus = function(field){
		//field = field.toUpperCase();
		//$scope.info['status'][field] = true;
		var statusObj = $scope.groupedFilterData.filter(function(item){
			if(item.field == 'status' ){
				return true;
			}
		});
		
		var infoStatusObj = $scope.info.status;
		var data = statusObj[0].data;
		
		var InfoObjkeys = Object.keys(infoStatusObj);
		InfoObjkeys.forEach(function(item){
			data.forEach(function(dataItem){
				 if(dataItem.label === item){
					dataItem.selected = infoStatusObj[item];
				 }

			});

		});

		$scope.changeFilter({'field': 'status'}, field);
	}

	// Function to set the rules label map
	$scope.setRulesLabelMap = function() {
		var map = {};
		for (var i = 0; i < $scope.rulesList.length; i++) {
			map[$scope.rulesList[i]['label']] = true;
		}
		RulesService.setRulesLabelMap(map);
	};

	// Function to set all the rules label map
	$scope.setAllRulesMap = function() {
		RulesService.getRulesLabelsList().then(function(response) {
			if (Array.isArray(response.data.Data)) {
				var map = {};
				for (var i = 0; i < response.data.Data.length; i++) {
					map[response.data.Data[i]] = true;
				}
				RulesService.setRulesLabelMap(map);
			}
		}, handleSessionTimeout);
	};
	$scope.resetColumnFilterPanel = function(){		
		//clear column filter values
		$scope.columns.forEach(function(column){
			column.allValueList = [];
		});
	};
	// Function to reload rules list
	$scope.reloadRules = function() {
		$scope.info.rulesLoading = true;
		if(RulesService.getFilterState()){
			$scope.showColumnFilterPanel = Object.keys(RulesService.getFilterState()).length ? true : false;	
		}
		else{
			$scope.showColumnFilterPanel = false;
		}
		
		// $scope.resetColumnFilterPanel();
		RulesService.getAllRules($scope.rulesTypeSelected).then(function(response) {
			$scope.rulesList = $filter('filterMultiples')((response.data.Data), {
				status : [$scope.info.supportedStatus.Enabled, $scope.info.supportedStatus.Disabled, $scope.info.supportedStatus.Draft]
			});

			//add api template name to corresponding rule as we dont get it in rule list
			$scope.rulesList.forEach(function (rule) {
				if (rule.email_template_id > 0) {
					var ss = rule["subscribed_users"];
					rule["subscribed_users"] = ss.length ? (ss[ss.length-1] == "," ? ss.substring(0,ss.length-1): ss) : ss;
					rule["subscriberCount"] = rule.subscribed_users.length ? rule.subscribed_users.split(",").filter(Boolean).length : 0
					rule["subscriptionEmailList"] = rule.subscribed_users.length ? rule.subscribed_users.split(",").filter(Boolean) : [];
					if (rule.status == "ENABLED") {
						if (rule.subscription_enabled == false) {
							if (rule.subscriptionEmailList.includes($cookies.username)) {
								rule["subscribeIcon"] = false
								rule["mySubscriedRule"] = rule.subscriptionEmailList.includes($cookies.username) ? 'My Subscribed Rules' : 'Subscribable Rules';
							}else{
								//delete rule.subscribeIcon;
							}
							// rule["mySubscriedRule"] = rule.subscriptionEmailList.includes($cookies.username) ? 'My Subscribed Rules' : 'Subscribable Rules';
						} else if (rule.subscription_enabled == true) {
							rule["subscribeIcon"] = rule.subscriptionEmailList.includes($cookies.username) ? false : true;
							rule["mySubscriedRule"] = rule.subscriptionEmailList.includes($cookies.username) ? 'My Subscribed Rules' : 'Subscribable Rules';
						}

					}
				}
				if(rule.tags.length){
					rule.tags.forEach(function(tg){
						tg.label = tg.tag_name;
					})
				}
			})
			
			//check for state data  if not preesent process new data with new rule list
			if (!RulesService.getStateGroupData()) {
				$scope.groupedFilterData = RulesService.getgroupdata($scope.rulesList);
				if (!$scope.showAlertApiFeature) {
					$scope.groupedFilterData.forEach(function (item) {
						if (item.field == "api_template_name") {
							item.enabled = false;
						}
					})
				}
				$scope.groupedFilterData.forEach(function (groupedItem) {
					if (groupedItem.multiselect) {
						if (groupedItem.data.length) {
							groupedItem.enabled = true;
						}
					}
					groupedItem.expanded = false;	
				})
			}
			//else get the state maintained data with new rule list
			else {
				$scope.groupedFilterData = RulesService.getgroupdata($scope.rulesList);
				$scope.info = RulesService.getInfoData();
				if (!$scope.showAlertApiFeature) {
					$scope.groupedFilterData.forEach(function (item) {
						if (item.field == "api_template_name") {
							item.enabled = false;
						}
					})
				}

				//check if data field is empty for each multiselect filter object and disable it
				$scope.groupedFilterData.forEach(function (groupedItem) {
					if (groupedItem.multiselect) {
						if (!groupedItem.data.length) {
							delete $scope.info.filter[groupedItem.field];
							groupedItem.enabled = false;
							groupedItem.expanded = false;
							groupedItem.selected = false;
						}
						else {
							groupedItem.enabled = true;
						}

					}
					if (groupedItem['field'] == 'label_display' || groupedItem['field'] == 'description' ||
						groupedItem['field'] == 'author' || groupedItem['field'] == 'rule_name') {
						for (var key in $scope.info.filter) {
							if (key == [groupedItem['field']]) {
								$scope.info[groupedItem['field']] = $scope.info.filter[groupedItem['field']]
							}
						}
					}

				})
					//example scenario: if apitemplate filter is applied and the rule is edited and the template is replaced by another template the while returning
					//the filter object $scope.info.filter must be updated.
					var keys = Object.keys($scope.info.filter);
					$scope.groupedFilterData.forEach(function (dta) {
						if (dta.multiselect && keys.indexOf(dta.field) != -1 && dta.field != "status") {
							var fitdata = $scope.info.filter[dta.field];
							var gpdata =[];
							dta.data.forEach(function(it){
								gpdata.push(it.label);
						   });
							for (i = 0; i < fitdata.length; i++) {
								if (gpdata.indexOf(fitdata[i]) == -1) {
									fitdata.splice(i, 1);
								}
							}
							$scope.info.filter[dta.field] = fitdata;
							if(!fitdata.length){
								delete $scope.info.filter[dta.field];
							}
						}
					})
			}
			$scope.FilterRulesBasedOnUserRoleAndPermission();
			//$scope.clearAppliedFilters();
			$scope.info.page['current'] = 1;
			$scope.tableParams.reload();
			$scope.tableParams.page($scope.info.page['current']);
			if (!RulesService.getloadExplorerRules()) {
				$scope.info.rulesLoading = false;
			}
			$scope.info.rulesLoading = false;
			RulesService.setRulesList($scope.rulesList);
			$scope.setRulesLabelMap();
			$scope.setAllRulesMap();
			setTimeout(function(){ $scope.info.actionMessageFlag = false; }, 3000);                              
			$scope.trackUser($scope.rulesTypeSelected, 'View', {"View": $scope.rulesTypeSelected, "data": "none"});
		}, function(response) {
			$scope.rulesList = "";
			//$scope.clearAppliedFilters();
			$scope.info.page['current'] = 1;
			$scope.tableParams.reload();
			$scope.tableParams.page(1);
			if (!RulesService.getloadExplorerRules()) {
				$scope.info.rulesLoading = false;
			}
			$scope.info.rulesLoading = false;
			if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
				$scope.info.rulesListMsg = {
					type : 'failure',
					msg : GlobalService.getVal('rulesMsgs')['h2_down_msg']
				}
			} else {
				$scope.info.rulesListMsg = {
					type : 'failure',
					msg : GlobalService.getVal('rulesMsgs')['rules_load_failed']
				}
			}
			console.error('Unable to load Rules List');
			handleSessionTimeout(response);
		});
	};

	// Function to add a new rule
	$scope.addNewRule = function() {
		RulesService.setRuleMode('new');
		$scope.$parent.changeCurrentPage('add_rule');
	};

	// Execute this block if landed from explorer/apps to rules
	if (RulesService.getloadExplorerRules()) {
		AppService.hidePanelLoading();
		$scope.addNewRule();
	}

	// Select/unselect select all checkbox based on rules selection
	$scope.checkRulesSelection = function (rule) {
		$scope.currentSelected = $scope.currentRuleList.filter(function (x, i) {
			return x.selected;
		}).length;

		$scope.showSelectNotify = $scope.currentSelected > 0 ? true : false
		if ($scope.CurrentPageList.filter(function (x, i) {
			return x.selected;
		}).length == $scope.info.page['count']) {
			$scope.info.selectAllCurrentPage = true;
		}
		else {
			$scope.info.selectAllCurrentPage = false;
		}
	};

	// Select/unselect all enabled rules on the page
	$scope.checkSelectAll = function() {

		for (var i = 0; i < $scope.currentRuleList.length; i++) {
			$scope.currentRuleList[i].selected = true;
		}
		if ($scope.CurrentPageList.filter(function (x, i) {
			return x.selected;
		}).length == $scope.info.page['count']) {
			$scope.info.selectAllCurrentPage = true;
		}
		else {
			$scope.info.selectAllCurrentPage = false;
		}
		$scope.currentSelected = $scope.currentRuleList.filter(function (x, i) {
			return x.selected;
		}).length;
		$scope.showSelectNotify = $scope.currentSelected > 0 ? true : false;
	};

	//function to select current page data
	$scope.selectcurrentpage = function (data){
		if (!!$scope.info.selectAllCurrentPage) {
			for (var i = 0; i < data.length; i++) {
				data[i].selected = true;
			}
		} else {
			for (var i = 0; i < data.length; i++) {
				delete data[i].selected;
			}

		}
		$scope.currentSelected = $scope.currentRuleList.filter(function (x, i) {
			return x.selected;
		}).length;
		$scope.showSelectNotify = $scope.currentSelected > 0 ? true : false

	}

	//function clear all selected
	$scope. clearselected = function(){
		for (var i = 0; i < $scope.currentRuleList.length; i++) {
			delete $scope.currentRuleList[i].selected;
		}
		if ($scope.CurrentPageList.filter(function (x, i) {
			return x.selected;
		}).length == $scope.info.page['count']) {
			$scope.info.selectAllCurrentPage = true;
		}
		else {
			$scope.info.selectAllCurrentPage = false;
		}
		$scope.showSelectNotify = false;
	}

	// Function to check if any rule is selected
	$scope.checkSelectedRules = function() {
		if (!!$scope.rulesList) {
			var selectedRules = $filter('filter')($scope.currentRuleList, {
				selected : true
			}) || [];
			if (selectedRules.length > 0) {
				return true;
			}
		}

		return false;
	};

	// Function to call test rule for a draft
	$scope.testRule = function(rule) {
		$scope.setPageListforTesting();
		var selectedRules = [];
		selectedRules.push(rule);
		RulesService.setTestRuleData(selectedRules);
		RulesTestWithLogvault.setRulesSelected(selectedRules);
		$scope.$parent.changeCurrentPage('test_rule_history');
	};

	// Function to go to test rule history
	$scope.goToTestRuleHistory = function() {
		$scope.setPageListforTesting();
		var selectedRules = [];
		RulesService.setTestRuleData(selectedRules);
		RulesTestWithLogvault.setRulesSelected(selectedRules);
		$scope.$parent.changeCurrentPage('test_rule_history');
	};

	// Function to go to test rule history
	$scope.goToManageEmailTemplatePage = function() {
		$scope.$parent.changeCurrentPage('manage_template');
	};

	// Function to go to test rule history
	$scope.goToManageAPITemplatePage = function() {
		$scope.info.pageLoading = true;
		$scope.$parent.changeCurrentPage('manage_API_template');
	};

	// Function to go to test rule history
	$scope.goToManageCategoryPage = function() {
		$scope.$parent.changeCurrentPage('add_category');
	};

	// Function to go to test rule
	$scope.goToTestRule = function() {

		if(!$scope.checkSelectedRules()){
			return;
		}
		var selectedRules = [], found = false, filterredRules = $scope.getFilterredRules($scope.rulesList);
		for (var i = 0; i < filterredRules.length; i++) {
			if (!!filterredRules[i].selected){
				if(filterredRules[i].status == $scope.info.supportedStatus.Enabled) {
					found = true;
					break;
				}
				// else if(filterredRules[i].myRule && filterredRules[i].status == $scope.info.supportedStatus.Draft){
				// 	found = true;
				// 	break;
				// }
			}
		}
		if (!found) {
			ModalService.alertBox({
				msg : GlobalService.getVal('rulesMsgs')['rule_select_all_error']
			});
			return;
		}

		for (var i = 0; i < filterredRules.length; i++) {
			if (!!filterredRules[i].selected){
				if(filterredRules[i].status == $scope.info.supportedStatus.Enabled) {
					selectedRules.push(filterredRules[i]);
				}
				// else if(filterredRules[i].myRule && filterredRules[i].status == $scope.info.supportedStatus.Draft){
				// 	selectedRules.push(filterredRules[i]);
				// }
			}
		};
		$scope.multipleRulesDeleteReq = selectedRules;
		$scope.msg = GlobalService.getVal('rulesMsgs')['rule_test_multiple'];
		$scope.modal = ModalService.openModal("partials/rules-and-alerts/test_rule.html", $scope, false, 'static');

	};
	$scope.testRulesRequest = function() {
		$scope.setPageListforTesting();
		var selectedRules = [];
		for (var i = 0; i < $scope.rulesList.length; i++) {
			if (!!$scope.rulesList[i].selected && ($scope.rulesList[i].status == $scope.info.supportedStatus.Enabled)) {
				selectedRules.push($scope.rulesList[i]);
			}
		}
		if (selectedRules.length > 0) {
			RulesService.setTestRuleData(selectedRules);
			RulesTestWithLogvault.setRulesSelected(selectedRules);
			$scope.$parent.changeCurrentPage('test_rule_history');
		}
	}

	// Sets page list for Test Rule Page
	$scope.setPageListforTesting = function() {
		var pageList = GlobalService.getVal('rulesPages');
		pageList.test_rule_history = [{
			name : 'rules_list',
			label : 'Rules List'
		}, {
			name : 'test_rule_history',
			label : 'Test Rule History'
		}];
		GlobalService.setVal('rulesPages', pageList);
	};

	// Function to enable/disable rule
	$scope.enableDisableRule = function(rule, field) {
		//if(rule[field] == $scope.info.supportedStatus.Enabled) return;
		$scope.selectedRule = rule;
		$scope.selectedField = field;
		$scope.selectedRuleName = $scope.selectedRule['label_display'];
		$scope.msg = (rule[field] == $scope.info.supportedStatus.Enabled);
		$scope.confirmEnablingDisableRule();
		// $scope.msg = rule[field] == $scope.info.supportedStatus.Enabled ? "Are you sure you want to disable the rule <strong>" + rule.rule_name + "</strong>?" : "Are you sure you want to enable the rule <strong>" + rule.rule_name + "</strong>?";
		// $scope.modal = ModalService.openModal("partials/rules-and-alerts/enable_disable_rule.html", $scope, false, 'static');
	};	
	$scope.confirmEnablingDisableRule = function(){
		//open message box to ask for message befor enable it
		$scope.info.enableRuleComments = "";
		$scope.modal = ModalService.openModal('partials/rules-and-alerts/modal-enable-rule-message-box.html', $scope, "gb-modal-test-rule-enable-modal", 'static');
	}
	
	$scope.enableDisableStatusBtn = function(){
		return $scope.info.enableRuleComments.length >= $scope.info.enableRuleCommentsLimitMin;
	}
	// Function to confirm enable/disable rule
	$scope.enableDisableRuleAction = function() {
		if($scope.info.rulesLoading){
			return;
		}
		if(!$scope.info.enableRuleComments.length) return;
		var rule = $scope.selectedRule;
		var field = $scope.selectedField;
		$scope.modal.close()		
		$scope.info.rulesLoading = true;
		if (rule[field] == $scope.info.supportedStatus.Enabled) {
			RulesService.disableRule(rule.rule_id, $scope.info.enableRuleComments).then(function(response) {
				$scope.info.rulesListMsg = {
					type : 'success',
					msg : GlobalService.getVal('rulesMsgs')['rule_disable_success'][0] + rule.label_display + GlobalService.getVal('rulesMsgs')['rule_disable_success'][1]
				}
				//user tracking call
				$scope.trackUser('Rules List', 'disable', rule);

				//UserTrackingService.standard_user_tracking($scope.info.application, 'Rules List', 'disable', rule.label).then(function(response) {

				// }, handleSessionTimeout);
				$scope.reloadRules();
			}, function(response) {
				if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
					GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
					$scope.info.rulesListMsg = {
						type : 'failure',
						msg : GlobalService.getVal('rulesMsgs')['h2_down_msg']
					}
				} else {
					$scope.info.rulesListMsg = {
						type : 'failure',
						msg : GlobalService.getVal('rulesMsgs')['rule_disable_failed'][0] + rule.label_display + GlobalService.getVal('rulesMsgs')['rule_disable_failed'][1]
					}
				}

				console.error("Unable to disable rule " + rule.label);
				$scope.info.rulesLoading = false;
				handleSessionTimeout(response);
			});
		} else {
			RulesService.enableRule(rule.rule_id, $scope.info.enableRuleComments).then(function(response) {
				$scope.info.rulesListMsg = {
					type : 'success',
					msg : GlobalService.getVal('rulesMsgs')['rule_enable_success'][0] + rule.label_display + GlobalService.getVal('rulesMsgs')['rule_enable_success'][1]
				}
				//user tracking call
				$scope.trackUser('Rules List', 'enable', rule);
				// UserTrackingService.standard_user_tracking($scope.info.application, 'Rules List', 'enable', rule.label).then(function(response) {

				// }, handleSessionTimeout);
				$scope.reloadRules();
			}, function(response) {
				if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
					GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
					$scope.info.rulesListMsg = {
						type : 'failure',
						msg : GlobalService.getVal('rulesMsgs')['h2_down_msg']
					}
				} else {
					$scope.info.rulesListMsg = {
						type : 'failure',
						msg : GlobalService.getVal('rulesMsgs')['rule_enable_failed'][0] + rule.label_display + GlobalService.getVal('rulesMsgs')['rule_enable_failed'][1]
					}
				}

				console.error("Unable to enable rule " + rule.label);
				$scope.info.rulesLoading = false;
				handleSessionTimeout(response);
			});
		}
	};

	// Function to edit a rule
	$scope.editRule = function(rule) {
		if (rule[$scope.columns[$scope.columns.length - 1].field] == $scope.info.supportedStatus.Disabled) {
			ModalService.alertBox({
				msg : GlobalService.getVal('rulesMsgs')['edit_rule_disabled']
			});
			return;
		}
		rule['label'] = rule['label_display'];
		RulesService.setRuleMode('edit', rule);
		$scope.$parent.changeCurrentPage('add_rule');
	};

	// Function to delete a rule
	$scope.changeRuleOwnership = function(rule, newOwner) {
		$scope.currentRule = rule;
		$scope.currentOwner = newOwner;
		$scope.msg = "Are you sure you want to change ownership(edit/delete) of rule <strong>"+rule.label_display+ "</strong> to user <strong>"+newOwner+"</strong> ?";
		$scope.modal = ModalService.openModal("partials/rules-and-alerts/change_rule_owner.html", $scope, false, 'static');
	};

	// Function to change ownership for multiple rules(nish)
	$scope.changeMultipleRuleOwnership = function (newOwner) {
		if (!$scope.checkSelectedRules()) {
			return;
		}

		if (!$scope.availableRulesOwnerList.length) {
			ModalService.alertBox({
				msg: GlobalService.getVal('rulesMsgs')['rules_owner_list_not_found']
			});
			return;
		}

		//check if rule has been selected or not return false otherwise
		$scope.currentLoggedUser = $cookies.username;
		var selectedRules = $filter('filter')($scope.rulesList, {
			selected: true
		}) || [];
		if (selectedRules.length > 0) {

			var selectedRules = [], found = false, filterredRules = $scope.getFilterredRules($scope.rulesList);
			//filter to show only the rules owned by logged in user
			for (var i = 0; i < filterredRules.length; i++) {
				if (!!filterredRules[i].selected) {
					if (filterredRules[i].myRule) {
						selectedRules.push(filterredRules[i]);
					}
					else if ($scope.amIAdmin) {
						selectedRules.push(filterredRules[i]);
					}
				}
			}
			$scope.multipleRuleOwnerChange = selectedRules;
			//selectedRules array will be empty if the user selects the rules not owned by him
			if(selectedRules.length < 1){
				ModalService.alertBox({
					msg: GlobalService.getVal('rulesMsgs')['owner_change_multiple_warn']
				});
				return;
			}
			
			$scope.currentOwner = newOwner;
			$scope.msg = GlobalService.getVal('rulesMsgs')['owner_change_multiple'];
			$scope.modal = ModalService.openModal("partials/rules-and-alerts/multiple_owner_change.html", $scope, false, 'static');
			
		}

	};

	$scope.setCurrentOwner = function(owner) {
		$scope.multipleRulesSelectedOwner = owner;
	  };

	//Function to make data for  this function changeMultipleRuleOwnershipRequest
	$scope.goToChangeMultipleRuleOwnership = function () {
		var selectedRules = [], ids = "", status = "", r_name = "";
		for (var i = 0; i < $scope.multipleRuleOwnerChange.length; i++) {
			if (!ids) ids = $scope.multipleRuleOwnerChange[i].rule_id;
			else ids = ids + "," + $scope.multipleRuleOwnerChange[i].rule_id;

			if (!status) status = $scope.multipleRuleOwnerChange[i].status;
			else status = status + "," + $scope.multipleRuleOwnerChange[i].status;

			if (!r_name) r_name = $scope.multipleRuleOwnerChange[i].rule_name;
			else r_name = r_name + "," + $scope.multipleRuleOwnerChange[i].rule_name;
		};
		$scope.changeMultipleRuleOwnershipRequest($scope.multipleRuleOwnerChange, ids, status);
	};

	$scope.changeMultipleRuleOwnershipRequest = function (selectedRules, m_ids, m_status) {
		$scope.modal.close();
		$scope.showColumnFilterPanel = false;
		$scope.info.rulesLoading = true;
		var param = {
			'rule_owner': $scope.multipleRulesSelectedOwner,
			'rule_id': m_ids,
			'rule_status':m_status
		}
		//get owner list
		RulesService.updateRuleOwnership(param).then(function (response) {
			var responseData = response.data.Data;
			$scope.trackUser('Rules List', 'MultipleOwnership change', param);
			$scope.reloadRules();
			$scope.multipleRulesSelectedOwner = null; //reset selected owner after th change process.
			// UserTrackingService.standard_user_tracking($scope.info.application, 'Rule List', 'Owner_change', details).then(function(response) {
			// }, handleSessionTimeout);
		}, function (response) {
			$scope.info.rulesLoading = false;
			$scope.info.rulesListMsg = {
				type: 'failure',
				msg: GlobalService.getVal('rulesMsgs')['update_rule_load_owners_failed']
			};
		});
	};
	$scope.emptySleectedOwner = function () {
		$scope.multipleRulesSelectedOwner = null;
	}

	// Function to delete a rule
	$scope.deleteRule = function(rule) {
		$scope.delRule = rule;
		$scope.msg = GlobalService.getVal('rulesMsgs')['rule_del_single'][0] + rule.label_display + GlobalService.getVal('rulesMsgs')['rule_del_single'][1];
		$scope.modal = ModalService.openModal("partials/rules-and-alerts/delete_rule.html", $scope, false, 'static');
	};


	// Confirm the deletion of a rule
	$scope.deleteRuleRequest = function(selectedRules,m_ids,m_status,m_email_template_ids) {
		var rule = $scope.delRule;
		$scope.info.rulesLoading = true;
		var label = "", m_ids, m_status;
		if(!selectedRules){
			m_ids = rule.rule_id;
			label = rule.label;
			m_status = rule.status;
			m_email_template_ids = rule.email_template_id;
		};
		RulesService.deleteRule(m_ids, m_status,m_email_template_ids).then(function(response) {
			if(!selectedRules){
				$scope.deleteSubscriptionFilter(rule,false);
			}else{
				$scope.deleteSubscriptionFilter(m_ids.split(",").map(function(item) {
					return parseInt(item, 10);
				}),true);
			}
			$scope.reloadRules();
			var rulesLabelMap = RulesService.getRulesLabelMap();
			if(rule){
				delete rulesLabelMap[rule.label];
				//user tracking call
				$scope.trackUser('Rules List', 'delete', rule);
				// UserTrackingService.standard_user_tracking($scope.info.application, 'Rules List', 'delete', rule.label).then(function(response) {

				// }, handleSessionTimeout);
				$scope.info.rulesListMsg = {
					type : 'success',
					msg : GlobalService.getVal('rulesMsgs')['rule_delete_success'][0] + rule.label_display + GlobalService.getVal('rulesMsgs')['rule_delete_success'][1]
				}
			}else{
				selectedRules.map(function(item){
					delete rulesLabelMap[item.rule_name];
					//user tracking call
					$scope.trackUser('Rules List', 'delete', item);
					// UserTrackingService.standard_user_tracking($scope.info.application, 'Rules List', 'delete', item.label_display).then(function(response) {

					// }, handleSessionTimeout);
				});
				$scope.info.rulesListMsg = {
					type : 'success',
					msg : GlobalService.getVal('rulesMsgs')['rule_delete_multiple_success']
				}
			}
			RulesService.setRulesLabelMap(rulesLabelMap);
		}, function(response) {
			$scope.info.rulesLoading = false;
			if(rule){
				console.error('Unable to delete ' + rule.label);
			}else{
				selectedRules.map(function(item){	
					console.error('Unable to delete ' + item.label_display);
				});
			}

			if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
				$scope.info.rulesListMsg = {
					type : 'failure',
					msg : GlobalService.getVal('rulesMsgs')['h2_down_msg']
				}
			} else {
				$scope.info.rulesListMsg = {
					type : 'failure',
					msg : GlobalService.getVal('rulesMsgs')['rule_delete_multiple_failed']
				}
			}
			handleSessionTimeout(response);
		});
	};
	$scope.deleteMultipleRulesConfirm = function(){	
		if(!$scope.checkSelectedRules()){
			return;
		}
		var selectedRules = [], rule, found=false, filterredRules = $scope.getFilterredRules($scope.rulesList);
		for (var i = 0; i < filterredRules.length; i++) {
			rule = filterredRules[i];
			if (!!filterredRules[i].selected){
				//a rule creator can delete his rules
				// if(filterredRules[i].myRule){
				// 	found = true;
				// 	break;
				// }				
				// else if($scope.amIAdmin) {
				// 	found = true;
				// 	break;
				// }
				//for user have permission as rule_creator^M
				if(rule.rule_owner === $scope.myEmail){
					found = true;
					break;
				}	
			} 
		}
		if (!found) {
			ModalService.alertBox({
				msg : GlobalService.getVal('rulesMsgs')['rule_delete_select_all_error']
			});
			return;
		}
		for (var i = 0; i < filterredRules.length; i++) {
			rule = filterredRules[i];
			if (!!filterredRules[i].selected){
				// if(filterredRules[i].myRule){
				// 	selectedRules.push(filterredRules[i]);
				// }
				// else if($scope.amIAdmin) {
				// 	selectedRules.push(filterredRules[i]);
				// }
				
				if(rule.rule_owner === $scope.myEmail){
					selectedRules.push(filterredRules[i]);
				}	
			} 
		};
		$scope.multipleRulesDeleteReq = selectedRules;	
		$scope.msg = GlobalService.getVal('rulesMsgs')['rule_del_multiple'];
		$scope.modal = ModalService.openModal("partials/rules-and-alerts/delete_multiple_rules.html", $scope, false, 'static');
	};
	$scope.goToDeleteRule = function(){
		var selectedRules = [], ids="", status="", r_name="", email_template_ids="";
		for (var i = 0; i < $scope.multipleRulesDeleteReq.length; i++) {
			if(!ids) ids = $scope.multipleRulesDeleteReq[i].rule_id;
			else ids = ids + "," + $scope.multipleRulesDeleteReq[i].rule_id;

			if(!status) status = $scope.multipleRulesDeleteReq[i].status;
			else status = status + "," + $scope.multipleRulesDeleteReq[i].status;

			if(!r_name) r_name = $scope.multipleRulesDeleteReq[i].rule_name;
			else r_name = r_name + "," + $scope.multipleRulesDeleteReq[i].rule_name;

			if(!email_template_ids) email_template_ids = $scope.multipleRulesDeleteReq[i].email_template_id;
                        else email_template_ids = email_template_ids + "," + $scope.multipleRulesDeleteReq[i].email_template_id;
		};
		$scope.deleteRuleRequest($scope.multipleRulesDeleteReq,ids,status,email_template_ids);
	};
	// Changes page size
	$scope.changePageSize = function() {
		$scope.info.page['count'] = parseInt($scope.info.page['count']);
		$scope.tableParams.count($scope.info.page['count']);
		$scope.info.page['pages'] = Math.ceil($scope.info.page['total'] / $scope.info.page['count']);
		if ($scope.info.page['current'] > $scope.info.page['pages']) {
			$scope.info.page['current'] = $scope.info.page['pages'];
			$scope.tableParams.page($scope.info.page['current']);
		}
		RulesService.setPageState($scope.info.page['current']);
	};

	// Go to next page from current page if not on last page
	$scope.nextPage = function() {
		if ($scope.info.page['current'] < $scope.info.page['pages']) {
			$scope.info.page['current'] += 1;
			$scope.tableParams.page($scope.info.page['current']);
			RulesService.setPageState($scope.info.page['current']);
		}
	};

	// Go to previous page from current page if not on first page
	$scope.prevPage = function() {
		if ($scope.info.page['current'] > 1) {
			$scope.info.page['current'] -= 1;
			$scope.tableParams.page($scope.info.page['current']);
		}
		RulesService.setPageState($scope.info.page['current']);
	};

	// Go to first page from any page if not on first page
	$scope.firstPage = function() {
		if ($scope.info.page['current'] == 1)
			return;
		$scope.info.page['current'] = 1;
		$scope.tableParams.page($scope.info.page['current']);
		RulesService.setPageState($scope.info.page['current']);
	};

	// Go to last page from any page if not on last page
	$scope.lastPage = function() {
		if ($scope.info.page['current'] == $scope.info.page['pages'])
			return;
		$scope.info.page['current'] = $scope.info.page['pages'];
		$scope.tableParams.page($scope.info.page['current']);
		RulesService.setPageState($scope.info.page['current']);
	};
	// Update the filter object if some filter is applied using text box and update the page no. if required
	$scope.searchRule = function(field, clear) {
		if(clear){
			$scope.info[field] = "";
		}
		if ($scope.info[field] != "") {
			$scope.info.filter[field] = $scope.info[field];
			RulesService.setFilterState($scope.info.filter);
		} else {
			if (!!$scope.info.filter[field]) {
				delete $scope.info.filter[field];
				RulesService.setFilterState($scope.info.filter);
			}
		}
		RulesService.setStateGroupData($scope.groupedFilterData);
		$scope.resettofirst = true;
		$scope.tableParams.reload();
		// if ($scope.info.page['current'] > $scope.info.page['pages']) {
		// 	if ($scope.info.page['pages'] == 0) {undefined
		// 		$scope.info.page['current'] = 1;
		// 	} else {
		// 		$scope.info.page['current'] = $scope.info.page['pages'];
		// 	}
		// 	$scope.tableParams.page($scope.info.page['current']);		
		// }
	};
	$scope.showHideColumn = function(column,$event){
		column.selected=!column.selected;
		$event.stopPropagation();
	};
	// Update the filter object if some filter is applied by selecting checkbox from dropdown and update the page no. if required
	$scope.changeFilter = function(column, value, listvalue) {
		if ($scope.info[column.field][value]) {
			if (!$scope.info.filter[column.field]) {
				$scope.info.filter[column.field] = [];
			}
			$scope.info.filter[column.field].push(value);
			if (column.field != $scope.columns[$scope.columns.length - 1].field) {
				column.filterString = $scope.info.filter[column.field].join(', ');
			} else {
				column.filterString = '';
				for (var i = 0; i < $scope.info.filter[column.field].length; i++) {
					if (i == 0) {
						column.filterString += $scope.info.filter[column.field][i] == $scope.info.supportedStatus.Enabled ? 'Enabled' : ($scope.info.filter[column.field][i] == $scope.info.supportedStatus.Disabled ? 'Disabled' : 'Draft');
					} else {
						column.filterString += ', ' + ($scope.info.filter[column.field][i] == $scope.info.supportedStatus.Enabled ? 'Enabled' : ($scope.info.filter[column.field][i] == $scope.info.supportedStatus.Disabled ? 'Disabled' : 'Draft'));
					}
				}
			}
		} else {
			$scope.info.filter[column.field].splice($scope.info.filter[column.field].indexOf(value), 1);
			if ($scope.info.filter[column.field].length > 0) {
				if (column.field != $scope.columns[$scope.columns.length - 1].field) {
					column.filterString = $scope.info.filter[column.field].join(', ');
				} else {
					column.filterString = '';
					for (var i = 0; i < $scope.info.filter[column.field].length; i++) {
						if (i == 0) {
							column.filterString += $scope.info.filter[column.field][i] == $scope.info.supportedStatus.Enabled ? 'Enabled' : ($scope.info.filter[column.field][i] == $scope.info.supportedStatus.Disabled ? 'Disabled' : 'Draft');
						} else {
							column.filterString += ', ' + ($scope.info.filter[column.field][i] == $scope.info.supportedStatus.Enabled ? 'Enabled' : ($scope.info.filter[column.field][i] == $scope.info.supportedStatus.Disabled ? 'Disabled' : 'Draft'));
						}
					}
				}
			} else {
				column.filterString = "";
				delete $scope.info.filter[column.field];
			}
			
		}
		RulesService.setStateGroupData($scope.groupedFilterData);
		RulesService.setFilterState($scope.info.filter);
		RulesService.setPageState($scope.info.page['current']);
		$scope.showFilterCount();
		//user tracking call
		$scope.trackUser('Rules List', 'filter', $scope.info.filter);
		$scope.resettofirst = true;
		$scope.tableParams.reload();
		
		//$scope.info.page['current'] = 1;
		//$scope.tableParams.page($scope.info.page['current']);
		// if ($scope.info.page['current'] > $scope.info.page['pages']) {
		// 	if ($scope.info.page['pages'] == 0) {
		// 		$scope.info.page['current'] = 1;
		// 	} else {
		// 		$scope.info.page['current'] = $scope.info.page['pages'];
		// 	}
		// 	$scope.tableParams.page($scope.info.page['current']);
		// }
	};
	$scope.formatDateTime = function(dt){
		return moment( new Date(moment.utc(dt).format())).format('YYYY/MM/DD HH:MM:SS');
	}
	// Sort the column if clicked on the column header
	$scope.sortColumn = function(field) {
		if (!(document.activeElement.tagName == "INPUT" || document.activeElement.tagName == "BUTTON")) {
			$scope.tableParams.sorting(field, $scope.tableParams.isSortBy(field, 'asc') ? 'desc' : 'asc');
			$scope.info.page['sortField'] = field + ($scope.tableParams.isSortBy(field, 'asc') ? 'asc' : 'desc');
		}
	};

	// Clear all the applied filters on the page and set the page no. to 1
	$scope.clearAppliedFilters = function () {
		for (var i in $scope.groupedFilterData) {
			delete $scope.groupedFilterData[i].filterString;
		}
		if (Object.keys($scope.info.filter).length != 0) {
			for (var i in $scope.groupedFilterData) {
				if ($scope.groupedFilterData[i]['field'] == 'label_display' || $scope.groupedFilterData[i]['field'] == 'description' || $scope.groupedFilterData[i]['field'] == 'author' || $scope.groupedFilterData[i]['field'] == 'rule_name') {
					$scope.info[$scope.groupedFilterData[i]['field']] = "";
				} else {
					$scope.info[$scope.groupedFilterData[i]['field']] = {};
					if ($scope.groupedFilterData[i].data && Array.isArray($scope.groupedFilterData[i].data)) {
						$scope.groupedFilterData[i].data.forEach(function (item) {
							item.selected = false;
						})
					}
				}
			}
			$scope.info.filter = {};
			RulesService.setFilterState(undefined);
			RulesService.setPageState(undefined);
			RulesService.setStateGroupData(undefined);
			$scope.tableParams.reload();

			$scope.info.page['current'] = 1;
			$scope.tableParams.page($scope.info.page['current']);
		}
		if ($scope.info.page['sortField'] != $scope.info.initialSortField + 'desc') {
			$scope.tableParams.sorting($scope.info.initialSortField, 'desc');
			$scope.info.page['sortField'] = $scope.info.initialSortField + 'desc';
		}
		RulesService.setStateGroupData(undefined);
		//RulesService.setFilterState(undefined);
	};

	// Check if any filter is applied or not
	$scope.checkAppliedFilters = function() {
		var filters = false;
		if (Object.keys($scope.info.filter).length != 0)
			filters = true;
		if (filters || $scope.info.page['sortField'] != $scope.info.initialSortField + 'desc') {
			return true;
		}
		return false;
	};

	// Function to render text in html format
	$scope.renderHtml = function(html) {
		return $sce.trustAsHtml(html);
	};

	// Function to handle session timeout
	function handleSessionTimeout(response) {
		if (!$scope.info.sessionTimedOut && response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/timeout/)) {
			$scope.info.sessionTimedOut = true;
			ModalService.sessionTimeout();
		}
	};

	//Main Analytics control variable
	$scope.showAnalyicsModal = function(){
		$scope.showAnalyticsDashboards = true;
		$scope.modal = ModalService.openModal('partials/rules-and-alerts/dashboard.html', $scope, "gb-rules-dashboard-modal", 'static');
		//user tracking call
		$scope.trackUser('Main_Analytics', 'View', {View: "Main analytics", data: "none"});
	}
	$scope.hideAnalyticsModal = function(){
		$scope.showAnalyticsDashboards = false;
		$scope.modal.close();
	};
	$scope.showOwnersDropDown = function(){
		if(!$scope.availableRulesOwnerList.length){
			ModalService.alertBox({
				msg : GlobalService.getVal('rulesMsgs')['rules_owner_list_not_found']
			});
		}
	};
	$scope.loadRulesOwnerList = function(){		
		//get owner list
		RulesService.getRulesOwenrList().then(function(response) {
			var responseData = response.data.Data;
			$scope.availableRulesOwnerList = responseData;
		}, function(response) {
			$scope.info.rulesListMsg = {
				type : 'failure',
				msg : GlobalService.getVal('rulesMsgs')['rules_load_owners_list_failed']
			};
			$scope.availableRulesOwnerList = [];
		});
	};	
	$scope.filterOwnerListByRule = function(owner,  filter){
		var list = [];
		if($scope.availableRulesOwnerList){
			for(var i=0;i<$scope.availableRulesOwnerList.length;i++){
				if($scope.availableRulesOwnerList[i].email != owner){
					if(filter){
						if($scope.availableRulesOwnerList[i].email.indexOf(filter) != -1){
							list.push($scope.availableRulesOwnerList[i]);
						}
					}else{
						list.push($scope.availableRulesOwnerList[i]);
					}
				}
			}
		}

		return list;
	}
	//load all owners details
	$scope.loadRulesOwnerList();
	$scope.updateRulesWithOwnerInformation = function(rule_id, owner){
		$scope.rulesList.forEach(function(rule){
			if(rule.rule_id === rule_id){
				rule.rule_owner = owner;
			}
		});
	};
	$scope.changeRuleOwnershipRequest = function(){
		$scope.modal.close();
		//$scope.showColumnFilterPanel = false;
		$scope.info.rulesLoading = true;
		var param = {
			'rule_owner': $scope.currentOwner,
			'rule_id'  : $scope.currentRule.rule_id,
			'rule_status' : $scope.currentRule.status
		}
		//get owner list
		RulesService.updateRuleOwnership(param).then(function(response) {
			var responseData = response.data.Data;
			$scope.trackUser('Ownership', 'change', param);
			$scope.reloadRules();
		}, function(response) {
			$scope.info.rulesLoading = false;
			$scope.info.rulesListMsg = {
				type : 'failure',
				msg : GlobalService.getVal('rulesMsgs')['update_rule_load_owners_failed']
			};
		});
	};
	$scope.FilterRulesBasedOnUserRoleAndPermission = function(){
		var list = $scope.rulesList.filter(function(rule){
			//for admin user return all rules
			if($scope.amIAdmin){
				rule.myRule = true;
				return true;
			}
			//filterred outother user's draft rule
			if((rule.status === $scope.info.supportedStatus['Draft']) && (rule.rule_owner !== $scope.myEmail)){
				rule.myRule = false;
				return false;
			}
			//for user have permission as rule_creator
			if(rule.rule_owner === $scope.myEmail){
				rule.myRule = true;
				return true;
			}
			//for non admin and not the owner of the rule
			rule.myRule = false;
			return true;
		});
		$scope.rulesList = list;
	}

	//RuleWise control variable
	$scope.showRuleWiseAnalyticsModal = function(ruleid){
		$scope.showRuleWiseAnalyticsDashboard = true;
		var rid = ruleid;
		RulesService.setSelectedRuleForAnalytics(rid);
		$scope.selectedRuleForRuleLabelAnalytics  = ruleid;
		$scope.modal = ModalService.openModal('partials/rules-and-alerts/dashboard-rule-level.html', $scope, "gb-rule-level-dashboard-modal", 'static');
		var details = JSON.stringify({rule_id: ruleid});
		//user tracking call
		$scope.trackUser('Rule_wise_Analytics', 'View', {rule_id: ruleid});
		// UserTrackingService.standard_user_tracking($scope.info.application, 'Rule_wise_Analytics', 'View', details).then(function(response) {

		// }, handleSessionTimeout);

	}
	$scope.hideRuleWiseAnalyticsModal = function(){
		$scope.showRuleWiseAnalyticsDashboard = false;
		$scope.modal.close();
	}	
	$scope.ruleDrillDetails = function (rule) {
		$scope.showViewDetailsDiv = false;
		$scope.currentRuleName=[];
		$scope.currentRule = [];
		$scope.currentRule.push(rule);
		$scope.currentRuleName = $scope.currentRule[0].rule_name;
		$scope.current_label_display = $scope.currentRule[0].label_display;
		//get changes list
		RulesService.getRuleDrillDetails($scope.currentRuleName).then(function (response) {
			var responseData = response.data.Data, version = 0;
			//process response and remove  object whose key is null
			responseData.map(function(item){
				version++;
				if(item.changes_map){
					var found = false;
					for(var i=0;i<item.changes_map.length;i++){
						for (var prop in item.changes_map[i]) {
							if(prop == null || prop == 'null'){
								found = true;
								break;
							}
							//modify it if state change during Edit rule
							if(prop == 'state'){
								if(item.changes_map[i][prop] && (item.changes_map[i][prop]['From'] == $scope.info.supportedStatus.Enabled ||item.changes_map[i][prop]['From'] == $scope.info.supportedStatus.Disabled)){
									if(item.changes_map[i][prop]['To'] == $scope.info.supportedStatus.Draft){
										found = true;
										break;
									}
								}
							}
						}
						if(found){
							break;
						}
					}
					if(found){
						item.changes_map.splice(i,1);
					}
					//check the changes and modify to LOGIC changes
					if(item.changes_map.length == 1){
						if(Object.keys(item.changes_map[0]) && Object.keys(item.changes_map[0])[0] == 'logic'){
							item.type_of_change = $scope.info.rulesHistoryTypesOfChanges.logic;
						}
					}
				}
				if(item.type_of_change != $scope.info.rulesHistoryTypesOfChanges.created && (item.type_of_change === $scope.info.rulesHistoryTypesOfChanges.state || item.changes_map.length == 0)){
					version--;
				}
				item.version = version;
				item.number_of_changes = item.changes_map.length;
				item.comments = item.comments == null || item.comments == 'null'?"":item.comments;
			});
			
			$scope.changeDetails = responseData;
			if($scope.changeDetails.length == 0){
				ModalService.alertBox({
					msg : GlobalService.getVal('rulesMsgs')['emptyRuleHistoryAlertMsg']
				});
				return;	
			}
			$scope.modal = ModalService.openModal('partials/rules-and-alerts/rule-drill-details.html', $scope, "gb-rule-level-dashboard-modal", true, 'static');
			$scope.trackUser('Rule Change History', 'View', $scope.currentRule);
		}, function (response) {

		});
	}

	$scope.ruleHistoryExpandToggle= function(){
		$scope.info.ruleHistoryTableExpandAll = !$scope.info.ruleHistoryTableExpandAll;
		$scope.changeDetails.map(function(item){
			if(item.number_of_changes && item.number_of_changes > 0){
				if($scope.info.ruleHistoryTableExpandAll) item.showDetails = true;
				else item.showDetails = false;
			}
		})
	}

	$scope.drillViewDetails = function(obj){
		if(obj.showDetails){
			obj.showDetails = false;
			$scope.info.ruleHistoryTableExpandAll = false;
		}else{
			obj.showDetails = true;
		}
	}
	
	$scope.closeVidetailspopup = function(id){
		$scope.showViewDetailsDiv = false;
	}
	$scope.showHideOwnerList = function(rule){
		if($scope.amIAdmin){
			return true;
		}
		return rule.myRule;
	}	
	$scope.showHideActionItem = function(rule){
		if((rule.status === $scope.info.supportedStatus['Draft']) && (rule.rule_owner !== $scope.myEmail)){
			return false;
		}
		//for user have permission as rule_creator
		if(rule.rule_owner === $scope.myEmail){
			return true;
		}
		return false;
	}

	//Rule read only details view function
	$scope.ruleReadOnlyInfo = function (rule) {
		$scope.info.showSampleTemplate = false
		$scope.info.rulesLoading = true;
		$scope.info.ignoreText1 = "Subject"
		$scope.info.ignoreText2 = "Body"
		// Stores the list of templates
		RulesService.getTemplates().then(function (response) {
			$scope.info.templates = response.data.Data || [];
			if($scope.info.templates.length){
				 $scope.info.tempbody = $scope.info.templates.filter(function(tp){
					tp.template_id == rule.email_template_id;
				});

				$scope.info.templates.forEach(function(item){
					if(item.template_id == rule.email_template_id){
						$scope.info.showSampleTemplate = true
					rule.subject = item.subject;
					rule['body'] =  item.body ;
					}
				})
			}
			
	
			$scope.modal = ModalService.openModal("partials/rules-and-alerts/rule-read-only-info.html", $scope, "gb-read-only-details-modal", true,'static');
			$scope.info.rulesLoading = false;

		}, function (response) {
			$scope.info.showSampleTemplate = false;
			$scope.info.templates = [];
			console.error("Unable to load templates");
			if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
				$scope.info.addRuleMsg = {
					type: 'failure',
					msg: GlobalService.getVal('rulesMsgs')['h2_down_msg']
				};
			}
			handleSessionTimeout(response);
		});
			$scope.headersReadOnly = GlobalService.getVal('readOnlyHeaders');
			$scope.sampleTemplateHeaders = GlobalService.getVal('sampleTemplateHeaders');
			$scope.readOnlyDetails = rule;
			$scope.readOnlyDetails.action = $scope.readOnlyDetails.email_template_id > 0 ? "Persist and Email" : ($scope.readOnlyDetails.api_template_id > 0 ? "Persist and Call API": "Persist" )
	}

	//usertracking function
	$scope.trackUser = function(app_Page, operation, details){
		var details = JSON.stringify(details);
		UserTrackingService.standard_user_tracking($scope.info.application, app_Page, operation, details).then(function(response) {

		}, handleSessionTimeout);
	}

	//go to admin config function
	$scope.openApiAdminConfig = function () {
		$scope.$parent.changeCurrentPage('api_admin_config');

	}
	$scope.exportRules = function() {
		return $q.all([RulesService.getAllRules('supported'),RulesService.getAllRules('unsupported')]).then(function(rulelists){
			var supportedRuleList = rulelists[0].data.Data;
			var unsupportedRuleList = rulelists[1].data.Data;
			var csv = [];
			var columnsTitle = [];
			var columnsActual = [];
			var filename = "ruleList.csv";
			$scope.columnsToExport.forEach(function(column){
				if(column.enabled){
					columnsTitle.push(column.title.trim());
					columnsActual.push(column.field.trim());
				}
			});
			csv.push(columnsTitle.join(","));
			if(supportedRuleList && Array.isArray(supportedRuleList)){
				supportedRuleList.forEach(function(rule){
					var row = [];
					columnsActual.forEach(function(column){
						if(rule[column]){
							var str = rule[column].trim();
							str = str.replace(/,/g, '-');
							str = str.replace(/\./g, ' ');
							str = str.replace(/\./g, ' ');
							str = str.replace(/["']/g, "");
							str = str.replace(/[\r\n(\r\n)]/g," ");
							row.push(str);
						}else{
							row.push("");
						}
					});
					csv.push(row);
				});
			}
			if(unsupportedRuleList && Array.isArray(unsupportedRuleList)){
				unsupportedRuleList.forEach(function(rule){
					var row = [];
					columnsActual.forEach(function(column){
						if(rule[column]){
							var str = rule[column].trim();
							str = str.replace(/,/g, '-');
							str = str.replace(/\./g, ' ');
							str = str.replace(/\./g, ' ');
							str = str.replace(/["']/g, "");
							str = str.replace(/[\r\n(\r\n)]/g," ");
							row.push(str);
						}else{
							row.push("");
						}
					});
					csv.push(row);
				});
			}
			csv = csv.join("\n");
			UtilService.downloadCSV(csv, filename);
		});
	}
	//show hide alert api feature based on response from meta config api response
	RulesService.getAllConfig().then(function (response) {
		$scope.showAlertApiFeature = response.data.Data.config.api_template_feature;
		RulesService.setshowAlertApiFeature($scope.showAlertApiFeature);
		//call the api only if feature is enabled
		if ($scope.showAlertApiFeature) {
			RulesService.getAPITemplates().then(function (response) {
				RulesService.setApiTemplateList(response.data.Data);
			}, function (response) {

			});
		}
	}, function (response) {
	});

	//Call section api then with first column name get the global attributes for the same
	RulesService.getSectionsAPI().then(function (response) 
	{
		if(response.data.Data.length != 0){
		RulesService.getSectionColumns(response.data.Data[0].table_name).then(function (response)
		 {	
			var globAttrib = {};
				var lst = response.data.Data.map(function (obj) {
					if (obj[Object.keys(obj)[0]]["solr_facet"] == "G") {
						//globAttrib.push(obj[Object.keys(obj)[0]]["attribute_label"]);
						globAttrib[obj[Object.keys(obj)[0]]["attribute_label"]] = "#" + obj[Object.keys(obj)[0]]["column_name"];
					}
				})
				//var globAttrib = {};
				RulesService.setGlobalAttribArr(globAttrib);
			
		}, function(response) {
			return false;
			
		});
	}
	if(response.data.Data.length == 0){
		return;
	}
	}, function(response) {
		return false;
	});

	$scope.showFilterCount = function(){
		$scope.filterCount = Object.keys($scope.info.filter).length;
	};
	//time filter change for rule list
	$scope.ruleListTimeFilterChange= function(column, value){
		$scope.info[column.field] = {
			startTime : value.startTime,
			endTime : value.endTime
		};
		$scope.info.filter[column.field] = [];
		$scope.info.filter[column.field].push(value);
		$scope.trackUser('Rules List', 'filter', $scope.info.filter);

		$scope.tableParams.reload();
		$scope.info.page['current'] = 1;
		$scope.tableParams.page($scope.info.page['current']);
	}	
	$scope.selectDateFilterItem = function (column, value) {
		if($scope.info.filter[column.field]){
			if($scope.info.filter[column.field][0].label == value.label){
				return true;
			} 
			RulesService.setStateGroupData($scope.groupedFilterData);
		RulesService.setFilterState($scope.info.filter);
		RulesService.setPageState($scope.info.page['current']);
		}
		return false;
	}
	//check if the icon should be shown or not
	$scope.checkfilter = function(){
		var selectedRules = $filter('filter')($scope.currentRuleList, {
			selected : true
		}) || [];
		$scope.info.bulkTitle = $scope.info.filter["status"] ? ($scope.info.filter["status"].length == 1 ? "Select 2 or more rules to edit":"Apply Draft/Enabled/Disabled filter") : "Apply Draft/Enabled/Disabled filter";

		if($scope.info.filter["status"] && selectedRules.length > 1	){
			return $scope.info.filter["status"].length == 1 ? true : false; 
		}else{
			return false;
		}
		
	}

	//Bulk edit rule function to open modal
	$scope.bulkEditRules = function () {
		if (!$scope.checkfilter()) {
			return;
		}

		if (!$scope.availableRulesOwnerList.length) {
			ModalService.alertBox({
				msg: GlobalService.getVal('rulesMsgs')['rules_owner_list_not_found']
			});
			return;
		}

		//check if rule has been selected or not return false otherwise
		$scope.currentLoggedUser = $cookies.username;
		var selectedRules = [], found = false, filterredRules = $scope.currentRuleList;
		//filter to show only the rules owned by logged in user
		for (var i = 0; i < filterredRules.length; i++) {
			if (!!filterredRules[i].selected) {
				if (filterredRules[i].rule_owner == $scope.currentLoggedUser) {
					selectedRules.push(filterredRules[i]);
				}
			}
		}

		//selectedRules array will be empty if the user selects the rules not owned by him
		if (selectedRules.length < 1) {
			ModalService.alertBox({
				msg: GlobalService.getVal('rulesMsgs')['bulk_edit_multiple_warn']
			});
			return;
		}

		$scope.ownedrulesId = [];
		$scope.ownedrules = selectedRules.map(function (item) {
			$scope.ownedrulesId.push(item.rule_id);
			return item.rule_name;
		});
		$scope.showenable = $scope.info.filter.status[0] == "DISABLED" ? true : false;
		$scope.showdisable = $scope.info.filter.status[0] == "ENABLED" ? true : false;
		$scope.currentRulesStatus = $scope.info.filter.status[0]
		$scope.info.modelenable = false;
		$scope.info.modeldisable = false;

		//$scope.currentOwner = newOwner;
		$scope.msg = GlobalService.getVal('rulesMsgs')['owner_change_multiple'];
		$scope.modal = ModalService.openModal("partials/rules-and-alerts/bulk_edit_rules.html", $scope, "gb-rules-bulk-edit-modal", true, 'static');
		$scope.bulkdata = {
			status: $scope.currentRulesStatus,
			author: "",
			description: "",
			category: "select",
			kb_link: "",
			priority: "select",
			severity: "select",
			max_alerts_display_ui: "",
			rule_owner: "select",
			comment: ""

		}
	}

	//change ststus function
	$scope.changestatus = function (type) {

		if (type == $scope.bulkdata.status) {
			$scope.bulkdata.comment = "";
			$scope.bulkdata.status = $scope.currentRulesStatus;
		}
		else {
			$scope.bulkdata.status = type;
		}

	}

	//function to submit bulkedit rules
	$scope.submitbulk = function () {
		//$scope.modal.close();
		if (validateme($scope.bulkdata)) {
			$scope.modal.close();
			$scope.bulkdata.rule_names = $scope.ownedrules;
			$scope.bulkdata.rule_ids = $scope.ownedrulesId;
			var val = Object.values($scope.bulkdata);
			for (var key in $scope.bulkdata) {
				if ($scope.bulkdata[key] == "select") {
					$scope.bulkdata[key] = "";
				}
			}
			$scope.info.rulesLoading = true;
			//call the api 
			RulesService.bulkUpdateRules($scope.bulkdata).then(function (response) {
				$scope.modal.close();
				$scope.info.actionMessage = "Updated "+$scope.bulkdata.rule_ids.length+" Rules.";
				$scope.info.actionMessageFlag = true;
				$scope.reloadRules();
			}, function (response) {
				$scope.info.rulesLoading = false;
				$scope.info.rulesListMsg = {
					type: 'failure',
					msg: "Unable to Bulk edit the rules. Please contact " + $scope.supportEmail
				};
			});

		}

		//Validate function
		function validateme(data) {

			//if enabled or disabled check for comments
			if (data.status && data.status != $scope.currentRulesStatus) {
				if (data.comment == "") {
					ModalService.alertBox({
						msg: "Please Enter a Comment"
					});
					return;
				}
			}

			//check for emptiness
			var count = 0;
			var val = Object.values(data);
			for (var i = 0; i < val.length; i++) {
				if (val[i] == "" || val[i] == "select" || val[i] == "ENABLED" || val[i] == "DISABLED" || val[i] == "DRAFT") {

				}
				else {
					count++;
				}
			}
			if (count == 0) {
				ModalService.alertBox({
					msg: "Nothing to edit",
				});
				return;
			}
			return true;

		}

	}

	$scope.showSubscriberList = function (rule) {
		$scope.info.subSearchText = "";
		$scope.subsort = true;
		$scope.currentname = rule.label_display;
		$scope.originalSubs = rule.subscriptionEmailList.slice();
		$scope.rulesubs = rule.subscriptionEmailList.sort();
		$scope.msg = "";
		$scope.modal = ModalService.openModal("partials/rules-and-alerts/show_subscriber_list.html", $scope, 'gb-rule-list-subscribers', true, 'static');
	}

	$scope.sortSubscribers = function (type) {
		if (type == 'asc') {
			$scope.sortOrder = 'asc'
			$scope.subsort = true;
			$scope.rulesubs = $scope.rulesubs.sort();
		}
		else {
			$scope.subsort = false;
			$scope.sortOrder = 'desc'
			$scope.rulesubs = $scope.rulesubs.sort(function (a, b) {
				if (a > b)
					return -1;
				if (a < b)
					return 1;
				return 0;
			});
		}
	}


	//
	//
	//
	//

	//
	$scope.searchSubscribers = function () {
		if ($scope.info.subSearchText != "") {
			$scope.rulesubs = $scope.originalSubs.filter(function (item) {
				return item.indexOf($scope.info.subSearchText) > -1
			})
			if ($scope.rulesubs.length) {
				if ($scope.subsort) {
					$scope.sortSubscribers('asc')
				}
				else {
					$scope.sortSubscribers('desc')
				}
			}
		}

		else {
			$scope.rulesubs = $scope.originalSubs.slice();
			if ($scope.subsort) {
				$scope.sortSubscribers('asc')
			}
			else {
				$scope.sortSubscribers('desc')
			}

		}
	}
	$scope.resetSubSearch = function () {
		$scope.info.subSearchText = "";
		$scope.rulesubs = $scope.originalSubs.slice();
		if ($scope.subsort) {
			$scope.sortSubscribers('asc')
		}
		else {
			$scope.sortSubscribers('desc')
		}
	}


	$scope.subscribeFromUi = function (rule) {
		$scope.info.sysidLoading = false;
		$scope.info.toggleManageSubscription = true;
		$scope.info.initialToggleManageSubscription = true;
		$scope.singleSubscribeRule = rule;
		$scope.msg = GlobalService.getVal('rulesMsgs')['rule_subscribe_single'][0] + rule.label_display + GlobalService.getVal('rulesMsgs')['rule_subscribe_single'][1];
		$scope.modal = ModalService.openModal("partials/rules-and-alerts/subscribe_rule.html", $scope, "gb-rule-single-subscribe-modal", false, 'static');
	}

	$scope.showManageSubscription = function (type) {
		$scope.info.sysidLoading = true;
		if (!$scope.info.toggleManageSubscription) {
			//$scope.modal.close()
			$scope.openSubscriptionModal($scope.singleSubscribeRule, type);
		} else {
			$scope.info.sysidLoading = false;
			//$scope.info.rulesLoading = false;
			// $scope.modal.close();
			// $scope.modal = ModalService.openModal("partials/rules-and-alerts/subscribe_rule.html", $scope, "gb-rule-single-subscribe-modal", false, 'static');
			// $scope.info.rulesLoading = false;
		}
	}

	$scope.subscribeFromUiConfirm = function () {
		
		if (!$scope.info.toggleManageSubscription) {
			$scope.info.sysidLoading = true;
		} 
		$scope.info.rulesLoading = true;
		$scope.info.rulesPageLoading = true;
		var addSubscriptionPayload = {
			"subscribers": [
				{
					"mps": $cookies.mps,
					"ruleId": $scope.singleSubscribeRule.rule_id,
					"emailId": $cookies.username
				}]
		}
		//call single subscribe api
		RulesService.singleSubscribeRule($scope.singleSubscribeRule.rule_id).then(function (response) {

			if (!$scope.info.toggleManageSubscription) {
				$scope.saveSubscriptionFilter();
			} 
				$scope.info.rulesListMsg = {
					type: 'success',
					msg: GlobalService.getVal('rulesMsgs')['rule_subscription_success']
				}
				$scope.info.rulesLoading = true;
				$scope.reloadRules();
				$scope.trackUser('Rules List', 'single unsubscribe', $scope.singleSubscribeRule);
			

		}, function (response) {
			$scope.info.rulesListMsg = {
				type: 'failure',
				msg: GlobalService.getVal('rulesMsgs')['rule_subscription_failure']
			}
			console.error("Unable subscribe from ui");
			if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
				$scope.info.addRuleMsg = {
					type: 'failure',
					msg: GlobalService.getVal('rulesMsgs')['h2_down_msg']
				};
			}
			$scope.info.rulesLoading = false;
			handleSessionTimeout(response);
		});
	}

	$scope.unsubscribeFromUi = function (rule) {
		$scope.singleUnsubscribeRule = rule;
		$scope.msg = GlobalService.getVal('rulesMsgs')['rule_unsubscribe_single'][0] + rule.label_display + GlobalService.getVal('rulesMsgs')['rule_unsubscribe_single'][1];
		$scope.modal = ModalService.openModal("partials/rules-and-alerts/unsubscribe_rule.html", $scope, "gb-rule-single-unsubscribe-modal", false, 'static');
	};

	//call single unsubscribe api
	$scope.unsubscribeFromUiConfirm = function () {
		$scope.modal.close();
		$scope.info.rulesLoading = true;
		RulesService.singleUnsubscribeRule($scope.singleUnsubscribeRule.rule_id).then(function (response) {
			$scope.deleteSubscriptionFilter($scope.singleUnsubscribeRule);
			$scope.info.rulesListMsg = {
				type: 'success',
				msg: GlobalService.getVal('rulesMsgs')['rule_unsubscription_success']
			}
			
			$scope.reloadRules();
			$scope.trackUser('Rules List', 'single unsubscribe', $scope.singleUnsubscribeRule);
		}, function (response) {
			console.error("Unable to load templates");
			if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
				$scope.info.addRuleMsg = {
					type: 'failure',
					msg: GlobalService.getVal('rulesMsgs')['h2_down_msg']
				};
			}
			handleSessionTimeout(response);
		});
	}

	//function to show bulk subscribe icon
	$scope.showBulkSubscribe = function () {
		var count = 0;
		var selectedRules = $filter('filter')($scope.currentRuleList, {
			selected: true
		}) || [];
		var showIcon = false;
		if (selectedRules.length > 1) {
			selectedRules.forEach(function (rule) {
				if (rule['subscribeIcon']) {
					count++;
				}
			})
		}
		if (count > 1) {
			showIcon = true
		}
		return showIcon
	}

	//function to show bulk unsubscribe icon

	$scope.showBulkUnsubscribe = function () {
		var count = 0;
		var selectedRules = $filter('filter')($scope.currentRuleList, {
			selected: true
		}) || [];
		var showIcon = false;
		if (selectedRules.length > 1) {
			selectedRules.forEach(function (rule) {
				if (rule['subscribeIcon'] == false) {
					count++
				}
			})
		}
		if (count > 1) {
			showIcon = true
		}
		return showIcon
	}

	//bulk subscribe 

	$scope.openBulkSubscribe = function () {
	
		var selectedRules = $filter('filter')($scope.currentRuleList, {
			selected: true
		}) || [];
		$scope.rulesToSubscribe = selectedRules.filter(function (item) {

			if (item['subscribeIcon']) {
				return item;
			}
		}) || []
		if(!$scope.rulesToSubscribe.length){
				return;
		}
		$scope.msg = GlobalService.getVal('rulesMsgs')['bulk_subscribe_rules'];
		$scope.modal = ModalService.openModal("partials/rules-and-alerts/bulk_subscribe.html", $scope, "gb-rules-bulk-edit-modal", true, 'static');
	}

	//bulk Unsubscribe 
	$scope.openBulkUnsubscribe = function () {
		var selectedRules = $filter('filter')($scope.currentRuleList, {
			selected: true
		}) || [];
		$scope.rulesToUnsubscribe = selectedRules.filter(function (item) {
			if (item['subscribeIcon'] == false) {
				return item;
			}
		}) || [];
		if(!$scope.rulesToUnsubscribe.length){
			return;
	}
		$scope.msg = GlobalService.getVal('rulesMsgs')['bulk_unsubscribe_rules'];
		$scope.modal = ModalService.openModal("partials/rules-and-alerts/bulk_unsubscribe.html", $scope, "gb-rules-bulk-edit-modal", true, 'static');
	}

	$scope.bulkSubscribeConfirm = function () {
		$scope.info.rulesLoading = true;
		var postdata = {
			"rule_ids": $scope.rulesToSubscribe.map(function (rule) { return rule.rule_id }),
			"emailId": $cookies.username
		}
		RulesService.bulkSubscribeUnsubscribe(postdata, true).then(function (response) {
			
			$scope.modal.close();
			$scope.info.rulesListMsg = {
				type: 'success',
				msg: GlobalService.getVal('rulesMsgs')['rule_subscription_success']
			}

			$scope.reloadRules();
			$scope.trackUser('Rules List', 'bulk subscribe', postdata);
		},function (response) {
			console.error("Unable to save ");
			if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
				$scope.info.rulesListMsg = {
					type: 'failure',
					msg: GlobalService.getVal('rulesMsgs')['h2_down_msg']
				};
			}else{
				$scope.info.rulesListMsg = {
					type: 'failure',
					msg: "Unable to save data Please contact " + $scope.supportEmail
				};
			}
			handleSessionTimeout(response);
			$scope.info.rulesLoading = false;
			$scope.info.sysidLoading = false;

		});

	}

	$scope.bulkUnsubscribeConfirm = function () {
		var postdata = {
			"rule_ids": $scope.rulesToUnsubscribe.map(function (rule) { return rule.rule_id }),
			"emailId": $cookies.username
		}
		RulesService.bulkSubscribeUnsubscribe(postdata, false).then(function (response) {
			$scope.deleteSubscriptionFilter($scope.rulesToUnsubscribe.map(function (rule) { return rule.rule_id }), true);
			$scope.modal.close();
			$scope.info.rulesListMsg = {
				type: 'success',
				msg: GlobalService.getVal('rulesMsgs')['rule_unsubscription_success']
			}
			$scope.info.rulesLoading = true;
			$scope.reloadRules();
			$scope.trackUser('Rules List', 'bulk unsubscribe', postdata);
		},function (response) {
			console.error("Unable to save ");
			if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
				$scope.info.rulesListMsg = {
					type: 'failure',
					msg: GlobalService.getVal('rulesMsgs')['h2_down_msg']
				};
			}else{
				$scope.info.rulesListMsg = {
					type: 'failure',
					msg: "Unable to save data Please contact " + $scope.supportEmail
				};
			}
			handleSessionTimeout(response);
			$scope.info.rulesLoading = false;
			$scope.info.sysidLoading = false;

		});
	}

	//subscription paginationsysPageSize: number = 200;
	$scope.initializeSubscriptionConstants = function (rule) {
		$scope.info.selectedRuleForSubscription = rule;
		$scope.info.shouldCallLoadPages = true
		$scope.info.selectedSysIds = [];
		$scope.info.selectedSysIdsMaster = [];
		$scope.info.pages = [];
		$scope.info.sysPageSize = 200;
		$scope.info.rulesLoading = true;
		$scope.info.sysIdAttr = "sysid1";
		$scope.info.sysidSearchObj = { "search": {} };
		$scope.info.sysidPagination = {
			pageSiz: $scope.info.sysPageSize,
			startIndex: 0,
			endIndex: $scope.info.sysPageSize - 1,
			noOfPages: 0,
			currentPage: 1,
			paginationText: ''
		};
		$scope.info.searchsysIdAttributes = GlobalService.getVal('searchIdAttributes');
		$scope.info.searchIdAttributesUnsubscribed = GlobalService.getVal('searchIdAttributesUnsubscribed');
		$scope.info.lastSelectedRow = {
			rowIndex: 0
		};
		$scope.info.tempAddSysIdList = [];
		$scope.info.tempRemoveSysIdList = [];
		$scope.info.inSearchView = false;
		$scope.info.selectedSearchAttrList = [];
		$scope.info.availableSelectall = false;
		$scope.info.selectedSelectall = false;
		$scope.info.inSearchViewUnsubscribed = false;
		$scope.info.selectedSearchAttrListUnsubscribed = [];
		$scope.info.sysIdList = [];
	}



	//Manage subscription
	$scope.openSubscriptionModal = function (rule, type) {
		$scope.initializeSubscriptionConstants(rule);
		$q.all([RulesService.getSysidColList(), RulesService.getUnsubscribedSysids(rule.rule_id, $cookies.username)]).then(function (resultarr) {

			$scope.info.sysIdAttributeList = resultarr[0].data.Data.cols.map(function (e) { e.value = ''; return e });
			$scope.info.sysIdAttributeListUnsubscribed = angular.copy($scope.info.sysIdAttributeList)
			if (resultarr[1].data.Data.length) {
				if (resultarr[1].data.Data[0].excSysIds.length) {
					var manufacturer = GlobalService.getVal('manufacturer');
					var product = GlobalService.getVal('product');
					var schema = GlobalService.getVal('schema');
				
					var postdata =  [{
						mfr : manufacturer,
						prod: product,
						sch: schema,
						sysid_col_name: "sysid1",
						sysids: resultarr[1].data.Data[0].excSysIds
					  }]
					RulesService.getExcludedSysidDetails(postdata).then(function (response2) {
						$scope.info.selectedSysIds = response2.data.Data;
						$scope.info.selectedSysIds.map(function(item, index) {
							item.rowIndex = index;
						  })

					}, function (response) {
						console.error("Unable to load excluded SYSID details");
						if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
							GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
							$scope.info.rulesListMsg = {
								type: 'failure',
								msg: GlobalService.getVal('rulesMsgs')['h2_down_msg']
							};
						} else {
							$scope.info.rulesListMsg = {
								type: 'failure',
								msg: "Unable to load data Please contact " + $scope.supportEmail
							};
						}
						handleSessionTimeout(response);
						setTimeout(function () {
							$scope.modal.close();
							$scope.info.rulesListMsg = {
								type: 'failure',
								msg: "Unable to load data Please contact " + $scope.supportEmail
							};
						})
						
						$scope.info.rulesLoading = false;
						$scope.info.sysidLoading = false;
					});
				} else {
					$scope.info.selectedSysIds = [];
				}

				$scope.info.selectedSysIdsFlat = type == 'edit' ? resultarr[1].data.Data[0].excSysIds : [];
			} else {
				$scope.info.selectedSysIds = [];
				$scope.info.selectedSysIdsFlat = [];
			}
			//$scope.info.currentGroupname = (resultarr[1].data.Data[0] && resultarr[1].data.Data[0].group) || 'shubham_g3';
			//$scope.info.selectedSysIdsFlat = $scope.info.selectedSysIds.length ? $scope.info.selectedSysIds.map($scope.flattenSysid) : [];
			$scope.populateDefaultSearchList();
			$scope.populateDefaultSearchListUnsubscribed();
			$scope.getInitialSysidList(type, rule, $scope.opensubmodal);
		},function (response) {
			console.error("Unable to load ");
			if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
				$scope.info.rulesListMsg = {
					type: 'failure',
					msg: GlobalService.getVal('rulesMsgs')['h2_down_msg']
				};
			}else{
				$scope.info.rulesListMsg = {
					type: 'failure',
					msg: "Unable to load data Please contact " + $scope.supportEmail
				};
			}
			handleSessionTimeout(response);
			$scope.info.rulesLoading = false;
			$scope.info.sysidLoading = false;

		})
	}

	//function to open subscription modal
	$scope.opensubmodal = function (rule) {
		$scope.msg = GlobalService.getVal('rulesMsgs')['rule_unsubscribe_single'][0] + rule.rule_name + GlobalService.getVal('rulesMsgs')['rule_unsubscribe_single'][1];
		$scope.modal = ModalService.openModal("partials/rules-and-alerts/manage_subscription.html", $scope, "gb-rule-manage-subscription-modal", false, 'static');
		$scope.info.rulesLoading = false;
	}

	//sort function for sysids
	$scope.sysidSortFunction = function compareIndexFound(a, b) {
		if (a.disabled) { return 1; }
		if (!a.disabled) { return -1; }
		return 0;
	}

	//get subscribed sysid list
	$scope.getInitialSysidList = function (type, rule, callback) {
		$scope.info.sysidPagination.startIndex = 0;
		$scope.info.sysidPagination.endIndex = 200;
		RulesService.getSysidList($scope.info.sysidPagination.startIndex, $scope.info.sysidPagination.endIndex, $scope.info.sysidSearchObj, $cookies.username).then(function (response) {
			$scope.info.totalSysidCount = parseInt(response.data.Count);
			$scope.info.currentGroupname = (response.data.Group) || '';

			if (type == 'edit' && $scope.info.selectedSysIdsFlat.length) {
				// var filterFunction = function (item) {
				// 	if ($scope.info.selectedSysIdsFlat.indexOf(item.sysid1) >= 0) return item;
				// }

				// $scope.info.selectedSysIds = response.data.Data.filter(filterFunction) || [];
				// $scope.info.selectedSysIds = $scope.info.selectedSysIds.map(function(item, index){
				// 	item.rowIndex = index;
				// 	return item;
				//   })

				if ($scope.info.selectedSysIdsFlat && $scope.info.selectedSysIdsFlat.length) {
					response.data.Data.map(function (obj, index) {
						obj.disabled = $scope.info.selectedSysIdsFlat.indexOf(obj[$scope.info.sysIdAttr]) > -1 ? true : false;
						if ($scope.info.selectedSysIdsFlat.indexOf(obj[$scope.info.sysIdAttr]) > -1) {
							var selectedObj = {};
							$scope.info.sysIdAttributeList.map(function (item) {
								selectedObj[item.colName] = obj[item.colName];
							})
							selectedObj.disabled = false;
							selectedObj.rowIndex = index;
							selectedObj.selected = false;
							$scope.info.selectedSysIds.push(selectedObj);
							$scope.info.selectedSysIds = _.uniqBy($scope.info.selectedSysIds, $scope.info.sysIdAttr);
						}
					});
					$scope.info.selectedSysIdsMaster = angular.copy($scope.info.selectedSysIds);
				}
			}
			$scope.info.sysIdList = response.data.Data.sort($scope.sysidSortFunction)
			$scope.info.sysIdList = $scope.info.sysIdList.map(function (obj, index) {
				obj.rowIndex = index;
				obj.selected = false;
				//obj.disabled = $scope.info.selectedSysIdsFlat.indexOf(obj[$scope.info.sysIdAttr]) > -1 ? true : false;
				return obj;
			});
			$scope.getPages();
			var endIndex = $scope.info.totalSysidCount <= $scope.info.sysidPagination.endIndex ? $scope.info.totalSysidCount : $scope.info.sysidPagination.endIndex + 1;
			$scope.info.sysidPagination.paginationText = 'Showing ' + ($scope.info.sysidPagination.startIndex + 1) + ' to ' + endIndex + ' of ' + $scope.info.totalSysidCount;
			type == 'edit' && callback(rule);
			if (type == 'add') {
				$scope.info.selectedSysIds = [];
				$scope.info.selectedSysIdsMaster = [];
				$scope.info.sysidLoading = false;
				$scope.info.rulesLoading = false;
			}
			$scope.info.shouldCallLoadPages = false
		},function (response) {
			console.error("Unable to load sysid list ");
			if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
				$scope.info.rulesListMsg = {
					type: 'failure',
					msg: GlobalService.getVal('rulesMsgs')['h2_down_msg']
				};
			}else{
				$scope.info.rulesListMsg = {
					type: 'failure',
					msg: "Unable to load data Please contact " + $scope.supportEmail
				};
			}
			handleSessionTimeout(response);
			$scope.info.rulesLoading = false;
			$scope.info.sysidLoading = false;
			$scope.info.sysIdList = []

		})
	}

	$scope.getSysId = function (selectedSysIds) {
		RulesService.getSysidList($scope.info.sysidPagination.startIndex, $scope.info.sysidPagination.endIndex, $scope.getSearchObj(), $cookies.username).then(function (response) {
			$scope.info.totalSysidCount = parseInt(response.data.Count);
			$scope.info.currentGroupname = response.data.Group || '';
			if (selectedSysIds && selectedSysIds.length) {
				response.data.Data.map(function (obj, index) {
					obj.disabled = selectedSysIds.indexOf(obj[$scope.info.sysIdAttr]) > -1 ? true : false;
					if (selectedSysIds.indexOf(obj[$scope.info.sysIdAttr]) > -1) {
						var selectedObj = {};
						$scope.info.sysIdAttributeList.map(function (item) {
							selectedObj[item.colName] = obj[item.colName];
						})
						selectedObj.disabled = false;
						selectedObj.rowIndex = index;
						selectedObj.selected = false;
						
						if($scope.info.inSearchViewUnsubscribed){
							$scope.info.selectedSysIdsMaster.push(selectedObj);
							$scope.info.selectedSysIds = _.uniqBy($scope.filterSeletedSysid(), $scope.info.sysIdAttr);
						}else{
							$scope.info.selectedSysIds.push(selectedObj);
							$scope.info.selectedSysIds = _.uniqBy($scope.info.selectedSysIds, $scope.info.sysIdAttr);
							$scope.info.selectedSysIdsMaster = angular.copy($scope.info.selectedSysIds);
						}
						
					}
				});
			}
			$scope.info.sysIdList = response.data.Data.sort($scope.sysidSortFunction);
			$scope.info.sysIdList = $scope.info.sysIdList.map(function (obj, index) {
				obj.rowIndex = index;
				obj.selected = false;
				//obj.disabled = $scope.info.selectedSysIdsFlat.indexOf(obj[$scope.info.sysIdAttr]) > -1 ? true : false;
				return obj;
			});
			// $scope.info.sysIdList = $scope.info.sysIdList.sort(function compareIndexFound(a, b) {
			// 	if (a.disabled) { return 1; }
			// 	if (!a.disabled) { return -1; }
			// 	return 0;
			// })


			$scope.info.shouldCallLoadPages && $scope.getPages();
			var endIndex = $scope.info.totalSysidCount <= $scope.info.sysidPagination.endIndex ? $scope.info.totalSysidCount : $scope.info.sysidPagination.endIndex + 1;
			$scope.info.sysidPagination.paginationText = 'Showing ' + ($scope.info.sysidPagination.startIndex + 1) + ' to ' + endIndex + ' of ' + $scope.info.totalSysidCount;
			$scope.info.sysidLoading = false;
			$scope.info.shouldCallLoadPages = false
			$scope.resetScrollTop("subscribed_sysid_list");

		},function (response) {
			console.error("Unable to load ");
			if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
				$scope.info.rulesListMsg = {
					type: 'failure',
					msg: GlobalService.getVal('rulesMsgs')['h2_down_msg']
				};
			}else{
				$scope.info.rulesListMsg = {
					type: 'failure',
					msg: "Unable to load data Please contact " + $scope.supportEmail
				};
			}
			handleSessionTimeout(response);
			$scope.info.rulesLoading = false;
			$scope.info.sysidLoading = false;
			$scope.info.sysIdList = []

		})
	}

	//map function to flatten sysid objects to array of sysid
	$scope.flattenSysid = function (item) {
		return item[$scope.info.sysIdAttr]
	}

	$scope.populateDefaultSearchList = function () {
		$scope.info.selectedSearchAttrList = [];
		var obj = {};
		$scope.info.sysIdAttributeList.map(function (item) {
			if (item.colName === $scope.info.sysIdAttr) {
				obj.selected = true;
				obj.colName = item.colName;
				obj.colLabel = item.colLabel;
				obj.value = '';
			}
		});
		$scope.info.selectedSearchAttrList.push(obj);
		$scope.info.sysIdAttributeList.map(function (item) {
			if (item.colName === $scope.info.sysIdAttr) {
				item.selected = true;
			}
		})

	}

	//unsubscribed sysid  client search
	$scope.populateDefaultSearchListUnsubscribed = function () {
		$scope.info.selectedSearchAttrListUnsubscribed = [];
		var obj = {};
		$scope.info.sysIdAttributeListUnsubscribed.map(function (item) {
			if (item.colName === $scope.info.sysIdAttr) {
				obj.selected = true;
				obj.colName = item.colName;
				obj.colLabel = item.colLabel;
				obj.value = '';
			}
		});
		$scope.info.selectedSearchAttrListUnsubscribed.push(obj);
		$scope.info.sysIdAttributeListUnsubscribed.map(function (item) {
			if (item.colName === $scope.info.sysIdAttr) {
				item.selected = true;
			}
		})

	}	



	//change search
	$scope.changeSearchView = function (header) {
		$scope.info.selectedSearchAttrList = [];
		var res = $scope.info.sysIdAttributeList.filter(function (item) {
			return item.selected;
		});
		$scope.info.selectedSearchAttrList = res;
		setTimeout(function () {
			if (!$scope.info.selectedSearchAttrList.length) {
				$scope.populateDefaultSearchList();
			}
		})
	}

	//change search Unsubscribe client search
	$scope.changeSearchViewUnsubscribed = function (header) {
		$scope.info.selectedSearchAttrListUnsubscribed = [];
		var res = $scope.info.sysIdAttributeListUnsubscribed.filter(function (item) {
			return item.selected;
		});
		$scope.info.selectedSearchAttrListUnsubscribed = res;
		setTimeout(function () {
			if (!$scope.info.selectedSearchAttrListUnsubscribed.length) {
				$scope.populateDefaultSearchListUnsubscribed();
			}
		})
	}


	//reset pagination
	$scope.resetPagination = function () {
		$scope.info.sysidPagination = {
			pageSiz: $scope.info.sysPageSize,
			startIndex: 0,
			endIndex: $scope.info.sysPageSize - 1,
			noOfPages: 0,
			currentPage: 1,
			paginationText: ''
		}
	}

	$scope.getPages = function () {
		$scope.resetPagination();
		$scope.info.sysidPagination.noOfPages = Math.ceil($scope.info.totalSysidCount / $scope.info.sysidPagination.pageSiz);
		$scope.info.pages = Array.from({ length: $scope.info.sysidPagination.noOfPages }, function (_, i) {
			return $scope.getPageLabel($scope.info.totalSysidCount, $scope.info.sysidPagination.pageSiz, i);
		});
	}

	//getpage label
	$scope.getPageLabel = function (total, pageSiz, pageNo) {
		var start = Math.max($scope.getPageStart(pageSiz, pageNo), 0);
		var end = Math.min($scope.getPageStart(pageSiz, pageNo + 1), total);
		var obj = {};
		obj.startIndex = start;
		obj.endIndex = (end === $scope.info.totalSysidCount) ? $scope.info.totalSysidCount : end - 1;
		return obj;
	}

	//get page start
	$scope.getPageStart = function (pageSiz, pageNo) {
		return pageSiz * pageNo;
	}

	$scope.loadNextSet = function () {
		$scope.info.sysidLoading = true;
		$scope.resetTempAddRemoveButtons();
		$scope.info.sysidPagination.currentPage = $scope.info.sysidPagination.currentPage + 1;
		var page = $scope.info.pages[$scope.info.sysidPagination.currentPage - 1];
		$scope.info.sysidPagination.startIndex = page.startIndex;
		$scope.info.sysidPagination.endIndex = page.endIndex;
		if($scope.info.inSearchViewUnsubscribed){
			var selectedSysIds = $scope.info.selectedSysIdsMaster.map(function (item) {
				return item[$scope.info.sysIdAttr]
			})
		}else{
			var selectedSysIds = $scope.info.selectedSysIds.map(function (item) {
				return item[$scope.info.sysIdAttr]
			})
		}
		
		$scope.getSysId(selectedSysIds);

	}

	$scope.loadPrevSet = function () {
		$scope.info.sysidLoading = true;
		$scope.resetTempAddRemoveButtons();
		$scope.info.sysidPagination.currentPage = $scope.info.sysidPagination.currentPage - 1;
		var page = $scope.info.pages[$scope.info.sysidPagination.currentPage - 1];
		$scope.info.sysidPagination.startIndex = page.startIndex;
		$scope.info.sysidPagination.endIndex = page.endIndex;
		if($scope.info.inSearchViewUnsubscribed){
			var selectedSysIds = $scope.info.selectedSysIdsMaster.map(function (item) {
				return item[$scope.info.sysIdAttr]
			})
		}else{
			var selectedSysIds = $scope.info.selectedSysIds.map(function (item) {
				return item[$scope.info.sysIdAttr]
			})
		}
		$scope.getSysId(selectedSysIds);

	}

	$scope.callsysid = function () {
		$scope.info.sysidLoading = true;
		$scope.info.shouldCallLoadPages = true;
		$scope.info.inSearchView = true;
		$scope.info.sysidPagination.startIndex = 0;
		$scope.info.sysidPagination.endIndex = 200;
		if($scope.info.inSearchViewUnsubscribed){
			var selectedSysIds = $scope.info.selectedSysIdsMaster.map(function (item) {
				return item[$scope.info.sysIdAttr]
			})
		}else{
			var selectedSysIds = $scope.info.selectedSysIds.map(function (item) {
				return item[$scope.info.sysIdAttr]
			})
		}
		$scope.getSysId(selectedSysIds);
	}

	$scope.resetTempAddRemoveButtons = function(){
		$scope.info.tempAddSysIdList = [];
		$scope.info.tempRemoveSysIdList = [];
	  }

	
	//function to get search object
	$scope.getSearchObj = function () {
		var searchobj = { "search": {} }
		$scope.info.selectedSearchAttrList.forEach(function (el) {

			if (el.value.length) {
				searchobj.search[el.colName] = el.value
			}

		})
		return searchobj
	}

	$scope.clearsysSearchText = function () {
		$scope.info.selectedSearchAttrList.forEach(function (el) {
			el.value = '';
		});
	}
	//clearsearch
	$scope.clearSearchText = function () {
		$scope.info.sysidLoading = true;
		$scope.info.inSearchView = false;
		$scope.clearsysSearchText();
		$scope.resetPagination();
		$scope.info.shouldCallLoadPages = true;
		$scope.info.sysIdAttributeList.forEach(function (item) {
			item.selected = false;
		});
		$scope.populateDefaultSearchList();
		// if ($scope.info.selectedSysIds.length) {
		// 	var selectedSysIds = $scope.info.selectedSysIds.map(function (item) {
		// 		return item[$scope.info.sysIdAttr];
		// 	})
		// }

		if($scope.info.inSearchViewUnsubscribed){
			var selectedSysIds = $scope.info.selectedSysIdsMaster.map(function (item) {
				return item[$scope.info.sysIdAttr]
			})
		}else{
			var selectedSysIds = $scope.info.selectedSysIds.map(function (item) {
				return item[$scope.info.sysIdAttr]
			})
		}
		$scope.getSysId(selectedSysIds);
	}



	//row click
	$scope.rowClick = function (event, currentElm, list) {
		if (event.ctrlKey) {
			$scope.toggleRow(currentElm);
		}

		if (event.button === 0) {
			if (!event.ctrlKey && !event.shiftKey) {
				$scope.clearAll(list);
				$scope.toggleRow(currentElm);
			}
			if (event.shiftKey) {
				$scope.selectRowsBetweenIndexes([$scope.info.lastSelectedRow.rowIndex, currentElm.rowIndex], list)
			}
		}

	}
	$scope.toggleRow = function (row) {
		row.selected = !row.selected;
		$scope.info.lastSelectedRow = row;
	}

	$scope.clearAll = function (list) {
		list.map(function (sysId) {
			sysId.selected = false;
		})
	}

	$scope.selectRowsBetweenIndexes = function (indexes, list) {
		indexes.sort(function (a, b) {
			return a - b;
		});


		for (var i = indexes[0]; i <= indexes[1]; i++) {
			list[i].selected = true;
		}

	}

	//button state
	$scope.addRmoveBtnState = function (state) {
		if (state === 'add') {
			$scope.info.tempAddSysIdList = $scope.info.sysIdList.filter(function (item) {
				return item.selected;
			});
		} else {
			$scope.info.tempRemoveSysIdList = $scope.info.selectedSysIds.filter(function (item) {
				return item.selected;
			});
		}

	}

	//Add SysId Method
	$scope.addSysIds = function () {
		$scope.info.sysidLoading = true;
		if ($scope.info.inSearchViewUnsubscribed) {
			$scope.info.selectedSysIdsMaster = $scope.info.selectedSysIdsMaster.concat($scope.info.tempAddSysIdList);
		}else{
			$scope.info.selectedSysIds = $scope.info.selectedSysIds.concat($scope.info.tempAddSysIdList);
		}
		
		$scope.info.sysIdList = $scope.info.sysIdList.sort($scope.sysidSortFunction)
		$scope.info.sysIdList.map(function (sysIdItem, index) {
			sysIdItem.rowIndex = index;
			if($scope.info.inSearchViewUnsubscribed){
				$scope.info.selectedSysIdsMaster.map(function (item, selectedSysidIndex) {
					if (sysIdItem[$scope.info.sysIdAttr] === item[$scope.info.sysIdAttr]) {
						item.rowIndex = selectedSysidIndex;
						sysIdItem.selected = false;
						sysIdItem.disabled = true;
					}
				})
			}else{
				$scope.info.selectedSysIds.map(function (item, selectedSysidIndex) {
					if (sysIdItem[$scope.info.sysIdAttr] === item[$scope.info.sysIdAttr]) {
						item.rowIndex = selectedSysidIndex;
						sysIdItem.selected = false;
						sysIdItem.disabled = true;
					}
				})
			}
		
		});
		if ($scope.info.inSearchViewUnsubscribed) {
			$scope.info.selectedSysIdsMaster = _.cloneDeep($scope.info.selectedSysIdsMaster);
			$scope.info.selectedSysIds = _.uniqBy($scope.filterSeletedSysid(), $scope.info.sysIdAttr);
		} else {
			$scope.info.selectedSysIds = _.cloneDeep($scope.info.selectedSysIds);
			$scope.info.selectedSysIdsMaster = angular.copy($scope.info.selectedSysIds);
		}
		$scope.info.tempAddSysIdList = [];
		if($scope.info.availableSelectall){
			$scope.info.availableSelectall = false;
		}
		$scope.info.sysidLoading = false;
	}



	//Remove SysId Method
	$scope.removeSysIds = function () {
		$scope.info.sysidLoading = true;
		$scope.info.sysIdsToRemove = [];
		$scope.info.sysIdsToRemove = $scope.info.sysIdsToRemove.concat($scope.info.tempRemoveSysIdList);
		$scope.info.sysIdsToRemove.forEach(function (item) {
			$scope.info.sysIdList.forEach(function (sys, index) {
				sys.rowIndex = index;
				if (sys[$scope.info.sysIdAttr] === item[$scope.info.sysIdAttr]) {
					sys.selected = false;
					sys.disabled = false;
				}
			})
		});
		$scope.info.sysIdsToRemove.map(function (item) {
			if($scope.info.inSearchViewUnsubscribed){
				$scope.removeItemFromList($scope.info.selectedSysIdsMaster, item);
			}else{
				$scope.removeItemFromList($scope.info.selectedSysIds, item);
			}
			
		});

		$scope.info.tempRemoveSysIdList = [];
		if($scope.info.selectedSelectall){
			$scope.info.selectedSelectall = false;
		}
		$scope.info.sysidLoading = false;


	}

	//remove from list function
	$scope.removeItemFromList = function (list, itemToRemove) {
		list.forEach(function (item, index) {
			if (item[$scope.info.sysIdAttr] === itemToRemove[$scope.info.sysIdAttr]) {
				list.splice(index, 1);
			}

		});
		list.map(function (listItem, index) {
			listItem.rowIndex = index;
		});

		if($scope.info.inSearchViewUnsubscribed){
			$scope.info.selectedSysIdsMaster = list
			$scope.info.selectedSysIds = $scope.filterSeletedSysid()
		}else{
			$scope.info.selectedSysIds = list;
			$scope.info.selectedSysIdsMaster = angular.copy($scope.info.selectedSysIds);
		}
		
		

	}

	//scroll top reset in sysid list
	$scope.resetScrollTop = function (selector) {
		$timeout(function () {
			$('#' + selector)[0].scrollTop = 0;
		})
	}

	//search button state
	$scope.searchDisbledButtonState = function () {
		var flag = true;
		$scope.info.selectedSearchAttrList.map(function (item) {
			if (item.value.length) {
				flag = false;
			}
		})
		return flag;
	}

	//search button state for unsunscribed devices
	$scope.searchDisbledButtonStateUnsubscribed = function () {
		var flag = true;
		$scope.info.selectedSearchAttrListUnsubscribed.map(function (item) {
			if (item.value.length) {
				flag = false;
			}
		})
		return flag;
	}


	$scope.searchDisbledButtonStateForCancel = function () {
		var flag = true;

		$scope.info.selectedSearchAttrList.map(function (item) {
			if (item.value.length || $scope.info.inSearchView ) {
				flag = false;
			}
		})
		return flag;
	}

	//CANCEL BUTTON STATE FOR UNSUBSCRIBED SEARCH
	$scope.searchDisbledButtonStateForCancelUnsubscribed = function () {
		var flag = true;

		$scope.info.selectedSearchAttrListUnsubscribed.map(function (item) {
			if (item.value.length || $scope.info.inSearchViewUnsubscribed ) {
				flag = false;
			}
		})
		return flag;
	}


	//Function add filter attributes
	$scope.saveSubscriptionFilter = function () {
		// if(type == 'add'){
		// 	if(!$scope.info.selectedSysIds.length){

		// 	}
		// }
		$scope.info.sysidLoading = true;
		
		var postdata = [{
			"ruleId": $scope.info.selectedRuleForSubscription.rule_id.toString(),
			"email": $cookies.username,
			"group": $scope.info.currentGroupname,
			"excSysIds": $scope.info.inSearchViewUnsubscribed? $scope.info.selectedSysIdsMaster.map(function (e) { return e[$scope.info.sysIdAttr] }) || [] : $scope.info.selectedSysIds.map(function (e) { return e[$scope.info.sysIdAttr] }) || []
		}];
		RulesService.saveFilterAttributes(postdata).then(function (response) {
			$scope.modal.close();
			$scope.info.sysidLoading = false;
			$scope.info.rulesListMsg = {
				type: 'success',
				msg: GlobalService.getVal('rulesMsgs')['filter_attributes_save']
			}
			$scope.info.rulesLoading = true;
			$scope.reloadRules();
			$scope.trackUser('Rules List', 'add-update filter attributes', postdata);
		}, function (response) {
			console.error("Unable to save filter attributes");
			if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
				$scope.info.addRuleMsg = {
					type: 'failure',
					msg: GlobalService.getVal('rulesMsgs')['h2_down_msg']
				};
			}else{
				$scope.info.rulesListMsg = {
					type: 'failure',
					msg: "Unable to save data Please contact " + $scope.supportEmail
				};
			}
			setTimeout(function () {
				$scope.modal.close();
				$scope.info.rulesListMsg = {
					type: 'failure',
					msg: "Unable to update subscription Please contact " + $scope.supportEmail
				};
			})
			handleSessionTimeout(response);
			$scope.info.rulesLoading = false;
			$scope.info.sysidLoading = false;
		});
	}

	$scope.deleteSubscriptionFilter = function (rule, bulk) {
		if(bulk){
			var postdata = {
				"ruleIds": rule,
				"mps": $cookies.mps,
				"email": $cookies.username
			};
		}else{
			var postdata = {
				"ruleIds": [rule.rule_id],
				"mps": $cookies.mps,
				"email": $cookies.username
			};
		}
		
		RulesService.deleteFilterAttributes(postdata).then(function (response) {
			// $scope.info.rulesListMsg = {
			// 	type: 'success',
			// 	msg: GlobalService.getVal('rulesMsgs')['rule_unsubscription_success: "Unsubscribed from rule successfully"']
			// }
			//$scope.info.rulesLoading = false;
			$scope.info.sysidLoading = false;

		}, function (response) {
			console.error("Unable to load templates");
			if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
				$scope.info.rulesListMsg = {
					type: 'failure',
					msg: GlobalService.getVal('rulesMsgs')['h2_down_msg']
				};
			}else{
				$scope.info.rulesListMsg = {
					type: 'failure',
					msg: "Unable to load data Please contact " + $scope.supportEmail
				};
			}
			handleSessionTimeout(response);
			$scope.info.rulesLoading = false;
			$scope.info.sysidLoading = false;
		});

	}

	//select all for available sysid
	$scope.selectAllSysid = function () {
		$scope.info.sysIdList.forEach(function (item) {
			if (!item.disabled && $scope.info.availableSelectall) {
				item.selected = true;
			}
			else if (!item.disabled && !$scope.info.availableSelectall) {
				item.selected = false;
			}
		})
		$scope.addRmoveBtnState('add');
	}

	//select all btn state for available devices
	$scope.selectallBtnState = function () {
		var flag = true;
		$scope.info.sysIdList.forEach(function (item) {
			if (!item.disabled) {
				flag = false;
			}
		})

		return flag;
	}

	//select all function for selected sysids
	$scope.selectAllSysidSelected = function () {
		$scope.info.selectedSysIds.forEach(function (item) {
			if ($scope.info.selectedSelectall) {
				item.selected = true;
			}
			else if (!$scope.info.selectedSelectall) {
				item.selected = false;
			}
		})
		$scope.addRmoveBtnState()
	}

	//select all btn state for available devices
	$scope.selectallBtnStateSelected = function () {
		var flag = true;
		if ($scope.info.selectedSysIds.length > 1) {
			flag = false;
		}

		return flag;
	}

	//get filter object for client search
	$scope.getFilterObj = function () {
		var searchobj = {  }
		$scope.info.selectedSearchAttrListUnsubscribed.forEach(function (el) {
			if (el.value.length) {
				searchobj[el.colName] = el.value
			}
		})
		return searchobj
	}

	$scope.filterSeletedSysid = function () {
		var filter = $scope.getFilterObj();
		if(!Object.keys(filter).length){
			return $scope.info.selectedSysIdsMaster;
		}else{
			return $scope.info.selectedSysIdsMaster.filter(function (item) {
				return Object.keys(filter).find(function (key) {
					return item[key] && item[key].toLowerCase().includes(filter[key].toLowerCase());
				});
			});
		}
		
	}

	//search unsubscribed sysids
	$scope.searchUnsubscribedSysid = function(){
		$scope.info.sysidLoading = true;
		$scope.info.inSearchViewUnsubscribed = true
		//$scope.info.selectedSysIds = $scope.filterSeletedSysid();
		$scope.info.selectedSysIds = _.uniqBy($scope.filterSeletedSysid(), $scope.info.sysIdAttr);
		$scope.info.sysidLoading = false;
	}

	//clearsearch Unsubscribed
	$scope.clearSearchTextUnsubscribed = function () {
		$scope.info.sysidLoading = true;
		$scope.info.inSearchViewUnsubscribed = false;
		$scope.info.selectedSearchAttrListUnsubscribed.forEach(function (el) {
			el.value = '';
			el.selected = false
		});
		$scope.populateDefaultSearchListUnsubscribed();
		$scope.info.selectedSysIds = _.uniqBy($scope.filterSeletedSysid(), $scope.info.sysIdAttr);
		$scope.info.sysidLoading = false;
		
	}

	//Rule Tagging Modal
	$scope.openTaggingModal = function () {
		$scope.selectedTagsCount = 0;
		$scope.bulktagsubscribebtnstate = true;

		//getPredefinedTagList
		RulesService.getPredefinedTagList().then(function (response) {
			$scope.info.tagList = response.data.Data.map(function (t) { t.selected = false; return t });

		}, function (response) {
			$scope.info.tagList = [];
			console.error("Unable to load templates");
			if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
				$scope.info.addRuleMsg = {
					type: 'failure',
					msg: GlobalService.getVal('rulesMsgs')['h2_down_msg']
				};
			}
			handleSessionTimeout(response);
		});
		var current_user = $cookies.username;

		if($scope.amIAdmin){
			var selectedRules = $filter('filter')($scope.currentRuleList, {
				selected: true,
				subscription_enabled: true,
			}) || [];
		}else{
			var selectedRules = $filter('filter')($scope.currentRuleList, {
				selected: true,
				subscription_enabled: true,
				rule_owner: current_user
			}) || [];
		}
		$scope.rulesForBulkTag = selectedRules;
		if (!selectedRules.length) {
			ModalService.alertBox({
				msg: GlobalService.getVal('rulesMsgs')['rule_delete_select_all_error']
			});
			return;
		}
		$scope.msg = GlobalService.getVal('rulesMsgs')['bulk_tag_associate'];
		$scope.modal = ModalService.openModal("partials/rules-and-alerts/rule_tagging.html", $scope, "gb-rules-bulk-edit-modal", true, 'static');
	}


	
	$scope.bulkTagAssociate = function () {
		$scope.info.rulesLoading = true;
		$scope.modal.close();
		//filter out selected tags
		var tagFilterFunction = function (t) {
			return t.selected;
		}

		//map function to get the tag ids 
		var tagMapFunction = function (e) { 
			return e.tag_id 
		}

		//get the rule ids
		var ruleMapFunction = function (r) {
			return r.rule_id;
		}

		//get the tag ids
		var tag_ids = $scope.info.tagList.filter(tagFilterFunction).map(tagMapFunction);
		if (!tag_ids.length) {
			return;
		}

		//payload
		var tagPayload = {
			"associate": [{
				"tag_ids": tag_ids,
				"rule_ids": $scope.rulesForBulkTag.map(ruleMapFunction)
			}],
			"disassociate": [{}]
		}
		
		//call add tags api
		RulesService.associateDisassociateTag(tagPayload).then(function (response) {
			
			$scope.reloadRules();
			$scope.info.rulesListMsg = {
				type: 'success',
				msg: GlobalService.getVal('rulesMsgs')['bulk_tag_associate_success']
			};
		}, function (response) {
			console.error("Unable to add subscription");
			if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
				$scope.info.rulesListMsg = {
					type: 'failure',
					msg: GlobalService.getVal('rulesMsgs')['h2_down_msg']
				};
			}else{
				$scope.info.rulesListMsg = {
					type: 'failure',
					msg: 'failed to associate tag'
				};
			}
			handleSessionTimeout(response);
		});

		
	}
	$scope.updateTagSelectedCount = function(){
		$scope.selectedTagsCount = $scope.info.tagList.filter(function (t) {
			return t.selected;
		}).length
		if($scope.selectedTagsCount > 0){
			$scope.bulktagsubscribebtnstate = false;
		}
		else{
			$scope.bulktagsubscribebtnstate = true;
		}
	}

	$scope.removeTag = function (tag,rule) {
		var titleObj = { msg: "Remove Tag" };
		var msgObj = { msg: "Are you sure you want to disassociate <strong>" + tag['tag_name'] + "</strong> with <strong>" + rule["label_display"]+ "</strong>?" };
		var modalInstance = ModalService.confirmationBox(titleObj, msgObj, "Yes", "No");
		modalInstance.result.then(function (response) {
			$scope.info.rulesLoading = true;
			//payload
			var tagPayload = {
				"associate": [{}],
				"disassociate": [{
					"tag_ids": [tag.tag_id],
					"rule_ids": [rule.rule_id]
				}]
			}
			RulesService.associateDisassociateTag(tagPayload).then(function (response) {
				$scope.reloadRules();
				$scope.info.rulesListMsg = {
					type: 'success',
					msg: GlobalService.getVal('rulesMsgs')['remove_tag'][0]+ tag.tag_name + GlobalService.getVal('rulesMsgs')['remove_tag'][1]
				};
			}, function (response) {
				console.error("Unable to add subscription");
				if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
					GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
					$scope.info.rulesListMsg = {
						type: 'failure',
						msg: GlobalService.getVal('rulesMsgs')['h2_down_msg']
					};
				}else{
					$scope.info.rulesListMsg = {
						type: 'failure',
						msg: 'failed to remove tag'
					};
				}
				handleSessionTimeout(response);
			});

		}, function (response) {

		});
		
	}

	$scope.showTagSubscribe = function () {
		var count = 0;
		var selectedRules = $filter('filter')($scope.currentRuleList, {
			selected: true
		}) || [];
		var showIcon = false;
		if (selectedRules.length > 0) {
			selectedRules.forEach(function (rule) {
				if (rule['subscription_enabled'] == true) {
					count++
				}
			})
		}
		if (count > 0) {
			showIcon = true
		}
		return showIcon
	}
	
	$scope.checkHorizontalOverflow = function (ev) {
		if(ev){
			if( ev.currentTarget){
				var el = ev.currentTarget.parentElement
			
			return el.clientWidth < el.scrollWidth;
			}
		}
		
		
	}

	
	$scope.checkVerticalOverflow = function (el) {
		return el.clientHeight < el.scrollHeight;
	}
	}])

// Controller to handle modification of categories
.controller('AddCategoryCtrl', ['$scope', '$sce', '$timeout', 'RulesService', 'ModalService', 'GlobalService', 'UserTrackingService', 'AppService',
function($scope, $sce, $timeout, RulesService, ModalService, GlobalService, UserTrackingService, AppService) {

	// Object to store info about this controller
	$scope.info = {};

	// Stores application name which is used in user tracking
	$scope.info.application = GlobalService.getVal('navRules');

	// Defines whether categories are loading
	$scope.info.categoriesLoading = true;

	// Stores success messages
	$scope.info.successMsg = "";

	// Stores error messages
	$scope.info.errorMsg = "";

	// Stores whether session is timed out or not
	$scope.info.sessionTimedOut = false;

	// Function to clear all messages
	$scope.clearMessage = function() {
		if (!$scope.info.categoriesLoading) {
			$scope.info.successMsg = "";
			$scope.info.errorMsg = "";
		}
	};

	// Function to load the categories
	$scope.loadCategories = function() {
		// Stores the list of categories
		RulesService.getCategories().then(function(response) {
			$scope.info.categories = response.data.Data;
			$scope.info.categoriesLoading = false;
			$scope.info.rulesList = RulesService.getRulesList();
		}, function(response) {
			console.error("Unable to load Categories");
			$scope.info.categoriesLoading = false;
			if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
				$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['h2_down_msg'];
			} else {
				if ($scope.info.errorMsg == '') {
					$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['category_load_failed'];
				} else {
					$scope.info.errorMsg += "<br>" + GlobalService.getVal('rulesMsgs')['category_load_failed'];
				}
			}

			handleSessionTimeout(response);
		});
	};

	$scope.loadCategories();

	// Stores the temporary list of categories to be added
	$scope.info.newCategories = [];

	// Function to add the text box to add a new category
	$scope.addCategory = function() {
		var category = {
			category : '',
			category_description : ''
		};
		$scope.info.newCategories.push(category);
	};

	// Function to show text box on the existing category to edit it
	$scope.editCategory = function(category) {
		category.edit = true;
		category.initialCategory = category.category;
		category.initialDescription = category.category_description;
	};

	// Function to revert back the changes if done on any category before saving
	$scope.undoCategory = function(category) {
		category.category = category.initialCategory;
		category.category_description = category.initialDescription;
		delete category.initialCategory;
		delete category.initialDescription;
		delete category.edit;
	};

	// Function to delete an existing category
	$scope.deleteCategory = function(category) {
		for (var i = 0; i < $scope.info.rulesList.length; i++) {
			if (category.category_id == $scope.info.rulesList[i].category_id) {
				ModalService.alertBox({
					msg : GlobalService.getVal('rulesMsgs')['category_rule_associated']
				});
				return;
			}
		}
		if (!!category.edit) {
			$scope.undoCategory(category);
		}
		category.deleted = true;
	};

	// Function to undo a delete operation
	$scope.undoDeleteCategory = function(category) {
		delete category.deleted;
	};

	// Function to delete a newly added category which is not yet saved
	$scope.deleteNewCategory = function(index) {
		$scope.info.newCategories.splice(index, 1);
	};

	// Function to validate whether all categories are distinct by name
	$scope.validateCategories = function() {
		for (var i = 0; i < $scope.info.categories.length; i++) {
			if ($scope.info.categories[i].category == '') {
				ModalService.alertBox({
					msg : GlobalService.getVal('rulesMsgs')['category_blank_name']
				});
				return;
			}
			for (var j = i + 1; j < $scope.info.categories.length; j++) {
				if ($scope.info.categories[i].category == $scope.info.categories[j].category) {
					ModalService.alertBox({
						msg : GlobalService.getVal('rulesMsgs')['category_name_duplicate']
					});
					return;
				}
			}
			for (var j = 0; j < $scope.info.newCategories.length; j++) {
				if ($scope.info.categories[i].category == $scope.info.newCategories[j].category) {
					ModalService.alertBox({
						msg : GlobalService.getVal('rulesMsgs')['category_name_duplicate']
					});
					return;
				}
			}
		}
		for (var i = 0; i < $scope.info.newCategories.length; i++) {
			if ($scope.info.newCategories[i].category == '' && $scope.info.newCategories[i].category_description == '') {
				continue;
			}
			if ($scope.info.newCategories[i].category == '' && $scope.info.newCategories[i].category_description != '') {
				ModalService.alertBox({
					msg : GlobalService.getVal('rulesMsgs')['category_blank_name']
				});
				return;
			}
			for (var j = i + 1; j < $scope.info.newCategories.length; j++) {
				if ($scope.info.newCategories[i].category == $scope.info.newCategories[j].category) {
					ModalService.alertBox({
						msg : GlobalService.getVal('rulesMsgs')['category_name_duplicate']
					});
					return;
				}
			}
		}
		return true;
	};

	// Function to get the no. of operations to be done
	$scope.getOperationsCount = function() {
		var operationsCount = 0;
		for (var i in $scope.info.categories) {
			if (!!$scope.info.categories[i].deleted) {
				operationsCount++;
			} else if (!!$scope.info.categories[i].edit && ($scope.info.categories[i].category != $scope.info.categories[i].initialCategory || $scope.info.categories[i].category_description != $scope.info.categories[i].initialDescription)) {
				operationsCount++;
			}
		}
		for (var i in $scope.info.newCategories) {
			if ($scope.info.newCategories[i].category != '') {
				operationsCount++;
			}
		}
		return operationsCount;
	};

	// Function to save the changes done on Add Category page
	$scope.saveCategories = function() {
		// Validate whether all the categories are distinct by name
		if (!$scope.validateCategories()) {
			return;
		}

		// Get the number of operations to be done
		$scope.info.operationsCount = $scope.getOperationsCount();
		if ($scope.info.operationsCount == 0) {
			$scope.info.newCategories = [];
			return;
		}

		// Start the loader
		$scope.info.categoriesLoading = true;

		// Perform the operations
		$scope.info.doneOperations = 0;
		for (var i in $scope.info.categories) {
			// Delete the deleted categories
			if (!!$scope.info.categories[i].deleted) {
				$scope.callDeleteCategory($scope.info.categories[i]);
			}
			// Update the edited categories
			else if (!!$scope.info.categories[i].edit && ($scope.info.categories[i].category != $scope.info.categories[i].initialCategory || $scope.info.categories[i].category_description != $scope.info.categories[i].initialDescription)) {
				$scope.callEditCategory($scope.info.categories[i]);
			}
		}
		for (var i in $scope.info.newCategories) {
			// Add the new categories
			if ($scope.info.newCategories[i].category != '') {
				$scope.callAddCategory($scope.info.newCategories[i]);
			}
		}

		// Delete the local variable that stores the new categories
		$scope.info.newCategories = [];
	};

	// Function to call delete API for the category
	$scope.callDeleteCategory = function(category) {
		RulesService.deleteCategory(category.category_id).then(function(response) {
			UserTrackingService.standard_user_tracking($scope.info.application, 'Category', 'delete', category.category).then(function(response) {

			}, handleSessionTimeout);
			$scope.info.doneOperations++;
			if ($scope.info.doneOperations == $scope.info.operationsCount) {
				$scope.loadCategories();
			}
			if ($scope.info.successMsg == "") {
				$scope.info.successMsg = GlobalService.getVal('rulesMsgs')['category_delete_success'][0] + category.category + GlobalService.getVal('rulesMsgs')['category_delete_success'][1];
			} else {
				$scope.info.successMsg += "<br>" + GlobalService.getVal('rulesMsgs')['category_delete_success'][0] + category.category + GlobalService.getVal('rulesMsgs')['category_delete_success'][1];
			}
		}, function(response) {
			console.error('Unable to delete ' + category.category);
			$scope.info.doneOperations++;
			if ($scope.info.doneOperations == $scope.info.operationsCount) {
				$scope.loadCategories();
			}
			if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
				$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['h2_down_msg'];
			} else {
				if ($scope.info.errorMsg == "") {
					$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['category_delete_failed'][0] + category.category + GlobalService.getVal('rulesMsgs')['category_delete_failed'][1];
				} else {
					$scope.info.errorMsg += "<br>" + GlobalService.getVal('rulesMsgs')['category_delete_failed'][0] + category.category + GlobalService.getVal('rulesMsgs')['category_delete_failed'][1];
				}
			}
			handleSessionTimeout(response);
		});
	};

	// Function to call update API for the category
	$scope.callEditCategory = function(category) {
		RulesService.updateCategory(category.category_id, category.category.replace(/\'/g, "\'\'").replace(/^\s+|\s+$/g, ''), category.category_description.replace(/\'/g, "\'\'").replace(/^\s+|\s+$/g, '')).then(function(response) {
			if (category.category != category.initialCategory) {
				var details = {};
				details['old'] = category.initialCategory;
				details['new'] = category.category;
				details = JSON.stringify(details);
			} else {
				var details = category.category;
			}

			UserTrackingService.standard_user_tracking($scope.info.application, 'Category', 'edit', details).then(function(response) {

			}, handleSessionTimeout);

			$scope.info.doneOperations++;
			if ($scope.info.doneOperations == $scope.info.operationsCount) {
				$scope.loadCategories();
			}
			if (category.category != category.initialCategory) {
				if ($scope.info.successMsg == "") {
					$scope.info.successMsg = GlobalService.getVal('rulesMsgs')['category_edit_name_success'][0] + category.initialCategory + GlobalService.getVal('rulesMsgs')['category_edit_name_success'][1] + category.category + GlobalService.getVal('rulesMsgs')['category_edit_name_success'][2];
				} else {
					$scope.info.successMsg += "<br>" + GlobalService.getVal('rulesMsgs')['category_edit_name_success'][0] + category.initialCategory + GlobalService.getVal('rulesMsgs')['category_edit_name_success'][1] + category.category + GlobalService.getVal('rulesMsgs')['category_edit_name_success'][2];
				}
			} else {
				if ($scope.info.successMsg == "") {
					$scope.info.successMsg = GlobalService.getVal('rulesMsgs')['category_edit_success'][0] + category.initialCategory + GlobalService.getVal('rulesMsgs')['category_edit_success'][1];
				} else {
					$scope.info.successMsg += "<br>" + GlobalService.getVal('rulesMsgs')['category_edit_success'][0] + category.initialCategory + GlobalService.getVal('rulesMsgs')['category_edit_success'][1];
				}
			}

		}, function(response) {
			console.error('Unable to edit ' + category.initialCategory);
			$scope.info.doneOperations++;
			if ($scope.info.doneOperations == $scope.info.operationsCount) {
				$scope.loadCategories();
			}

			if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
				$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['h2_down_msg'];
			} else {
				if (category.category != category.initialCategory) {
					if ($scope.info.errorMsg == "") {
						$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['category_edit_name_failed'][0] + category.initialCategory + GlobalService.getVal('rulesMsgs')['category_edit_name_failed'][1] + category.category + GlobalService.getVal('rulesMsgs')['category_edit_name_failed'][2];
					} else {
						$scope.info.errorMsg += "<br>" + GlobalService.getVal('rulesMsgs')['category_edit_name_failed'][0] + category.initialCategory + GlobalService.getVal('rulesMsgs')['category_edit_name_failed'][1] + category.category + GlobalService.getVal('rulesMsgs')['category_edit_name_failed'][2];
					}
				} else {
					if ($scope.info.errorMsg == "") {
						$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['category_edit_failed'][0] + category.initialCategory + GlobalService.getVal('rulesMsgs')['category_edit_failed'][1];
					} else {
						$scope.info.errorMsg += "<br>" + GlobalService.getVal('rulesMsgs')['category_edit_failed'][0] + category.initialCategory + GlobalService.getVal('rulesMsgs')['category_edit_failed'][1];
					}
				}
			}

			handleSessionTimeout(response);
		});
	};

	// Function to call the add API for the category
	$scope.callAddCategory = function(category) {
		RulesService.addCategory(category.category.replace(/\'/g, "\'\'").replace(/^\s+|\s+$/g, ''), category.category_description.replace(/\'/g, "\'\'").replace(/^\s+|\s+$/g, '')).then(function(response) {
			UserTrackingService.standard_user_tracking($scope.info.application, 'Category', 'add', category.category).then(function(response) {

			}, handleSessionTimeout);

			$scope.info.doneOperations++;
			if ($scope.info.doneOperations == $scope.info.operationsCount) {
				$scope.loadCategories();
			}

			if ($scope.info.successMsg == "") {
				$scope.info.successMsg = GlobalService.getVal('rulesMsgs')['category_add_success'][0] + category.category + GlobalService.getVal('rulesMsgs')['category_add_success'][1];
			} else {
				$scope.info.successMsg += "<br>" + GlobalService.getVal('rulesMsgs')['category_add_success'][0] + category.category + GlobalService.getVal('rulesMsgs')['category_add_success'][1];
			}
		}, function(response) {
			console.error('Unable to add ' + category.category);
			$scope.info.doneOperations++;
			if ($scope.info.doneOperations == $scope.info.operationsCount) {
				$scope.loadCategories();
			}

			if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
				$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['h2_down_msg'];
			} else {
				if ($scope.info.errorMsg == "") {
					$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['category_add_failed'][0] + category.category + GlobalService.getVal('rulesMsgs')['category_add_failed'][1];
				} else {
					$scope.info.errorMsg += "<br>" + GlobalService.getVal('rulesMsgs')['category_add_failed'][0] + category.category + GlobalService.getVal('rulesMsgs')['category_add_failed'][1];
				}
			}

			handleSessionTimeout(response);
		});
	};

	// Function to go to add rule page
	$scope.goToAddRule = function() {
		$scope.$parent.changeCurrentPage('add_rule');
	};

	// Function to render text in html format
	$scope.renderHtml = function(html) {
		return $sce.trustAsHtml(html);
	};

	// Function to handle session timeout
	function handleSessionTimeout(response) {
		if (!$scope.info.sessionTimedOut && response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/timeout/)) {
			$scope.info.sessionTimedOut = true;
			ModalService.sessionTimeout();
		}
	};
}])

// Controller to handle testing of rules
.controller('TestRuleCtrl', ['$scope', '$sce', '$filter', '$timeout', '$q', '$window', 'AppService', 'ModalService', 'RulesService', 'GlobalService', 'ErrorService', 'FileUploader', 'ngTableParams', 'UserTrackingService', 'metaDataService', '$document',
function($scope, $sce, $filter, $timeout, $q, $window, AppService, ModalService, RulesService, GlobalService, ErrorService, FileUploader, ngTableParams, UserTrackingService, metaDataService, $document) {

	// Stores the info of test rule page
	$scope.info = {};

	// Stores application name which is used for user tracking
	$scope.info.application = GlobalService.getVal('navRules');
	$scope.info.fileuploadDelay = GlobalService.getVal('fileuploadDelay');

	// Stores the success message
	$scope.info.successMsg = "";

	// Stores the error message
	$scope.info.errorMsg = "";

	// Stores whether session is timed out or not
	$scope.info.sessionTimedOut = false;
	// Stores the list of selected rules to be tested
	$scope.info.selectedRules = RulesService.getTestRuleData();

	// Stores the columns to be displayed on expanding a rule
	$scope.info.columns = $filter('filter')(GlobalService.getVal('testRuleColumns'), {
		enabled : true
	});

	// Stores the columns to be displayed on Test History page
	$scope.info.testRuleHistoryColumns = $filter('filter')(GlobalService.getVal('testRuleHistoryColumns'), {
		enabled : true
	});

	// Stores whether bundles are loading
	$scope.info.bundlesLoading = false;

	// Stores whether the selected rules are copying to staging infoserver
	$scope.info.rulesCopying = false;

	// Stores whether test results are loading
	$scope.info.testresultLoading = false;

	// Stores the list of bundles fetched from staging H2
	$scope.info.bundlesList = [];

	//Stores list of test results
	$scope.info.testResultsList = [];

	// Stores the value of maximum bundles shown on the test rule page
	$scope.info.maxBundlesCount = 20;

	// Stores the list of columns to be displayed on the test results grid
	$scope.info.testGridColumnsList = $filter('filter')(GlobalService.getVal('testGridColumns'), {
		enabled : true
	});

	// Stores the list of supported rule status
	$scope.info.supportedStatus = GlobalService.getVal('rulesSupportedStatus');

	// Stores whether the rule test succeeded or not
	$scope.ruleTestSucceeded = false;

	// Stores whether page is loading
	$scope.info.pageLoading = false;

	// Stores how many recursions done
	$scope.info.recursionDone = 0;

	// Stores comma separated rule IDs of inserted rules in staging H2
	$scope.info.insertedStageRules = "";

	// Stores the maximum limit of recursions allowed
	$scope.info.recursionLimit = 4;

	// Stores the status of each bundle_status code
	$scope.info.bundleStatus = GlobalService.getVal('bundleStatus');

	// Stores whether upload modal is opened
	$scope.info.uploadModalOpened = false;

	// Stores the load ID of the selected bundle
	$scope.info.selectedBundleLoadId = null;

	// Stores the bundle upload success message
	$scope.info.bundleUploadSuccessMsg = GlobalService.getVal("rulesMsgs")['test_rule_upload_log_success'];

	//To show status column when test is pressed
	$scope.showStatusColLoadIcon = false;

	//To show status column when test is pressed
	$scope.showStatusColDoneIcon = false;

	//To show status column when test is pressed
	$scope.showStatusColFailIcon = false;

	$scope.testButtonDisable = false;
	$scope.uploadBtnDisable = false;

	$scope.maxTriesToLcp = GlobalService.getVal('maxTriesToLcp');

	$scope.allBunldesUploaded = false;
	
	$scope.logBundlesFromLogvault = [];

	$scope.info.enableRuleComments = "";
	$scope.info.enableRuleCommentsLimitMin = GlobalService.getVal('ruleStatusChangeCommentMinLen');
	$scope.info.enableRuleCommentsLimitMax = GlobalService.getVal('ruleStatusChangeCommentMaxLen');
	
	$scope.tableHeadersForMultipleBundle =  GlobalService.getVal('thMultipleBundleFromLogvault');
	$scope.stagecall = 0;
	$scope.info.bundleListCallCount = 0;

	// Function to clear all messages
	$scope.clearMessage = function() {
		if (!$scope.info.pageLoading) {
			$scope.info.successMsg = "";
			$scope.info.errorMsg = "";
		}
	};
	// Changes page size
	$scope.changePageSize = function() {
		$scope.info.page['count'] = parseInt($scope.info.page['count']);
		$scope.info.page['pages'] = Math.ceil($scope.info.page['total'] / $scope.info.page['count']);
		if ($scope.info.page['current'] > $scope.info.page['pages']) {
			$scope.info.page['current'] = $scope.info.page['pages'];
		}
		if (!!arguments.length) {
			$scope.populateRulesData();
		} else {
			$scope.populateDataPathData();
		}

	};

	// Switch to next page if current page is not last page
	$scope.nextPage = function() {
		if ($scope.info.page['current'] < $scope.info.page['pages']) {
			$scope.info.page['current'] += 1;
			if (!!arguments.length) {
				$scope.populateRulesData();
			} else {
				$scope.populateDataPathData();
			}
		}
	};

	// Switch to previous page if current page is not first page
	$scope.prevPage = function() {
		if ($scope.info.page['current'] > 1) {
			$scope.info.page['current'] -= 1;
			if (!!arguments.length) {
				$scope.populateRulesData();
			} else {
				$scope.populateDataPathData();
			}
		}
	};

	// Switch to first page if not on first page
	$scope.firstPage = function() {
		if ($scope.info.page['current'] == 1)
			return;
		$scope.info.page['current'] = 1;
		if (!!arguments.length) {
			$scope.populateRulesData();
		} else {
			$scope.populateDataPathData();
		}
	};

	// Switch to last page if not on last page
	$scope.lastPage = function() {
		if ($scope.info.page['current'] == $scope.info.page['pages'])
			return;
		$scope.info.page['current'] = $scope.info.page['pages'];
		if (!!arguments.length) {
			$scope.populateRulesData();
		} else {
			$scope.populateDataPathData();
		}
	};

	// Function to check if all rules are expanded
	$scope.checkAllExpanded = function() {
		for (var i in $scope.info.selectedRules) {
			if (!$scope.info.selectedRules[i].expanded) {
				$scope.info.allExpanded = false;
				return;
			}
		}
		$scope.info.allExpanded = true;
	};

	if ($scope.info.selectedRules.length == 1) {
		$scope.info.selectedRules[0].expanded = true;
		$scope.checkAllExpanded();
	}

	// Function to expand/collapse all the rules
	$scope.ruleExpandCollapse = function() {
		if ($scope.info.allExpanded) {
			for (var i in $scope.info.selectedRules) {
				$scope.info.selectedRules[i].expanded = false;
			}
			$scope.info.allExpanded = false;
		} else {
			for (var i in $scope.info.selectedRules) {
				$scope.info.selectedRules[i].expanded = true;
			}
			$scope.info.allExpanded = true;
		}
	};

	// Function to render text in html format
	$scope.renderHtml = function(html) {
		return $sce.trustAsHtml(html);
	};

	// Function to open upload log modal box
	$scope.openUploadLogModal = function() {
		$scope.modal = ModalService.openModal('partials/rules-and-alerts/upload_log.html', $scope, false, 'static');
		$scope.info.uploadModalOpened = true;
	};

	// Function to open upload log modal box
	$scope.openLogvault = function() {
		//set selected rules to be tested
		var params = {
			app: 'logvault',
			source: 'test_rule'
		}
		$window.moveToApplication(params);
	};
	// Function to open Show datapath tunnel table modal box
	$scope.openDatapathModal = function() {
		$scope.modal = ModalService.openModal('partials/rules-and-alerts/datapath_modal.html', $scope, false, 'static');
	};

	// Function to show the test details(alerts) for individual labels
	$scope.showTestDetails = function(test) {
		$scope.datapathModalData = test.texts;
		$scope.datapathModalLabel = test.label;
		$scope.info.page = {
			"total" : 0,
			"current" : 1,
			"pages" : 0,
			"count" : 10,
			"displayMsg" : ""
		};

		$scope.populateDataPathData();
		$scope.openDatapathModal();
	};

	// Function to populate datapath modal data with alerts
	$scope.populateDataPathData = function() {
		var orderedData = $scope.datapathModalData;
		$scope.info.page['total'] = orderedData.length;
		$scope.info.page['pages'] = Math.ceil($scope.info.page['total'] / $scope.info.page['count']);
		$scope.info.datapathDisplayData = orderedData.slice(($scope.info.page['current'] - 1) * $scope.info.page['count'], $scope.info.page['current'] * $scope.info.page['count']);
		if ($scope.info.page['current'] < $scope.info.page['pages']) {
			$scope.info.page['displayMsg'] = (($scope.info.page['current'] - 1) * $scope.info.page['count'] + 1) + ' - ' + (($scope.info.page['current'] - 1) * $scope.info.page['count'] + $scope.info.page['count']) + " of " + ($scope.info.page['total']);
		} else {
			$scope.info.page['displayMsg'] = (($scope.info.page['current'] - 1) * $scope.info.page['count'] + 1) + ' - ' + ($scope.info.page['total']) + ' of ' + ($scope.info.page['total']);
		}
	};

	// Function to populate rules data corresponding to a bundle
	$scope.populateRulesData = function() {
		//reset rule history expandable area
		$scope.info.bundleRules.map(function(item){
			item.expanded = false;
		});
		var orderedData = $scope.info.bundleRules;
		$scope.info.page['total'] = orderedData.length;
		$scope.info.page['pages'] = Math.ceil($scope.info.page['total'] / $scope.info.page['count']);
		$scope.info.displayRules = orderedData.slice(($scope.info.page['current'] - 1) * $scope.info.page['count'], $scope.info.page['current'] * $scope.info.page['count']);
		if ($scope.info.page['current'] < $scope.info.page['pages']) {
			$scope.info.page['displayMsg'] = (($scope.info.page['current'] - 1) * $scope.info.page['count'] + 1) + ' - ' + (($scope.info.page['current'] - 1) * $scope.info.page['count'] + $scope.info.page['count']) + " of " + ($scope.info.page['total']);
		} else {
			$scope.info.page['displayMsg'] = (($scope.info.page['current'] - 1) * $scope.info.page['count'] + 1) + ' - ' + ($scope.info.page['total']) + ' of ' + ($scope.info.page['total']);
		}
	};

	// Function to open modal with rules data corresponding to a bundle
	$scope.openRulesDetails = function() {
		$scope.info.page = {
			"total" : 0,
			"current" : 1,
			"pages" : 0,
			"count" : 10,
			"displayMsg" : ""
		};
		$scope.modal = ModalService.openModal('partials/rules-and-alerts/rules_details.html', $scope, "gb-rules-test-history-modal", 'static');
		if (arguments.length == 0) {
			$scope.info.bundleRules = $scope.info.selectedRules;
			$scope.populateRulesData();
		} else {
			$scope.info.rulesLoading = true;
			var ruleIDs = arguments[0];
			RulesService.getStagingRulesData(ruleIDs).then(function(response) {
				$scope.info.bundleRules = response.data.Data;
				$scope.populateRulesData();
				$scope.info.rulesLoading = false;
				$scope.trackUser('Rule', 'Edit', $scope.info.displayRules);
			}, function(response) {
				$scope.modal.close();
				$scope.info.rulesLoading = false;
				handleSessionTimeout(response);
				if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
					$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['h2_down_msg'];
					GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
				} else {
					$scope.info.errorMsg = GlobalService.getVal('info_server_down');
					GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[0]);

				}
			});
		}
	};

	// Function to get bundle signature based on bundle load ID
	$scope.getBundleId = function(bundle) {		
		$scope.info.bundlesList.map(function(item){
			if(item.load_id === bundle.load_id && item.seen_ts === bundle.seen_ts){
				if(item.expanded == true){
					item.expanded = false;					
				}
				else{					
					item.expanded = true;
				}
			}else{
				item.expanded = false;
			}
		});
		if(bundle.expanded === false) return;
		if (bundle && bundle.rule_id) {
			$scope.info.testresultLoading = true;
			$scope.info.selectedBundleLoadId = bundle.load_id;
			RulesService.getBundleId(bundle.load_id).then(function(response) {
				bundle.signature = response.data.Data;
				$scope.getStagingRulesforBundle(bundle);
			}, function(response) {
				$scope.info.testresultLoading = false;
				bundle.expanded = false;
				handleSessionTimeout(response);
				if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
					GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
					$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['h2_down_msg'];
				} else {
					$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['test_rule_failed'];
				}
			});
		}
	};

	// Function to get staging rules data which were tested with a bundle
	$scope.getStagingRulesforBundle = function(bundle) {
		RulesService.getStagingRulesData(bundle.rule_id).then(function(response) {
			var rulesDetails = response.data.Data || [];
			$scope.viewTestResults(bundle, rulesDetails);
		}, function(response) {
			$scope.info.testresultLoading = false;
			bundle.expanded = false;
			handleSessionTimeout(response);
			if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
				$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['h2_down_msg'];
			} else {
				$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['test_rule_failed'];
			}
		});
	};

	var manufacturer = GlobalService.getVal('manufacturer');
	var product = GlobalService.getVal('product');
	var schema = GlobalService.getVal('schema');

	// Function to view test results for the bundle
	$scope.viewTestResults = function(bundle, rulesDetails) {
		if (bundle && bundle.signature && bundle.rule_id) {
			var bundleSignature = bundle.signature;
			var cols = "";
			for (var i = 0; i < $scope.info.testGridColumnsList.length; i++) {
				cols += $scope.info.testGridColumnsList[i].field + ", ";
			}
			cols += "display_msg";
			var keyspace = RulesService.getStagingKeyspace();
			var alertsTableName = GlobalService.getVal('alerts_by_bundle_table');
			var ruleIDs = bundle.rule_id;
			var selectQuery = "SELECT " + cols + " FROM " + keyspace + "_" + alertsTableName + " where mfr='" + manufacturer + "' AND prod='" + product + "' AND sch='" + schema + "' AND ec='" + manufacturer + "' AND bundle_id='" + bundleSignature + "' AND rule_id IN (" + ruleIDs + ")";

			if ($scope.info.testResultsPending) {
				$scope.deferred.resolve();
			}

			$scope.deferred = $q.defer();
			$scope.info.testResultsPending = true;
			RulesService.getTestResults(selectQuery, $scope.deferred).then(function(response) {
				$scope.info.testResultsPending = false;
				$scope.info.testresultLoading = false;
				$scope.info.testResultsList = [];

				var foundRuleIds = {};

				if (!!response.data.length) {
					for (var i = 0; i < response.data.length; i++) {
						foundRuleIds[response.data[i].rule_id] = true;
						var labelFound = false;
						for (var j = 0; j < $scope.info.testResultsList.length; j++) {
							if ($scope.info.testResultsList[j].label == response.data[i].label) {
								var msgMap = {
									id : ($scope.info.testResultsList[j].length + 1),
									msg : response.data[i].display_msg
								};
								$scope.info.testResultsList[j].texts.push(msgMap);
								labelFound = true;
								break;
							}
						}
						if (!labelFound) {
							var testEntry = {};
							for (var j = 0; j < $scope.info.testGridColumnsList.length; j++) {
								testEntry[$scope.info.testGridColumnsList[j].field] = response.data[i][$scope.info.testGridColumnsList[j].field];
							}
							testEntry.texts = [];
							var msgMap = {
								id : 1,
								msg : response.data[i].display_msg
							};
							testEntry.texts.push(msgMap);
							$scope.info.testResultsList.push(testEntry);
						}
					}
				}

				for (var i = 0; i < rulesDetails.length; i++) {
					var found = ($filter('filter')($scope.info.testResultsList, {
						rule_id : rulesDetails[i].rule_id
					}, true) || []).length ? true : false;
					if (!found) {
						var testEntry = {};
						for (var j = 0; j < $scope.info.testGridColumnsList.length; j++) {
							testEntry[$scope.info.testGridColumnsList[j].field] = rulesDetails[i][$scope.info.testGridColumnsList[j].rules_field];
						}
						testEntry.texts = [];
						$scope.info.testResultsList.push(testEntry);
					}
				}

				if (/\d+/.test(bundle.prod_rule_id)) {
					var prodRules = RulesService.getRulesList();
					var ruleFoundInProd = ($filter('filter')(prodRules, {
						rule_id : parseInt(bundle.prod_rule_id)
					}, true) || [])[0].status == "DRAFT" ? true : false;

					if (ruleFoundInProd && !bundle.rule_modified && !!response.data.length) {
						$scope.info.prodEnableRuleId = parseInt(bundle.prod_rule_id);
						$scope.info.prodEnableRuleLabel = rulesDetails[0].label_display;
						$scope.info.prodEnableRuleName = rulesDetails[0].rule_name;
						$scope.info.ruleTestSucceeded = true;
					} else {
						$scope.info.ruleTestSucceeded = false;
					}
				} else {
					$scope.info.ruleTestSucceeded = false;
				}

				var rulesLabels = [];
				var module = ""
				for (var i = 0; i < $scope.info.testResultsList.length; i++) {
					rulesLabels.push($scope.info.testResultsList[i].label);
				}
				module = "Test Rule History";
				UserTrackingService.standard_user_tracking($scope.info.application, module, 'View Results', rulesLabels.join(",")).then(function(response) {

				}, handleSessionTimeout);
			}, function(response) {
				$scope.info.testResultsPending = false;
				if (response.status != 0) {
					$scope.info.testresultLoading = false;
				}
				$scope.info.testResultsList = "";
				$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['test_rule_failed'];
				if (!$scope.info.sessionTimedOut && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/timeout/)) {
					$scope.info.sessionTimedOut = true;
					ModalService.sessionTimeout();
				}
			});
		}else{			
			$scope.info.testresultLoading = false;
			bundle.expanded = false;
		}
	};
	$scope.enableDisableStatusBtn = function(){
		return $scope.info.enableRuleComments.length >= $scope.info.enableRuleCommentsLimitMin;
	}
	$scope.confirmEnablingRule = function(){
		//open message box to ask for message befor enable it
		$scope.msg = false;
		$scope.selectedRuleName = $scope.info.prodEnableRuleLabel;
		$scope.info.enableRuleComments = "";
		$scope.modal = ModalService.openModal('partials/rules-and-alerts/modal-enable-rule-message-box.html', $scope, "gb-modal-test-rule-enable-modal", 'static');
	}
	// Function to enable a tested rule
	$scope.enableDisableRuleAction = function() {
		if(!$scope.info.enableRuleComments.length) return;
		$scope.modal.close();
		$scope.info.pageLoading = true;
		RulesService.enableRule($scope.info.prodEnableRuleId, $scope.info.enableRuleComments).then(function(response) {
			$scope.info.enableRuleComments = "";
			if (RulesService.getRuleMode() && RulesService.getRuleMode()['mode'] == 'edit' && RulesService.getRuleMode()['data'] && RulesService.getRuleMode()['data']['rule_id'] == $scope.info.prodEnableRuleId) {
				var data = RulesService.getRuleMode()['data'];
				data['rule_id'] = response.data.Data.rule_id;
				data['rule_name'] = response.data.Data.rule_name;
				data['alert_id'] = response.data.Data.alert_id;
				data['status'] = $scope.info.supportedStatus.Enabled;
				data['action_id'] = response.data.Data.action_id;
				RulesService.setRuleMode('edit', data);
			}
			$scope.info.successMsg = GlobalService.getVal('rulesMsgs')['rule_enable_success'][0] + $scope.info.prodEnableRuleName + GlobalService.getVal('rulesMsgs')['rule_enable_success'][1];
			UserTrackingService.standard_user_tracking($scope.info.application, 'Test Rule History', 'enable', $scope.info.prodEnableRuleLabel).then(function(response) {

			}, handleSessionTimeout);
			RulesService.getAllRules(RulesService.getRuleType()).then(function(response) {
				RulesService.setRulesList($filter('filterMultiples')($filter('removeDup')(response.data.Data), {
					status : [$scope.info.supportedStatus.Enabled, $scope.info.supportedStatus.Disabled, $scope.info.supportedStatus.Draft]
				}));
				$scope.info.pageLoading = false;
				$scope.info.ruleTestSucceeded = false;
			}, handleSessionTimeout);

			// RulesService.enableStageRule($scope.info.prodEnableRuleId).then(function(response) {
			// 	$scope.info.successMsg = GlobalService.getVal('rulesMsgs')['rule_enable_success'][0] + $scope.info.prodEnableRuleName + GlobalService.getVal('rulesMsgs')['rule_enable_success'][1];
			// }, function(response) {
			// 	$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['rule_enable_failed'][0] + $scope.info.prodEnableRuleName + GlobalService.getVal('rulesMsgs')['rule_enable_failed'][1];
			// });
		}, function(response) {
			$scope.info.pageLoading = false;
			if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
				$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['h2_down_msg'];
			} else {
				$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['rule_enable_failed'][0] + $scope.info.prodEnableRuleName + GlobalService.getVal('rulesMsgs')['rule_enable_failed'][1];
			}
			handleSessionTimeout(response);
		});
	};

	// Function to load the list of bundles from staging H2
	$scope.loadAllStageBundles = function (bundle) {
			RulesService.checkLCPStatus().then(function (response) {
				if (response.data.Status == "Success") {
					RulesService.getStageBundles().then(function (response) {
						if (response.data.Data.length == $scope.info.initialBundleListLength) {
							if ($scope.info.bundleListCallCount <= 10) {
								$scope.info.bundleListCallCount++;
								$timeout(function () {
									$scope.loadAllStageBundles();
								}, 3000);
							}
							else {
								$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['bundle_load_failed'];
							}
						} else {
							$scope.info.initialBundleListLength = response.data.Data.length;
							$scope.bundlepoll();
						}
					}, function (response) {
						$scope.info.bundlesLoading = false;
						$scope.info.bundlesList = [];
						if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
							GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
							$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['h2_down_msg'];
						} else {
							$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['bundle_load_failed'];
						}
						handleSessionTimeout(response);
					});
				}
			}, function (response) {
				$scope.info.bundlesLoading = false;
				$scope.info.bundlesList = [];
				handleSessionTimeout(response);
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[2]);
				$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['lcp_down_msg'];
			});
		
	};

	$scope.bundlepoll = function(){
		if(!!$scope.info.firstLoad){
			$scope.info.bundlesLoading = true;	
		}
		RulesService.checkLCPStatus().then(function(response) {
			if (response.data.Status == "Success") {
				RulesService.getStageBundles().then(function(response) {

					if(!!$scope.info.firstLoad){
						$scope.info.bundlesLoading = true;
						$scope.info.initialBundleListLength = response.data.Data.length;	
					}
					
					if (!!$scope.info.deleteTemporaryBundle) {
						$scope.info.temporaryBundleData = [];
						delete $scope.info.deleteTemporaryBundle;
					}
					var tmpList = $filter('filter')(response.data.Data, {
						supported: true
					}) || [];
					//check if its is expanded
					$scope.info.bundlesList.map(function (item) {
						if (item.expanded) {
							tmpList.map(function (tmpItem) {
								if (item.load_id === tmpItem.load_id && item.seen_ts === tmpItem.seen_ts) {
									tmpItem.expanded = true;
								}
							});
						}
					});
					$scope.info.bundlesList = tmpList;
					//var utcCurrentTime = metaDataService.getTodayDate();
					//var sixHours = moment(currentTime).subtract(1, 'minutes');
					var thresholdHours = GlobalService.getVal(thresholdHours);
					var sixHours = new Date(new Date().setHours(new Date().getHours() - thresholdHours)).getTime() / 1000 | 0;
					//check if bundle seenid  < current time - 6hours && state == 0(waiting in queue) then change the state to 4(failled)
					for (var i = 0; i < $scope.info.bundlesList.length; i++) {
						if ($scope.info.bundlesList[i].bundle_state == 0 && moment($scope.info.bundlesList[i].seen_ts).unix() < sixHours) {
							$scope.info.bundlesList[i].bundle_state = 4;

						}
					}

					var found = false;
					for (var i = 0; i < $scope.info.bundlesList.length; i++) {
						if ($scope.info.bundleStatus[$scope.info.bundlesList[i].bundle_state] == 'Processing' || $scope.info.bundleStatus[$scope.info.bundlesList[i].bundle_state] == 'Parsing') {
							found = true;
							break;
						}
					}
					if (found) {
						$timeout(function () {
							$scope.bundlepoll();
						}, 5000);

					}
					$scope.info.bundlesLoading = false;
					$scope.info.firstLoad = false;
					$scope.trackUser('Test History', 'view', $scope.info.bundlesList);
				}, function(response) {
					$scope.info.bundlesLoading = false;
					$scope.info.bundlesList = [];
					if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
						GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
						$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['h2_down_msg'];
					} else {
						$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['bundle_load_failed'];
					}
					handleSessionTimeout(response);
				});
				
			} else {
				$scope.info.bundlesLoading = false;
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[2]);
				$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['lcp_down_msg'];
			}

		}, function(response) {
			$scope.info.bundlesLoading = false;
			$scope.info.bundlesList = [];
			handleSessionTimeout(response);
			GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[2]);
			$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['lcp_down_msg'];
		});
	}

	// Show "Upload log" link if you came to this page with rule(s) to be tested
	if ($scope.info.selectedRules.length) {
		$scope.info.temporaryBundleData = [{
			rules : $scope.info.selectedRules,
			upload_log : true
		}];
	}

	$scope.info.firstLoad = true;
	$scope.bundlepoll();

	// Function to insert selected rules to staging H2
	$scope.insertSelectedRules = function() {		
		if(!$scope.validateUploadform()){
			return false;
		}
		ErrorService.clearErrors('fileupload');
		var bundleName =  $scope.info.uploader.queue[0].file.name;
		// validate bundle name
		// it should be a sinlge word, should be a space in name
		if(bundleName.indexOf(' ') != -1){
			ErrorService.setError('fileupload', GlobalService.getVal('rulesMsgs')['test_rule_bundle_upload_name_error']);
			return false;
		}
		if ($scope.info.uploader.queue.length == 0) {
			return;
		}
		$scope.info.rulesCopying = true;
		$scope.info.temporaryBundleData = [{
			bundle_name : $scope.info.uploader.queue[0].file.name,
			waiting : true
		}];
		$scope.insertRules(false);
	};

	// Function to insert selected prod rules into staging before testing them
	$scope.insertRules = function(forLogBundles) {
		if(forLogBundles){
			$scope.testButtonDisable = true;
			$scope.uploadBtnDisable = true;
		}
		
		ErrorService.clearErrors('fileupload');
		if(forLogBundles){			
			for (var i = 0; i < $scope.logBundlesFromLogvault.length; i++) {
				tmp = $scope.logBundlesFromLogvault[i];
				tmp["status"] = "loading";			
			}
		}
		RulesService.insertRuleStaging($scope.getInsertRuleData()).then(function(response) {
			if (response.status == 200) {
				if(!forLogBundles){					
					$scope.info.temporaryBundleData = [{
						bundle_name : $scope.info.uploader.queue[0].file.name,
						uploading : true
					}];
				}
				RulesService.setStagingRules(true);
				$scope.info.insertedStageRules = "";
				for (var i = 0; i < response.data.Data.length; i++) {
					$scope.info.insertedStageRules += "," + response.data.Data[i].rule_id;
				}
				$scope.info.insertedStageRules = $scope.info.insertedStageRules.substring(1);
				$scope.info.bunldeSignatureCount = response.data.Data[0].count;
				if(forLogBundles){
					$scope.info.checkUploadToLCPCount = 0;
					$scope.testRulesWithLogvaultBundle();
				}else{
					$scope.info.rulesCopying = true;
					setTimeout(function(){$scope.beginUpload();},$scope.info.fileuploadDelay);
				}				
				
			} else {
				ErrorService.setError('fileupload', GlobalService.getVal('rulesMsgs')['test_rule_copy_error']);
				if(!forLogBundles){		
					$scope.info.temporaryBundleData = [];
				}
			}
			if(forLogBundles){
				$scope.trackUser('Test Rules', 'Upload from logvalult', $scope.logBundlesFromLogvault);
			}else{
				$scope.trackUser('Test Rules', 'Upload from local Machine', {"bundle name": $scope.info.uploader.queue[0].file.name});
			}
			
			//$scope.info.rulesCopying = false;
		}, function(response) {
			//$scope.modal.close();
			$scope.testButtonDisable = false;
			$scope.uploadBtnDisable = false;
			$scope.info.temporaryBundleData = [];
			$scope.info.rulesCopying = false;
			if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
				ErrorService.setError('fileupload', GlobalService.getVal('rulesMsgs')['h2_down_msg']);
			} else {
				ErrorService.setError('fileupload', GlobalService.getVal('rulesMsgs')['test_rule_copy_error']);
			}
			for (var i = 0; i < $scope.logBundlesFromLogvault.length; i++) {
				tmp = $scope.logBundlesFromLogvault[i];
				delete tmp["status"];		
			}

			handleSessionTimeout(response);
		});
	};

	// Function to check file upload to LCP status
	$scope.checkfileUploadToLCPStatus = function(fileEpoch) {
		if ($scope.info.checkUploadToLCPCount < 10) {
			RulesService.checkfileUploadToLCPStatus(fileEpoch).then(function(response) {
				$scope.info.checkUploadToLCPCount++;
				if (response.data.Status == "Success") {
					$scope.insertBundleRuleAssociation(fileEpoch);
				} else {
					$timeout(function() {
						$scope.checkfileUploadToLCPStatus(fileEpoch);
					}, 5000);
				}
			}, function(response) {
				RulesService.setLogMoving(false);
				$scope.info.temporaryBundleData = [];
				handleSessionTimeout(response);
				$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['log_processing_failed'];
			});
		} else {
			RulesService.setLogMoving(false);
			$scope.info.temporaryBundleData = [];
			$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['log_processing_failed'];
		}
	};

	// Inserts rule association with a bundle into bundle_rule CF
	$scope.insertBundleRuleAssociation = function(fileEpoch) {
		var data = {
			rule_id : $scope.info.insertedStageRules,
			//count : $scope.info.bunldeSignatureCount,
			bundle_name: $scope.info.stageUploadBundleName,
			bundle_epoch: fileEpoch,
			supported : true,
			prod_rule_id : ($scope.info.selectedRules.length == 1 && $scope.info.selectedRules[0].status == $scope.info.supportedStatus.Draft) ? $scope.info.selectedRules[0].rule_id : "",
			rule_modified : false
		};
		RulesService.checkLCPStatus().then(function(response) {
			if (response.data.Status == "Success") {
				RulesService.insertBundleRuleAssociation(data).then(function(response) {
					response.data.Data = (response.data.Data == "") ? 0 : response.data.Data;
					if (response.data.Data == "false") {
						$timeout(function() {
							$scope.insertBundleRuleAssociation(fileEpoch);
						}, 3000);
					} else {
						RulesService.setLogMoving(false);
						RulesService.setLastLogUploadTime(Math.floor(Date.now()));
						$scope.info.deleteTemporaryBundle = true;
						var found = false;
						for (var i = 0; i < $scope.info.bundlesList.length; i++) {
							if ($scope.info.bundleStatus[$scope.info.bundlesList[i].bundle_state] == 'Processing' || $scope.info.bundleStatus[$scope.info.bundlesList[i].bundle_state] == 'Parsing') {
								found = true;
								break;
							}
						}
						if (!found) {
							$scope.loadAllStageBundles(false);
						}
					}
				}, function(response) {
					RulesService.setLogMoving(false);
					$scope.info.temporaryBundleData = [];
					if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
						GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
						$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['h2_down_msg'];
					} else {
						$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['log_processing_failed'];
					}
					handleSessionTimeout(response);
				});
			} else {
				RulesService.setLogMoving(false);
				$scope.info.temporaryBundleData = [];
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[2]);
				$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['lcp_down_msg'];
			}
		}, function(response) {
			RulesService.setLogMoving(false);
			$scope.info.temporaryBundleData = [];
			handleSessionTimeout(response);
			$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['log_processing_failed'];
		});

	};

	// Function to get insert rule data
	$scope.getInsertRuleData = function() {
		var ruleIDs = [];
		var categoryIDs = [];
		var notifierIDs = [];
		var templateIDs = [];
		for (var i = 0; i < $scope.info.selectedRules.length; i++) {
			ruleIDs.push($scope.info.selectedRules[i].rule_id);
			notifierIDs.push($scope.info.selectedRules[i].alert_id);

			var categoryFound = false;
			for (var j = 0; j < categoryIDs.length; j++) {
				if (parseInt(categoryIDs[j]) == parseInt($scope.info.selectedRules[i].category_id)) {
					categoryFound = true;
					break;
				}
			}
			if (!categoryFound) {
				categoryIDs.push($scope.info.selectedRules[i].category_id);
			}

			var templateFound = false;
			for (var j = 0; j < templateIDs.length; j++) {
				if (parseInt(templateIDs[j]) == parseInt($scope.info.selectedRules[i].email_template_id)) {
					templateFound = true;
					break;
				}
			}
			if (!templateFound && !!$scope.info.selectedRules[i].email_template_id) {
				templateIDs.push($scope.info.selectedRules[i].email_template_id);
			}
		}

		var data = {
			rule_id : ruleIDs.join(","),
			alert_id : notifierIDs.join(","),
			category_id : categoryIDs.join(",")
		};

		if (templateIDs.length > 0) {
			data['template_id'] = templateIDs.join(",");
		}

		return data;
	};

	$scope.closeDataPathModal = function() {
		$scope.modal.close();
	}
	//
	// Code for bundle upload start
	//

	$scope.uploadForm = {};

	

	// Get config and file upload config
	RulesService.getAllConfig().then(function(response) {
		if (AppService.isGbStudioApp()) {
			response.data.Data['config'] = !!response.data.Data['default_config'] ? response.data.Data['default_config'] : response.data.Data['config'];
			response.data.Data['file_upload_config'] = !!response.data.Data['default_file_upload_config'] ? response.data.Data['default_file_upload_config'] : response.data.Data['file_upload_config'];
		}
		$scope.info.pageLoading = false;
		$scope.info.showMandatoryLabel = false;
		$scope.info.mandatoryLabel = GlobalService.getVal('fileupload_mandatory_label');
		$scope.info.uploadData = response.data.Data.file_upload_config.json_form ? JSON.parse(response.data.Data.file_upload_config.json_form) : response.data.Data.file_upload_config.json_form;
		//initialize uploadForm
		for (i in $scope.info.uploadData) {
			if (!!$scope.info.uploadData[i]['required']) {
				$scope.uploadForm[$scope.info.uploadData[i]['name']] = {};
				$scope.uploadForm[$scope.info.uploadData[i]['name']].nodeVal = "";
			}
			if($scope.info.uploadData[i]['mandatory']){
				$scope.info.showMandatoryLabel = true;
			}
		}
		$scope.info.uploadDataMaxSize = parseInt(response.data.Data.file_upload_config.max_upload_size);
		for (var i = 0; i < $scope.info.uploader.filters.length; i++) {
			if ($scope.info.uploader.filters[i].name == 'extensionFilter') {
				$scope.info.uploader.filters[i] = {
					name : 'extensionFilter',
					fn : function(item) {
						var match = false,
						    i,
						    extList = response.data.Data.file_upload_config.allowed_extension.split(', ');
						for (i in extList) {
							if (item.name.endsWith(extList[i])) {
								match = true;
							}
						}

						return match;
					}
				};
			}
		}

	}, function(response) {
		$scope.info.pageLoading = false;
		handleSessionTimeout(response);
	});

	// Gets the values from the globals based on the given key.
	$scope.getValue = function(key) {
		return GlobalService.getVal(key);
	};

	// Returns all the file upload errors
	$scope.getUploadErrors = function() {
		return ErrorService.getErrors('fileupload');
	};

	// Uploader object for file upload.
	$scope.info.uploader = new FileUploader({
		url : RulesService.getStagingDomain() + '/fileupload/uploadfile/' + manufacturer + '/' + product + '/' + schema + '?stage=true',
		queueLimit : GlobalService.getVal('test_log_upload_limit'),
		filters : [{
			name : 'extensionFilter',
			fn : function(item) {
				var match = false,
				    i,
				    extList = GlobalService.getVal('file_upld_suprtd_extns').split(', ');
				for (i in extList) {
					if (item.name.endsWith(extList[i])) {
						match = true;
					}
				}

				return match;
			}
		}],

		// Execute after adding a file to upload
		onAfterAddingFile : function(item) {
			$scope.checkSizeLimit();
		},

		// Execute if adding a file to form failed
		onWhenAddingFileFailed : function(item, filter, options) {
			if (filter.name == 'queueLimit') {
				ErrorService.setError('fileupload', GlobalService.getVal('test_log_upload_limit_exceeded'));
			} else {
				ErrorService.setError('fileupload', GlobalService.getVal('file_upld_unsupported'));
			}
		},

		// Execute if an error occured while uploading
		onErrorItem : function(item, response, status, headers) {
			if (!$scope.info.sessionTimedOut && response && response.hasOwnProperty('Msg') && response.Msg.match(/timeout/)) {
				if (!!$scope.modal) {
					$scope.modal.close();
				}
				$scope.info.sessionTimedOut = true;
				ModalService.sessionTimeout();
				return;
			}
		},

		// Execute if file was uploaded successfully
		onSuccessItem : function(item, response, status, headers) {
			var fileEpoch = response.Data.split(":")[0];
			
			$scope.info.temporaryBundleData = [{
				bundle_name : $scope.info.uploader.queue[0].file.name,
				processing : true
			}];
			RulesService.setLogMoving(true);
			$scope.info.checkUploadToLCPCount = 0;
			$scope.info.stageUploadBundleName = response.Data.split(":")[1];
			$scope.checkfileUploadToLCPStatus(fileEpoch);
		},

		// Execute before the upload of file starts
		onBeforeUploadItem : function(item) {
			var t_obj;
			angular.forEach($scope.uploadForm, function(value, key) {
				t_obj = {};
				t_obj[key] = value.nodeVal;
				item.formData.push(t_obj);
			});
			$scope.info.uploadDone = false;
		},

		// Execute when all the added files got completed
		onCompleteAll : function() {
			var i,
			    success = false,
			    failure = false,
			    cancel = false,
			    details;
			details = {};
			for (i in $scope.uploadForm)
			if ($scope.uploadForm.hasOwnProperty(i)) {
				details[i] = $scope.uploadForm[i]['nodeVal'];
			}
			details['files'] = [];
			for (i in $scope.info.uploader.queue) {
				if ($scope.info.uploader.queue[i].isSuccess) {
					success = true;
					details['files'].push($scope.info.uploader.queue[i]['file']['name']);
				} else if ($scope.info.uploader.queue[i].isCancel) {
					cancel = true;
					$scope.info.bundlesList = [];
				} else {
					failure = true;
					$scope.info.bundlesList = [];
				}
			}
			$scope.checkSizeLimit();
			if ((success && cancel && failure) || (success && cancel && !failure)) {
				ErrorService.setError('fileupload', GlobalService.getVal('file_upld_partial'));
			} else if (!success && cancel && !failure) {
				ErrorService.setError('fileupload', GlobalService.getVal('file_upld_cancel'));
			} else if (success && !cancel && !failure) {
				$scope.info.uploadDone = false;
				$scope.info.uploader.clearQueue();
				ErrorService.clearErrors('fileupload');
				$scope.modal.close();
			} else if ((!success && !cancel && failure) || (!success && cancel && failure) || (success && !cancel && failure)) {
				ErrorService.setError('fileupload', GlobalService.getVal('file_upld_fail'));
			} else {

			}			
			$scope.info.uploader.queue.length = 0;
			$scope.info.disableUpload = false;
		}
	});

	// Checks the file size limit
	$scope.checkSizeLimit = function() {
		var i,
		    sum = 0;
		for (i in $scope.info.uploader.queue) {
			sum += $scope.info.uploader.queue[i].file.size;
		}
		ErrorService.clearErrors('fileupload');
		if (sum > $scope.info.uploadDataMaxSize) {
			ErrorService.setError('fileupload', GlobalService.getVal('file_upld_maxsize') + '<span title="' + $scope.info.uploadDataMaxSize + ' B">' + $filter('fileSize')($scope.info.uploadDataMaxSize) + '</span>');
		}
	};
	//validate upload form
	 $scope.validateUploadform = function(){
		var valid = true;
		for (i in $scope.info.uploadData) {
			if (!!$scope.info.uploadData[i]['required']) {
				if (!!$scope.info.uploadData[i]['mandatory']){
				if ($scope.uploadForm[$scope.info.uploadData[i]['name']].nodeVal == "") {
					$scope.uploadForm[$scope.info.uploadData[i]['name']].error = true;
					$scope.info.disableUpload = false;
					$scope.info.bundlesList = [];
					valid = false;
				} else {
					$scope.uploadForm[$scope.info.uploadData[i]['name']].error = false;
				}
			}	
			}
		}
		return valid;
	}
	// Starts the upload
	$scope.beginUpload = function() {

		var i,
		    details,
		    j,
		    upload = true;

		$scope.checkSizeLimit();
		$scope.info.rulesCopying = false;
		/* for (i in $scope.info.uploadData) {
			if (!!$scope.info.uploadData[i]['required']) {
				if ($scope.uploadForm[$scope.info.uploadData[i]['name']].nodeVal == "") {
					$scope.uploadForm[$scope.info.uploadData[i]['name']].error = true;
					$scope.info.disableUpload = false;
					$scope.info.bundlesList = [];
					upload = false;
				} else {
					$scope.uploadForm[$scope.info.uploadData[i]['name']].error = false;
				}
			}
		} */

		$scope.uploadForm.stage = {
			error : false,
			nodeVal : true
		};
		if (ErrorService.getErrors('fileupload').length == 0) {
			$scope.info.disableUpload = true;
			$scope.info.uploader.uploadAll();
		}
	};

	// Clears the upload queue
	$scope.removeAll = function() {
		$scope.info.uploadDone = false;
		$scope.info.uploader.clearQueue();
		ErrorService.clearErrors('fileupload');
		$scope.hideUploadModal();
		$scope.openUploadLogModal();
	};

	// Removes the file from the queue.
	$scope.removeFile = function(item) {
		$scope.info.uploadDone = false;
		$scope.info.uploader.clearQueue();
		ErrorService.clearErrors('fileupload');
		$scope.hideUploadModal();
		$scope.openUploadLogModal();
	};

	// Cancels upload of all the files.
	$scope.cancelAll = function() {
		var i;
		for (i in $scope.info.uploader.queue) {
			$scope.info.uploader.queue[i].cancel();
		}
		$scope.info.uploader.cancelAll();
		$scope.info.disableUpload = false;
	};

	// Hides the modal for the file upload.
	$scope.hideUploadModal = function() {
		$scope.modal.close();
		$scope.info.uploadModalOpened = false;
	};

	// Function to close the upload modal
	$scope.closeUploadModal = function() {
		if ($scope.info.uploader.isUploading) {
			$scope.msg = GlobalService.getVal('abort_upld');
			$scope.modal1 = ModalService.openModal("partials/abort_upload.html", $scope, false, 'static');
			$scope.fadeUploadModal = true;
		} else {
			$scope.info.uploader.clearQueue();
			for (var i in $scope.uploadForm)
			if ($scope.uploadForm.hasOwnProperty(i)) {
				$scope.uploadForm[i].nodeVal = "";
				$scope.uploadForm[i].error = false;
			}
			ErrorService.clearErrors('fileupload');
			$scope.modal.close();
			$scope.info.uploadModalOpened = false;
			$scope.fadeUploadModal = false;
			$scope.info.rulesCopying = false;
			$scope.info.uploadDone = false;
		}
	};

	// Function to abort upload
	$scope.abortUpload = function() {
		if ($scope.info.uploader.isUploading) {
			$scope.cancelAll();
		}
		$scope.info.uploader.clearQueue();
		for (var i in $scope.uploadForm)
		if ($scope.uploadForm.hasOwnProperty(i)) {
			$scope.uploadForm[i].nodeVal = "";
			$scope.uploadForm[i].error = false;
		}
		ErrorService.clearErrors('fileupload');
		$scope.modal.close();
		$scope.info.uploadModalOpened = false;
		$scope.fadeUploadModal = false;
		$scope.info.rulesCopying = false;
		$scope.info.uploadDone = false;
	};

	// Function to hide abort modal
	$scope.hideAbortUpload = function() {
		$scope.modal1.close();
		$scope.fadeUploadModal = false;
	};

	// Function to handle session timeout
	function handleSessionTimeout(response) {
		if (!$scope.info.sessionTimedOut && response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/timeout/)) {
			$scope.info.sessionTimedOut = true;
			ModalService.sessionTimeout();
		}
	};
	$scope.selectedRulesPagination = (function(){
		var records = $scope.info.selectedRules,total = $scope.info.selectedRules.length,
		current = 1, pageSize = 10,displayMsg = "", orderedData;

		return{	
			currentPageSize : 10,
			getTotalPages : function(){
				var maxPages = Math.ceil(total/pageSize);
				return maxPages;
			},
			getCurrentPage : function(){
				return current;
			},
			getDisplayMsg : function(){
				var endIndex = (current* pageSize);
				if(records.length < endIndex){
					endIndex = records.length;
				}
				displayMsg = ((current - 1)* pageSize + 1) +" - " + endIndex + " of " + total;
				return displayMsg;

			},
			setPageSize: function(num){
				currentPageSize = num;
				pageSize = num;
			},
			setTotal : function(recs){
				total = recs.length;
			},
			next : function(){
				var maxPages = Math.ceil(total/pageSize);
				current++;
				if(current >= maxPages){
					current = maxPages;
				}

			},
			prev : function(){
				current--;
				if(current <=0){
					current = 1;
				}

			},
			first : function(){
				current = 1;

			},
			last : function(){
				current = Math.ceil(total/pageSize);
			},
			getData : function(){
				orderedData = records.slice((current - 1) * pageSize,current * pageSize);
				if(!orderedData) return [];
				return orderedData;
			}
		}
	})();
	

	//
	// Code for bundle upload ends
	//
	$scope.emptyLogvaultBundle = function () {
		if($scope.modal){
			$scope.modal.close();
			//fix for bootstrap internal modal bug
			//modal backdrops remains in the background for 5 seconds causing unclickable screen
			angular.element($document[0].getElementsByClassName('modal-backdrop')).remove();
			ErrorService.clearErrors('fileupload');
		}		
		$scope.logBundlesFromLogvault = [];
		$scope.testButtonDisable = false;
		$scope.uploadBtnDisable = false;
	};

	$scope.$on('bundleListFromLogVault', function(event, page) {
		$scope.logBundlesFromLogvault = RulesService.getLogBundle($scope.bundleList);
		for (var i = 0; i < $scope.logBundlesFromLogvault.length; i++) {
			var tmp = $scope.logBundlesFromLogvault[i];
			tmp["status"] = "";
		}
		if($scope.logBundlesFromLogvault.length > 0){
			$scope.modal = ModalService.openModal("partials/rules-and-alerts/bundles_from_logvault.html", $scope, false, 'static', true);
		}
	});

	//
	$scope.$watch('logBundlesFromLogvault', function (newVal, oldVal) {
		var found = false;
		for(var i=0;i<newVal.length;i++){
			if(newVal[i]['status']){
				if(newVal[i]['status'] == 'loading'){
					found = true;
					break;
				}
			}else{
				found = false;
				break;
			}
		};
		if(!found){
			$scope.allBunldesUploaded  = true;
			$scope.testButtonDisable = false;

		}else{
			$scope.allBunldesUploaded  = false;
		}
	}, true);

	$scope.testRulesWithLogvaultBundle = function () {
		$scope.testButtonDisable = true;
		var bundles = [], tmp;
		for (var i = 0; i < $scope.logBundlesFromLogvault.length; i++) {
			tmp = $scope.logBundlesFromLogvault[i];
			bundles.push({ "bundle_name": tmp['obs_url'], "bundle_id": tmp['bundle_id'], "obs_date": tmp['obs_date'], "status":"loading" });			
		}
		var param = {
			"download": {
				"bundles": bundles
			}
		}
		RulesService.sendRulesWithLogvaultBundle(param).then(function (response) {
			var result = response.data.Data;
			var resLen = result.length;
			for (var i = 0; i < resLen; i++) {
				var bundle = result[i];
				var bundleName = bundle['bundle_name'].split(":")[1];
				var epoc = bundle['bundle_name'].split(":")[0]; 
				for (var j = 0; j < $scope.logBundlesFromLogvault.length; j++) {
					var tmp = $scope.logBundlesFromLogvault[j];
					if( (tmp.obs_date.replace("T","_").replace(/:/g,"_").replace("Z","_")+tmp["obs_url"]) == bundleName){
						tmp['bundle_name'] =  bundleName;
						bundle = tmp;
						break;
					}					
				}
				//initialize countter for mulitple api call
				bundle.count = 0;
				bundle.status = "loading";
				bundle.insertCount = 0				
				//call api from here
				$scope.checkMultiplefileUploadToLCPStatus(bundle, epoc, $scope.insertMultipleBundleRuleAssociation);				
			}
		}, function (response) {
			$scope.info.pageLoading = false;
			handleSessionTimeout(response);
		});
	}

	// Function to check file upload to LCP status for multiple bundles
	$scope.checkMultiplefileUploadToLCPStatus = function (bundle, fileEpoch, callback) {
		if (bundle.count < 7) {
			
			RulesService.checkfileUploadToLCPStatus(fileEpoch).then(function (response) {
				bundle.count++;
				//response.data.Status ="failure"
				if (response.data.Status == "Success") {
					//bundle.status = "success"
					callback(bundle, fileEpoch);
				} else {
					$timeout(function () {
						$scope.checkMultiplefileUploadToLCPStatus(bundle, fileEpoch, callback);
					}, 5000);
				}
			}, function (response) {

				handleSessionTimeout(response);
				bundle.status = "failed";
				$scope.testButtonDisable = false;
				$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['log_processing_failed'];
			});
		} else {
			$scope.testButtonDisable = false;
			bundle.status = "failed";
			ErrorService.setError('fileupload', GlobalService.getVal('rulesMsgs')['log_processing_failed']);
			$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['log_processing_failed'];
		}
	};

	// Inserts rule association with a bundle into bundle_rule CF
	$scope.insertMultipleBundleRuleAssociation = function (bundle, fileEpoch) {
		var data = {
			rule_id: $scope.info.insertedStageRules,
			//count : $scope.info.bunldeSignatureCount,
			bundle_name: bundle['bundle_name'],
			bundle_epoch: fileEpoch,
			supported: true,
			prod_rule_id: ($scope.info.selectedRules.length == 1 && $scope.info.selectedRules[0].status == $scope.info.supportedStatus.Draft) ? $scope.info.selectedRules[0].rule_id : "",
			rule_modified: false
		};
		
		RulesService.checkLCPStatus().then(function (response) {
			if (response.data.Status == "Success" && bundle.insertCount < 8) {
				RulesService.insertBundleRuleAssociation(data).then(function (response) {
					bundle.insertCount++;
					response.data.Data = (response.data.Data == "") ? 0 : response.data.Data;
					//response.data.Data ="false"
					if (response.data.Data == "false") {
						$timeout(function () {
							$scope.insertMultipleBundleRuleAssociation(bundle, fileEpoch);
						}, 3000);
					} else {
						bundle.status = "success";
					}
						$scope.loadAllStageBundles(bundle);
				}, function (response) {

					if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
						GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
						$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['h2_down_msg'];
					} else {
						ErrorService.setError('fileupload', GlobalService.getVal('rulesMsgs')['log_processing_failed']);
						$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['log_processing_failed'];
					}
					bundle.status = "failed";
					$scope.uploadfailed(bundle);
					$scope.testButtonDisable = false;
					handleSessionTimeout(response);
				}.bind(this));
			} 
			
			else {
				$scope.testButtonDisable = false;
				bundle.status = "failed";
				ErrorService.setError('fileupload', GlobalService.getVal('rulesMsgs')['log_processing_failed']);
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[2]);
				$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['lcp_down_msg'];
			}
		}, function (response) {
			handleSessionTimeout(response);
			ErrorService.setError('fileupload', GlobalService.getVal('rulesMsgs')['log_processing_failed']);
			$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['log_processing_failed'];
		});

	};

	$scope.uploadfailed = function(bundle){
		for (var i = 0; i < $scope.logBundlesFromLogvault.length; i++) {
			if($scope.logBundlesFromLogvault[i]['obs_url'].split(":") == bundle['bundle_name'] ){
				$scope.logBundlesFromLogvault[i]['status'] = 'failed';
			}
						
		}
	}

	//usertracking function
	$scope.trackUser = function (app_Page, operation, details) {
		var details = JSON.stringify(details);
		UserTrackingService.standard_user_tracking($scope.info.application, app_Page, operation, details).then(function (response) {

		}, handleSessionTimeout);
	}

}])

// Controller to handle adding or editing of rules
.controller('AddRuleCtrl', ['$scope', '$sce', '$timeout', '$window', 'ModalService', 'RulesService', '$filter', 'GlobalService', 'UserTrackingService', 'AppService', 'ExplorerService', 'metaDataService', 'RulesTestWithLogvault', 'UtilService','$cookies',
function($scope, $sce, $timeout, $window, ModalService, RulesService, $filter, GlobalService, UserTrackingService, AppService, ExplorerService, metaDataService, RulesTestWithLogvault, UtilService, $cookies) {
	// Object to store all information of Add Rule page
	$scope.info = {};
	$scope.info.clinsightFlag = GlobalService.getVal('clinsightFlag') || false;
	
	$scope.info.ruleType = RulesService.getRuleType();

	$scope.info.unsupportedrule = $scope.info.ruleType == 'unsupported' ? true:false;

	// Stores application name which is used for user tracking
	$scope.info.application = GlobalService.getVal('navRules');

	// Stores the model of last focused element
	$scope.info.lastElementFocused = null;

	// Stores the list of max limits
	$scope.info.maxLimits = GlobalService.getVal('rulesMaxLimits');

	//Stores all the contextual help for add rule
	$scope.info.addRuleContextHelp = GlobalService.getVal('addRulesHelpLinks');
	// $scope.showContent = false;

	$scope.showContent = {
		label: false,
		description: false
	}

	// Stores whether session is timed out or not
	$scope.info.sessionTimedOut = false;
	$scope.addRuleAttrSearch = "";
	$scope.NoAttrSearch = false;
	$scope.ifSearched = false;
	$scope.attributeSearchMinStrLen = GlobalService.getVal("minAttrSearch");

	// Stores what to show in tooltips
	$scope.info.tooltips = GlobalService.getVal('addRuleTooltips');

	// Stores the list of scopes
	$scope.info.scopes = GlobalService.getVal('rulesScopes');

	// Stores the data types of columns
	$scope.info.columnDataTypes = GlobalService.getVal('columnDataTypes');

	// Stores the list of converted attributes
	$scope.info.convertedAttributes = [];
	$scope.info.maxAlertInputLimit = GlobalService.getVal('maxAlertInputLimit');

	$scope.info.ruleCurrentVersion = 0;
	
	// Defines whether section data is loading
	$scope.info.sectionsLoading = true;

	// Defines whether categories is loading
	$scope.info.categoriesLoading = true;

	// Stores the no. of attributes/sections to load on page load
	$scope.info.attributeLimit = 50;

	// Stores the section column label map
	$scope.sectionsColumnLabelMap = {};

	// Stores the list of categories
	$scope.info.categories = [];

	// Stores the list of severities
	$scope.info.severities = [];

	// Stores the list of priorities
	$scope.info.priorities = [];

	// Stores the message to be displayed on top
	$scope.info.addRuleMsg = {};

	// Specifies whether rule is added
	$scope.info.ruleAdded = false;

	// Stores the data of the rule to be tested
	$scope.info.testRuleData = null;

	// Stores the section column details used in logic field
	$scope.info.sectionsColumnLabeListOfLogic = [];


	// Stores the list of operators which should be shown on UI
	$scope.info.operators = $filter('filter')(GlobalService.getVal('rulesOperators'), {
		enabled : true
	});

	// Stores the list of functions which should be shown on UI
	$scope.info.functions = $filter('filter')(GlobalService.getVal('rulesFunctions'), {
		enabled : true
	});

	// Stores the list of functions which should be shown on UI
	$scope.info.aggregateFunctions = $filter('filter')(GlobalService.getVal('rulesAggregateFunction'), {
		enabled : true
	});

	// Stores the list of supported rule status
	$scope.info.supportedStatus = GlobalService.getVal('rulesSupportedStatus');

	$scope.info.selectedTagsCount=0;

	$scope.info.tagList = []
	$scope.processAPItemplateForAddRule = function(data){
		$scope.info.apiTemplates = data;
	}
	$scope.processAPItemplateForEditRule = function(data){
		//process it based on rule's API template ID
		$scope.info.apiTemplates  = data;
		
	}

	$scope.updateTagSelectedCount = function(){
		$scope.info.selectedTagsCount = $scope.info.tagList.filter(function (t) {
			return t.selected;
		}).length
	}
	// Stores the list of API  templates
	$scope.fetchAPITemplate = function(callMeBack){		
		RulesService.getAPITemplates().then(function(response) {
			callMeBack(response.data.Data);	
		}, function(response) {
			$scope.info.apiTemplates = [];
			console.error("Unable to load templates");
			if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
				$scope.info.addRuleMsg = {
					type: 'failure',
					msg: GlobalService.getVal('rulesMsgs')['h2_down_msg']
				};
			}
			handleSessionTimeout(response);
		});
	}

	//store api alert feature true false flag
	$scope.showAlertApiFeature = RulesService.getshowAlertApiFeature();
	//$scope.info.emailList = ["nishanth.prabhu@glassbeam.com","nitin.kulkarni@glassbeam.com","anish.kumar@glassbeam.com","ritesh.dhobal@glassbeam.com","priyanka.roy@glassbeam.com","support@@glassbeam.com"]
	

	$scope.info.emailText = "";
	

	RulesService.getNonSsoUsers().then(function (response) {
		var addUser = function(result, item){
			result.push(item.email);
			return result;
		}
		$scope.info.emailList = response.data.Data.reduce(addUser, []) || [];
		
	}, function (response) {
		$scope.info.emailList = [];
		console.error("Unable to load templates");
		if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
			GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
			$scope.info.addRuleMsg = {
				type: 'failure',
				msg: GlobalService.getVal('rulesMsgs')['h2_down_msg']
			};
		}
		handleSessionTimeout(response);
	});

	//getPredefinedTagList
	$scope.fetchtaglist = function () {
		RulesService.getPredefinedTagList().then(function (response) {
			$scope.info.tagList = [];
			$scope.info.tagList = response.data.Data.map(function (t) { t.selected = false; return t }) || [];
			if (RulesService.getRuleMode() && RulesService.getRuleMode()['mode'] == 'edit' && RulesService.getRuleMode()['data']['tags'].length) {
				if ($scope.info.subscription_enabled) {
					$scope.info.tagList.forEach(function (i) {
						RulesService.getRuleMode()['data']['tags'].forEach(function (j) {
							if (i.tag_id == j.tag_id) {
								i.selected = true
							}
						})
					})
					$scope.updateTagSelectedCount();
				}

			}
		}, function (response) {
			$scope.info.tagList = [];
			console.error("Unable to load templates");
			if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
				$scope.info.addRuleMsg = {
					type: 'failure',
					msg: GlobalService.getVal('rulesMsgs')['h2_down_msg']
				};
			}
			handleSessionTimeout(response);
		});
	}

	

	// Function to populate data for edit rule
	$scope.populateEditRule = function() {
		$scope.info.tags = [];
		var editedRuleData =  RulesService.getRuleMode()['data'];
		$scope.info.pageLabel = "Edit Rule - " + editedRuleData['label_display'];
		$scope.info.ruleName = editedRuleData['rule_name'];
		$scope.info.initialLabel = editedRuleData['label'];
		$scope.info.initialScope = editedRuleData['scope'];
		$scope.info.initialMaxLimit = editedRuleData['max_limit'];
		$scope.info.initialSubscription_enabled = editedRuleData['subscription_enabled'] ;
		$scope.info.initialSubscriptionEmailList = editedRuleData['subscriptionEmailList'] ? editedRuleData['subscriptionEmailList'].slice(): [];
		if(parseInt(editedRuleData['email_template_id']) > 0){
			$scope.info.initialAction = 'mail';
		}
		else if(parseInt(editedRuleData['api_template_id']) > 0){
			$scope.info.initialAction = 'api';
		}
		else{
			$scope.info.initialAction = 'none';
		}
		$scope.info.initialLogic = editedRuleData['logic_display'];
		$scope.info.initialText = editedRuleData['text_display'];
		$scope.info.alertID = parseInt(editedRuleData['alert_id']);
		$scope.info.status = editedRuleData['status'];
		$scope.info.subscriberCount = editedRuleData['subscriberCount'];
		// set action, justification, recomendation
		$scope.info.initialApiTemplateId = editedRuleData['api_template_id'];
		$scope.info.initialEmailTemplateId = editedRuleData['email_template_id'];
		$scope.info.initialJustification = editedRuleData['alert_justification_display'];
		$scope.info.initialRecommendation = editedRuleData['recommendation_display'];
		$scope.info.initialtagList = editedRuleData['subscription_enabled'] ? (editedRuleData['tags'].length ? editedRuleData['tags'].reduce(function(acc,cur){ acc.push(cur.tag_id); return acc},[]) :[]) : []
		
		 
		if (RulesService.getRuleMode() && !!RulesService.getRuleMode()['modifiedData']) {
			$scope.info.label = RulesService.getRuleMode()['modifiedData']['label'];
			$scope.info.description = RulesService.getRuleMode()['modifiedData']['description'];
			$scope.info.category = parseInt(RulesService.getRuleMode()['modifiedData']['category_id']);
			$scope.info.author = RulesService.getRuleMode()['modifiedData']['author'];
			$scope.info.severity = parseInt(RulesService.getRuleMode()['modifiedData']['severity_id']);
			$scope.info.priority = parseInt(RulesService.getRuleMode()['modifiedData']['priority_id']);
			$scope.info.action = RulesService.getRuleMode()['modifiedData']['action'];
			$scope.info.emailTemplate = (RulesService.getRuleMode()['modifiedData']['email_template_id'] != 'select' && !!RulesService.getRuleMode()['modifiedData']['email_template_id']) ? parseInt(RulesService.getRuleMode()['modifiedData']['email_template_id']) : 'select';
			$scope.info.apiTemplate = (RulesService.getRuleMode()['modifiedData']['api_template_id'] != 'select' && !!RulesService.getRuleMode()['modifiedData']['api_template_id']) ? parseInt(RulesService.getRuleMode()['modifiedData']['api_template_id']) : 'select';
			$scope.info.kbLink = RulesService.getRuleMode()['modifiedData']['kb_link'];
			$scope.info.recommendation = RulesService.getRuleMode()['modifiedData']['recommendation_display'];
			$scope.info.alert_justification = RulesService.getRuleMode()['modifiedData']['alert_justification_display'];
			$scope.info.logic = RulesService.getRuleMode()['modifiedData']['logic_display'];
			$scope.info.text = RulesService.getRuleMode()['modifiedData']['text_display'];
			$scope.info.scope = RulesService.getRuleMode()['modifiedData']['scope'];
			$scope.info.maxLimit = RulesService.getRuleMode()['modifiedData']['max_limit'];
			$scope.info.maxLimitDisplay = parseInt(RulesService.getRuleMode()['modifiedData']['max_alerts_display_ui']?RulesService.getRuleMode()['modifiedData']['max_alerts_display_ui']:1);
			$scope.info.createdBy = RulesService.getRuleMode()['modifiedData']['created_by'];
			$scope.info.createdTs = RulesService.getRuleMode()['modifiedData']['created_ts'];
			$scope.info.action_id = RulesService.getRuleMode()['modifiedData']['action_id'];
			if($scope.showAlertApiFeature){
				$scope.fetchAPITemplate($scope.processAPItemplateForAddRule);
			}
			$scope.info.subscription_enabled = RulesService.getRuleMode()['modifiedData']['subscription_enabled'];
			$scope.info.subscriptionEmailList = RulesService.getRuleMode()['modifiedData']['subscriptionEmailList'];
			$scope.info.tagList = 	RulesService.getRuleMode()['modifiedData']['tagList'];
			$scope.updateTagSelectedCount();


			
			
		} else {
			$scope.info.label = editedRuleData['label'];
			$scope.info.description = editedRuleData['description'];
			$scope.info.category = parseInt(editedRuleData['category_id']);
			$scope.info.author = editedRuleData['author'];
			$scope.info.severity = parseInt(editedRuleData['severity_id']);
			$scope.info.priority = parseInt(editedRuleData['priority_id']);
			$scope.info.apiTemplate = 'select';
			$scope.info.emailTemplate = 'select';
			if(parseInt(RulesService.getRuleMode()['data']['email_template_id']) > 0){
				$scope.info.action =  'mail';
				$scope.info.emailTemplate = parseInt(RulesService.getRuleMode()['data']['email_template_id']) == 0 ? 'select' : parseInt(RulesService.getRuleMode()['data']['email_template_id']);
				$scope.info.subscription_enabled = editedRuleData['subscription_enabled'] ;
				
			}
			else if(parseInt(RulesService.getRuleMode()['data']['api_template_id']) > 0){
				$scope.info.action =  'api';
				$scope.info.apiTemplate = parseInt(RulesService.getRuleMode()['data']['api_template_id']);
			}
			else{
				$scope.info.action =  'none';
			}
			$scope.info.kbLink = editedRuleData['kb_link'];
			$scope.info.recommendation = editedRuleData['recommendation_display'];
			$scope.info.alert_justification = editedRuleData['alert_justification_display'];
			$scope.info.logic = editedRuleData['logic_display'];
			$scope.info.text = editedRuleData['text_display'];
			$scope.info.scope = editedRuleData['scope'];
			$scope.info.maxLimit = editedRuleData['max_limit'];
			$scope.info.maxLimitDisplay = parseInt(editedRuleData['max_alerts_display_ui']?editedRuleData['max_alerts_display_ui']:1);
			$scope.info.createdBy = editedRuleData['created_by'];
			$scope.info.createdTs = editedRuleData['created_ts'];
			if($scope.showAlertApiFeature){
				$scope.fetchAPITemplate($scope.processAPItemplateForEditRule);
			}
			$scope.setSavedMode();
			$scope.info.action_id = parseInt(RulesService.getRuleMode()['data']['action_id']);
			$scope.info.subscription_enabled = editedRuleData['subscription_enabled'] ;
			$scope.info.subscriptionEmailList = editedRuleData['subscriptionEmailList'] || [];
			if(editedRuleData['tags'] && $scope.info.clinsightFlag){
				$scope.fetchtaglist();
				
			}else{

			}
		}
	};

	// Function to populate data for add rule
	$scope.populateAddRule = function() {
		$scope.info.tags = [];
		$scope.info.pageLabel = "Add New Rule";
		$scope.info.initialLabel = null;
		$scope.info.initialScope = null;
		$scope.info.initialMaxLimit = null;
		$scope.info.initialAction = null;
		$scope.info.initialLogic = null;
		$scope.info.initialText = null;
		$scope.info.initialMaxLimitDisplay = 1;
		
		if (RulesService.getRuleMode() && !!RulesService.getRuleMode()['modifiedData']) {
			$scope.info.label = RulesService.getRuleMode()['modifiedData']['label'];
			$scope.info.description = RulesService.getRuleMode()['modifiedData']['description'];
			$scope.info.category = RulesService.getRuleMode()['modifiedData']['category_id'] != 'select' ? parseInt(RulesService.getRuleMode()['modifiedData']['category_id']) : RulesService.getRuleMode()['modifiedData']['category_id'];
			$scope.info.author = RulesService.getRuleMode()['modifiedData']['author'];
			$scope.info.severity = RulesService.getRuleMode()['modifiedData']['severity_id'] != 'select' ? parseInt(RulesService.getRuleMode()['modifiedData']['severity_id']) : RulesService.getRuleMode()['modifiedData']['severity_id'];
			$scope.info.priority = RulesService.getRuleMode()['modifiedData']['priority_id'] != 'select' ? parseInt(RulesService.getRuleMode()['modifiedData']['priority_id']) : RulesService.getRuleMode()['modifiedData']['priority_id'];
			$scope.info.action = RulesService.getRuleMode()['modifiedData']['action'];
			$scope.info.emailTemplate = (RulesService.getRuleMode()['modifiedData']['email_template_id'] != 'select' && !!RulesService.getRuleMode()['modifiedData']['email_template_id']) ? parseInt(RulesService.getRuleMode()['modifiedData']['email_template_id']) : 'select';
			$scope.info.apiTemplate = (RulesService.getRuleMode()['modifiedData']['api_template_id'] != 'select' && !!RulesService.getRuleMode()['modifiedData']['api_template_id']) ? parseInt(RulesService.getRuleMode()['modifiedData']['api_template_id']) : 'select';
			$scope.info.maxLimitDisplay = parseInt(RulesService.getRuleMode()['modifiedData']['maxLimitDisplay']?RulesService.getRuleMode()['modifiedData']['maxLimitDisplay']:0);
			$scope.info.kbLink = RulesService.getRuleMode()['modifiedData']['kb_link'];
			$scope.info.recommendation = RulesService.getRuleMode()['modifiedData']['recommendation_display'];
			$scope.info.alert_justification = RulesService.getRuleMode()['modifiedData']['alert_justification_display'];
			$scope.info.logic = RulesService.getRuleMode()['modifiedData']['logic_display'];
			delete $scope.info.initialLogic;
			$scope.info.text = RulesService.getRuleMode()['modifiedData']['text_display'];
			delete $scope.info.initialText;
			$scope.info.scope = RulesService.getRuleMode()['modifiedData']['scope'];
			$scope.info.maxLimit = RulesService.getRuleMode()['modifiedData']['max_limit'];
			$scope.info.maxLimitDisplay = parseInt(RulesService.getRuleMode()['modifiedData']['max_alerts_display_ui']?RulesService.getRuleMode()['modifiedData']['max_alerts_display_ui']:1);
			if($scope.showAlertApiFeature){
				$scope.fetchAPITemplate($scope.processAPItemplateForAddRule);
			}	
			$scope.info.subscription_enabled = RulesService.getRuleMode()['modifiedData']['subscription_enabled'];
			$scope.info.subscriptionEmailList = RulesService.getRuleMode()['modifiedData']['subscriptionEmailList'];
			$scope.info.tagList = 	RulesService.getRuleMode()['modifiedData']['tagList'];
			$scope.updateTagSelectedCount();
		} else {
			$scope.info.label = "";
			$scope.info.description = "";
			$scope.info.category = "select";
			$scope.info.author = "";
			$scope.info.severity = "select";
			$scope.info.priority = "select";
			$scope.info.action = 'none';
			$scope.info.emailTemplate = 'select';
			$scope.info.apiTemplate = 'select';
			$scope.info.kbLink = "";
			$scope.info.recommendation = "";
			$scope.info.alert_justification = "";
			$scope.info.maxLimitDisplay = 1;
			if (RulesService.getloadExplorerRules()) {
				$scope.info.logic = ExplorerService.getRuleText();
				RulesService.disableExplorerRules();
				$scope.setUnsavedMode();
				loadExplorerSection = true;
			} else {
				$scope.info.logic = "";
				$scope.setSavedMode();
			}
			delete $scope.info.initialLogic;
			$scope.info.text = "";
			delete $scope.info.initialText;
			$scope.info.scope = $scope.info.scopes[0];
			$scope.info.maxLimit = $scope.info.maxLimits[0];
			$scope.setSavedMode();	
			if($scope.showAlertApiFeature){		
				$scope.fetchAPITemplate($scope.processAPItemplateForAddRule);
			}
			$scope.info.subscription_enabled = false;
			$scope.info.subscriptionEmailList = [];
			$scope.info.clinsightFlag && $scope.fetchtaglist();
		}
	};

	// Function to get section data in case of edit rule
	$scope.getSectionData = function(tables) {
		var tableNames = tables.split(/\s*\,\s*/g);
		$scope.info.sectionsLoaded = 0;
		for (var i = 0; i < tableNames.length; i++) {
			var section = $filter('filter')($scope.info.attributes, {table_name: tableNames[i]}, true)[0];
			if (!section.hasData) {
				$scope.info.sectionsLoading = true;
				$scope.getSectionColumns(section, tableNames.length);
			} else {
				$scope.info.sectionsLoaded++;
				if ($scope.info.sectionsLoaded == tableNames.length) {
					$scope.info.sectionsLoading = false;
				}
			}
		}
	};

	//Get sections based on searched attributes
	$scope.checkSearchText = function() {
		if($scope.addRuleAttrSearch.length<$scope.attributeSearchMinStrLen){
			return true;
		}else {
			return false;
		}
	};
	$scope.clearSearchText = function() {
		$scope.addRuleAttrSearch = "";
		$scope.addRuleAttrSearchChange();
	};
	$scope.addRuleAttrSearchChange = function() {
		if($scope.addRuleAttrSearch.length<$scope.attributeSearchMinStrLen){
			$scope.info.attributes = [];
			$scope.info.attributes = angular.copy(RulesService.getAttributes());
			$scope.NoAttrSearch = false;
			$scope.ifSearched = false;
		}
	};
	$scope.searchAttr = function() {
		if($scope.addRuleAttrSearch.length<$scope.attributeSearchMinStrLen){
			return;
		}
		var specialChar = /[!@#$%^&*()_+=\[\]{};':"\\|,.<>\/?]/;
		if(specialChar.test($scope.addRuleAttrSearch)){
			ModalService.alertBox({msg: GlobalService.getVal("attrSearchSpecialCharecterMsg")});
			return;
		}
		var attr = $scope.addRuleAttrSearch;
		$scope.info.sectionsLoading = true;
		//$scope.info.attributes = [];
		$scope.info.attributes = angular.copy(RulesService.getAttributes());
		RulesService.getSectionsFromAttrAPI(attr).then(function(response) {			
			for(i=0;i<$scope.info.attributes.length;i++){
				$scope.info.attributes[i].foundAttr = [];
				$scope.info.attributes[i].expanded = false;
			}
			var data = response.data.Data;
			for(var key in data){
				for(j=0;j<$scope.info.attributes.length;j++){
					if(key == $scope.info.attributes[j].namespace_actual){
						$scope.info.attributes[j].foundAttr = data[key];
						$scope.info.attributes[j].columns = [];
						$scope.info.attributes[j].hasData = true;
						for(var attributeDataLen=0;attributeDataLen<data[key].length;data[key]++){
							var column = {}, attributeDataObj = data[key][attributeDataLen];
							column.column_name = attributeDataObj['column_name'];
							column.attribute_label = attributeDataObj['label'];
							column.solr_facet = attributeDataObj['namespace_actual'];
							column.type = attributeDataObj['dataType'];
							$scope.info.attributes[j].columns.push(column);
						}
					}
				}
			}
			for(i=0;i<$scope.info.attributes.length;i++){
				if($scope.info.attributes[i].foundAttr.length == 0){
					$scope.info.attributes.splice(i,1);
					i--;
				}
			}
			$scope.ifSearched = true;
			if($scope.info.attributes.length==0){
				$scope.NoAttrSearch = true;
			}else {
				$scope.NoAttrSearch = false;
			}
			$scope.info.sectionsLoading = false;			
			
			$scope.setSectionsColumnLabelMap();
			UserTrackingService.standard_user_tracking($scope.info.application, 'Rule', 'Attribute Search', $scope.addRuleAttrSearch).then(function(response) {}, handleSessionTimeout);
		}, function(response) {
			$scope.info.attributes = [];
			handleSessionTimeout(response);
		});
	};

	// Function to get section columns without expanding
	$scope.getSectionColumns = function(section, total_sections) {
		section.loading = true;
		RulesService.getSectionColumns(section.table_name).then(function(response) {
			section.loading = false;
			$scope.info.sectionsLoaded++;
			if ($scope.info.sectionsLoaded == total_sections) {
				$scope.info.sectionsLoading = false;
			}
			section.columns = [];
			for (var i = 0; i < response.data.Data.length; i++) {
				var column = {};
				column.column_name = Object.keys(response.data.Data[i])[0];
				column.attribute_label = response.data.Data[i][column.column_name].attribute_label;
				column.solr_facet = response.data.Data[i][column.column_name].solr_facet;
				column.type = response.data.Data[i][column.column_name].type;
				column.size = response.data.Data[i][column.column_name].size;
				section.columns.push(column);
				if (column.solr_facet == "G") {
					section.hasGlobal = true;
				} else {
					section.hasLocal = true;
				}
			}
			section.hasData = true;
			//do not update setvice, if its from inline filter
			if(!$scope.addRuleAttrSearch){
				RulesService.setAttributes($scope.info.attributes);
			}
			$scope.setSectionsColumnLabelMap();
		}, function(response) {
			$scope.info.sectionsLoaded++;
			section.loading = false;
			if ($scope.info.sectionsLoaded == total_sections) {
				$scope.info.sectionsLoading = false;
			}
			if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
				$scope.info.addRuleMsg = {
					type : 'failure',
					msg : GlobalService.getVal('rulesMsgs')['h2_down_msg']
				};
			}
			handleSessionTimeout(response);
		});
	};

	// Function to set rule in saved mode
	$scope.setSavedMode = function() {
		RulesService.setRuleSavedStatus(false);
	};

	// Function to set rule in unsaved mode
	$scope.setUnsavedMode = function() {
		RulesService.setRuleSavedStatus(true);
	};

	// Function to check if action is changed
	$scope.actionChanged = function() {
		if ($scope.info.action == 'mail' && !!RulesService.getRuleSavedStatus()) {
			return;
		}
		$scope.setUnsavedMode();
	};

	$scope.actionChange = function(){
		if($scope.info.action != 'mail' && $scope.info.selectedTagsCount > 0){
			ModalService.alertBox({
				msg : 'Selected tags will be disassociated and auto subscription will be disabled.'
			});
		}
		
	}

	// Function to go to the Add Category page
	$scope.goToAddCategory = function() {
		$scope.modifyRuleData();
		$scope.$parent.changeCurrentPage('add_category');
	};

	// Function to go to the Manage Templates page
	$scope.goToManageTemplates = function() {
		$scope.modifyRuleData();
		$scope.$parent.changeCurrentPage('manage_template');
	};

	//Manage api template
	$scope.goToManageAPITemplates = function() {
		var sectionAttrbiutePair = RulesService.getSectionsAndAttributePair($scope.info.logic);
		if(sectionAttrbiutePair){
			RulesService.setSectionsColumnLabelForManageAPI(sectionAttrbiutePair);
		}
		$scope.modifyRuleData();
		$scope.$parent.changeCurrentPage('manage_API_template');

	};


	// Function to save modify rule data in service//
	$scope.modifyRuleData = function() {
		var modifiedData = {
			label : $scope.info.label,
			description : $scope.info.description,
			category_id : $scope.info.category,
			author : $scope.info.author,
			severity_id : $scope.info.severity,
			priority_id : $scope.info.priority,
			email_template_id : $scope.info.action == 'mail' ? $scope.info.emailTemplate : '',
			action : $scope.info.action,
			kb_link : $scope.info.kbLink,
			recommendation_display : $scope.info.recommendation,
			alert_justification_display : $scope.info.alert_justification,
			logic_display : $scope.info.logic,
			text_display : $scope.info.text,
			scope : $scope.info.scope,
			max_limit : $scope.info.maxLimit,
			max_alerts_display_ui : $scope.info.maxLimitDisplay,
			created_by : $scope.info.createdBy,
			created_ts : $scope.info.createdTs,
			api_template_id : $scope.info.apiTemplate,
			action_id : $scope.info.action_id,
			subscription_enabled : $scope.info.subscription_enabled,
			subscriptionEmailList : $scope.info.subscriptionEmailList,
			tagList : $scope.info.tagList
		};
		RulesService.modifyRuleData(modifiedData);
	};

	var loadExplorerSection = false;

	//Form field initialization
	if (RulesService.getRuleMode() && RulesService.getRuleMode()['mode'] == 'edit') {
		$scope.populateEditRule();
	} else {
		$scope.populateAddRule();
	}

	// Execute this when landed from explorer/apps to rules
	$scope.$on("loadExplorerRulesEvent", function(event, args) {
		loadExplorerSection = true;
		$scope.populateAddRule();
		RulesService.disableExplorerRules();
		if (RulesService.getAttributesLoaded()) {
			$scope.info.attributes = RulesService.getAttributes();
			var section = $filter('filter')($scope.info.attributes, {name: ExplorerService.getRuleSection()}, true)[0];

			$timeout(function() {
				section.expanded = true;
				var container = document.getElementById('treeContainer');
				var rowToScrollTo = document.getElementById('section-' + section.table_name);
				container.scrollTop = rowToScrollTo.offsetTop;
				$scope.expandSection(section);
				section.highlighted = true;
				$timeout(function() {
					section.highlighted = false;
				}, 5000);
			}, 50);

			loadExplorerSection = false;
		}
	});

	// Function to clear all messages
	$scope.clearMessage = function() {
		if (!$scope.info.categoriesLoading) {
			$scope.info.addRuleMsg = {};
		}
	};

	// Function to insert/edit link in the recommendation field
	$scope.insertEditLink = function() {
		var selection = $window.getSelection();
		if (selection.anchorNode == null) {
			ModalService.alertBox({
				msg : GlobalService.getVal('rulesMsgs')['add_rule_select_recommendation_text']
			});
			return;
		}
		var recommendationText = selection.anchorNode.parentNode.offsetParent.innerText;
		if (!/^[a-z0-9\s\n]+$/i.test(recommendationText)) {
			ModalService.alertBox({
				msg : 'Only alphanumeric characters allowed for recommendation text'
			});
			return;
		}
		var parentElementClass = selection.anchorNode.parentNode.offsetParent.className;
		if (parentElementClass.indexOf("gb-rules-recommendation") != -1) {
			if ((selection.extentOffset != selection.baseOffset) || (selection.anchorOffset != selection.focusOffset)) {
				var wholeText = selection.anchorNode.wholeText;
				var focusNodeTag = selection.focusNode.parentElement.tagName;
				if (selection.hasOwnProperty('extentOffset') && selection.hasOwnProperty('baseOffset')) {
					var startPos = selection.extentOffset > selection.baseOffset ? selection.baseOffset : selection.extentOffset;
					var endPos = selection.extentOffset > selection.baseOffset ? selection.extentOffset : selection.baseOffset;
				} else {
					var startPos = selection.anchorOffset > selection.focusOffset ? selection.focusOffset : selection.anchorOffset;
					var endPos = selection.anchorOffset > selection.focusOffset ? selection.anchorOffset : selection.focusOffset;
				}
				var text = wholeText.substring(startPos, endPos);
				if (selection.anchorNode.parentElement.tagName == "A") {
					// For editing link
					$scope.info.pageTitle = "Edit Link";
					$scope.info.pageHeading = "Edit link for <strong>" + selection.anchorNode.parentElement.textContent + "</strong>";
					$scope.info.pageLink = selection.anchorNode.parentElement.title;
					$scope.info.htmlElement = selection.anchorNode.parentElement;
					$scope.modal = ModalService.openModal("partials/rules-and-alerts/insert_edit_link.html", $scope, false, 'static');
				} else {
					if (focusNodeTag == "A") {
						ModalService.alertBox({
							msg : 'Something wrong in selection'
						});
						return;
					}
					// For adding link
					$scope.info.pageTitle = "Insert Link";
					$scope.info.pageHeading = "Insert link for <strong>" + text + "</strong>";
					$scope.info.innerHtml = selection.anchorNode.parentElement.innerHTML;
					$scope.info.startPos = startPos;
					$scope.info.endPos = endPos;
					$scope.info.wholeText = wholeText;
					$scope.info.htmlElement = selection.anchorNode.parentElement;
					$scope.info.selectedText = text;
					$scope.info.pageLink = "http://";
					$scope.modal = ModalService.openModal("partials/rules-and-alerts/insert_edit_link.html", $scope, false, 'static');
				}
			} else if (/firefox/i.test($window.navigator.userAgent) && selection.anchorNode.previousElementSibling.tagName == "A") {
				$scope.info.pageTitle = "Edit Link";
				$scope.info.pageHeading = "Edit link for <strong>" + selection.anchorNode.previousElementSibling.textContent + "</strong>";
				$scope.info.pageLink = selection.anchorNode.previousElementSibling.title;
				$scope.info.htmlElement = selection.anchorNode.previousElementSibling;
				$scope.modal = ModalService.openModal("partials/rules-and-alerts/insert_edit_link.html", $scope, false, 'static');
			} else {
				ModalService.alertBox({
					msg : GlobalService.getVal('rulesMsgs')['add_rule_select_recommendation_text']
				});
				return;
			}
		} else {
			ModalService.alertBox({
				msg : GlobalService.getVal('rulesMsgs')['add_rule_select_recommendation_text']
			});
			return;
		}
	};

	// Function to check if a link entered by user for recommendation field is valid or not
	$scope.checkLink = function(mode) {
		if (/((([A-Za-z]{3,9}:(?:\/\/)?)(?:[-;:&=\+\$,\w]+@)?[A-Za-z0-9.-]+|(?:www.|[-;:&=\+\$,\w]+@)[A-Za-z0-9.-]+)((?:\/[\+~%\/.\w-_]*)?\??(?:[-\+=&;%@.\w_]*)#?(?:[\w]*))?)/.test($scope.info.pageLink)) {
			$scope.modal.close();
			if (mode == 'insert') {
				$scope.insertLinkConfirm();
			} else {
				$scope.editLinkConfirm();
			}
		} else {
			$scope.msg = "Please enter a valid link";
			$scope.modal1 = ModalService.openModal('partials/alert_box_extra.html', $scope, false, 'static');
			$scope.info.fadeModal = true;
			return;
		}
	};

	// Function to confirm inserting recommendation link
	$scope.insertLinkConfirm = function() {
		var innerHtml = $scope.info.innerHtml;
		var wholeTextPos = innerHtml.indexOf($scope.info.wholeText);
		$scope.info.htmlElement.innerHTML = innerHtml.substring(0, ($scope.info.startPos + wholeTextPos)) + "<a title='" + $scope.info.pageLink + "' dest='" + $scope.info.pageLink + "' onclick='window.open(this.title, \"_blank\");'>" + $scope.info.selectedText + "</a>" + innerHtml.substr($scope.info.endPos + wholeTextPos);
		$scope.setUnsavedMode();
	};

	// Function to confirm editing recommendation link
	$scope.editLinkConfirm = function() {
		$scope.info.htmlElement.dest = $scope.info.pageLink;
		$scope.info.htmlElement.title = $scope.info.pageLink;
		$scope.setUnsavedMode();
	};

	// Function to set the sections column label map for converting logic and text part
	$scope.setSectionsColumnLabelMap = function() {
		var attributesWithData = $filter('filter')($scope.info.attributes, {
			hasData : true
		});
		for (var i in attributesWithData) {
			if (!!attributesWithData[i].label && !!attributesWithData[i].table_name) {
				for (var j in attributesWithData[i].columns) {
					if (!!attributesWithData[i].columns[j].attribute_label) {
						var tmpKey = [attributesWithData[i].label, '.', attributesWithData[i].columns[j].attribute_label].join('');
						var tmpVal = [[attributesWithData[i].table_name, '.', attributesWithData[i].columns[j].column_name].join(''), attributesWithData[i].columns[j].column_name, attributesWithData[i].columns[j].type, ["(", attributesWithData[i].table_name, GlobalService.getVal('rulesSecColDelimiter'), attributesWithData[i].columns[j].column_name, GlobalService.getVal('rulesSecColDelimiter'), attributesWithData[i].columns[j].type, ")"].join(''), attributesWithData[i].table_name, attributesWithData[i].columns[j].solr_facet];
						$scope.sectionsColumnLabelMap[tmpKey] = tmpVal;
					}
				}
			}
		}
		//set section column map in a service, so that we can use it for validation
		RulesService.setSectionsColumnLabelMap($scope.sectionsColumnLabelMap);
	};

	$scope.$watch('info.categoriesLoading', function() {
		if ($scope.info.categoriesLoading == false) {
			if (!!$scope.info.attributes) {
				if (loadExplorerSection) {
					var section = $filter('filter')($scope.info.attributes, {name: ExplorerService.getRuleSection()}, true)[0];
					$timeout(function() {
						section.expanded = true;
						$scope.expandSection(section);
						section.highlighted = true;
						$timeout(function() {
							section.highlighted = false;
						}, 5000);
						var container = document.getElementById('treeContainer');
						var rowToScrollTo = document.getElementById('section-' + section.table_name);
						container.scrollTop = rowToScrollTo.offsetTop;
					}, 50);
					if ($scope.info.sectionsLoading == false) {
						loadExplorerSection = false;
					}
				}
			}

		}
	});

	// Stores the list of attributes/sections
	if (!RulesService.getAttributesLoaded()) {
		// This block is for getting sections data for first time
		RulesService.getSectionsAPI().then(function(response) {
			$scope.info.attributes = response.data.Data;
			if (loadExplorerSection) {
				var section = $filter('filter')($scope.info.attributes, {name: ExplorerService.getRuleSection()}, true)[0];
				$timeout(function() {
					section.expanded = true;
					$scope.expandSection(section);
					section.highlighted = true;
					$timeout(function() {
						section.highlighted = false;
					}, 5000);
					var container = document.getElementById('treeContainer');
					var rowToScrollTo = document.getElementById('section-' + section.table_name);
					container.scrollTop = rowToScrollTo.offsetTop;
				}, 50);
				if ($scope.info.categoriesLoading == false) {
					loadExplorerSection = false;
				}
			}
			$scope.info.sectionsLoading = false;
			RulesService.setAttributes($scope.info.attributes);
			RulesService.setAttributesLoaded(true);
			$scope.setSectionsColumnLabelMap();
			if (RulesService.getRuleMode() && RulesService.getRuleMode()['mode'] == 'edit' && !!RulesService.getRuleMode()['data']['colt']) {
				$scope.getSectionData(RulesService.getRuleMode()['data']['colt']);
			}
		}, function(response) {
			$scope.info.sectionsLoading = false;
			$scope.info.attributes = [];
			if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
				$scope.info.addRuleMsg = {
					type : 'failure',
					msg : GlobalService.getVal('rulesMsgs')['h2_down_msg']
				};
			}
			handleSessionTimeout(response);
		});
	}

	// Stores the list of categories
	RulesService.getCategories().then(function(response) {
		$scope.info.categories = response.data.Data;
		if (RulesService.getAttributesLoaded()) {
			// Load sections data if already fetched
			$scope.info.attributes = RulesService.getAttributes();
			$scope.info.sectionsLoading = false;
			$scope.setSectionsColumnLabelMap();
			if (RulesService.getRuleMode() && RulesService.getRuleMode()['mode'] == 'edit' && !!RulesService.getRuleMode()['data']['colt']) {
				$scope.getSectionData(RulesService.getRuleMode()['data']['colt']);
			}
		}
		$scope.info.categoriesLoading = false;
	}, function(response) {
		$scope.info.categories = [];
		if (RulesService.getAttributesLoaded()) {
			// Load sections data if already fetched
			$scope.info.attributes = RulesService.getAttributes();
			$scope.info.sectionsLoading = false;
			$scope.setSectionsColumnLabelMap();
			if (RulesService.getRuleMode() && RulesService.getRuleMode()['mode'] == 'edit' && !!RulesService.getRuleMode()['data']['colt']) {
				$scope.getSectionData(RulesService.getRuleMode()['data']['colt']);
			}
		}
		$scope.info.categoriesLoading = false;
		if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
			GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
			$scope.info.addRuleMsg = {
				type : 'failure',
				msg : GlobalService.getVal('rulesMsgs')['h2_down_msg']
			};
		}
		console.error("Unable to load categories");
		handleSessionTimeout(response);
	});

	//get rule version	
	$scope.getRulesVersion = function(){
		if(($scope.info.pageLabel != "Add New Rule") && RulesService.getRuleMode()['data']['label_display']){		
			//get changes list
			RulesService.getRuleDrillDetails(RulesService.getRuleMode()['data']['rule_name']).then(function (response) {
				var responseData = response.data.Data;
				//filter history type_of_change != "State change"
				responseDataFiltered = responseData.filter(function(item){
					if(item.type_of_change != "Created"  && (item.type_of_change === "State change" || item.changes_map.length == 0)){
						return false;
					}
					return true;
				})
				$scope.info.ruleCurrentVersion = responseDataFiltered.length;		
			}, function (response) {
				$scope.info.ruleCurrentVersion = 0;
			});
		}
	}
	$scope.getRulesVersion();

	// Stores the list of templates
	RulesService.getTemplates().then(function(response) {
		$scope.info.templates = response.data.Data;
	}, function(response) {	
		$scope.info.templates = [];
		console.error("Unable to load templates");
		if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
			GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
			$scope.info.addRuleMsg = {
				type : 'failure',
				msg : GlobalService.getVal('rulesMsgs')['h2_down_msg']
			};
		}
		handleSessionTimeout(response);
	});

	// Stores the list of severities
	if (!Array.isArray(RulesService.getSeveritiesList())) {
		// Get from API if not loaded
		RulesService.getSeverities().then(function(response) {
			$scope.info.severities = response.data.Data;
			RulesService.setSeveritiesList($scope.info.severities);
		}, function(response) {
			$scope.info.severities = [];
			if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
				$scope.info.addRuleMsg = {
					type : 'failure',
					msg : GlobalService.getVal('rulesMsgs')['h2_down_msg']
				};
			}
			handleSessionTimeout(response);
		});
	} else {
		// Get stored value if loaded
		$scope.info.severities = RulesService.getSeveritiesList();
	}

	// Stores the list of priorities
	if (!Array.isArray(RulesService.getPrioritiesList())) {
		// Get from API if not loaded
		RulesService.getPriorities().then(function(response) {
			$scope.info.priorities = response.data.Data;
			RulesService.setPrioritiesList($scope.info.priorities);
		}, function(response) {
			$scope.info.priorities = [];
			if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
				$scope.info.addRuleMsg = {
					type : 'failure',
					msg : GlobalService.getVal('rulesMsgs')['h2_down_msg']
				};
			}
			handleSessionTimeout(response);
		});
	} else {
		// Get stored value if loaded
		$scope.info.priorities = RulesService.getPrioritiesList();
	}

	$scope.loadURL = function(){
		angular.element('.tooltip-html').load('./../../help/Addviews.html');
	}

	// Function to be called after submitting a rule
	$scope.submitRule = function(scope) {
		if(RulesService.getRuleType() != 'supported'){		 	
			if (!$scope.validateUnsupportedElements()) {
				return;
			}
			$scope.editUnsupportedRule();
			return false;
		} 
		// Check if each necessary element has some value
	        if(scope == "parent")	
			if (!$scope.validateElements()) {
				return false;
			}
		if(RulesService.getRuleType() == 'supported'){
			//check logic containt lowercase COUNT or REGEX ...
			var stashUmatch = $scope.info.logic.search(/(count\()|(count \()|(regex\()|(regex \()|(upper\()|(upper \()|(lower\()|(lower \()|(converttoint\()|(converttoint \()|(converttostring\()|(converttostring\()/g);
			if(stashUmatch != -1) {
				msg = GlobalService.getRulesLogicAlerts('rule_logic_error_UpperCaseCountRegexName');
				displayLogicAlert(msg, stashUmatch, stashUmatch + 5);
				return;
			}
		}
		// Check for the mapping of section-column pairs used in Logic
		var logicPairs = $scope.validateLogicMap();
		if (!Array.isArray(logicPairs))
			return;

		$scope.info.sectionsColumnLabeListOfLogic = logicPairs;

		// Check for the mapping of section-column pairs used in Label
		var labelPairs = $scope.deepValidation($scope.info.label,'rule_label_invalid_attr','rule_label_local_attr');
		if (!Array.isArray(labelPairs))
			return;

		//check the section column pair is also present in logic or not
		var listDiff = UtilService.compareFirstWithSecondList($scope.info.sectionsColumnLabeListOfLogic, labelPairs);
		

		// Check for the mapping of section-column pairs used in Text
		var textPairs = $scope.deepValidation($scope.info.text,'rule_text_invalid_attr','rule_text_local_attr');
		if (!Array.isArray(textPairs))
			return;
		
		//check the section column pair is also present in logic or not
		listDiff = listDiff.concat(UtilService.compareFirstWithSecondList($scope.info.sectionsColumnLabeListOfLogic, textPairs));
		
		// Check for the mapping of section-column pairs used in Text
		var apiTemplatePairs = $scope.validateAPITemplateMap();
		if (!Array.isArray(apiTemplatePairs))
			return;

			
		// Check for the mapping of section-column pairs used in Alert Justification
		var justificationPairs = $scope.deepValidation($scope.info.alert_justification,'rule_justification_invalid_attr', 'rule_justification_local_attr');
		if (!Array.isArray(justificationPairs))
			return;
			
		//check the section column pair is also present in logic or not
		listDiff = listDiff.concat(UtilService.compareFirstWithSecondList($scope.info.sectionsColumnLabeListOfLogic, justificationPairs));
		
		// Check for the mapping of section-column pairs used in Recommendation
		var recommendationPairs = $scope.deepValidation($scope.info.recommendation,'rule_recommendation_invalid_attr', 'rule_recommendation_local_attr');
		if (!Array.isArray(recommendationPairs))
			return;
			
		//check the section column pair is also present in logic or not
		listDiff = listDiff.concat(UtilService.compareFirstWithSecondList($scope.info.sectionsColumnLabeListOfLogic, recommendationPairs));

		// Check for the grammar of logic
		var logicGrammar = $scope.validateLogicGrammar();
		if (!logicGrammar) {
			// Refresh the section column label map here
			for (var i = 0; i < $scope.info.convertedAttributes.length; i++) {
				$scope.changeColumnType($scope.info.convertedAttributes[i].value, $scope.info.convertedAttributes[i].type);
			}

			$scope.info.convertedAttributes = [];
			return;
		}

		// Set unique section-column-type pairs
		$scope.createColumnType(logicPairs, textPairs, labelPairs, justificationPairs, recommendationPairs);

		// Check if multiple tables are used in rule
		if (!$scope.checkMultipleTable()) {
			return;
		}

		var logicToConvert = angular.copy($scope.info.logic);
		var counter = 1;

		$scope.info.convertedRegexes = [];

		// Converts REGEX functions used in rule logic
		angular.forEach($scope.info.regexMatches, function(match) {
			var flagCounter = "flag" + counter;
			logicToConvert = logicToConvert.replace(match.actualLogic, flagCounter);

			var regex = new RegExp("CONVERTTOINT\\\(\\\s*" + flagCounter + "\\\s*\\\)\\\s*(\\\<|\\\>|\\\=|\\\>\\\=|\\\<\\\=)\\\s*\\\d+(\\\.\\\d+)?");

			if (regex.test(logicToConvert)) {
				var regMatch = logicToConvert.match(regex)[0];
				var condition = regMatch.match(/(\<|\>|\=|\>\=|\<\=)\s*\d+(\.\d+)?$/)[0].replace(/(^|\s)(\d+)(\s|$|\))/g, "$1$2L$3").replace(/(^|\s)(\d+\.\d+)(\s|$)/g, "$1$2D$3");

				logicToConvert = logicToConvert.replace(regMatch, flagCounter);
				match.returnType = "Long";
				match.condition = condition;
			} else {
				match.returnType = "String";
			}
			match.flagVariable = flagCounter;
			match.extractVariable = "extract" + counter;
			match.regexVariable = "reg" + counter;

			counter++;
			delete match.actualLogic;
			$scope.info.convertedRegexes.push(match);
		});
		// Converts COUNT functions used in rule logic
		logicToConvert = $scope.convertAggregateFunction(logicToConvert);
		//
		// Convert the logic to scala
		$scope.info.convertedLogic = $scope.convertScalaCondition(logicToConvert);
		
		// Set the value of hidden logic
		$scope.setHiddenLogic(logicPairs);

		// Set the value of hidden text
		$scope.setHiddenText(textPairs);

		// Set the value of hidden label
		$scope.setHiddenLabel(labelPairs);

		// Set the value of hidden Justification
		$scope.setHiddenJustification(justificationPairs);

		// Set the value of hidden Recommendation
		$scope.setHiddenRecommendation(recommendationPairs);
		
		$scope.info.ruletype = RulesService.getRuleType();
		
		//check the section column pair is also present in logic or not
		if(listDiff.length > 0){
			UtilService.showModal(listDiff.join(',') + GlobalService.getVal('ruleValidationSameSectionAsLogic'));
			return;
		}

		// Call add/edit API accordingly
		$scope.addEditRule();
	};
	$scope.convertAggregateFunction = function(logicToConvert){
		$scope.info.convertedCounts = [];
		$scope.info.convertedAggregates = {};

		$scope.info.aggregateFunctions.map(function(aggrFunc){
			var funcName = aggrFunc.label;
			var countStringToSearch = funcName+"(";
			$scope.info.countMatches = getCountMatches(logicToConvert, countStringToSearch);
			var counter = 1;
			/**
			 * The below line generates regex for each aggregate function in the loop
			 * An example
			 * COUNT( LOWER({EvtApplication.Hospital Name}) LIKE '%hamilton medical center%' )  ==> "LOWER({EvtApplication.Hospital Name}) LIKE '%hamilton medical center%'"
			 * Actual regex = /^COUNT\S*\(\s*|\s*\)\s*$/gi
			 * The output from regex ie whatever is inside count function is sent to convert to scala syntax
			 */
			var funcRegEx = new RegExp("^"+funcName+"\\s*\\(\\s*|\\s*\\)\\s*$", "gi");//var funcRegEx = new RegExp("^"+funcName+"\(|\)$", "gi");

			angular.forEach($scope.info.countMatches, function(match) {
				var countCounter = funcName.toLocaleLowerCase() + counter;
				if(!$scope.info.convertedAggregates[funcName]){
					$scope.info.convertedAggregates[funcName] = [];
				}
				logicToConvert = logicToConvert.replace(match, countCounter);
				var exprInMatch = match.replace(funcRegEx, "").replace(/^\s+|\s+$/g, "");
				// like sumVariable : sum1
				var functionVariableName = funcName.toLocaleLowerCase()+"Variable";
				var eachAggrigateFunctionDetails = {
					"expression" : $scope.convertScalaCondition(exprInMatch).replace(/\'/g, "\"").replace(/^\s+|\s+$/g, '').replace(/[\"]+/g, "\"")
				};
				eachAggrigateFunctionDetails[functionVariableName] = countCounter;
				//if fun is AVG then add two more variables
				if(funcName === 'AVG'){
					eachAggrigateFunctionDetails["avgSumVariable"] = "avgSum" + counter;
					eachAggrigateFunctionDetails["avgTotalCountVariable"] = "avgCount" + counter;
				}

				$scope.info.convertedAggregates[funcName].push(eachAggrigateFunctionDetails);
				counter++;
			});
		});
		return logicToConvert;
	}
	$scope.processAggregateFunctionForPayload = function(){
		var result = {};
		if($scope.info.convertedAggregates){
			var funcNames = Object.keys($scope.info.convertedAggregates);
			funcNames.map(function(func){
				var functionNameInLowerCase = func.toLowerCase();
				//make first character name capital letter
				var firstCharacterInUpperCase = functionNameInLowerCase[0].toUpperCase() + functionNameInLowerCase.substr(1) + "s";
				var convertedFunctionListKey = "converted"+ firstCharacterInUpperCase;
				if(!result[convertedFunctionListKey]) {
					result[convertedFunctionListKey] = [];
				}
				result[convertedFunctionListKey] = $scope.info.convertedAggregates[func];
			});
		}
		return result;
	}
	$scope.getOperatorType = function(oprt){
		var functionType = "";
		$scope.info.operators.map(function(aggrFunc){
			if(aggrFunc.label === oprt){
				functionType = aggrFunc.subtype;
			}
		});
		return functionType;
	}
	$scope.isAggregateFunction = function(func){
		var found = false;
		$scope.info.aggregateFunctions.map(function(aggrFunc){
			if(aggrFunc.label != 'COUNT' && aggrFunc.label === func){
				found = true;
			}
		});
		return found;
	}
	// Function to render text in html format
	$scope.renderHtml = function(html) {
		return $sce.trustAsHtml(html);
	};

	// Function to call test rule for a draft
	$scope.testRule = function() {
		$scope.modifyRuleData();
		$scope.setPageListforTesting();
		var selectedRules = [];
		selectedRules.push($scope.info.testRuleData);
		RulesService.setTestRuleData(selectedRules);
		RulesTestWithLogvault.setRulesSelected(selectedRules);
		$scope.$parent.changeCurrentPage('test_rule_history');
	};

	// Sets page list for Test Rule Page
	$scope.setPageListforTesting = function() {
		var pageList = GlobalService.getVal('rulesPages');
		pageList.test_rule_history = [{
			name : 'rules_list',
			label : 'Rules List'
		}, {
			name : 'add_rule',
			label : 'Add/Edit Rule'
		}, {
			name : 'test_rule_history',
			label : 'Test Rule History'
		}];
		GlobalService.setVal('rulesPages', pageList);
	};

	// Function to add new rule
	$scope.addNewRule = function() {
		RulesService.setRuleMode('new');
		$scope.info.ruleAdded = false;
		$scope.info.addRuleMsg = {};
		$scope.populateAddRule();
	};

	// Function to check if multiple tables are present and scope selected is not 'Table'
	$scope.checkMultipleTable = function() {
		if ($scope.info.tables.length > 1) {
			if ($scope.info.scope == 'Table') {
				ModalService.alertBox({
					msg : GlobalService.getVal('rulesMsgs')['add_rule_multiple_tables_unsupported']
				});
				return;
			}
		}
		return true;
	};
	//edit for unsupported rules
	$scope.editUnsupportedRule = function () {
		// Check for the mapping of section-column pairs used in Label
		var labelPairs = $scope.deepValidation($scope.info.label, 'rule_label_invalid_attr', 'rule_label_local_attr');
		if (!Array.isArray(labelPairs))
			return;

		// // Check for the mapping of section-column pairs used in Label
		// var labelPairs = $scope.validateLabelMap();
		// if (!Array.isArray(labelPairs))
		// 	return;

		// Check for the mapping of section-column pairs used in Alert Justification
		var justificationPairs = $scope.deepValidation($scope.info.alert_justification, 'rule_justification_invalid_attr', 'rule_justification_local_attr');
		if (!Array.isArray(justificationPairs))
			return;

		// Check for the mapping of section-column pairs used in Recommendation
		var recommendationPairs = $scope.deepValidation($scope.info.recommendation, 'rule_recommendation_invalid_attr', 'rule_recommendation_local_attr');
		if (!Array.isArray(recommendationPairs))
			return;

		// Set the value of hidden label
		$scope.setHiddenLabel(labelPairs);

		// Set the value of hidden Justification
		$scope.setHiddenJustification(justificationPairs);

		// Set the value of hidden Recommendation
		$scope.setHiddenRecommendation(recommendationPairs);
		$scope.info.ruletype = RulesService.getRuleType();

		$scope.info.categoriesLoading = true;
		$scope.unsdataobj = {};
		if($scope.info.action == 'api' && $scope.info.apiTemplate && ($scope.info.apiTemplate != 'select')){
			unsdataobj = {
				"update.apiTemplateId": $scope.info.apiTemplate
			}
		}else{
			unsdataobj = {
				"update.apiTemplateId": 0
			}
		}
		var data = {
				label_actual : $scope.info.hiddenLabel.replace(/^\s+|\s+$/g, ''),
				recommendation: !$scope.info.hiddenRecommendation ? "": $scope.info.hiddenRecommendation.replace(/^\s+|\s+$/g, ''),
				alert_justification : !$scope.info.hiddenJustification ? "": $scope.info.hiddenJustification.replace(/^\s+|\s+$/g, ''),
				"update.label_display" : $scope.info.label.replace(/^\s+|\s+$/g, ''),
				description : $scope.info.description.replace(/^\s+|\s+$/g, ''),
				category_id : $scope.info.category,
				severity : $scope.info.severity,
				priority : $scope.info.priority,
				kb_link : $scope.info.kbLink.replace(/^\s+|\s+$/g, ''),
				"update.alert_id" : $scope.info.alertID,
				logic_actual : '',
				logic_display : '',
				
				logic_condition : '',
				
				email_template_id : $scope.info.action == 'mail' ? $scope.info.emailTemplate : 0,
				text_actual : '',
				text_display : '',
				recommendation_display : !$scope.info.recommendation ? "" : $scope.info.recommendation.replace(/^\s+|\s+$/g, ''),
				alert_justification_display : !$scope.info.alert_justification ? "" : $scope.info.alert_justification.replace(/^\s+|\s+$/g, ''),
				scope : $scope.info.scope,
				
				column_type : '',
				
				table_name : '',
				
				author : $scope.info.author.replace(/^\s+|\s+$/g, ''),
				"update.set_as_draft" : 0,
				"update.draft" : 0,
				"update.max_limit" : $scope.info.maxLimit,
				"update.max_alerts_display_ui" : $scope.info.maxLimitDisplay,
				"update.modify" : 0,
				"update.created_by" : $scope.info.createdBy,
				"update.created_ts" : $scope.info.createdTs.slice(0, 10) + "T" + $scope.info.createdTs.slice(10 + Math.abs(1)) + "Z",
				
				"update.convertedRegex" : '',
				"update.convertedCounts" : '',

				"update.rule_name" : $scope.info.ruleName,
				"update.action_id": $scope.info.action_id,
				"update.allow_subscription" : $scope.info.subscription_enabled
			};
			data = Object.assign(data, unsdataobj)

			// if(data['update.set_as_draft'] != 1){
			// 	if(data['update.label_display'] != $scope.info.initialLabel ||  data['alert_justification_display'] != $scope.info.initialJustification || data['recommendation_display'] != $scope.info.initialRecommendation || data['email_template_id'] != $scope.info.initialEmailTemplateId || data['update.apiTemplateId'] != $scope.info.initialApiTemplateId || data['scope'] != $scope.info.initialScope){
			// 		data['update.set_as_draft'] = 1;
			// 		//set current rule status as DRAFT
			// 		$scope.info.status = $scope.info.supportedStatus.Draft;
			// 	}
			// }
			// if(($scope.info.initialEmailTemplateId == -1 && data['email_template_id'] == 0) ||($scope.info.initialEmailTemplateId == -1 && data['email_template_id'] > 0))
			// {
			// 	data['update.apiTemplateId'] = $scope.info.initialApiTemplateId;
			// }

		RulesService.editRule(RulesService.getRuleMode()['data']['rule_id'], data, $scope.info.ruletype).then(function(response) {
			var ruleName = response.data.Data.rule_name;
			var addedEditedRule = response.data.Data;
			var taagApiCall = function(tagIds, reset){
				$scope.tagFilterFunction = function(t){ 
					return t.selected;
				}
				var tagPayload = {
					"associate": [{
						"tag_ids": tagIds.associate,
						"rule_ids": [response.data.Data.rule_id]
					}],
					"disassociate": [{
						"tag_ids": tagIds.disassociate,
						"rule_ids": [response.data.Data.rule_id]
					}]
				}
				if(!tagPayload.associate[0].tag_ids.length){
					tagPayload.associate[0] = {}
				}
				else if(!tagPayload.disassociate[0].tag_ids.length){
					tagPayload.disassociate[0] = {}
				}
				//Tag association payload
				// $scope.resetSelectedTags();
				RulesService.associateDisassociateTag(tagPayload).then(function (response) {
					if(reset){
						$scope.resetSelectedTags();
					}
				}, function (response) {
					console.error("Unable to add tags");
					if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
						GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
						$scope.info.addRuleMsg = {
							type: 'failure',
							msg: GlobalService.getVal('rulesMsgs')['h2_down_msg']
						};
					}
					handleSessionTimeout(response);
				});
			}

			var assocdisassoctag = function(){
				if(($scope.info.initialSubscription_enabled == true &&  $scope.info.subscription_enabled == false) && $scope.info.initialtagList.length >0){
					//call assoc/disassociate api
					var ids = {
						"associate": [],
						"disassociate": $scope.info.initialtagList
					}
					taagApiCall(ids,true);
				}
				else if(($scope.info.initialSubscription_enabled == true && $scope.info.subscription_enabled) && ($scope.info.initialtagList.length >0 || $scope.info.selectedTagsCount>0) ){
					//call assoc/disassociate api
					var ids = {
						"associate": $scope.info.tagList.filter($scope.tagFilterFunction).map(function(t){ return t.tag_id}),
						"disassociate": $scope.info.tagList.filter(function(t){return $scope.info.initialtagList.includes(t.tag_id) && !t.selected}).map(function(t){ return t.tag_id})
					}
					taagApiCall(ids);
				}
				else if(($scope.info.initialSubscription_enabled == false && $scope.info.subscription_enabled) && $scope.info.selectedTagsCount > 0){
					//cal Tag disassociation api here
					var ids = {
						"associate": $scope.info.tagList.filter($scope.tagFilterFunction).map(function(t){ return t.tag_id}),
						"disassociate": []
					}
					taagApiCall(ids);
				}
			}
			//call add subscription api (persist ==> persist and email)
			if (($scope.info.initialAction == 'none' || $scope.info.initialAction == 'api') && $scope.info.action == 'mail') {
				if($scope.info.subscriptionEmailList.length > 0){
					$scope.info.subscriptionEmailList
				var addSubscriptionPayload = {
					"subscribers": $scope.info.subscriptionEmailList.map(function (e) {
						return {
							mps: $cookies.mps,
							rule_id: response.data.Data.rule_id,
							email: e,
							subscription_enabled: $scope.info.subscription_enabled
						}
					})
				}


				RulesService.subscribeRule(addSubscriptionPayload).then(function (response) {
					assocdisassoctag()
				}, function (response) {
					console.error("Unable to add subscription");
					if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
						GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
						$scope.info.addRuleMsg = {
							type: 'failure',
							msg: GlobalService.getVal('rulesMsgs')['h2_down_msg']
						};
					}
					handleSessionTimeout(response);
				});
				}else{
					assocdisassoctag();
				}
				
			}
			//call update subscription api (persist and email  ==> persist and email)
			else if ($scope.info.initialAction == 'mail' && $scope.info.action == 'mail') {
				//Call update subscription api
				//take diff of email
				var diff = $scope.differenceOf2Arrays($scope.info.initialSubscriptionEmailList, $scope.info.subscriptionEmailList);
				var updateSubscriptionPayload = {
					"mps": $cookies.mps,
					"ruleId": response.data.Data.rule_id,
					"addEmailId": diff.added,
					"removeEmailId": diff.removed,
					"enabled": $scope.info.subscription_enabled
				}
				RulesService.updateSubscription(updateSubscriptionPayload).then(function (response) {
					if(diff.removed.length){
						var removedEmails = diff.removed.split(",").filter(function(e){
							if($scope.info.emailList.indexOf(e) >= 0) return e;
							}) || []
							if(removedEmails.length){
								$scope.deleteSubscriptionFilterBulk(addedEditedRule, removedEmails);
							}
						
					}
					assocdisassoctag();
				}, function (response) {
					console.error("Unable to update subscription");
					if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
						GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
						$scope.info.addRuleMsg = {
							type: 'failure',
							msg: GlobalService.getVal('rulesMsgs')['h2_down_msg']
						};
					}
					handleSessionTimeout(response);
				});
			}
			//call remove subscription api (persist and email  ==> persist or persist and call api)
			else if ($scope.info.initialAction == 'mail' && ($scope.info.action == 'none' || $scope.info.action == 'api')) {
				$scope.info.subscription_enabled = false;
				//call remove subscription api
				var removeSubscriptionPayload = {
					"removeSubscribers" : [
						{
						 "mps": $cookies.mps,
						 "ruleId": response.data.Data.rule_id
						}]
				}

				//call remove subscription api that removes subscription data for a rule
				RulesService.unsubscribeRule(removeSubscriptionPayload).then(function (response) {
					$scope.info.rulesListMsg = {
						type: 'success',
						msg: GlobalService.getVal('rulesMsgs')['rule_unsubscription_success']
					}
					assocdisassoctag();
				}, function (response) {
					console.error("Unable to remove subscription");
					if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
						GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
						$scope.info.addRuleMsg = {
							type: 'failure',
							msg: GlobalService.getVal('rulesMsgs')['h2_down_msg']
						};
					}
					handleSessionTimeout(response);
				});
				$scope.deleteSubscriptionFilter(addedEditedRule);
			}
			// if (data["update.modify"] == 1) {
			// 	RulesService.editStageRule(RulesService.getRuleMode()['data']['rule_id']).then(function(response) {
			// 		$scope.info.addRuleMsg = {
			// 			type : 'success',
			// 			msg : ($scope.info.status == $scope.info.supportedStatus.Draft || $scope.info.logic.replace(/^\s+|\s+$/g, '') != $scope.info.initialLogic || $scope.info.text.replace(/^\s+|\s+$/g, '') != $scope.info.initialText || $scope.info.initialMaxLimit != $scope.info.maxLimit) ? (GlobalService.getVal('rulesMsgs')['edit_rule_draft_success'][0] + ruleName + GlobalService.getVal('rulesMsgs')['edit_rule_draft_success'][1]) : (GlobalService.getVal('rulesMsgs')['edit_rule_enabled_success'][0] + ruleName + GlobalService.getVal('rulesMsgs')['edit_rule_enabled_success'][1])
			// 		};
			// 	}, function(response) {
			// 		$scope.info.addRuleMsg = {
			// 			type : 'failure',
			// 			msg : GlobalService.getVal('rulesMsgs')['add_rule_fail']
			// 		};
			// 	});
			// } else {
				$scope.info.addRuleMsg = {
					type : 'success',
					msg : ($scope.info.status == $scope.info.supportedStatus.Draft || $scope.info.logic.replace(/^\s+|\s+$/g, '') != $scope.info.initialLogic || $scope.info.text.replace(/^\s+|\s+$/g, '') != $scope.info.initialText || $scope.info.initialMaxLimit != $scope.info.maxLimit) ? (GlobalService.getVal('rulesMsgs')['edit_rule_draft_success'][0] + $scope.info.label + GlobalService.getVal('rulesMsgs')['edit_rule_draft_success'][1]) : (GlobalService.getVal('rulesMsgs')['edit_rule_enabled_success'][0] + $scope.info.label + GlobalService.getVal('rulesMsgs')['edit_rule_enabled_success'][1])
				};
			//}

			$scope.info.categoriesLoading = false;

			$scope.info.ruleAdded = true;
			$scope.info.ruleAddedAsDraft = ($scope.info.status == $scope.info.supportedStatus.Draft || $scope.info.logic.replace(/^\s+|\s+$/g, '') != $scope.info.initialLogic || $scope.info.text.replace(/^\s+|\s+$/g, '') != $scope.info.initialText || $scope.info.initialMaxLimit != $scope.info.maxLimit) ? true : false;

			var newData = {
				rule_id : response.data.Data.rule_id,
				rule_name : response.data.Data.rule_name,
				alert_id : response.data.Data.alert_id,
				label : $scope.info.label,
				description : $scope.info.description,
				category_id : $scope.info.category,
				category : ($filter('filter')($scope.info.categories, {category_id: $scope.info.category}))[0].category,
				severity_id : $scope.info.severity,
				severity : ($filter('filter')($scope.info.severities, {severity_id: $scope.info.severity}))[0].severity,
				priority_id : $scope.info.priority,
				priority : ($filter('filter')($scope.info.priorities, {priority_id: $scope.info.priority}))[0].priority,
				kb_link : $scope.info.kbLink,
				logic_display : $scope.info.logic,
				email_template_id : $scope.info.action == 'mail' ? $scope.info.emailTemplate :  0,
				text_display : $scope.info.text,
				recommendation_display : $scope.info.recommendation,
				alert_justification_display : $scope.info.alert_justification,
				scope : $scope.info.scope,
				author : $scope.info.author,
				status : ($scope.info.status == $scope.info.supportedStatus.Draft || $scope.info.logic.replace(/^\s+|\s+$/g, '') != $scope.info.initialLogic || $scope.info.text.replace(/^\s+|\s+$/g, '') != $scope.info.initialText || $scope.info.initialMaxLimit != $scope.info.maxLimit) ? $scope.info.supportedStatus.Draft : $scope.info.supportedStatus.Enabled,
				max_limit : $scope.info.maxLimit,
				max_alerts_display_ui : $scope.info.maxLimitDisplay,
				created_by: $scope.info.createdBy,
				created_ts: $scope.info.createdTs,
				action_id: response.data.Data.action_id,
				api_template_id: response.data.Data.api_template_id,
				subscription_enabled: $scope.info.subscription_enabled,
			 	subscriptionEmailList: $scope.info.subscriptionEmailList,
				tags: $scope.info.tags.reduce(function(acc,cur){ if(cur.selected){acc.push(cur)}; return acc},[])
			};

			$scope.info.testRuleData = newData;

			if ($scope.info.initialLabel != $scope.info.label) {
				var rulesLabelMap = RulesService.getRulesLabelMap();
				delete rulesLabelMap[$scope.info.initialLabel];
				rulesLabelMap[$scope.info.label.replace(/^\s+|\s+$/g, '')] = true;
				RulesService.setRulesLabelMap(rulesLabelMap);
			}

			var curRuleId = response.data.Data.rule_id;

			// Reload rules list
			RulesService.getAllRules($scope.info.ruletype).then(function(response) {
			    
				RulesService.setRulesList($filter('filterMultiples')($filter('removeDup')(response.data.Data), {
					status : [$scope.info.supportedStatus.Enabled, $scope.info.supportedStatus.Disabled, $scope.info.supportedStatus.Draft]
				}));
				var curRule = $filter('filter')($filter('removeDup')(response.data.Data), {
					rule_id : curRuleId
				}) || [];
				if(curRule[0]){
					$scope.info.createdBy = curRule[0].created_by;
					$scope.info.createdTs = curRule[0].created_ts;
					newData.subscriptionEmailList = curRule[0].subscribed_users.length ? curRule[0].subscribed_users.split(",").filter(Boolean) : [];
				}
				RulesService.setRuleMode('edit', newData);
			$scope.populateEditRule();
			}, handleSessionTimeout);

			if ($scope.info.initialLabel != $scope.info.label.replace(/^\s+|\s+$/g, '')) {
				var details = {};
				details['old'] = $scope.info.initialLabel;
				details['new'] = $scope.info.label.replace(/^\s+|\s+$/g, '');
				details = JSON.stringify(details);
			} else {
				var details = $scope.info.initialLabel;
			}

			UserTrackingService.standard_user_tracking($scope.info.application, 'Rule', 'edit', details).then(function(response) {

			}, handleSessionTimeout);

			
		}, function(response) {
			$scope.info.categoriesLoading = false;
			if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
				$scope.info.addRuleMsg = {
					type : 'failure',
					msg : GlobalService.getVal('rulesMsgs')['h2_down_msg']
				};
			} else {
				$scope.info.addRuleMsg = {
					type : 'failure',
					msg : GlobalService.getVal('rulesMsgs')['add_rule_fail']
				};
			}

			$scope.info.testRuleData = null;

			$scope.info.ruleAdded = false;
			console.error('Unable to edit rule');
			handleSessionTimeout(response);
		});
	}

	//creates data and replaces attributes
	$scope.checkDraft = function (regex) {
		
		var data = [
			{
				name: 'label',
				old: $scope.info.initialLabel,
				new: $scope.info.label
			},
			{
				name: 'recommendation',
				old: $scope.info.initialRecommendation,
				new: $scope.info.recommendation
			},
			{
				name: 'alert_justification',
				old: $scope.info.initialJustification,
				new: $scope.info.alert_justification
			},
			{
				name: 'text',
				old: $scope.info.initialText,
				new: $scope.info.text
			}
		];
		data.forEach(function (item) {
			item.oldarr = item.old.match(regex) ? item.old.match(regex) : item.old
			item.newarr = item.new.match(regex) ? item.new.match(regex) : item.new
		})
		return $scope.isdraft(angular.copy(data), regex);
	}

	//returns if rule should go o draft or not. //objective of this function is to return true or false
	$scope.isdraft = function(data, regex) {
		var draftvalue = false;
		var replacefn = function (e) {
			return e.replace(/[\{\}']+/g, '')
		}
		data.forEach(function (item) {
			if (Array.isArray(item.oldarr) && Array.isArray(item.newarr)) {
				//compare old and new array
				if ((item.newarr.length > item.oldarr.length) || item.newarr.length < item.oldarr.length) {
					draftvalue = true;
				}
				var oldValue = item.oldarr.map(replacefn)
				var newValue = item.newarr.map(replacefn)
				for (var i = 0; i < oldValue.length; i++) {
					if (newValue.indexOf(oldValue[i]) == -1) {
						draftvalue = true;
					}
				}
			}
			if (!Array.isArray(item.oldarr) && Array.isArray(item.newarr)) {
				//goes to draft
				draftvalue = true;
			}

			if (Array.isArray(item.oldarr) && !item.new.match(regex)) {
				//goes to draft
				draftvalue = true;
			}

		})
		if ($scope.info.logic.replace(/^\s+|\s+$/g, '') != $scope.info.initialLogic || $scope.info.scope != $scope.info.initialScope) {
			draftvalue = true;
		}
		return draftvalue;
	}
	// Function to call the add or edit rule API
	$scope.addEditRule = function() {
		$scope.info.categoriesLoading = true, data = {};
		if($scope.info.action == 'api'&& $scope.info.apiTemplate && ($scope.info.apiTemplate != 'select')){
			data = {
				"update.apiTemplateId": $scope.info.apiTemplate
			}
		}else{
			data = {
				"update.apiTemplateId": 0
			}
		}
		if (RulesService.getRuleMode() && RulesService.getRuleMode()['mode'] == 'edit') {
			var dataObj = {
				label_actual : $scope.info.hiddenLabel.replace(/^\s+|\s+$/g, ''),
				recommendation: !$scope.info.hiddenRecommendation ? "":$scope.info.hiddenRecommendation.replace(/^\s+|\s+$/g, ''),
				alert_justification : !$scope.info.hiddenJustification ? "": $scope.info.hiddenJustification.replace(/^\s+|\s+$/g, ''),
				"update.label_display" : $scope.info.label.replace(/^\s+|\s+$/g, ''),
				description : $scope.info.description.replace(/^\s+|\s+$/g, ''),
				category_id : $scope.info.category,
				severity : $scope.info.severity,
				priority : $scope.info.priority,
				kb_link : $scope.info.kbLink.replace(/^\s+|\s+$/g, ''),
				"update.alert_id" : $scope.info.alertID,
				logic_actual : $scope.info.hiddenLogic.replace(/^\s+|\s+$/g, ''),
				logic_display : $scope.info.logic.replace(/^\s+|\s+$/g, ''),
				
				logic_condition : $scope.info.convertedLogic.replace(/\'/g, "\"").replace(/^\s+|\s+$/g, '').replace(/[\"]+/g, "\""),
				
				email_template_id : $scope.info.action == 'mail' ? $scope.info.emailTemplate :  0,
				text_actual : $scope.info.hiddenText.replace(/^\s+|\s+$/g, ''),
				text_display : $scope.info.text.replace(/^\s+|\s+$/g, ''),
				recommendation_display : !$scope.info.recommendation? "" : $scope.info.recommendation.replace(/^\s+|\s+$/g, ''),
				alert_justification_display : !$scope.info.alert_justification ? "" : $scope.info.alert_justification.replace(/^\s+|\s+$/g, ''),
				scope : $scope.info.scope,
				
				column_type : $scope.info.secColTypePairs.join(','),
				
				table_name : $scope.info.tables.join(','),
				
				author : $scope.info.author.replace(/^\s+|\s+$/g, ''),
				
				"update.set_as_draft" : ($scope.info.status == $scope.info.supportedStatus.Draft || $scope.info.logic.replace(/^\s+|\s+$/g, '') != $scope.info.initialLogic || $scope.info.text.replace(/^\s+|\s+$/g, '') != $scope.info.initialText || $scope.info.initialMaxLimit != $scope.info.maxLimit ) ? 1 : 0,
				"update.draft" : ($scope.info.status == $scope.info.supportedStatus.Draft) ? 1 : 0,
				"update.max_limit" : $scope.info.maxLimit,
				"update.max_alerts_display_ui" : $scope.info.maxLimitDisplay,
				
				"update.modify" : ($scope.info.status == $scope.info.supportedStatus.Draft && RulesService.getRuleSavedStatus()) ? 1 : 0,
				"update.created_by" : $scope.info.createdBy,
				"update.created_ts" : $scope.info.createdTs.slice(0, 10) + "T" + $scope.info.createdTs.slice(10 + Math.abs(1)) + "Z",
				
				"update.convertedRegex" : $scope.info.convertedRegexes,
				"update.convertedCounts" : $scope.info.convertedCounts,
				"update.rule_name" : $scope.info.ruleName,
				"update.action_id": $scope.info.action_id,
				"update.convertedAggregates" :  $scope.processAggregateFunctionForPayload(),
				"update.allow_subscription" : $scope.info.subscription_enabled

				
			};
			//
			data = Object.assign(data, dataObj);
			//check "label", "Action", "Justification", "Recomendation" 
			//then make "update.set_as_draft" as 0 or 1
			// if(data['update.set_as_draft'] != 1){
			// 	if(data['update.label_display'] != $scope.info.initialLabel ||  data['alert_justification_display'] != $scope.info.initialJustification || data['recommendation_display'] != $scope.info.initialRecommendation || data['scope'] != $scope.info.initialScope){
			// 		data['update.set_as_draft'] = 1;
			// 		//set current rule status as DRAFT
			// 		$scope.info.status = $scope.info.supportedStatus.Draft;
			// 	}
			// }

			if ($scope.info.status == $scope.info.supportedStatus.Enabled || $scope.info.status == $scope.info.supportedStatus.Disabled ){
				var regex = new RegExp("{([^}]*)}", "g")
				if ($scope.checkDraft(regex)) {
					data['update.set_as_draft'] = 1
					$scope.info.status = $scope.info.supportedStatus.Draft;
				}
				else {
					data['update.set_as_draft'] = 0
				}
			}
			

			
			// //send old api id
			// if($scope.info.initialApiTemplateId > 0 && data['email_template_id'] >= 0){
			// 	data['update.apiTemplateId'] = $scope.info.initialApiTemplateId;
			// }


			// if($scope.info.initialApiTemplateId > 0 && data['email_template_id'] > 0 || $scope.info.initialApiTemplateId > 0 && data['email_template_id'] == 0 )
			// if(($scope.info.initialEmailTemplateId == -1 && data['email_template_id'] == 0) ||($scope.info.initialEmailTemplateId == -1 && data['email_template_id'] > 0))
			// {
			// 	data['update.apiTemplateId'] = $scope.info.initialApiTemplateId;
			// }
			if(($scope.info.initialSubscription_enabled == true &&  $scope.info.subscription_enabled == false) && $scope.info.initialtagList.length >0){
				//call assoc/disassociate api
				$scope.info.tags = [];
			}
			else if(($scope.info.initialSubscription_enabled == true && $scope.info.subscription_enabled) && ($scope.info.initialtagList.length >0 || $scope.info.selectedTagsCount > 0) ){
				//call assoc/disassociate api
				$scope.info.tags = $scope.info.tagList.filter($scope.tagFilterFunction);
			}
			else if(($scope.info.initialSubscription_enabled == false && $scope.info.subscription_enabled) && $scope.info.selectedTagsCount > 0){
				//cal Tag disassociation api here
				
				$scope.info.tags = $scope.info.tagList.filter($scope.tagFilterFunction);
			} 
			RulesService.editRule(RulesService.getRuleMode()['data']['rule_id'], data, $scope.info.ruletype).then(function (response) {
				var ruleName = response.data.Data.rule_name;
				var addedEditedRule = response.data.Data;
				var taagApiCall = function(tagIds, reset){
					if(reset){
						$scope.resetSelectedTags();
					}
					var tagPayload = {
						"associate": [{
							"tag_ids": tagIds.associate,
							"rule_ids": [response.data.Data.rule_id]
						}],
						"disassociate": [{
							"tag_ids": tagIds.disassociate,
							"rule_ids": [response.data.Data.rule_id]
						}]
					}
					if(!tagPayload.associate[0].tag_ids.length){
						tagPayload.associate[0] = {}
					}
					else if(!tagPayload.disassociate[0].tag_ids.length){
						tagPayload.disassociate[0] = {}
					}
					//Tag association payload
					RulesService.associateDisassociateTag(tagPayload).then(function (response) {
						
					}, function (response) {
						console.error("Unable to add tags");
						if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
							GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
							$scope.info.addRuleMsg = {
								type: 'failure',
								msg: GlobalService.getVal('rulesMsgs')['h2_down_msg']
							};
						}
						handleSessionTimeout(response);
					});
				}

				var assocdisassoctag = function(){
					if(($scope.info.initialSubscription_enabled == true &&  $scope.info.subscription_enabled == false) && $scope.info.initialtagList.length > 0){
						//call assoc/disassociate api
						var ids = {
							"associate": [],
							"disassociate": $scope.info.initialtagList
						}
						taagApiCall(ids,true);
					}
					else if(($scope.info.initialSubscription_enabled == true && $scope.info.subscription_enabled) && ($scope.info.initialtagList.length >0 || $scope.info.selectedTagsCount > 0) ){
						//call assoc/disassociate api
						var ids = {
							"associate": $scope.info.tagList.filter($scope.tagFilterFunction).map(function(t){ return t.tag_id}),
							"disassociate": $scope.info.tagList.filter(function(t){return $scope.info.initialtagList.includes(t.tag_id) && !t.selected}).map(function(t){ return t.tag_id})
						}
						taagApiCall(ids);
					}
					else if(($scope.info.initialSubscription_enabled == false && $scope.info.subscription_enabled) && $scope.info.selectedTagsCount > 0){
						//cal Tag disassociation api here
						var ids = {
							"associate": $scope.info.tagList.filter($scope.tagFilterFunction).map(function(t){ return t.tag_id}),
							"disassociate": []
						}
						taagApiCall(ids);
					}
				}

				//call add subscription api (persist ==> persist and email)
				if (($scope.info.initialAction == 'none' || $scope.info.initialAction == 'api') && $scope.info.action == 'mail') {
					if ($scope.info.subscriptionEmailList.length > 0) {
						$scope.info.subscriptionEmailList
						var addSubscriptionPayload = {
							"subscribers": $scope.info.subscriptionEmailList.map(function (e) {
								return {
									mps: $cookies.mps,
									rule_id: response.data.Data.rule_id,
									email: e,
									subscription_enabled: $scope.info.subscription_enabled
								}
							})
						}


						RulesService.subscribeRule(addSubscriptionPayload).then(function (response) {
							assocdisassoctag()
						}, function (response) {
							console.error("Unable to add subscription");
							if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
								GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
								$scope.info.addRuleMsg = {
									type: 'failure',
									msg: GlobalService.getVal('rulesMsgs')['h2_down_msg']
								};
							}
							handleSessionTimeout(response);
						});
					}else{
						assocdisassoctag();
					}
				}
				//call update subscription api (persist and email  ==> persist and email)
				else if ($scope.info.initialAction == 'mail' && $scope.info.action == 'mail') {
					//Call update subscription api
					//take diff of email
					var diff = $scope.differenceOf2Arrays($scope.info.initialSubscriptionEmailList, $scope.info.subscriptionEmailList);
					
					var updateSubscriptionPayload = {
						"mps": $cookies.mps,
						"ruleId": response.data.Data.rule_id,
						"addEmailId": diff.added,
						"removeEmailId": diff.removed,
						"enabled": $scope.info.subscription_enabled
					}
					RulesService.updateSubscription(updateSubscriptionPayload).then(function (response) {
						if(diff.removed.length){
							var removedEmails = diff.removed.split(",").filter(function(e){
								if($scope.info.emailList.indexOf(e) >= 0) return e;
								}) || []
								if(removedEmails.length){
									$scope.deleteSubscriptionFilterBulk(addedEditedRule, removedEmails);
								}
							
						}
						assocdisassoctag();
					}, function (response) {
						console.error("Unable to update subscription");
						if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
							GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
							$scope.info.addRuleMsg = {
								type: 'failure',
								msg: GlobalService.getVal('rulesMsgs')['h2_down_msg']
							};
						}
						handleSessionTimeout(response);
					});
				}
				//call remove subscription api (persist and email  ==> persist or persist and call api)
				else if ($scope.info.initialAction == 'mail' && ($scope.info.action == 'none' || $scope.info.action == 'api')) {
					$scope.info.subscription_enabled = false;
					//call remove subscription api
					var removeSubscriptionPayload = {
						"removeSubscribers" : [
							{
							 "mps": $cookies.mps,
							 "ruleId": response.data.Data.rule_id
							}]
					}

					//call remove subscription api that removes subscription data for a rule
					RulesService.unsubscribeRule(removeSubscriptionPayload).then(function (response) {
						assocdisassoctag();
						$scope.info.rulesListMsg = {
							type: 'success',
							msg: GlobalService.getVal('rulesMsgs')['rule_unsubscription_success']
						}
					}, function (response) {
						console.error("Unable to remove subscription");
						if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
							GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
							$scope.info.addRuleMsg = {
								type: 'failure',
								msg: GlobalService.getVal('rulesMsgs')['h2_down_msg']
							};
						}
						handleSessionTimeout(response);
					});
					$scope.deleteSubscriptionFilter(addedEditedRule);
				}
				

				$scope.info.addRuleMsg = {
					type: 'success',
					msg: (data['update.set_as_draft'] == 1) ? (GlobalService.getVal('rulesMsgs')['edit_rule_draft_success'][0] + $scope.info.label + GlobalService.getVal('rulesMsgs')['edit_rule_draft_success'][1]) : (GlobalService.getVal('rulesMsgs')['edit_rule_enabled_success'][0] + $scope.info.label + GlobalService.getVal('rulesMsgs')['edit_rule_enabled_success'][1])
				};

				$scope.info.ruleAddedAsDraft = (data['update.set_as_draft'] == 1) ? true : false;
				var curStatus = (data['update.set_as_draft'] == 1) ? $scope.info.supportedStatus.Draft : $scope.info.status;
				//var curStatus =($scope.info.status == $scope.info.supportedStatus.Draft || $scope.info.logic.replace(/^\s+|\s+$/g, '') != $scope.info.initialLogic || $scope.info.text.replace(/^\s+|\s+$/g, '') != $scope.info.initialText || $scope.info.initialMaxLimit != $scope.info.maxLimit) ? $scope.info.supportedStatus.Draft : $scope.info.supportedStatus.Enabled;
				var newData = $scope.makeRuleObjectAfterAddEdit(response, curStatus); 
				$scope.info.testRuleData = newData;

				if ($scope.info.initialLabel != $scope.info.label) {
					var rulesLabelMap = RulesService.getRulesLabelMap();
					delete rulesLabelMap[$scope.info.initialLabel];
					rulesLabelMap[$scope.info.label.replace(/^\s+|\s+$/g, '')] = true;
					RulesService.setRulesLabelMap(rulesLabelMap);
				}

				var curRuleId = response.data.Data.rule_id;

				//update rule version
				$scope.getRulesVersion();

				// Reload rules list
				$scope.fetchRuleListAfterAddEdit(newData, curRuleId);
				//changes require for user tracker
				if ($scope.info.initialLabel != $scope.info.label.replace(/^\s+|\s+$/g, '')) {
					var details = {};
					details['old'] = $scope.info.initialLabel;
					details['new'] = $scope.info.label.replace(/^\s+|\s+$/g, '');
					//details = JSON.stringify(details);
				} else {
					var details = $scope.info.initialLabel;
				}
				$scope.trackUser('Rule', 'Edit', details);
				// UserTrackingService.standard_user_tracking($scope.info.application, 'Rule', 'edit', details).then(function(response) {

				// }, handleSessionTimeout);
			}, function(response) {
				$scope.addEditFailureHandler(response, 'Edit');
			});
		}
		//The data here is prepared for Adding new Rule
		 else {
			dataObj = {
				label_actual : $scope.info.hiddenLabel.replace(/^\s+|\s+$/g, ''),
				"update.label_display" : $scope.info.label.replace(/^\s+|\s+$/g, ''),
				description : $scope.info.description.replace(/^\s+|\s+$/g, ''),
				category_id : $scope.info.category,
				severity : $scope.info.severity,
				priority : $scope.info.priority,
				kb_link : $scope.info.kbLink.replace(/^\s+|\s+$/g, ''),
				logic_actual : $scope.info.hiddenLogic.replace(/^\s+|\s+$/g, ''),
				logic_display : $scope.info.logic.replace(/^\s+|\s+$/g, ''),
				logic_condition : $scope.info.convertedLogic.replace(/\'/g, "\"").replace(/^\s+|\s+$/g, '').replace(/[\"]+/g, "\""),
				email_template_id : $scope.info.action == 'mail' ? $scope.info.emailTemplate :  0,
				text_actual : $scope.info.hiddenText.replace(/^\s+|\s+$/g, ''),
				text_display : $scope.info.text.replace(/^\s+|\s+$/g, ''),
				recommendation_display : $scope.info.recommendation.replace(/^\s+|\s+$/g, ''),
				alert_justification_display : $scope.info.alert_justification.replace(/^\s+|\s+$/g, ''),
				scope : $scope.info.scope,
				column_type : $scope.info.secColTypePairs.join(','),
				table_name : $scope.info.tables.join(','),
				author : $scope.info.author.replace(/^\s+|\s+$/g, ''),
				"update.max_limit" : $scope.info.maxLimit,
				"update.max_alerts_display_ui" : $scope.info.maxLimitDisplay,
				"update.convertedRegex" : $scope.info.convertedRegexes,
				"update.convertedCounts" : $scope.info.convertedCounts,
				recommendation: $scope.info.hiddenRecommendation.replace(/^\s+|\s+$/g, ''),
				alert_justification : $scope.info.hiddenJustification.replace(/^\s+|\s+$/g, ''),
				"update.convertedAggregates" :  $scope.processAggregateFunctionForPayload(),
				"update.allow_subscription" : $scope.info.subscription_enabled
			};
			//
			data = Object.assign(data, dataObj);
			RulesService.addRule(data).then(function(response) {	
				
				//Call add subscription api(in phase 2 add  "filter_attributes" to payload as its optional fron infoserver now)
				if ($scope.info.action == 'mail') {
					var addSubscriptionPayload = {
						"subscribers": [
							{
								"mps": $cookies.mps,
								"rule_id": response.data.Data.rule_id,
								"email": $scope.info.subscriptionEmailList.length ? $scope.info.subscriptionEmailList.join() : "",
								"subscription_enabled": $scope.info.subscription_enabled,
							}]
					}
					$scope.info.tags = $scope.info.tagList.filter($scope.tagFilterFunction);

					RulesService.subscribeRule(addSubscriptionPayload).then(function (response) {

					}, function (response) {
						console.error("Unable to load templates");
						if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
							GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
							$scope.info.addRuleMsg = {
								type: 'failure',
								msg: GlobalService.getVal('rulesMsgs')['h2_down_msg']
							};
						}
						handleSessionTimeout(response);
					});

					
					//add tag association
					if ($scope.info.selectedTagsCount > 0 && $scope.info.subscription_enabled) {
						RulesService.associateDisassociateTag($scope.getAddUpdateTagPayload(response.data.Data.rule_id)).then(function (response) {

						}, function (response) {
							console.error("Unable to add tags");
							if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
								GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
								$scope.info.addRuleMsg = {
									type: 'failure',
									msg: GlobalService.getVal('rulesMsgs')['h2_down_msg']
								};
							}
							handleSessionTimeout(response);
						});
					}
					
				}
				
				$scope.info.addRuleMsg = {
					type : 'success',
					msg : GlobalService.getVal('rulesMsgs')['add_rule_success'][0] + $scope.info.label + GlobalService.getVal('rulesMsgs')['add_rule_success'][1]
				};				
				$scope.info.ruleAddedAsDraft = true;
				var newData = $scope.makeRuleObjectAfterAddEdit(response, $scope.info.supportedStatus.Draft);
				$scope.info.testRuleData = newData;
				var rulesLabelMap = RulesService.getRulesLabelMap();
				rulesLabelMap[$scope.info.label] = true;
				RulesService.setRulesLabelMap(rulesLabelMap);

				var curRuleId = response.data.Data.rule_id;

				//update rule version
				$scope.getRulesVersion();

				// Reload rules list
				$scope.fetchRuleListAfterAddEdit(newData,curRuleId);

				$scope.trackUser('Rule', 'ADD', {"rule_name": response.data.Data.rule_name});

				// UserTrackingService.standard_user_tracking($scope.info.application, 'Rule', 'add', $scope.info.label.replace(/^\s+|\s+$/g, '')).then(function(response) {

				// }, handleSessionTimeout);


			}, function(response) {
				$scope.addEditFailureHandler(response, 'Add');
			});
		}
	};
	$scope.addEditFailureHandler = function(response, type){
		$scope.info.categoriesLoading = false;
		if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
			GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
			$scope.info.addRuleMsg = {
				type : 'failure',
				msg : GlobalService.getVal('rulesMsgs')['h2_down_msg']
			};
		} else {
			$scope.info.addRuleMsg = {
				type : 'failure',
				msg : GlobalService.getVal('rulesMsgs')['add_rule_fail']
			};
		}

		$scope.info.testRuleData = null;
		$scope.info.ruleAdded = false;
		console.error('Unable to '+type+' rule');
		handleSessionTimeout(response);
	}
	$scope.makeRuleObjectAfterAddEdit = function(response, newStatus){
		var data = {
			rule_id : response.data.Data.rule_id,
			rule_name : response.data.Data.rule_name,
			alert_id : response.data.Data.alert_id,
			label_display : $scope.info.label,
			label: $scope.info.label,
			description : $scope.info.description,
			category_id : $scope.info.category,
			category : ($filter('filter')($scope.info.categories, {category_id: $scope.info.category}))[0].category,
			severity_id : $scope.info.severity,
			severity : ($filter('filter')($scope.info.severities, {severity_id: $scope.info.severity}))[0].severity,
			priority_id : $scope.info.priority,
			priority : ($filter('filter')($scope.info.priorities, {priority_id: $scope.info.priority}))[0].priority,
			kb_link : $scope.info.kbLink,
			logic_display : $scope.info.logic,
			//email_template_id : $scope.info.action == 'none' ? 0 : $scope.info.emailTemplate.toString(),
			email_template_id : $scope.info.action == 'mail' ? $scope.info.emailTemplate : 0,
			text_display : $scope.info.text,
			recommendation_display : $scope.info.recommendation,
			alert_justification_display : $scope.info.alert_justification,
			scope : $scope.info.scope,
			author : $scope.info.author,
			status : newStatus,
			max_limit : $scope.info.maxLimit,
			max_alerts_display_ui : $scope.info.maxLimitDisplay,
			created_by: $scope.info.createdBy,
			created_ts: $scope.info.createdTs,
			action_id: response.data.Data.action_id,
			api_template_id: response.data.Data.api_template_id,
			subscription_enabled: $scope.info.subscription_enabled,
			subscriptionEmailList : $scope.info.subscriptionEmailList,
			tagList : $scope.info.tagList,
			tags: $scope.info.tags.reduce(function(acc,cur){ if(cur.selected){acc.push(cur)}; return acc},[])

		};
		if($scope.info.action == 'mail'){
			data.subscription_enabled = $scope.info.subscription_enabled,
			data.subscriptionEmailList = $scope.info.subscriptionEmailList
		}

		return angular.copy(data);
	};
	$scope.fetchRuleListAfterAddEdit = function(newData, curRuleId){

		RulesService.getAllRules($scope.info.ruletype).then(function(response) {
			$scope.info.categoriesLoading = false;
			$scope.info.ruleAdded = true;
			RulesService.setRulesList($filter('filterMultiples')((response.data.Data), {
				status : [$scope.info.supportedStatus.Enabled, $scope.info.supportedStatus.Disabled, $scope.info.supportedStatus.Draft]
			}));
			var curRule = $filter('filter')((response.data.Data), {
				rule_id : curRuleId
			}) || [];
			if(curRule[0]){
				$scope.info.createdBy = curRule[0].created_by;
				$scope.info.createdTs = curRule[0].created_ts;
			}
			newData.created_by = $scope.info.createdBy;
			newData.created_ts = $scope.info.createdTs;
			newData.colt = curRule[0].colt;
			newData.recommendation = curRule[0].recommendation;
			newData.modified_by = curRule[0].modified_by;
			newData.modified_ts = curRule[0].modified_ts;	
			newData.alert_id = curRule[0].alert_id;			
			$scope.info.testRuleData.alert_id = curRule[0].alert_id;
			newData.subscriptionEmailList = curRule[0].subscribed_users.length ? curRule[0].subscribed_users.split(",").filter(Boolean) : [];
			newData.action_id = curRule[0].action_id;
			RulesService.setRuleMode('edit', newData);
			$scope.populateEditRule();
		}, handleSessionTimeout);
	}
	// Function to create unique section-column-type pairs
	$scope.createColumnType = function(logicPairs, textPairs, labelPairs, justificationPairs, recommendationPairs) {
		$scope.info.secColTypePairs = [];
		$scope.info.tables = [];
		for(var i=0;i<arguments.length;i++){
			$scope.getUniqueTalbeAndColumnName(arguments[i]);
		}
	};
	$scope.getUniqueTalbeAndColumnName = function(list){		
		for (var i = 0; i < list.length; i++) {
			var pairFound = false;
			var tableFound = false;
			for (var j = 0; j < $scope.info.secColTypePairs.length; j++) {
				if ($scope.sectionsColumnLabelMap[list[i]][3] == $scope.info.secColTypePairs[j]) {
					pairFound = true;
					break;
				}
			}
			for (var j = 0; j < $scope.info.tables.length; j++) {
				if ($scope.sectionsColumnLabelMap[list[i]][4] == $scope.info.tables[j]) {
					tableFound = true;
					break;
				}
			}
			if (!pairFound) {
				$scope.info.secColTypePairs.push($scope.sectionsColumnLabelMap[list[i]][3]);
			}
			if (!tableFound) {
				$scope.info.tables.push($scope.sectionsColumnLabelMap[list[i]][4]);
			}
		}
	}

	// Function to check if necessary elements have some value
	$scope.validateElements = function() {
		if (/^\s*$/.test($scope.info.label)) {
			ModalService.alertBox({
				msg : 'Label' + GlobalService.getVal('rulesMsgs')['add_rule_field_empty']
			});
			return;
		}
		var rulesLabelMap = RulesService.getRulesLabelMap();
		var emailTemplate;
		var apiTemplate;

		if($scope.info.emailTemplate == "select")
			emailTemplate = 0;
		else
			emailTemplate = $scope.info.emailTemplate;
		if($scope.info.apiTemplate == "select")	
			apiTemplate = 0;
		else
			apiTemplate = $scope.info.apiTemplate;

		//// show confirm dialog box if the rule will be saved as draft 
		var draftregex = new RegExp("{([^}]*)}", "g")
		if(RulesService.getRuleMode()['mode'] == "edit"){
			if ($scope.info.status != $scope.info.supportedStatus.Draft && $scope.checkDraft(draftregex)) {
				$scope.msg = GlobalService.getVal('rulesMsgs')['save_rule_enable_to_draft'];
				$scope.modal = ModalService.openModal("partials/rules-and-alerts/enable_draft_rule.html", $scope, false, 'static');
				return;
	
			}
		}
		
		if (!!$scope.info.initialLabel) {
			if ($scope.info.label != $scope.info.initialLabel && rulesLabelMap.hasOwnProperty($scope.info.label)) {
				ModalService.alertBox({
					msg : GlobalService.getVal('rulesMsgs')['add_rule_duplicate_label']
				});
				return;
			}
		} else {
			if (rulesLabelMap.hasOwnProperty($scope.info.label)) {
				ModalService.alertBox({
					msg : GlobalService.getVal('rulesMsgs')['add_rule_duplicate_label']
				});
				return;
			}
		}
		if ($scope.info.category == "select") {
			ModalService.alertBox({
				msg : GlobalService.getVal('rulesMsgs')['add_rule_field_unselected'] + 'category'
			});
			return;
		}
		if (/^\s*$/.test($scope.info.author)) {
			ModalService.alertBox({
				msg : 'Author' + GlobalService.getVal('rulesMsgs')['add_rule_field_empty']
			});
			return;
		}
		if ($scope.info.severity == "select") {
			ModalService.alertBox({
				msg : GlobalService.getVal('rulesMsgs')['add_rule_field_unselected'] + 'severity'
			});
			return;
		}
		if ($scope.info.priority == "select") {
			ModalService.alertBox({
				msg : GlobalService.getVal('rulesMsgs')['add_rule_field_unselected'] + 'priority'
			});
			return;
		}
		if ($scope.info.scope == "select") {
			ModalService.alertBox({
				msg : GlobalService.getVal('rulesMsgs')['add_rule_field_unselected'] + 'scope'
			});
			return;
		}
		if ($scope.info.action == 'mail' && $scope.info.emailTemplate == 'select') {
			ModalService.alertBox({
				msg : GlobalService.getVal('rulesMsgs')['add_rule_field_unselected'] + 'template'
			});
			return;
		}
		if ($scope.info.action == 'api' && $scope.info.apiTemplate == 'select') {
			ModalService.alertBox({
				msg : GlobalService.getVal('rulesMsgs')['add_rule_field_unselected'] + 'template'
			});
			return;
		}
		if (!$scope.info.maxLimitDisplay || /^\s*$/.test($scope.info.maxLimitDisplay)) {
			ModalService.alertBox({
					msg : 'Max. Alerts(View) ' + GlobalService.getVal('rulesMsgs')['add_rule_field_empty']
			});
			return;
		}
		if (/^\s*$/.test($scope.info.logic)) {
			ModalService.alertBox({
				msg : 'Logic' + GlobalService.getVal('rulesMsgs')['add_rule_field_empty']
			});
			return;
		}
		if (/^\s*$/.test($scope.info.text)) {
			ModalService.alertBox({
				msg : 'Text' + GlobalService.getVal('rulesMsgs')['add_rule_field_empty']
			});
			return;
		}
		return true;
	};// Function to check if necessary elements have some value
	$scope.validateUnsupportedElements = function() {
		if (/^\s*$/.test($scope.info.label)) {
			ModalService.alertBox({
				msg : 'Label' + GlobalService.getVal('rulesMsgs')['add_rule_field_empty']
			});
			return;
		}
		var rulesLabelMap = RulesService.getRulesLabelMap();
		if (!!$scope.info.initialLabel) {
			if ($scope.info.label != $scope.info.initialLabel && rulesLabelMap.hasOwnProperty($scope.info.label)) {
				ModalService.alertBox({
					msg : GlobalService.getVal('rulesMsgs')['add_rule_duplicate_label']
				});
				return;
			}
		} else {
			if (rulesLabelMap.hasOwnProperty($scope.info.label)) {
				ModalService.alertBox({
					msg : GlobalService.getVal('rulesMsgs')['add_rule_duplicate_label']
				});
				return;
			}
		}
		if ($scope.info.category == "select") {
			ModalService.alertBox({
				msg : GlobalService.getVal('rulesMsgs')['add_rule_field_unselected'] + 'category'
			});
			return;
		}
		if (/^\s*$/.test($scope.info.author)) {
			ModalService.alertBox({
				msg : 'Author' + GlobalService.getVal('rulesMsgs')['add_rule_field_empty']
			});
			return;
		}
		if ($scope.info.severity == "select") {
			ModalService.alertBox({
				msg : GlobalService.getVal('rulesMsgs')['add_rule_field_unselected'] + 'severity'
			});
			return;
		}
		if ($scope.info.priority == "select") {
			ModalService.alertBox({
				msg : GlobalService.getVal('rulesMsgs')['add_rule_field_unselected'] + 'priority'
			});
			return;
		}
		if ($scope.info.scope == "select") {
			ModalService.alertBox({
				msg : GlobalService.getVal('rulesMsgs')['add_rule_field_unselected'] + 'scope'
			});
			return;
		}
		if ($scope.info.action == 'mail' && $scope.info.emailTemplate == 'select') {
			ModalService.alertBox({
				msg : GlobalService.getVal('rulesMsgs')['add_rule_field_unselected'] + 'template'
			});
			return;
		}
		if ($scope.info.action == 'api' && $scope.info.apiTemplate == 'select') {
			ModalService.alertBox({
				msg : GlobalService.getVal('rulesMsgs')['add_rule_field_unselected'] + 'template'
			});
			return;
		}
		if (!$scope.info.maxLimitDisplay || /^\s*$/.test($scope.info.maxLimitDisplay)) {
                ModalService.alertBox({
                        msg : 'Max. Alerts(View) ' + GlobalService.getVal('rulesMsgs')['add_rule_field_empty']
                });
                return;
        }

		return true;
	};


	// Function to convert logic to scala if condition
	$scope.convertScalaCondition = function(stmt) {
		//parse operators
		//Read Left operand
		var regExp = /\{([^}]+)\}/g;
		var stmt_tmp = stmt;
		var matches = stmt_tmp.match(regExp) || [];
		for (var i = 0; i < matches.length; i++) {
			var str = matches[i];
			var operand = str.substring(1, str.length - 1);
			var operandMin = $scope.sectionsColumnLabelMap[operand][0];
			if ($scope.sectionsColumnLabelMap[operand][2] == $scope.info.columnDataTypes['Integer'] || $scope.sectionsColumnLabelMap[operand][2] == $scope.info.columnDataTypes['Long']) {
				operandMin += '.toLong';
			} else if ($scope.sectionsColumnLabelMap[operand][2] == $scope.info.columnDataTypes['Float']) {
				operandMin += '.toFloat';
			} else if ($scope.sectionsColumnLabelMap[operand][2] == $scope.info.columnDataTypes['Double']) {
				operandMin += '.toDouble';
			}
			stmt = stmt.replace('{' + operand + '}', operandMin);
		}

		var stringsInLogicRegex = /\'%(.*?)%\'|\'%(.*?)[^%]\'|\'[^%](.*?)%\'|\"(.*?)\"/g;

		var count = 1;
		var stringsMap = {};

		var stringsMatched = stmt.match(stringsInLogicRegex);
		if (!!stringsMatched && !!stringsMatched.length) {
			for (var i = 0; i < stringsMatched.length; i++) {
				var stringToReplace = '';
				var originalString = '';
				if (/\'%(.*?)%\'/.test(stringsMatched[i])) {
					stringToReplace = '\'%string' + count + '%\'';
					originalString = stringsMatched[i].replace(/^\'%|%\'$/g, '');
				} else if (/\'%(.*?)[^%]\'/.test(stringsMatched[i])) {
					stringToReplace = '\'%string' + count + '\'';
					originalString = stringsMatched[i].replace(/^\'%|\'$/g, '');
				} else if (/\'[^%](.*?)%\'/.test(stringsMatched[i])) {
					stringToReplace = '\'string' + count + '%\'';
					originalString = stringsMatched[i].replace(/^\'|%\'$/g, '');
				} else {
					stringToReplace = '\"string' + count + '\"';
					originalString = stringsMatched[i].replace(/^\"|\"$/g, '');
				}
				stmt = stmt.replace(stringsMatched[i], stringToReplace);
				stringsMap["string" + count] = originalString;
				count++;
			}
		}

		var scalaCondtion = $scope.parseLogicToScalaCondtion(stmt,stringsMap);

		// Ashwin - added to change numerator type as double in case of division
		scalaCondtion = scalaCondtion.replace(/\.toLong([^\.toLong|\/]*)\//g, ".toDouble$1/");

		// Ashwin - added to append L to all integers and D to all real numbers in logic
		scalaCondtion = scalaCondtion.replace(/(^|\s)(\d+)(\s|$|\))/g, "$1$2L$3").replace(/(^|\s)(\d+\.\d+)(\s|$)/g, "$1$2D$3");

		angular.forEach(stringsMap, function(value, key) {
			scalaCondtion = scalaCondtion.replace(key, value);
		});

		return scalaCondtion;

	};

	// Function to check the count of opening and closing brackets is same
	$scope.checkParentheses = function(logic) {
		var openBracketCount = logic.replace(/\(/g, "").length;
		var closeBracketCount = logic.replace(/\)/g, "").length;
		if (openBracketCount != closeBracketCount) {
			ModalService.alertBox({
				msg : GlobalService.getRulesLogicAlerts('rule_logic_error')
			});
			return;
		}
		return true;
	};

	var tempAttrs = {};
	var regexExprs = {};
	var countExprs = {};
	var tempStrings = {};

	// Function to replace all tokens with temporary placeholders(strings/attributes/numbers/regex functions/count functions)
	function getReplacedLogic() {
		var tempLogic = angular.copy($scope.info.logic);
		tempAttrs = {};
		tempStrings = {};
		tempNumbers = {};
		regexExprs = {};
		countExprs = {};

		// Replacing strings with temporary placeholders
		var strMatch = tempLogic.match(/'%((?:\\.|[^'\\])*)'|'((?:\\.|[^'\\])*)%'|'%((?:\\.|[^'\\])*)%'|"((?:\\.|[^"\\])*)"/g);
		var strCount = 1;
		angular.forEach(strMatch, function(match) {
			var strName = match;
			var tempName = "string_" + strCount;
			tempLogic = tempLogic.replace(match, "[" + tempName + "]");

			tempStrings[tempName] = strName;
			strCount++;
		});

		// Replacing attributes with temporary placeholders
		var attrMatch = tempLogic.match(/\{[^\{|^}]*\}/g);
		var attrCount = 1;
		angular.forEach(attrMatch, function(match) {
			var attrName = match.replace(/\{|\}/g, "");
			var tempName = "attr_" + attrCount;
			tempLogic = tempLogic.replace(match, "{" + tempName + "}");
			tempAttrs[tempName] = attrName;
			attrCount++;
		});

		// Replacing numbers with temporary placeholders
		var numMatches = tempLogic.replace(/{[^}]+}/g, "").replace(/\[[^\]]+\]/g, "").match(/\s\d+(\.\d+)?/g);
		var numCount = 1;
		angular.forEach(numMatches, function(match) {
			var tempName = "number_" + numCount;
			var startSpaces = (match.match(/^\s+/) || [""])[0];
			var endSpaces = (match.match(/\s+$/) || [""])[0];
			tempLogic = tempLogic.replace(match, startSpaces + "{" + tempName + "}" + endSpaces);

			$scope.sectionsColumnLabelMap[match.replace(/^\s+|\s+$/g, "")] = [tempName, "", $scope.info.columnDataTypes['Long']];

			tempNumbers[tempName] = match.replace(/^\s+|\s+$/g, "");
			tempAttrs[tempName] = match.replace(/^\s+|\s+$/g, "");
			numCount++;
		});

		// Replacing regular expressions with temporary placeholders
		var regexMatches = tempLogic.match(/REGEX\([^\)]+\)/g);
		var regexCount = 1;

		var regexError = false;
		$scope.info.regexMatches = [];
		angular.forEach(regexMatches, function(match) {
			if (!regexError) {
				var attrInRegex = validateRegexFunc(match);
				if (!attrInRegex) {
					regexError = true;
				} else {
					var regexActual = getOriginal(match);
					var tempName = "regex_" + regexCount;
					tempLogic = tempLogic.replace(match, "{" + tempName + "}");

					$scope.sectionsColumnLabelMap[regexActual] = $scope.sectionsColumnLabelMap[attrInRegex];

					regexExprs[tempName] = regexActual;
					tempAttrs[tempName] = regexActual;
					regexCount++;
				}
			}
		});

		if (!!regexError) {
			return;
		}
		
		var countCount = 1;
		var countError = false;
		$scope.info.aggregateFunctions.map(function(aggrFunc){
			var funcName = aggrFunc.label;
			var countStringToSearch = funcName + "(";
			countMatches = getCountMatches(tempLogic, countStringToSearch);
			countCount = 1;
			// Replacing count functions with temporary placeholders
			// var countStringToSearch = "COUNT(";
			// var countMatches = getCountMatches(tempLogic, countStringToSearch);
			angular.forEach(countMatches, function (match) {
				if (!countError) {
					var exprInCount = match.substring(countStringToSearch.length, match.length - 1);
					var lengthCovered = getOriginal(tempLogic).indexOf(getOriginal(match)) + countStringToSearch.length;
					if (funcName == "COUNT" && !validateExpressions(exprInCount, lengthCovered)) {
						countError = true;
						return;
					} else {
						if (!checkCountAttrs(match)) {
							countError = true;
							var msg = GlobalService.getRulesLogicAlerts('rule_logic_multiple_sections_in_count');
							var oririnalExpr = getOriginal(match);
							var startIndex = $scope.info.logic.indexOf(oririnalExpr);
							var stopIndex = startIndex + oririnalExpr.length;
							displayLogicAlert(msg, startIndex, stopIndex);
							return;
						} else {
							var exprActual = getOriginal(match);
							var functionCounter = funcName.toLocaleLowerCase() + "_" + countCount;
							var tempName = functionCounter;
							tempLogic = tempLogic.replace(match, "{" + tempName + "}");

							$scope.sectionsColumnLabelMap[exprActual] = [tempName, "", $scope.info.columnDataTypes['Long']];

							countExprs[tempName] = exprActual;
							tempAttrs[tempName] = exprActual;
							countCount++;
						}
					}
				}
			});
		})

		if (!!countError) {
			return;
		}
		return tempLogic;
	}

	// Function to check if all attributes inside a count function belongs to same table
	function checkCountAttrs(expr) {
		var curlyBraceMatches = expr.match(/{[^}]+}/g) || [];
		var attrMatches = [];
		angular.forEach(curlyBraceMatches, function(match) {
			if(!match.startsWith("{number")) {
				attrMatches.push(match);
			}
		});
		var tableInExpr = null;
		var error = false;
		angular.forEach(attrMatches, function(match) {
			if (!error) {
				var attr = tempAttrs[match.replace(/\{|\}/g, "")];
				var table = $scope.sectionsColumnLabelMap[attr][4];
				if (!tableInExpr) {
					tableInExpr = table;
				} else {
					if (tableInExpr != table) {
						error = true;
					}
				}
			}
		});

		if (!!error) {
			//use different validation if TIMEDIFF used
			// var timediffFunction = expr.match(/TIMEDIFF[(](.)*[)]/g) || [];
			// if(timediffFunction == 0) return;
			return;
		}
		return true;
	}

	// Function to get COUNT function expressions in rule
	function getCountMatches(logic, countStringToSearch) {
		var matches = [];

		var countIndices = getIndicesOf(countStringToSearch, logic);

		angular.forEach(countIndices, function(index) {
			var startIndex = index;
			var endIndex;
			var openingBrackets = 1;
			var closingBrackets = 0;
			var endFound = false;
			for (var i = startIndex + countStringToSearch.length; i < logic.length; i++) {
				if (logic[i] == "(") {
					openingBrackets++;
				}
				if (logic[i] == ")") {
					closingBrackets++;
					if (closingBrackets == openingBrackets) {
						endIndex = i + 1;
						endFound = true;
						break;
					}
				}
			}
			if (!!endFound) {
				matches.push(logic.substring(startIndex, endIndex));
			}
		});
		return matches;
	}

	// Function to get a list of indices of a substring within a string
	function getIndicesOf(searchStr, str, caseSensitive) {
		var searchStrLen = searchStr.length;
		if (searchStrLen == 0) {
			return [];
		}
		var startIndex = 0,
		    index,
		    indices = [];
		if (!caseSensitive) {
			str = str.toLowerCase();
			searchStr = searchStr.toLowerCase();
		}
		while (( index = str.indexOf(searchStr, startIndex)) > -1) {
			indices.push(index);
			startIndex = index + searchStrLen;
		}
		return indices;
	}

	// Function to validate REGEX functions used in rule
	//
	// Validations:
	//   i. Check whether format of REGEX function is valid
	//   ii. Check if attribute inside REGEX function is string
	//   iii. Check if space is not present inside Regular Expression
	//   iv. Check if there is a capture inside Regular Expression
	//   v. Check if there is only one capture inside Regular Expression
	//   vi. Check if Regular Expression is valid

	function validateRegexFunc(regex) {
		if (!/REGEX\(\s*\{attr_\d+\}\s*,\s*\[string_\d+\]\s*\)/.test(regex)) {
			// Display msg - Invalid syntax with correct regex syntax
			var msg = GlobalService.getRulesLogicAlerts('rule_logic_invalid_regex_params');
			var oririnalRegex = getOriginal(regex);
			var startIndex = $scope.info.logic.indexOf(oririnalRegex);
			var stopIndex = startIndex + oririnalRegex.length;
			displayLogicAlert(msg, startIndex, stopIndex);
			return;
		}

		var attrInsideRegexFunc = tempAttrs[regex.match(/attr_\d+/)[0]];

		if ($scope.sectionsColumnLabelMap[attrInsideRegexFunc][2] != $scope.info.columnDataTypes['String']) {
			var msg = GlobalService.getRulesLogicAlerts('rule_logic_invalid_regex_attribute', attrInsideRegexFunc);
			var oririnalRegex = getOriginal(regex);
			var startIndex = $scope.info.logic.indexOf(oririnalRegex) + oririnalRegex.indexOf(attrInsideRegexFunc);
			var stopIndex = startIndex + attrInsideRegexFunc.length;
			displayLogicAlert(msg, startIndex, stopIndex);
			return;
		}

		var regexString = tempStrings[regex.match(/string_\d+/)[0]].replace(/^\"|\"$/g, '');

		if (/\s/.test(regexString)) {
			var msg = GlobalService.getRulesLogicAlerts('rule_logic_regex_space_found');
			var oririnalRegex = getOriginal(regex);
			var startIndex = $scope.info.logic.indexOf(oririnalRegex) + oririnalRegex.indexOf(regexString);
			var stopIndex = startIndex + regexString.length + 2;
			displayLogicAlert(msg, startIndex, stopIndex);
			return;
		}

		try {
			var reg = new RegExp(regexString);
			//regex should not match all
			if(regexString == "()"){
				var msg = GlobalService.getRulesLogicAlerts('rule_logic_invalid_regex_pattern', regexString);
				var oririnalRegex = getOriginal(regex);
				var startIndex = $scope.info.logic.indexOf(oririnalRegex) + oririnalRegex.indexOf(regexString);
				var stopIndex = startIndex + regexString.length + 2;
				displayLogicAlert(msg, startIndex, stopIndex);
				return;
			}
			//regex value should not have '/'
			/*if(regexString.indexOf('/') != -1){
				var backSlashIndex = regexString.indexOf('/');
				//check it it have '/' followed by '\'
				if(regexString.charAt(backSlashIndex - 1) != "\\"){
					var msg = GlobalService.getRulesLogicAlerts('rule_logic_invalid_regex_pattern', regexString);
					var oririnalRegex = getOriginal(regex);
					var startIndex = $scope.info.logic.indexOf(oririnalRegex) + oririnalRegex.indexOf(regexString);
					var stopIndex = startIndex + regexString.length + 2;
					displayLogicAlert(msg, startIndex, stopIndex);
					return;
				}
			}*/
			var captureMatchesInRegex = regexString.match(/\(((?:\\.|\||[^(\(\\)|(\)\\)])*)\)/g);
			if (!captureMatchesInRegex) {
				var msg = GlobalService.getRulesLogicAlerts('rule_logic_regex_no_capture', regexString);
				var oririnalRegex = getOriginal(regex);
				var startIndex = $scope.info.logic.indexOf(oririnalRegex) + oririnalRegex.indexOf(regexString);
				var stopIndex = startIndex + regexString.length + 2;
				displayLogicAlert(msg, startIndex, stopIndex);
				return;
			}
			if (captureMatchesInRegex.length > 1) {
				var msg = GlobalService.getRulesLogicAlerts('rule_logic_regex_multiple_captures', regexString);
				var oririnalRegex = getOriginal(regex);
				var startIndex = $scope.info.logic.indexOf(oririnalRegex) + oririnalRegex.indexOf(regexString);
				var stopIndex = startIndex + regexString.length + 2;
				displayLogicAlert(msg, startIndex, stopIndex);
				return;
			}
		} catch(e) {
			var msg = GlobalService.getRulesLogicAlerts('rule_logic_invalid_regex_pattern', regexString);
			var oririnalRegex = getOriginal(regex);
			var startIndex = $scope.info.logic.indexOf(oririnalRegex) + oririnalRegex.indexOf(regexString);
			var stopIndex = startIndex + regexString.length + 2;
			displayLogicAlert(msg, startIndex, stopIndex);
			return;
		}

		var regexData = {
			actualLogic : getOriginal(regex),
			attr : $scope.sectionsColumnLabelMap[attrInsideRegexFunc][0],
			table : $scope.sectionsColumnLabelMap[attrInsideRegexFunc][4],
			pattern : regexString
		};

		$scope.info.regexMatches.push(regexData);

		return attrInsideRegexFunc;
	}

	// Function to return actual length of a statement without any placeholders
	function getStatementLength(statement) {
		var tempStat = getOriginal(statement);

		return tempStat.length;
	}

	// Function to return actual statement replacing all the placeholders
	function getOriginal(statement) {
		var tempStat = angular.copy(statement);

		if (!!statement) {
			var attrsMatch = statement.match(/\{[^(\{|\})]+\}/g);

			angular.forEach(attrsMatch, function(match) {
				if (tempAttrs.hasOwnProperty(match.replace(/^\{|\}$/g, ""))) {
					tempStat = tempStat.replace(match, (match.indexOf("regex_") == -1 && match.indexOf("count_") == -1 && match.indexOf("number_") == -1 ? "{" : "") + tempAttrs[match.replace(/^\{|\}$/g, "")] + (match.indexOf("regex_") == -1 && match.indexOf("count_") == -1 && match.indexOf("number_") == -1 ? "}" : ""));
				}
			});

			var strsMatch = statement.match(/\[[^(\[|\])]+\]/g);

			angular.forEach(strsMatch, function(match) {
				if (tempStrings.hasOwnProperty(match.replace(/^\[|\]$/g, ""))) {
					tempStat = tempStat.replace(match, tempStrings[match.replace(/^\[|\]$/g, "")]);
				}
			});
		}

		return tempStat;
	}

	// Function to display logic alert and highlight a substring after closing the alert
	function displayLogicAlert(msg, startIndex, stopIndex) {
		var modalInstance = ModalService.alertBox({
			msg : msg
		});
		modalInstance.result.then(function(response) {
			if (response == "ok") {
				highlightLogic(startIndex, stopIndex);
			}
		}, function(response) {
			if (response == "backdrop click") {
				highlightLogic(startIndex, stopIndex);
			}
		});
	}

	// Function to highlight part of logic after closing alert
	function highlightLogic(startIndex, stopIndex) {
		var input = document.getElementById("inputLogic");
		input.focus();
		input.setSelectionRange(startIndex, stopIndex);
		angular.element(input).addClass("logic-select");
		$timeout(function() {
			input.setSelectionRange(0, 0);
			angular.element(input).removeClass("logic-select");
			input.blur();
		}, 3000);
	}

	// Function to validate whether the logic entered is grammatically correct
	$scope.validateLogicGrammar = function() {
		var logic = getReplacedLogic();
		if (!logic) {
			return;
		}
		//check for nested Aggrigate functions
		if(/(COUNT|MAX|MIN|SUM|AVG)\s*\(\s*(COUNT|MAX|MIN|SUM|AVG)[^\)]+\)/gm.test($scope.info.logic)){
			ModalService.alertBox({
				msg : GlobalService.getVal('rulesLogicAlerts')['rule_logic_nexted_aggregate_function']
			});
			return;
		}
		//if TIMEDIFF then scope should be file
		if (/TIMEDIFF/.test($scope.info.logic)) {
			if ($scope.info.scope != "File") {
				ModalService.alertBox({
					msg : GlobalService.getVal('rulesLogicAlerts')['rule_logic_file_scope_for_TIMEDIFF']
				});
				return;
			}
		}
		//if COUNT then scope should be file or bundle
		if (/COUNT/.test($scope.info.logic)) {
			if ($scope.info.scope != "File" && $scope.info.scope != "Bundle") {
				ModalService.alertBox({
					msg : GlobalService.getVal('rulesLogicAlerts')['rule_logic_count_in_table']
				});
				return;
			}
		}
		//if COUNT then scope should be file or bundle
		if (/SUM/.test($scope.info.logic) || /AVG/.test($scope.info.logic) || /MIN/.test($scope.info.logic) || /MAX/.test($scope.info.logic)) {
			if ($scope.info.scope != "File" && $scope.info.scope != "Bundle") {
				ModalService.alertBox({
					msg : GlobalService.getVal('rulesLogicAlerts')['rule_logic_aggregations_in_table']
				});
				return;
			}
		}

		if ($scope.info.scope != "Table") {
			if (!(/SUM/.test($scope.info.logic) || /AVG/.test($scope.info.logic) || /MIN/.test($scope.info.logic) || /MAX/.test($scope.info.logic) || /COUNT/.test($scope.info.logic)) ){
			//if (/regex_\d+/.test(logic) || /attr_\d+/.test(logic)) {
				ModalService.alertBox({
					msg : GlobalService.getVal('rulesLogicAlerts')['rule_logic_file_bundle_in_count']
				});
				return;
			}
		} else {
			if (/count_\d+/.test(logic)) {
				ModalService.alertBox({
					msg : GlobalService.getVal('rulesLogicAlerts')['rule_logic_count_in_table']
				});
				return;
			}
		}
		// all expression should be wrape with an aggregate function
		if ($scope.info.scope != "Table") {
			var regExCondition = /\s+AND\s*|\s*OR\s*/;
			var logicEachItem = logic.split(regExCondition);
			var gbregexAggregationfunction = /^\s*{\s*(count|sum|min|max|avg)_\d+}\s*/;
			for(var i=0;i<logicEachItem.length;i++){
				if(!gbregexAggregationfunction.test(logicEachItem[i])){
					ModalService.alertBox({
						msg : GlobalService.getVal('rulesLogicAlerts')['rule_logic_file_bundle_in_count']
					});
					return;
				}
			}
		}
		//validate REGEX
		//check if REGEX is direct compare to any arithmetic/comparator operator
		var gbObject = $scope.checkRegexWithOperator($scope.info.logic);
		if(gbObject.result){
			var msg = GlobalService.getRulesLogicAlerts('rule_logic_regex_assignment_operator');
			displayLogicAlert(msg, gbObject.index, (gbObject.index + 5));
			return;
		}

		// Check the syntax of parentheses used
		if (!$scope.checkParentheses(logic)) {
			return;
		}

		var lengthCovered = 0;

		if (!validateExpressions(logic, lengthCovered)) {
			return;
		}
		return true;
	};
	
	// Function to validate each expressions
	function validateExpressions(logic, lengthCovered) {
		// Split statements separated by AND or OR
		var logicalSplitStr = '';
		for (var i in $scope.info.operators) {
			if ($scope.info.operators[i].subtype == 'logical') {
				if (logicalSplitStr.length == 0) {
					logicalSplitStr += '\\s+' + $scope.info.operators[i].label + '\\s+';
				} else {
					logicalSplitStr += '|\\s+' + $scope.info.operators[i].label + '\\s+';
				}
			}
		}
		var logicalSplitRegex = new RegExp(logicalSplitStr);
		var logicalOperators = logic.match(new RegExp(logicalSplitStr, "g"));
		var individualStatements = logic.split(logicalSplitRegex);
		var funcStr = '';
		// Loop through individual statements
		for (var s = 0; s < individualStatements.length; s++) {
			var statementLength = getStatementLength(individualStatements[s]);
			individualStatements[s] = ' ' + individualStatements[s] + ' ';
			for (var j in $scope.info.functions) {
				if (j == 0) {
					funcStr += $scope.info.functions[j].label;
				} else {
					funcStr += "|" + $scope.info.functions[j].label;
				}
			}

			// Check if functions used is valid or not
			if (!$scope.checkFunctions(individualStatements[s])) {
				return;
			}
			
			// Remove any function or brackets in the string for validation
			var funcRegex = new RegExp(funcStr, 'g');
			var funcName = individualStatements[s].split("(")[0].replace(/^\s+|\s+$/g, '');
			individualStatements[s] = individualStatements[s].replace(funcRegex, '');
			individualStatements[s] = $scope.removeBrackets(individualStatements[s]);
			var startPos = null,
			    endPos = null;
			
			// Check if regex is used properly
			if (/\{regex_\d+\}/.test(individualStatements[s]) && ($scope.sectionsColumnLabelMap[tempAttrs[individualStatements[s].match(/regex_\d+/)[0]]][2] != $scope.info.columnDataTypes['String'] && /^\s*\{regex_\d+\}\s*$/.test(individualStatements[s]))) {
				var msg = GlobalService.getRulesLogicAlerts('rule_logic_error');
				displayLogicAlert(msg, lengthCovered, lengthCovered + statementLength);
				return;
			}
			
			// Check if only regex variable is present in the statement. If yes, continue
			if (/^\s*\{regex_\d+\}\s*$/.test(individualStatements[s])) {
				continue;
			}

			// Check if a statement starts with an attribute
			if (!/^\s*\{/.test(individualStatements[s])) {
				var msg;
				if (s == 0) {
					msg = GlobalService.getRulesLogicAlerts('rule_logic_invalid_start');
				} else {
					msg = GlobalService.getRulesLogicAlerts('rule_logic_logical_right');
				}
				displayLogicAlert(msg, lengthCovered, lengthCovered + statementLength);
				return;
			}

			// Check for each operator on the right side of the first attribute
			var rightOperatorMatches = individualStatements[s].match(/\}\s*[^\s|^\{]*\s*[\{|\d|\[]?/);
			var rightOperator = rightOperatorMatches[0];
			rightOperator = rightOperator.replace(/^\}|[\{|\d|\[]$/g, "").replace(/^\s+|\s+$/g, '');

			// check for TIMEDIFF for operator "}, {" or "},{"
			if(funcName == "TIMEDIFF"){
				if (rightOperator == ',') {
					rightOperator = "";
					continue;
				}
			}
			if (rightOperator == 'IS') {
				rightOperatorMatches = individualStatements[s].match(/\}\s*.*/);
				rightOperator = rightOperatorMatches[0];
				rightOperator = rightOperator.replace(/^\}|\[\w+\]|\d+(\.\d+)?|\{\w+\}/g, "").replace(/^\s+|\s+$/g, '');
			}
			if (rightOperator == 'NOT') {
				rightOperatorMatches = individualStatements[s].match(/\}\s*.*/);
				rightOperator = rightOperatorMatches[0];
				rightOperator = rightOperator.replace(/^\}|\[\w+\]|\d+(\.\d+)?|\{\w+\}/g, "").replace(/^\s+|\s+$/g, '');
			}
			if($scope.isNestedAggregate(funcName)){
				return;
			}
			// Check if any attribute is repeated in a statement
			if (!$scope.checkRepeatedAttributes(individualStatements[s], lengthCovered, statementLength)) {
				return;
			}
			rightOperator = getOriginal(rightOperator);
			if (/^\s*$/.test(rightOperator)) {
				var msg = GlobalService.getRulesLogicAlerts('rule_logic_operator_right');
				displayLogicAlert(msg, lengthCovered, lengthCovered + statementLength);
				return;
			}
			var rightOperatorFound = false;
			var operatorSpaceRequired = false;
			for (var j in $scope.info.operators) {
				if ($scope.info.operators[j].label == rightOperator) {
					rightOperatorFound = true;
					break;
				} else if (rightOperator.indexOf($scope.info.operators[j].label) != -1) {
					operatorSpaceRequired = true;
					break;
				}
			}

			if (operatorSpaceRequired) {
				var msg = GlobalService.getRulesLogicAlerts('rule_logic_invalid_operator', rightOperator) + ". " + GlobalService.getRulesLogicAlerts('rule_logic_operator_space_needed');
				var startPos = lengthCovered + $scope.info.logic.substr(lengthCovered, statementLength).indexOf(getOriginal(rightOperator));
				displayLogicAlert(msg, startPos, startPos + getOriginal(rightOperator).length);
				return;
			}

			if (!rightOperatorFound) {
				var msg = GlobalService.getRulesLogicAlerts('rule_logic_invalid_operator', rightOperator);
				var startPos = lengthCovered + $scope.info.logic.substr(lengthCovered, statementLength).indexOf(getOriginal(rightOperatorMatches[0]));
				displayLogicAlert(msg, startPos, startPos + getOriginal(rightOperatorMatches[0]).length);
				return;
			}

			// Check for arithmetic or comparison or inline function operator between operands
			var operatorBetweenOperands = individualStatements[s].match(/[\}|\]]\s*[^(\}|\{|\[|\])]*\s*[\{|\[]/g) || [];

			if (!!operatorBetweenOperands.length) {
				for (var i = 0; i < operatorBetweenOperands.length; i++) {
					operatorBetweenOperands[i] = operatorBetweenOperands[i].substring(1, operatorBetweenOperands[i].length - 1);
					if (/^\d+(\.\d+)?$/.test(operatorBetweenOperands[i])) {
						continue;
					}
					var operator = operatorBetweenOperands[i];
					var operatorFound = false;
					var partialOperatorFound = false;
					var tempOperator = operator.replace(/^\s*|\s*$/g, '');
					var operatorNotAllowed = false;
					for (var j = 0; j < $scope.info.operators.length; j++) {
						if ($scope.info.operators[j].label == tempOperator && ($scope.info.operators[j].subtype == 'arithmetic' || $scope.info.operators[j].subtype == 'comparison' || $scope.info.operators[j].subtype == 'equal comparison' || $scope.info.operators[j].subtype == 'inline function')) {
							operatorFound = true;
							break;
						} else if ($scope.info.operators[j].label == tempOperator) {
							operatorNotAllowed = true;
							break;
						}
					}
					if (operatorNotAllowed) {
						var msg = GlobalService.getRulesLogicAlerts('rule_logic_invalid_between_attr', tempOperator);
						var startPos = lengthCovered + $scope.info.logic.substr(lengthCovered, statementLength).indexOf(getOriginal(tempOperator));
						displayLogicAlert(msg, startPos, startPos + getOriginal(tempOperator).length);
						return;
					}
					if (operatorFound && (!/^\s+/.test(operator) || !/\s+$/.test(operator))) {
						var msg = GlobalService.getRulesLogicAlerts('rule_logic_operator_without_spaces', tempOperator) + ". " + GlobalService.getRulesLogicAlerts('rule_logic_operator_space_needed');
						var startPos = lengthCovered + $scope.info.logic.substr(lengthCovered, statementLength).indexOf(getOriginal(tempOperator));
						displayLogicAlert(msg, startPos, startPos + getOriginal(tempOperator).length);
						return;
					}
					if (!operatorFound) {
						if (!tempOperator.length) {
							var msg = GlobalService.getRulesLogicAlerts('rule_logic_no_operator');
							var startPos = lengthCovered;
							var endPos = startPos + statementLength;
							displayLogicAlert(msg, startPos, endPos);
							return;
						} else {
							var msg = GlobalService.getRulesLogicAlerts('rule_logic_invalid_operator_between', tempOperator);
							var startPos = lengthCovered + $scope.info.logic.substr(lengthCovered, statementLength).indexOf(getOriginal(tempOperator));
							displayLogicAlert(msg, startPos, startPos + getOriginal(tempOperator).length);
							return;
						}
					}
				}
			}
			// Check for left and right operands of comparison operator
			var comparisonOperatorCount = 0;
			for (var j in $scope.info.operators) {
				if (individualStatements[s].indexOf(' ' + $scope.info.operators[j].label + ' ') != -1 && $scope.info.operators[j].subtype == 'comparison') {
					if (comparisonOperatorCount >= 1 || individualStatements[s].indexOf(' ' + $scope.info.operators[j].label + ' ') != individualStatements[s].lastIndexOf(' ' + $scope.info.operators[j].label + ' ')) {
						var msg = GlobalService.getRulesLogicAlerts('rule_logic_cmp_operator_exceeded');
						displayLogicAlert(msg, lengthCovered, lengthCovered + statementLength);
						return;
					}
					if (!$scope.checkComparisonOperators(individualStatements[s], $scope.info.operators[j].label, individualStatements[s].indexOf($scope.info.operators[j].label), lengthCovered, statementLength, funcName)) {
						return;
					}
					comparisonOperatorCount++;
				} else if (individualStatements[s].indexOf(' ' + $scope.info.operators[j].label + ' ') != -1 && $scope.info.operators[j].subtype == 'equal comparison') {
					if (comparisonOperatorCount >= 1 || individualStatements[s].indexOf(' ' + $scope.info.operators[j].label + ' ') != individualStatements[s].lastIndexOf(' ' + $scope.info.operators[j].label + ' ')) {
						var msg = GlobalService.getRulesLogicAlerts('rule_logic_cmp_operator_exceeded');
						displayLogicAlert(msg, lengthCovered, lengthCovered + statementLength);
						return;
					}
					if (!$scope.checkEqualComparisonOperators(individualStatements[s], $scope.info.operators[j].label, individualStatements[s].indexOf($scope.info.operators[j].label), lengthCovered, statementLength, funcName)) {
						return;
					}
					comparisonOperatorCount++;
				}
			}

			// Check for left and right operands of inline function
			for (var j in $scope.info.operators) {
				if (individualStatements[s].indexOf(' ' + $scope.info.operators[j].label + ' ') != -1 && $scope.info.operators[j].subtype == 'inline function') {
					if (!$scope.checkInlineFunction(individualStatements[s], $scope.info.operators[j].label, individualStatements[s].indexOf($scope.info.operators[j].label), lengthCovered, statementLength, funcName)) {
						return;
					}
					break;
				}
			}

			// Check for left and right operands of is null function
			for (var j in $scope.info.operators) {
				if (individualStatements[s].indexOf(' ' + $scope.info.operators[j].label + ' ') != -1 && $scope.info.operators[j].subtype == 'equal null') {
					if (!$scope.checkEqualNullFunction(individualStatements[s], $scope.info.operators[j].label, individualStatements[s].indexOf($scope.info.operators[j].label), lengthCovered, statementLength, funcName)) {
						return;
					}
					break;
				}
			}

			//Check for the left and right side operands of an arithmetic operator and the operator after right operand
			var insideAttribute = false;
			var insideString = false;
			for (var i = 0; i < individualStatements[s].length; i++) {
				if (individualStatements[s][i] == '{') {
					insideAttribute = true;
					continue;
				} else if (individualStatements[s][i] == '}') {
					insideAttribute = false;
					continue;
				}
				if (individualStatements[s][i] == "\'" || individualStatements[s][i] == "\"") {
					insideString = !insideString;
				}
				if (!insideAttribute && !insideString) {
					for (var k = 0; k < $scope.info.operators.length; k++) {
						if ($scope.info.operators[k].label == individualStatements[s][i] && $scope.info.operators[k].subtype == 'arithmetic') {
							if (!$scope.checkArithmeticOperators(individualStatements[s], $scope.info.operators[k].label, i, lengthCovered, statementLength)) {
								return;
							}
						}
					}
				}

			}

			var necessaryOperatorFound = false;
			for (var i = 0; i < $scope.info.operators.length; i++) {
				if ($scope.info.operators[i].subtype != 'arithmetic') {
					if (individualStatements[s].indexOf($scope.info.operators[i].label) > -1) {
						necessaryOperatorFound = true;
					}
				}
			}

			if (!necessaryOperatorFound) {
				if($scope.isAggregateFunction(funcName) && $scope.getOperatorType(rightOperator) != 'comparison'){
					var msg = GlobalService.getRulesLogicAlerts('rule_logic_aggregate_condition');
					displayLogicAlert(msg, lengthCovered, lengthCovered + statementLength);
				}else{
					var msg = GlobalService.getRulesLogicAlerts('rule_logic_no_condition');
					displayLogicAlert(msg, lengthCovered, lengthCovered + statementLength);
				}
				return;
			}

			// Refresh the section column label map here
			for (var i = 0; i < $scope.info.convertedAttributes.length; i++) {
				$scope.changeColumnType($scope.info.convertedAttributes[i].value, $scope.info.convertedAttributes[i].type);
			}

			$scope.info.convertedAttributes = [];
			lengthCovered += statementLength + (s < individualStatements.length - 1 ? logicalOperators[s].length : 0);
		}
		return true;
	}

	var checkForBracketClosing = function(statement, funcName){
		var regexStr = funcName.label +'[^}]\\s*{\\w+}\\s*\\)';
		var matchString = statement.match(new RegExp(regexStr,'g'));
		if(matchString){
			return true;
		}
		return false;
	}

	$scope.isNestedAggregate = function(funcName){
		//check for nested aggregate function; should not allow
		if($scope.isAggregateFunction(funcName) || funcName == 'COUNT'){
			var functionDeclaration = $scope.info.logic.match(/(MIN|MAX|AVG|SUM|COUNT)\s*.*?\(([^)]*)\)/g);
			if(functionDeclaration.length && functionDeclaration.length > 0){
				for(var fdCount=0;fdCount < functionDeclaration.length; fdCount++){
					var aggfuncArg = functionDeclaration[fdCount].match(/\(.*(MIN|MAX|AVG|SUM|COUNT).*\)/g);
					if(aggfuncArg){
						var msg = GlobalService.getRulesLogicAlerts('rule_logic_nexted_aggregate_function');
						var si =  $scope.info.logic.indexOf(functionDeclaration[fdCount]);
						var ei = si + aggfuncArg[0].length;
						displayLogicAlert(msg,si, ei );
						return true;
					}
				}
			}
		}
		return false;
	}
	$scope.checkRegexWithOperator = function(logic) {
		var startIndex = logic.search(/REGEX/gi), str, startIndex, endIndex, res;
		while(startIndex != -1) {
			str = $scope.parseToken(logic, startIndex, '(', ')');
			endIndex = startIndex + str.length;
			startIndex = logic.indexOf('REGEX', startIndex + "REGEX".length);
			//check after REGEX sentence if '=' is available or not
			if(endIndex <= logic.length) {
				// fetch next 10 character after REXEX sentence
				res = logic.substr(endIndex, 10);
				res = res.trim();
				if(res.indexOf("=") == 0){
					return {'result': true, 'index': endIndex};
				}
			}
		}
		return {'result': false, 'index': 0};
	};
	// Function to check if logic contains repeated attributes in a statement
	$scope.checkRepeatedAttributes = function(statement, lengthCovered, statementLength) {
		var matchString = statement.match(/\{([^}]+)\}/g);
		if (!matchString) {
			return true;
		}
		var foundAttrs = {};
		for (var i = 0; i < matchString.length; i++) {
			var attrToCheck = tempAttrs[matchString[i].replace(/\{|\}/g, '')];
			if (foundAttrs.hasOwnProperty(attrToCheck)) {
				var msg = GlobalService.getRulesLogicAlerts('rule_logic_repeated_attribute', attrToCheck);
				displayLogicAlert(msg, lengthCovered, lengthCovered + statementLength + 1);
				return;
			} else {
				foundAttrs[attrToCheck] = true;
			}
		}
		return true;
	};

	// Function to check if a function used in logic is valid or not
	//
	// Validations:
	//   i. Check if there is something inside a function
	//   ii. Check if there is just an attribute inside a function
	//   iii. Check if there is a need of typecasting in case of conversion functions(CONERTTOINT and CONVERTTOSTRING)
	//   iv. Check if function used is supported or not
	
	$scope.checkFunctions = function(statement) {
		$scope.info.convertedAttributes = [];
		for(var i=0 ; i<$scope.info.functions.length; i++){
			if(statement.includes($scope.info.functions[i].label)){
				if(!checkForBracketClosing(statement, $scope.info.functions[i])){
					//error
					msg = GlobalService.getRulesLogicAlerts('rule_logic_error');
					var tempStr = getOriginal(statement).replace(/^\s+|\s+$/g, "");
					var startPos = $scope.info.logic.indexOf(tempStr);
					var endPos = startPos + tempStr.length;
					displayLogicAlert(msg, startPos, endPos);
					return;
				}
			}
		}
		var regex = /\s*[^\s]+\(\s*\{?[^\}]*\}?\s*\)/g;
		var regExForTIMEDIFF = /\s*[^\s]+\(\s*\{?[^\}]*\}?\s*[,]\s*\{?[^\}]*\}?\s*\)/g;
		var matchString = "";
		var aggregateRegExStm = /(sum|min|max|avg)_\d/gm;
		var aggregateRegExCountStm = /(count)_\d/gm;
		if(statement.indexOf('TIMEDIFF') != -1){
			matchString = statement.match(regExForTIMEDIFF);
			//if(!matchString){
				var timediffFunctionWithParam = /\s*TIMEDIFF\s*[(]\s*{regex_\d}\s*,\s*{regex_\d}\s*[)]\s*/;
				var timediffFunctionReturnedAndComparatorOperator = /\s*TIMEDIFF\s*[(]\s*{regex_\d}\s*,\s*{regex_\d}\s*[)]\s*(>|>=|<|<=|<>|=)\s*/;
				var timediffFunctionReturnedAndComparatorOperatorWithNumber = /\s*TIMEDIFF\s*[(]\s*{regex_\d}\s*,\s*{regex_\d}\s*[)]\s*(>|>=|<|<=|<>|=)\s*{number_\d}\s*/;
				var msg = "";
				//check TIMEDIFF syntax TIMEDIFF(RegEx_1, RegEx_2)
				if(!timediffFunctionWithParam.test(statement)){
					msg = GlobalService.getRulesLogicAlerts('rule_logic_file_scope_for_TIMEDIFF_parameter_error', funcName);
				}
				//check TIMEDIFF syntax TIMEDIFF(RegEx_1, RegEx_2) {comparision operator} 
				else if(!timediffFunctionReturnedAndComparatorOperator.test(statement)){
					msg = GlobalService.getRulesLogicAlerts('rule_logic_file_scope_for_TIMEDIFF_returned_value_should_compare_using_comparision_operator', funcName);
				}
				//check TIMEDIFF syntax TIMEDIFF(RegEx_1, RegEx_2) {comparision operator} number_1
				else if(!timediffFunctionReturnedAndComparatorOperatorWithNumber.test(statement)){
					msg = GlobalService.getRulesLogicAlerts('rule_logic_file_scope_for_TIMEDIFF_returned_value_should_compare_wiht_number', funcName);
				}
				if(msg){
					var startPos = $scope.info.logic.indexOf('TIMEDIFF');
					var endPos = startPos + statement.length;
					displayLogicAlert(msg, startPos, endPos);
					return;
				}
				return true;
			//}
		}else{
			matchString = statement.match(regex);
		}
		if (matchString) {
			var keys = Object.keys(tempAttrs);
			for ( i = 0; i < matchString.length; i++) {
				var stringFound = false;
				for (var j = 0; j < keys.length; j++) {
					if (keys[j].indexOf(matchString[i]) > -1) {
						stringFound = true;
						break;
					}
				}
				if (stringFound) {
					continue;
				}
				if ((matchString[i].match(/\{/g) || []).length != (matchString[i].match(/\}/g) || []).length) {
					continue;
				}
				if ((matchString[i].match(/\(/g) || []).length != (matchString[i].match(/\)/g) || []).length) {
					continue;
				}
				var funcName = matchString[i].split("(")[0].replace(/^\s+|\s+$/g, '');
				var attributeInFunction = matchString[i].substring(matchString[i].indexOf('(') + 1, matchString[i].lastIndexOf(')'));
				if (/^\s*$/.test(attributeInFunction)) {
					var msg = GlobalService.getRulesLogicAlerts('rule_logic_function_without_params');
					var startPos = $scope.info.logic.indexOf(matchString[i]);
					var endPos = startPos + matchString[i].length;
					displayLogicAlert(msg, startPos, endPos);
					return;
				}
				if (!/^\s*\{[^\}]+\}\s*$/.test(attributeInFunction)) {
					var msg = GlobalService.getRulesLogicAlerts('rule_logic_function_without_attr');
					var tempStr = getOriginal(matchString[i]);
					var startPos = $scope.info.logic.indexOf(tempStr);
					var endPos = startPos + tempStr.length;
					displayLogicAlert(msg, startPos, endPos);
					return;
				}
				var functionFound = false;
				for (var j in $scope.info.functions) {
					if ($scope.info.functions[j].label == funcName) {
						functionFound = true;
						var attributeMatched = tempAttrs[matchString[i].split(/\{|\}/)[1]];
						if(funcName != 'CONVERTTOINT' && funcName != 'TIMEDIFF' && matchString[i].indexOf('regex_') != -1) {
							var msg = GlobalService.getRulesLogicAlerts('rule_logic_regex_func_invalid', funcName);
							var tempStr = getOriginal(matchString[i]).replace(/^\s+|\s+$/g, "");
							var startPos = $scope.info.logic.indexOf(tempStr);
							var endPos = startPos + tempStr.length;
							displayLogicAlert(msg, startPos, endPos);
							return;
						}
						if (funcName == 'CONVERTTOINT') {
							if ($scope.sectionsColumnLabelMap[attributeMatched][2] == $scope.info.columnDataTypes['String']) {
								$scope.info.convertedAttributes.push({
									value : attributeMatched,
									type : $scope.sectionsColumnLabelMap[attributeMatched][2]
								});
								$scope.changeColumnType(attributeMatched, $scope.info.columnDataTypes['Integer']);
							} else {
								var msg = GlobalService.getRulesLogicAlerts('rule_logic_no_typecasting', attributeMatched);
								var tempStr = getOriginal(matchString[i]).replace(/^\s+|\s+$/g, "");
								var startPos = $scope.info.logic.indexOf(tempStr);
								var endPos = startPos + tempStr.length;
								displayLogicAlert(msg, startPos, endPos);
								return;
							}
						} else if (funcName == 'CONVERTTOSTRING') {
							if ($scope.sectionsColumnLabelMap[attributeMatched][2] != $scope.info.columnDataTypes['String']) {
								$scope.info.convertedAttributes.push({
									value : attributeMatched,
									type : $scope.sectionsColumnLabelMap[attributeMatched][2]
								});
								$scope.changeColumnType(attributeMatched, $scope.info.columnDataTypes['String']);
							} else {
								var msg = GlobalService.getRulesLogicAlerts('rule_logic_no_typecasting', attributeMatched);
								var tempStr = getOriginal(matchString[i]).replace(/^\s+|\s+$/g, "");
								var startPos = $scope.info.logic.indexOf(tempStr);
								var endPos = startPos + tempStr.length;
								displayLogicAlert(msg, startPos, endPos);
								return;
							}
						} else if (funcName == 'VERSION') {	
						}else if (funcName == 'TIMEDIFF') {
						}
						break;
					}
				}
				if (!functionFound) {
					var msg = GlobalService.getRulesLogicAlerts('rule_logic_invalid_function', funcName);
					var tempStr = getOriginal(matchString[i]).replace(/^\s+|\s+$/g, "");
					var startPos = $scope.info.logic.indexOf(tempStr);
					var endPos = startPos + tempStr.length;
					displayLogicAlert(msg, startPos, endPos);
					return;
				}
			}
		}
		//validate SUM. MIN, MAX and AVG
		// it should have attribute of type integer
		// it should have only one attribute {...}
		var matchAggregateFunction = statement.match(aggregateRegExStm);
		if(matchAggregateFunction && matchAggregateFunction.length){
			var keys = Object.keys(tempAttrs);
			var encriptedFunctionName = matchAggregateFunction[0].replace(/{|}/gm, "");
			var actualAggregateFunctionStr = tempAttrs[encriptedFunctionName];
			if(/{\s*([^}]+?)\s*}.*{\s*([^}]+?)\s*}/gm.test(actualAggregateFunctionStr)){				
				var msg = GlobalService.getRulesLogicAlerts('rule_logic_invalid_aggregate_function', actualAggregateFunctionStr);
				var startPos = $scope.info.logic.indexOf(actualAggregateFunctionStr);
				var endPos = startPos + actualAggregateFunctionStr.length;
				displayLogicAlert(msg, startPos, endPos);
				return;
			}
			// Check if aggregate function have valid expression or not
			if(/(SUM|MIN|MAX|AVG)\s*\(\s*{\s*.+\s*}\s*\)/g.test(actualAggregateFunctionStr)){
				var currentAttrname = actualAggregateFunctionStr.match(/{\s*.+\s*}/gm);
				if(currentAttrname && currentAttrname[0]){
					currentAttrname = currentAttrname[0].replace(/\s*{\s*|\s*}\s*/g,"");
					if($scope.sectionsColumnLabelMap[currentAttrname] && $scope.sectionsColumnLabelMap[currentAttrname][2] == $scope.info.columnDataTypes['String']){
						var msg = GlobalService.getRulesLogicAlerts('rule_logic_aggregate_not_numeric_attr', actualAggregateFunctionStr);
						var startPos = $scope.info.logic.indexOf(actualAggregateFunctionStr);
						var endPos = startPos + actualAggregateFunctionStr.length;
						displayLogicAlert(msg, startPos, endPos);
						return;
					}else if(!$scope.sectionsColumnLabelMap[currentAttrname]){
						return false;
					}
				}
			}else{
				var msg = GlobalService.getRulesLogicAlerts('rule_logic_invalid_aggregate_function', actualAggregateFunctionStr);
				var startPos = $scope.info.logic.indexOf(actualAggregateFunctionStr);
				var endPos = startPos + actualAggregateFunctionStr.length;
				displayLogicAlert(msg, startPos, endPos);
				return;
			}
		}
		//CHECK FOR nested COUNT FUNCTION 
		
		var matchAggregateFunction = statement.match(aggregateRegExCountStm);		
		if(matchAggregateFunction && matchAggregateFunction.length){
			var encriptedFunctionName = matchAggregateFunction[0].replace(/{|}/gm, "");
			var actualAggregateFunctionStr = tempAttrs[encriptedFunctionName];
			var countStartIndex = actualAggregateFunctionStr.indexOf("(");
			var countEndIndex = $scope.findClosingBracketMatchIndex(actualAggregateFunctionStr, countStartIndex);
			var bodyOfCount = actualAggregateFunctionStr.substring(countStartIndex, countEndIndex);
			// check if it have nested count or any other aggregate function
			if(/\s+COUNT|MIN|MAX|AVG|SUM\s*\(/gm.test(bodyOfCount)){
				var msg = GlobalService.getRulesLogicAlerts('rule_logic_nexted_aggregate_function');
				var startPos = countStartIndex;
				var endPos = startPos + bodyOfCount.length;
				displayLogicAlert(msg, startPos, endPos);
				return;
			}
		}
		return true;
	};
	$scope.findClosingBracketMatchIndex = function(str, pos) {
		if (str[pos] != '(') {
		  throw new Error("No '(' at index " + pos);
		}
		var depth = 1;
		for (var i = pos + 1; i < str.length; i++) {
		  switch (str[i]) {
		  case '(':
			depth++;
			break;
		  case ')':
			if (--depth == 0) {
			  return i;
			}
			break;
		  }
		}
		return -1;    // No matching closing parenthesis
	  }
	// Function to change the data type of a column
	$scope.changeColumnType = function(attribute, type) {
		$scope.sectionsColumnLabelMap[attribute][2] = type;
	};

	// Function to remove brackets from statement
	$scope.removeBrackets = function(statement) {
		var i = 0,
		    startPos = null,
		    endPos = null,
		    insideAttribute = false;
		while (i < statement.length) {
			if (statement[i] == '{') {
				insideAttribute = true;
				i++;
				continue;
			}
			if (statement[i] == '}') {
				insideAttribute = false;
				i++;
				continue;
			}
			if (insideAttribute) {
				i++;
				continue;
			}
			if (statement[i] == '(' || statement[i] == ')') {
				statement = statement.slice(0, i) + statement.slice(i + 1);
				i--;
			}
			i++;
		}
		return statement;
	};

	// Function to validate inline functions in rule(LIKE and NOT LIKE)
	//
	// Validations:
	//   i. Test if left operand is an attribute
	//   ii. Test if there is something after the inline function
	//   iii. Test if left attribute is of string type
	//   iv. Test if right operand of inline function is a pattern string

	$scope.checkInlineFunction = function(statement, operator, operatorPosition, lengthCovered, statementLength, funcName) {
		if(funcName == 'VERSION'){
			var msg = GlobalService.getRulesLogicAlerts('rule_logic_version_invalid_operation', operator);
			displayLogicAlert(msg, lengthCovered, lengthCovered + statementLength);
			return;
		}
		var leftOperand = statement.substring(0, operatorPosition - 1).replace(/^\s+|\s+$/g, '');
		if (!/^\{[^\}]+\}$/.test(leftOperand)) {
			var msg = GlobalService.getRulesLogicAlerts('rule_logic_left_attribute', operator);
			displayLogicAlert(msg, lengthCovered, lengthCovered + statementLength);
			return;
		}
		var rightOperand = statement.substr(operatorPosition + operator.length).replace(/^\s+|\s+$/g, '');
		if (/^\s*$/.test(rightOperand)) {
			var msg = GlobalService.getRulesLogicAlerts('rule_logic_right_value_required', operator);
			displayLogicAlert(msg, lengthCovered, lengthCovered + statementLength);
			return;
		}
		leftOperand = getOriginal(leftOperand).replace(/\s+$/g, '').replace(/^\{|\}$/g, '');
		rightOperand = getOriginal(rightOperand).replace(/\s+$/g, '').replace(/^\{|\}$/g, '');		
		if ($scope.sectionsColumnLabelMap[leftOperand][2] == $scope.info.columnDataTypes['String']) {
			if (!/^\'\%[^\'|\%]*\%\'$|^\'[^\'|\%]*\%\'$|^\'\%[^\'|\%]*\'$/.test(rightOperand)) {
				var msg = GlobalService.getRulesLogicAlerts('rule_logic_right_pattern_required', operator);
				displayLogicAlert(msg, lengthCovered, lengthCovered + statementLength);
				return;
			}
		} else {
			var msg = GlobalService.getRulesLogicAlerts('rule_logic_string_operator', operator);
			displayLogicAlert(msg, lengthCovered, lengthCovered + statementLength);
			return;
		}
		return true;
	};

	$scope.checkEqualNullFunction = function(statement, operator, operatorPosition, lengthCovered, statementLength,funcName) {
		var leftOperand = statement.substring(0, operatorPosition - 1).replace(/^\s+|\s+$/g, '');		
		leftOperand = getOriginal(leftOperand).replace(/\s+$/g, '').replace(/^\{|\}$/g, '');
		if(funcName == 'VERSION'){
			var msg = GlobalService.getRulesLogicAlerts('rule_logic_version_invalid_operation', operator);
			displayLogicAlert(msg, lengthCovered, lengthCovered + statementLength);
			return;
		}		
		if ($scope.sectionsColumnLabelMap[leftOperand][2] != $scope.info.columnDataTypes['String']) {		
			var msg = GlobalService.getRulesLogicAlerts('rule_logic_string_operator', operator);
			displayLogicAlert(msg, lengthCovered, lengthCovered + statementLength);
			return;
		}
		return true;
	};
	// Function to check if left and right operands of an arithmetic operator(+, -, *, /) are numeric
	$scope.checkArithmeticOperators = function(statement, operator, operatorPosition, lengthCovered, statementLength) {
		var leftStatement = statement.substring(0, operatorPosition);
		var rightStatement = statement.substr(operatorPosition + operator.length);
		var leftOpAttribute = false,
		    rightOpAttribute = false;
		if (/\{[^\}]+\}\s*$/.test(leftStatement)) {
			var leftOperand = tempAttrs[leftStatement.match(/\{[^\}]+\}\s*$/)[0].replace(/\s+$/g, '').replace(/^\{|\}$/g, '')];
			leftOpAttribute = true;
		} else {
			var leftOperand = leftStatement.match(/[^\s]+\s*$/) ? leftStatement.match(/[^\s]+\s*$/)[0].replace(/\s+$/g, '') : '';
			leftOpAttribute = false;
		}
		if (/^\s*\{[^\}]+\}/.test(rightStatement)) {
			var rightOperand = tempAttrs[rightStatement.match(/^\s*\{[^\}]+\}/)[0].replace(/^\s+/g, '').replace(/^\{|\}$/g, '')];
			rightOpAttribute = true;
		} else {
			var rightOperand = rightStatement.match(/^\s*[^\s]+/) ? rightStatement.match(/^\s*[^\s]+/)[0].replace(/^\s+/g, '') : '';
			rightOpAttribute = false;
		}

		leftOperand = getOriginal(leftOperand);
		rightOperand = getOriginal(rightOperand);

		if (operator == '/' && /^0(\.0+)?$/.test(rightOperand)) {
			var msg = GlobalService.getRulesLogicAlerts('rule_logic_division_zero');
			displayLogicAlert(msg, lengthCovered, lengthCovered + statementLength);
			return;
		}
		if (leftOpAttribute) {
			if ($scope.sectionsColumnLabelMap[leftOperand][2] == $scope.info.columnDataTypes['String']) {
				var msg = GlobalService.getRulesLogicAlerts('rule_logic_not_numeric_attr', leftOperand);
				displayLogicAlert(msg, lengthCovered, lengthCovered + statementLength);
				return;
			}
		} else {
			if (!/^\d+(\.\d+)?$/.test(leftOperand)) {
				var msg = GlobalService.getRulesLogicAlerts('rule_logic_not_number', leftOperand);
				displayLogicAlert(msg, lengthCovered, lengthCovered + statementLength);
				return;
			}
		}
		if (rightOpAttribute) {
			if ($scope.sectionsColumnLabelMap[rightOperand][2] == $scope.info.columnDataTypes['String']) {
				var msg = GlobalService.getRulesLogicAlerts('rule_logic_not_numeric_attr', rightOperand);
				displayLogicAlert(msg, lengthCovered, lengthCovered + statementLength);
				return;
			}
		} else {
			if (/^\s*$/.test(rightOperand)) {
				var msg = GlobalService.getRulesLogicAlerts('rule_logic_right_value_required', operator);
				displayLogicAlert(msg, lengthCovered, lengthCovered + statementLength);
				return;
			}
			if (!/^\d+(\.\d+)?$/.test(rightOperand)) {
				var msg = GlobalService.getRulesLogicAlerts('rule_logic_not_number', rightOperand);
				displayLogicAlert(msg, lengthCovered, lengthCovered + statementLength);
				return;
			}
		}
		return true;
	};

	// Check the left and right operands of an equal comparison operator(= and <>) if both are string or number
	$scope.checkEqualComparisonOperators = function(statement, operator, operatorPosition, lengthCovered, statementLength,funcName) {
		var leftStatement = statement.substring(0, operatorPosition);
		var rightStatement = statement.substr(operatorPosition + operator.length);
		var leftStatementNumberMatches = leftStatement.replace(/\{[^\}]+\}/g, '{}').replace(/\[[^\]]+\]/g, '[]').match(/\s+\d+(\.\d+)?\s+/g);
		var rightStatementNumberMatches = rightStatement.replace(/\{[^\}]+\}/g, '{}').replace(/\[[^\]]+\]/g, '[]').match(/\s+\d+(\.\d+)?\s+/g);
		if ((leftStatementNumberMatches && leftStatementNumberMatches.length > 1) || (rightStatementNumberMatches && rightStatementNumberMatches.length > 1)) {
			var msg = GlobalService.getRulesLogicAlerts('rule_logic_numrals_exceeded');
			displayLogicAlert(msg, lengthCovered, lengthCovered + statementLength);
			return;
		}
		var leftOpAttribute = false,
		    rightOpAttribute = false;
		if (/\{[^\}]+\}\s*$/.test(leftStatement)) {
			var leftOperand = tempAttrs[leftStatement.match(/\{[^\}]+\}\s*$/)[0].replace(/\s+$/g, '').replace(/^\{|\}$/g, '')];
			leftOpAttribute = true;
		} else {
			var leftOperand = leftStatement.match(/[^\s]+\s*$/) ? leftStatement.match(/[^\s]+\s*$/)[0].replace(/\s+$/g, '') : '';
			leftOpAttribute = false;
		}
		if (/^\s*\{[^\}]+\}/.test(rightStatement)) {
			var rightOperand = tempAttrs[rightStatement.match(/^\s*\{[^\}]+\}/)[0].replace(/^\s+/g, '').replace(/^\{|\}$/g, '')];
			rightOpAttribute = true;
		} else {
			var rightOperand = rightStatement.match(/^\s*[^\s]+/) ? rightStatement.match(/^\s*[^\s]+/)[0].replace(/^\s+/g, '') : '';
			rightOpAttribute = false;
		}

		leftOperand = getOriginal(leftOperand);
		rightOperand = getOriginal(rightOperand);
		var versioinRegEx = new RegExp(/^'%[0-9.]+%'$/);

		if (leftOpAttribute) {
			if(funcName && funcName == 'VERSION'){
				if ($scope.sectionsColumnLabelMap[leftOperand][2] != $scope.info.columnDataTypes['String']) {
					var msg = GlobalService.getRulesLogicAlerts('rule_logic_not_string_attr', leftOperand);
					displayLogicAlert(msg, lengthCovered, lengthCovered + statementLength);
					return;
				}
				if (!versioinRegEx.test(rightOperand)) {
					var msg = GlobalService.getRulesLogicAlerts('rule_logic_not_version_string', operator);
					displayLogicAlert(msg, lengthCovered, lengthCovered + statementLength);
					return;
				}

			}else if ($scope.sectionsColumnLabelMap[leftOperand][2] == $scope.info.columnDataTypes['String']) {
				if (rightOpAttribute) {
					if ($scope.sectionsColumnLabelMap[rightOperand][2] != $scope.info.columnDataTypes['String']) {
						var msg = GlobalService.getRulesLogicAlerts('rule_logic_not_string_attr', leftOperand);
						displayLogicAlert(msg, lengthCovered, lengthCovered + statementLength);
						return;
					}
				} else {
					if (!/^\"[^\"]*\"$/.test(rightOperand)) {
						var msg = GlobalService.getRulesLogicAlerts('rule_logic_not_string', rightOperand);
						displayLogicAlert(msg, lengthCovered, lengthCovered + statementLength);
						return;
					}
				}
			} else {
				if (rightOpAttribute) {
					if ($scope.sectionsColumnLabelMap[rightOperand][2] == $scope.info.columnDataTypes['String']) {
						var msg = GlobalService.getRulesLogicAlerts('rule_logic_not_numeric_attr', rightOperand);
						displayLogicAlert(msg, lengthCovered, lengthCovered + statementLength);
						return;
					}
				} else {
					if (!/^\d+(\.\d+)?$/.test(rightOperand)) {
						var msg = GlobalService.getRulesLogicAlerts('rule_logic_not_number', rightOperand);
						displayLogicAlert(msg, lengthCovered, lengthCovered + statementLength);
						return;
					}
				}
			}
		} else {
			if (!/^\d+(\.\d+)?$/.test(leftOperand)) {
				var msg = GlobalService.getRulesLogicAlerts('rule_logic_not_number', leftOperand);
				displayLogicAlert(msg, lengthCovered, lengthCovered + statementLength);
				return;
			}
			if (rightOpAttribute) {
				if ($scope.sectionsColumnLabelMap[rightOperand][2] == $scope.info.columnDataTypes['String']) {
					var msg = GlobalService.getRulesLogicAlerts('rule_logic_not_numeric_attr', rightOperand);
					displayLogicAlert(msg, lengthCovered, lengthCovered + statementLength);
					return;
				}
			} else {
				if (!/^\d+(\.\d+)?$/.test(rightOperand)) {
					var msg = GlobalService.getRulesLogicAlerts('rule_logic_not_string', rightOperand);
					displayLogicAlert(msg, lengthCovered, lengthCovered + statementLength);
					return;
				}
			}
		}
		return true;
	};

	// Function to check the left and right hand operands of a comparison operator(<, >, <=, >=)
	$scope.checkComparisonOperators = function(statement, operator, operatorPosition, lengthCovered, statementLength, funcName) {
		var leftStatement = statement.substring(0, operatorPosition);
		var rightStatement = statement.substr(operatorPosition + operator.length);
		var leftStatementNumberMatches = leftStatement.replace(/\{[^\}]+\}/g, '{}').replace(/\[[^\]]+\]/g, '[]').match(/\s+\d+(\.\d+)?\s+/g);
		var rightStatementNumberMatches = rightStatement.replace(/\{[^\}]+\}/g, '{}').replace(/\[[^\]]+\]/g, '[]').match(/\s+\d+(\.\d+)?\s+/g);
		if ((leftStatementNumberMatches && leftStatementNumberMatches.length > 1) || (rightStatementNumberMatches && rightStatementNumberMatches.length > 1)) {
			var msg = GlobalService.getRulesLogicAlerts('rule_logic_numrals_exceeded');
			displayLogicAlert(msg, lengthCovered, lengthCovered + statementLength);
			return;
		}
		var leftOpAttribute = false,
		    rightOpAttribute = false;
		if (/\{[^\}]+\}\s*$/.test(leftStatement)) {
			var leftOperand = tempAttrs[leftStatement.match(/\{[^\}]+\}\s*$/)[0].replace(/\s+$/g, '').replace(/^\{|\}$/g, '')];
			leftOpAttribute = true;
		} else {
			var leftOperand = leftStatement.match(/[^\s]+\s*$/) ? leftStatement.match(/[^\s]+\s*$/)[0].replace(/\s+$/g, '') : '';
			leftOpAttribute = false;
		}
		if (/^\s*\{[^\}]+\}/.test(rightStatement)) {
			var rightOperand = tempAttrs[rightStatement.match(/^\s*\{[^\}]+\}/)[0].replace(/^\s+/g, '').replace(/^\{|\}$/g, '')];
			rightOpAttribute = true;
		} else {
			var rightOperand = rightStatement.match(/^\s*[^\s]+/) ? rightStatement.match(/^\s*[^\s]+/)[0].replace(/^\s+/g, '') : '';
			rightOpAttribute = false;
		}

		leftOperand = getOriginal(leftOperand);
		rightOperand = getOriginal(rightOperand);
		var versioinRegEx = new RegExp(/^'%[0-9.]+%'$/);
		if (leftOpAttribute) {
			if(funcName && funcName == 'VERSION' ){
				if ($scope.sectionsColumnLabelMap[leftOperand][2] != $scope.info.columnDataTypes['String']) {
					var msg = GlobalService.getRulesLogicAlerts('rule_logic_not_string_attr', leftOperand);
					displayLogicAlert(msg, lengthCovered, lengthCovered + statementLength);
					return;
				}
			}else if ($scope.sectionsColumnLabelMap[leftOperand][2] == $scope.info.columnDataTypes['String']) {
				var msg = GlobalService.getRulesLogicAlerts('rule_logic_not_numeric_attr', leftOperand);
				displayLogicAlert(msg, lengthCovered, lengthCovered + statementLength);
				return;
			}
		} else {
			if (!versioinRegEx.test(leftOperand)) {
				var msg = GlobalService.getRulesLogicAlerts('rule_logic_not_number', leftOperand);
				displayLogicAlert(msg, lengthCovered, lengthCovered + statementLength);
				return;
			}
		}
		if (rightOpAttribute) {
			if(funcName && funcName == 'VERSION' ){	
				if (!versioinRegEx.test(rightOperand)) {
					var msg = GlobalService.getRulesLogicAlerts('rule_logic_not_version_string', operator);
					displayLogicAlert(msg, lengthCovered, lengthCovered + statementLength);
					return;
				}

			}else if ($scope.sectionsColumnLabelMap[rightOperand][2] == $scope.info.columnDataTypes['String']) {
				var msg = GlobalService.getRulesLogicAlerts('rule_logic_not_numeric_attr', rightOperand);
				displayLogicAlert(msg, lengthCovered, lengthCovered + statementLength);
				return;
			}
		} else {
			if(funcName && funcName == 'VERSION'){	
				if (!versioinRegEx.test(rightOperand)) {
					var msg = GlobalService.getRulesLogicAlerts('rule_logic_not_version_string', operator);
					displayLogicAlert(msg, lengthCovered, lengthCovered + statementLength);
					return;
				}

			}else{
				if (/^\s*$/.test(rightOperand)) {
					var msg = GlobalService.getRulesLogicAlerts('rule_logic_right_value_required', operator);
					displayLogicAlert(msg, lengthCovered, lengthCovered + statementLength);
					return;
				}
				if (!/^\d+(\.\d+)?$/.test(rightOperand)) {
					var msg = GlobalService.getRulesLogicAlerts('rule_logic_not_number', rightOperand);
					displayLogicAlert(msg, lengthCovered, lengthCovered + statementLength);
					return;
				}
			}
		}
		return true;
	};

	// Function to check whether each section-column pair entered in Label is valid or not
	$scope.deepValidation = function(str,rule_label_invalid_attr,rule_label_local_attr) {		
		var secColPairs = [],
			jsonAsString = "";
		jsonAsString = angular.copy(str);
		//if empty return empty array
		//allow empty value
		if(jsonAsString == "" || jsonAsString == null){
			return [];
		}
		//if it is not empty and have some string
		if(jsonAsString.length && jsonAsString.length > 0){
			//fetch substring within '{' and '}'
			var justificationRegExMatchList = $scope.getJSONFromSting(jsonAsString);
			if(justificationRegExMatchList){
				//check if it is JSON or not
				try{
					justificationRegExMatchList = justificationRegExMatchList.replace(/,\s+/gm, ",");
					JSON.parse(justificationRegExMatchList);
					var justificationJSONString = $scope.getJSONFromSting(jsonAsString);
					secColPairs = $scope.getSectionColumnsPairFromString(justificationJSONString,rule_label_invalid_attr, rule_label_local_attr);
					return secColPairs;
				}catch(e){
					// if it has no JSON like string but have {section.att} like string
					// check for validation for section:attribute pair
					var secColPairs = $scope.getSectionAttributeLabelMap(jsonAsString,rule_label_invalid_attr, rule_label_local_attr);
					if(!Array.isArray(secColPairs)){
						return;
					}
				}
			}else{
				//there no character within '{' and '}' then
				// return empty list
				return []
			}
		}
		return secColPairs;
	};

	// Function to check whether each section-column pair entered in Logic is valid or not
	$scope.validateLogicMap = function(){
		var secColPairs = [],
		    startPos = null,
		    endPos = null,
		    msg = '';

		if (!$scope.info.logic.length)
			return secColPairs;

		for (var i = 0; i < $scope.info.logic.length; i++) {
			// Check if {{ or }} exists in string
			if (($scope.info.logic[i] == '{' && startPos) || ($scope.info.logic[i] == '}' && !startPos) || (i == $scope.info.logic.length - 1 && startPos && $scope.info.logic[i] != '}') || (i == $scope.info.logic.length - 1 && $scope.info.logic[i] == '{')) {
				msg = GlobalService.getRulesLogicAlerts('rule_logic_error');
				displayLogicAlert(msg, startPos, i + 1);
				return;
			}
			if ($scope.info.logic[i] == '{') {
				startPos = i + 1;
			}
			if ($scope.info.logic[i] == '}' && startPos) {
				endPos = i;
				var tmpString = $scope.info.logic.substring(startPos, endPos);
				if (!$scope.sectionsColumnLabelMap.hasOwnProperty(tmpString)) {
					//check if it is a part of REGEX i.e REGEX(...\d{2}..)
					if($scope.isPartOfRegex(startPos)){
						msg = GlobalService.getRulesLogicAlerts('rule_logic_invalid_regex_len_attr', tmpString);
					}else if($scope.isPartOfLikeoperator(startPos)){
						msg = GlobalService.getRulesLogicAlerts('rule_logic_invalid_like_curly_brace', tmpString);
					}else{
						msg = GlobalService.getRulesLogicAlerts('rule_logic_invalid_attr', tmpString);
					}		
					if(msg){
						displayLogicAlert(msg, startPos, endPos);
						return;
					}
				}
				secColPairs.push(tmpString);
				startPos = null;
			}
		}
		return secColPairs;
	};
	//get REGEX start index and end index
	$scope.isBracePartOfLikeoperator = function(curlyBraceIndex) {
		var logic = $scope.info.logic, regexToken="", searchEndIndex=0;
		var searchIndex = logic.indexOf('LIKE');
		if( searchIndex== -1) {
			return false;
		};
		while(searchIndex >= 0){
			//get complete like operator 
			regexToken = $scope.parseToken(logic,searchIndex, '(', ')');
			searchEndIndex = regexToken.length + searchIndex;
			//check if curlyBraceIndex is within LIKE statment or not
			if((curlyBraceIndex > searchIndex) && (curlyBraceIndex < searchEndIndex)){
				return true;
			}
			searchIndex = logic.indexOf('LIKE', searchEndIndex);
			if( searchIndex== -1) {
				return false;
			};
		};
		return false;
	};
	$scope.isPartOfLikeoperator = function(curlyBraceIndex) {
		var logic = $scope.info.logic, regexToken="", searchEndIndex=0;
		var searchIndex = logic.indexOf('LIKE');
		if( searchIndex== -1) {
			return false;
		};
		while(searchIndex >= 0){
			//get complete like operator 
			regexToken = $scope.parseToken(logic,searchIndex, '{', '}');
			searchEndIndex = regexToken.length + searchIndex;
			//check if curlyBraceIndex is within LIKE statment or not
			if((curlyBraceIndex > searchIndex) && (curlyBraceIndex < searchEndIndex)){
				return true;
			}
			searchIndex = logic.indexOf('LIKE', searchEndIndex);
			if( searchIndex== -1) {
				return false;
			};
		};
		return false;
	};
	//get REGEX start index and end index
	$scope.isPartOfRegex = function(curlyBraceIndex) {
		var logic = $scope.info.logic, regexToken="", searchEndIndex=0;
		var searchIndex = logic.indexOf('REGEX');
		if( searchIndex== -1) {
			return false;
		};
		while(searchIndex >= 0){
			//get complete regex 
			regexToken = $scope.parseToken(logic,searchIndex, '(', ')');
			var secondParam = regexToken.match(/".*"/gm);
			secondParamLen = 0;
			if(secondParam && secondParam[0]){
				secondParam = secondParam[0];
				searchIndex = logic.indexOf(secondParam);
				secondParamLen = secondParam.length;
				searchEndIndex = secondParamLen + searchIndex;
				//check if curlyBraceIndex is within REGEX statment or not
				if((curlyBraceIndex > searchIndex) && (curlyBraceIndex < searchEndIndex)){
					return true;
				}
				searchIndex = logic.indexOf('REGEX', searchEndIndex);
				if( searchIndex== -1) {
					return false;
				};
			}
		}
		return false;
	};
	$scope.parseToken = function(msg, startIndex,targetStartChar,targetEndChar) {
		var len = msg.length, curlyBrace=0, sIndex=0, endIndex=0;
		//search sould start from first brace
		sIndex = msg.indexOf('(', startIndex);
		for(var index=sIndex;index<len;index++) {
			switch (msg[index]){
				case targetStartChar:
					curlyBrace++;
					break;
				case targetEndChar:
					curlyBrace--;
					break;
			}
			if(curlyBrace == 0){
				endIndex = index;
				break;
			}
		}
		var res = msg.substring(startIndex, (endIndex+1));
		return res;
	};
	
	$scope.validateAPITemplateMap =  function() {
		var secColPairs = [],
		    startPos = null,
		    endPos = null;
		for (var i = 0; i < $scope.info.text.length; i++) {
			// Check if {{ or }} exists in string
			if (($scope.info.text[i] == '{' && startPos) || ($scope.info.text[i] == '}' && !startPos) || (i == $scope.info.text.length - 1 && startPos && $scope.info.text[i] != '}') || (i == $scope.info.text.length - 1 && $scope.info.text[i] == '{')) {
				ModalService.alertBox({
					msg : GlobalService.getVal('rulesMsgs')['rule_text_error']
				});
				return;
			}
			if ($scope.info.text[i] == '{') {
				startPos = i + 1;
			}
			if ($scope.info.text[i] == '}' && startPos) {
				endPos = i;
				var tmpString = $scope.info.text.substring(startPos, endPos);
				if (!$scope.sectionsColumnLabelMap.hasOwnProperty(tmpString)) {
					ModalService.alertBox({
						msg : GlobalService.getVal('rulesMsgs')['rule_text_invalid_attr'][0] + tmpString + GlobalService.getVal('rulesMsgs')['rule_text_invalid_attr'][1]
					});
					return;
				}
				// if ($scope.info.scope != 'Table' && $scope.sectionsColumnLabelMap[tmpString][5] != 'G') {
				// 	ModalService.alertBox({
				// 		msg : GlobalService.getVal('rulesMsgs')['rule_text_local_attr'][0] + tmpString + GlobalService.getVal('rulesMsgs')['rule_text_local_attr'][1]
				// 	});
				// 	return;
				// }
				secColPairs.push(tmpString);
				startPos = null;
			}
		}
		return secColPairs;
	};
	// Function to set the value of hidden logic
	$scope.setHiddenLogic = function(logicPairs) {
		$scope.info.logic = $scope.info.logic.replace(/^\s+|\s+$/g, '').replace(/\s+/g, ' ');
		$scope.info.hiddenLogic = $scope.info.logic;
		for (var i in logicPairs) {
			var tempStr = logicPairs[i];
			var tempReplaceStr = $scope.sectionsColumnLabelMap[logicPairs[i]][0];
			$scope.info.hiddenLogic = $scope.info.hiddenLogic.replace(tempStr, tempReplaceStr);
		}
		var wildCardCharacters = GlobalService.getVal('rulesLogicAlerts')['rule_logic_wildCardCharacters']
		for(var i=0;i<wildCardCharacters.length;i++){			
			var targetIndex = $scope.info.hiddenLogic.indexOf(('\\'+wildCardCharacters[i]));
			while( targetIndex != -1){
				var regexStmtEndIndex = $scope.isSlashXPartOfRegex($scope.info.hiddenLogic,targetIndex);
				if( regexStmtEndIndex == 0){
					$scope.info.hiddenLogic = $scope.replaceAt($scope.info.hiddenLogic, targetIndex, ('\\\\'+wildCardCharacters[i]));
				}
				targetIndex = $scope.info.hiddenLogic.indexOf(('\\'+wildCardCharacters[i]), targetIndex + 4);
			}
		}
	};
	$scope.isSlashXPartOfRegex = function(text, targetIndex){
    	var matched,res,str,stashUmatch,endIndex,startIndex=0;
		text = angular.copy(text);
		text = text.toLowerCase();
    	res = text.indexOf('regex',startIndex);
    	startIndex = res;
    	if(res != -1){
	    	str = $scope.parseToken(text, startIndex, '(', ')');
	    	endIndex = startIndex + str.length;
	    	if(targetIndex > startIndex && targetIndex < endIndex){
	    		return endIndex;
	    	}
    	};
    	return 0;
	};
	$scope.replaceAt = function(text, index, replacement) {
	    return text.substr(0, index) + replacement+ text.substr(index + replacement.length);
	}
	// Function to set the value of hidden text
	$scope.setHiddenText = function(textPairs) {
		$scope.info.hiddenText = $scope.info.text;
		for (var i in textPairs) {
			var tempStr = textPairs[i];
			var tempReplaceStr = "rule." + $scope.sectionsColumnLabelMap[textPairs[i]][0];
			$scope.info.hiddenText = $scope.info.hiddenText.replace(tempStr, tempReplaceStr);
		}
	};

	// Function to set the value of hidden label
	$scope.setHiddenLabel = function(labelPairs) {
		$scope.info.hiddenLabel = $scope.info.label;
		for (var i in labelPairs) {
			var tempStr = labelPairs[i];
			var tempReplaceStr = "rule." + $scope.sectionsColumnLabelMap[labelPairs[i]][0];
			$scope.info.hiddenLabel = $scope.info.hiddenLabel.replace(tempStr, tempReplaceStr);
		}
	};
	// Function to set the value of hidden Justification
	$scope.setHiddenJustification = function(justificationPairs) {
		$scope.info.hiddenJustification = $scope.info.alert_justification;
		for (var i in justificationPairs) {
			var tempStr = justificationPairs[i];
			var tempParsedVal = $scope.sectionsColumnLabelMap[justificationPairs[i]];
			if(tempParsedVal && tempParsedVal[0]){				
				var tempReplaceStr = "rule." + tempParsedVal[0];
				$scope.info.hiddenJustification = $scope.info.hiddenJustification.replace(tempStr, tempReplaceStr);
			}
		}
	};

	// Function to set the value of hidden Reommendation
	$scope.setHiddenRecommendation = function(recommendationPairs) {
		$scope.info.hiddenRecommendation = $scope.info.recommendation;
		for (var i in recommendationPairs) {
			var tempStr = recommendationPairs[i];
			var tempReplaceStr = "rule." + $scope.sectionsColumnLabelMap[recommendationPairs[i]][0];
			$scope.info.hiddenRecommendation = $scope.info.hiddenRecommendation.replace(tempStr, tempReplaceStr);
		}
	};

	
	// Function to expand/collapse a section
	$scope.expandSection = function(section) {
		if(section.foundAttr && section.foundAttr.length > 0){
			if (!!section.expanded) {
				$scope.getSectionColumns(section);
			}
			return;
		}
		if (!!section.expanded && !section.hasOwnProperty('hasData')) {
			$scope.getSectionColumns(section);
		}
	};

	// Function to update the lastElementFocused variable on change of element focus
	$scope.focusElement = function(element) {
		$scope.info.lastElementFocused = element;
	};

	// Function to handle double click on attributes/operators/columns
	$scope.addLogicText = function(data) {
		if ($scope.info.lastElementFocused == 'logic') {
			$scope.onDropLogic(data);
		} else if ($scope.info.lastElementFocused == 'text') {
			$scope.onDropText(data);
		} else if ($scope.info.lastElementFocused == 'label') {
			$scope.onDropLabel(data);
		}
		else if ($scope.info.lastElementFocused == 'alert_justification') {
			$scope.onDropJustification(data);
		}
		else if ($scope.info.lastElementFocused == 'recommendation') {
			$scope.onDropRecommendation(data);
		} else {
			ModalService.alertBox({
				msg : 'Place the cursor  on Label, Recommendation, Justification, Logic or Text'
			});
			return;
		}
	};

	// Function to call when some value is dropped on logic box
	$scope.onDropLogic = function(data, evt) {
		var position = angular.element(document.getElementById('inputLogic')).prop("selectionStart"),
		    newPos;
		if (data[1].type == 'operator' || data[1].type == 'function') {
			$scope.info.logic = [$scope.info.logic.substring(0, position), data[1].text, $scope.info.logic.substring(position)].join('');
			newPos = position + data[1].positionInc;
		} else {
			$scope.info.logic = [$scope.info.logic.substring(0, position), " {", data[0], ".", data[1].label, "} ", $scope.info.logic.substring(position)].join('');
			newPos = position + data[0].length + data[1].label.length + 5;
		}
		document.getElementById('inputLogic').focus();
		document.getElementById('inputLogic').setSelectionRange(newPos, newPos);
	};

	// Function to call when some value is dropped on text box
	$scope.onDropText = function(data, evt) {
		var position = angular.element(document.getElementById('inputText')).prop("selectionStart"),
		    newPos;
		if (data[1].type == 'operator') {
			ModalService.alertBox({
				msg : 'Relational & Logical operators not valid for Text'
			});
			return;
		} else if (data[1].type == 'function') {
			$scope.info.text = [$scope.info.text.slice(0, position), data[1].text, $scope.info.text.slice(position)].join('');
			newPos = position + data[1].positionInc;
		} else {
			$scope.info.text = [$scope.info.text.slice(0, position), " {", data[0], ".", data[1].label, "} ", $scope.info.text.slice(position)].join('');
			newPos = position + data[0].length + data[1].label.length + 5;
		}
		document.getElementById('inputText').focus();
		document.getElementById('inputText').setSelectionRange(newPos, newPos);
	};

	// Function to call when some value is dropped on text box
	$scope.onDropLabel = function(data, evt) {
		var position = angular.element(document.getElementById('inputLabel')).prop("selectionStart"),
		    newPos;
		if (data[1].type == 'operator') {
			ModalService.alertBox({
				msg : 'Relational & Logical operators not valid for Label'
			});
			return;
		} else if (data[1].type == 'function') {
			$scope.info.label = [$scope.info.label.slice(0, position), data[1].text, $scope.info.label.slice(position)].join('');
			newPos = position + data[1].positionInc;
		} else {
			$scope.info.label = [$scope.info.label.slice(0, position), " {", data[0], ".", data[1].label, "} ", $scope.info.label.slice(position)].join('');
			newPos = position + data[0].length + data[1].label.length + 5;
		}
		document.getElementById('inputLabel').focus();
		document.getElementById('inputLabel').setSelectionRange(newPos, newPos);
	};
	
	// Function to call when some value is dropped on Justification box
	$scope.onDropJustification = function(data, evt) {
		var position = angular.element(document.getElementById('inputJustification')).prop("selectionStart"),
		    newPos;
		if (data[1].type == 'operator') {
			ModalService.alertBox({
				msg : 'Relational & Logical operators not valid for Label'
			});
			return;
		} else if (data[1].type == 'function') {
			$scope.info.alert_justification = [$scope.info.alert_justification.slice(0, position), data[1].text, $scope.info.alert_justification.slice(position)].join('');
			newPos = position + data[1].positionInc;
		} else {
			$scope.info.alert_justification = [$scope.info.alert_justification.slice(0, position), " {", data[0], ".", data[1].label, "} ", $scope.info.alert_justification.slice(position)].join('');
			newPos = position + data[0].length + data[1].label.length + 5;
		}
		document.getElementById('inputJustification').focus();
		document.getElementById('inputJustification').setSelectionRange(newPos, newPos);
	};

	

	$scope.onDropRecommendation = function(data, evt) {
		var position = angular.element(document.getElementById('inputRecommendation')).prop("selectionStart"),
		    newPos;
		if (data[1].type == 'operator') {
			ModalService.alertBox({
				msg : 'Relational & Logical operators not valid here'
			});
			return;
		} else if (data[1].type == 'function') {
			$scope.info.recommendation = [$scope.info.recommendation.slice(0, position), data[1].text, $scope.info.recommendation.slice(position)].join('');
			newPos = position + data[1].positionInc;
		} else {
			$scope.info.recommendation = [$scope.info.recommendation.slice(0, position), " {", data[0], ".", data[1].label, "} ", $scope.info.recommendation.slice(position)].join('');
			newPos = position + data[0].length + data[1].label.length + 5;
		}
		document.getElementById('inputRecommendation').focus();
		document.getElementById('inputRecommendation').setSelectionRange(newPos, newPos);
	};

	/*
	 * ------------ START ---------------- LOGIC PARSER TO SCALA-----
	 */

	$scope.getComparisionOperatorForScala = function(oprt) {
		var comparisonOperators = $filter('filterMultiples')($scope.info.operators, {
			subtype : ['comparison', 'equal comparison']
		});
		for (var i in comparisonOperators) {
			if (comparisonOperators[i] && (comparisonOperators[i].label).trim() == oprt.trim()) {
				return comparisonOperators[i].scalaOperator;
			}
		}
	};

	$scope.getInlineFunctionForScala = function(oprt) {
		var inlineFunctions = $filter('filter')($scope.info.operators, {
			subtype : 'inline function'
		});
		for (var i in inlineFunctions) {
			if (inlineFunctions[i] && (inlineFunctions[i].label).trim() == oprt.trim()) {
				return inlineFunctions[i].scalaOperator;
			}
		}
	};

	$scope.getEqualNullOperatorForScala = function(oprt) {
		var equalNullOperators = $filter('filter')($scope.info.operators, {
			subtype : 'equal null'
		});
		for (var i in equalNullOperators) {
			if (equalNullOperators[i] && (equalNullOperators[i].label).trim() == oprt.trim()) {
				return equalNullOperators[i].scalaOperator;
			}
		}
	};

	$scope.getFunctionForScala = function(oprt) {
		for (var i in $scope.info.functions) {
			if ($scope.info.functions[i] && ($scope.info.functions[i].label).trim() == oprt.trim()) {
				return $scope.info.functions[i].scalaOperator;
			}
		}
	};

	$scope.getConnectorForScala = function(oprt) {
		var logicalConnectorOperators = $filter('filter')($scope.info.operators, {
			subtype : 'logical'
		});
		for (var i in logicalConnectorOperators) {
			if (logicalConnectorOperators[i] && (logicalConnectorOperators[i].label).trim() == oprt.trim()) {
				return logicalConnectorOperators[i].scalaOperator;
			}
		}
	};

	// Parse statement by logical oprator i.e AND, OR...
	$scope.parseLogicToScalaCondtion = function(stmt,stringsMap) {
		// ---------------Split statements separated connector operator i.e AND , OR ... -------------- //
		var logicalConnectorOperators = $filter('filter')($scope.info.operators, {
			subtype : 'logical'
		});
		var logicalConnectorOperatorSplitStr = '';
		for (var i in logicalConnectorOperators) {
			if (logicalConnectorOperators[i]) {
				if (logicalConnectorOperatorSplitStr.length == 0) {
					logicalConnectorOperatorSplitStr += '\\s+' + logicalConnectorOperators[i].label + '\\s+';
				} else {
					logicalConnectorOperatorSplitStr += '|\\s+' + logicalConnectorOperators[i].label + '\\s+';
				}
			}
		}
		var logicalConnectorOperatorSplitRegex = new RegExp(logicalConnectorOperatorSplitStr);

		// Check if connector operator available
		if (logicalConnectorOperatorSplitRegex.test(stmt)) {
			//Read the operator
			var operatorArr = logicalConnectorOperatorSplitRegex.exec(stmt);
			if (operatorArr && operatorArr.length > 0) {
				var scalaOperator = $scope.getConnectorForScala(operatorArr[0]);
			}
			//Read Operands
			var individualOperands = stmt.split(operatorArr[0]);
			if (individualOperands.length >= 2) {
				var tempScalaLogic = "";
				for (var lc = 0; lc < individualOperands.length; lc++) {
					if (lc == 0) {
						tempScalaLogic = $scope.parseLogicToScalaCondtion_translateLastStatement(individualOperands[lc],stringsMap);
					} else {
						tempScalaLogic = tempScalaLogic + " " + scalaOperator + " " + $scope.parseLogicToScalaCondtion(individualOperands[lc], stringsMap);
					}
				}
				return tempScalaLogic;
			}
			/*if (individualOperands.length == 2) {
			 return ($scope.parseLogicToScalaCondtion_translateLastStatement(individualOperands[0]) + " " + scalaOperator + " " + $scope.parseLogicToScalaCondtion(individualOperands[1]));
			 } else if (individualOperands.length == 3) {
			 return ($scope.parseLogicToScalaCondtion_translateLastStatement(individualOperands[0]) + " " + scalaOperator + " " + $scope.parseLogicToScalaCondtion(individualOperands[1]) + " " + scalaOperator + " " + $scope.parseLogicToScalaCondtion(individualOperands[2]));
			 } else if (individualOperands.length == 4) {
			 return ($scope.parseLogicToScalaCondtion_translateLastStatement(individualOperands[0]) + " " + scalaOperator + " " + $scope.parseLogicToScalaCondtion(individualOperands[1]) + " " + scalaOperator + " " + $scope.parseLogicToScalaCondtion(individualOperands[2]) + " " + scalaOperator + " " + $scope.parseLogicToScalaCondtion(individualOperands[3]));
			 } else if (individualOperands.length == 5) {
			 return ($scope.parseLogicToScalaCondtion_translateLastStatement(individualOperands[0]) + " " + scalaOperator + " " + $scope.parseLogicToScalaCondtion(individualOperands[1]) + " " + scalaOperator + " " + $scope.parseLogicToScalaCondtion(individualOperands[2]) + " " + scalaOperator + " " + $scope.parseLogicToScalaCondtion(individualOperands[3]) + " " + scalaOperator + " " + $scope.parseLogicToScalaCondtion(individualOperands[4]));
			 }*/
		} else {
			return $scope.parseLogicToScalaCondtion_translateLastStatement(stmt, stringsMap);
		}

	};

	// Do operation on the simplest form i.e op1 > op2
	$scope.parseLogicToScalaCondtion_translateLastStatement = function(stmt, stringsMap) {
		var comparisonOperators = $filter('filterMultiples')($scope.info.operators, {
			subtype : ['comparison', 'equal comparison']
		});
		// ---------------Split statements separated comparision operator i.e >. >= ... -------------- //
		var logicalSplitStr = '';
		for (var i in comparisonOperators) {
			if (comparisonOperators[i]) {
				if (logicalSplitStr.length == 0) {
					logicalSplitStr += '\\s+' + comparisonOperators[i].label + '\\s+';
				} else {
					logicalSplitStr += '|\\s+' + comparisonOperators[i].label + '\\s+';
				}
			}
		}

		//--------------------------Regular expression for inline functions i.e like()----------------//
		var inlineFunctions = $filter('filter')($scope.info.operators, {
			subtype : 'inline function'
		});
		var inlinefunctionSplitStr = '';
		for (var i in inlineFunctions) {
			if (inlineFunctions[i]) {
				if (inlinefunctionSplitStr.length == 0) {
					inlinefunctionSplitStr += '\\s*' + inlineFunctions[i].label + '\\s*';
				} else {
					inlinefunctionSplitStr += '|\\s*' + inlineFunctions[i].label + '\\s*';
				}
			}
		}

		//--------------------------Regular expression for functions i.e UPPER(), LOWER()...----------------//
		var functionSplitStr = '';
		for (var i in $scope.info.functions) {
			if ($scope.info.functions[i]) {
				if (functionSplitStr.length == 0) {
					functionSplitStr += '\\s*' + $scope.info.functions[i].label + '\\s*';
				} else {
					functionSplitStr += '|\\s*' + $scope.info.functions[i].label + '\\s*';
				}
			}
		}

		//--------------------------Regular expression for aggregate functions i.e AVG(), SUM()...----------------//
		var aggregatefunctionSplitStr = '';
		for (var i in $scope.info.aggregateFunctions) {
			if ($scope.info.aggregateFunctions[i]) {
				if (aggregatefunctionSplitStr.length == 0) {
					aggregatefunctionSplitStr += '\\s*' + $scope.info.aggregateFunctions[i].label + '\\s*';
				} else {
					aggregatefunctionSplitStr += '|\\s*' + $scope.info.aggregateFunctions[i].label + '\\s*';
				}
			}
		}
		//--------------------------Regular expression for checking null i.e IS NULL, IS NOT NULL...----------------//
		var eqNullOperators = $filter('filter')($scope.info.operators, {
			subtype : 'equal null'
		});
		var eqNullSplitStr = '';
		for (var i in eqNullOperators) {
			if (eqNullOperators[i]) {
				if (eqNullSplitStr.length == 0) {
					eqNullSplitStr += '\\s*' + eqNullOperators[i].label + '\\s*';
				} else {
					eqNullSplitStr += '|\\s*' + eqNullOperators[i].label + '\\s*';
				}
			}
		}

		var logicalSplitRegex = new RegExp(logicalSplitStr);
		var inlineFunctionalSplitRegex = new RegExp(inlinefunctionSplitStr);
		var functionalSplitRegex = new RegExp(functionSplitStr);
		var aggregatefunctionalSplitRegex = new RegExp(aggregatefunctionSplitStr);
		var eqNullSplitRegex = new RegExp(eqNullSplitStr);

		// Check if comparison operator available
		if (logicalSplitRegex.test(stmt)) {
			//Read the operator
			var operatorArr = logicalSplitRegex.exec(stmt);
			if (operatorArr && operatorArr.length > 0) {
				var scalaOperator = $scope.getComparisionOperatorForScala(operatorArr[0]);
			}
			//Read Operands
			var individualOperands = stmt.split(logicalSplitRegex);
			//Join Operands with scala operator
			individualOperands[1] = individualOperands[1].replace(/\"/g, "\"\"\"");
			stmt = individualOperands[0] + " " + scalaOperator + " " + individualOperands[1];
		}

		// Check if function is there in inlne function i.e LIKE
		if (inlineFunctionalSplitRegex.test(stmt)) {
			// Read the operator
			var operatorArr = inlineFunctionalSplitRegex.exec(stmt);
			if (operatorArr && operatorArr.length > 0) {
				var scalaOperator = $scope.getInlineFunctionForScala(operatorArr[0]);
			}
			// Read Operands
			var individualOperands = stmt.split(inlineFunctionalSplitRegex);
			if (/\'%(.*?)[^%]\'/.test(individualOperands[1])) {
				scalaOperator = 'endsWith';
			} else if (/\'[^%](.*?)%\'/.test(individualOperands[1])) {
				scalaOperator = 'startsWith';
			}
			// removining "%" from LIKE statement
			individualOperands[1] = individualOperands[1].replace(/\'%|%\'|\'/g, "\"\"\"");
			// Join Operands with scala operator
			stmt = individualOperands[0].trim() + "." + scalaOperator + "(" + individualOperands[1] + ")";

			if (operatorArr[0].indexOf(' NOT ') > -1) {
				stmt = stmt.replace(/\w/, "!$&");
			}
		}

		// Check if function is there in function i.e UPPER....
		if (functionalSplitRegex.test(stmt)) {
			// Read the operator
			var operatorArr = functionalSplitRegex.exec(stmt);
			if (operatorArr && operatorArr.length > 0) {
				var scalaOperator = $scope.getFunctionForScala(operatorArr[0]);
			}

			// Read Operands
			var individualOperands = stmt.split(functionalSplitRegex);
			stmt = "";
			for (var i = 0; i < individualOperands.length; i++) {
				if (individualOperands[i]) {
					if (operatorArr[0] == 'CONVERTTOSTRING') {
						stmt += individualOperands[i].replace(/(\.to[\w]+\s*)?\)/, (")." + scalaOperator));
					} else if(operatorArr[0] == 'VERSION'){
						var versionStms = individualOperands[i].replace(/\)/, (")"));
						//convert version function to scala code
						stmt += processVersionFunction(versionStms, stringsMap);
					}else if(operatorArr[0] != 'COUNT' && aggregatefunctionalSplitRegex.test(operatorArr[0])){
						stmt += individualOperands[i].replace(/\)|\(/g, ("" ));
					}else if(operatorArr[0] == 'COUNT'){
						stmt += individualOperands[i];
					}else{
						stmt += individualOperands[i].replace(/\)/, (")." + scalaOperator));
					}
					if (i == individualOperands.length - 1) {
						stmt = stmt.replace(/\s*\(\*s/, "");
						stmt = stmt.replace(/\s*\)\*s/, "");
					}
				}
			}
		}

		// Check if equal null operator is there i.e IS NULL, IS NOT NULL
		if (eqNullSplitRegex.test(stmt)) {
			var operatorArr = eqNullSplitRegex.exec(stmt);

			if (operatorArr && operatorArr.length > 0) {
				var scalaOperator = $scope.getEqualNullOperatorForScala(operatorArr[0]);
			}

			//Read Operands
			var individualOperands = stmt.split(eqNullSplitRegex);
			//Join Operands with scala operator
			stmt = individualOperands[0] + scalaOperator + (!!individualOperands[1] ? individualOperands[1] : "");

			if (operatorArr[0].indexOf(' NOT ') > -1) {
				stmt = stmt.replace(/\w/, "!$&").replace(/^\s+/, '');
			}
		}

		return stmt;
	};
	
	$scope.resetValues = function(){
        	$scope.info.emailTemplate = "select";
                $scope.info.apiTemplate = "select";
	}
	var processVersionFunction = function(versionStms, stringsMap){
		var len = $scope.info.operators.length, operands = [],stmt="", versionList = [], selectedOperator;
		for(var i=0;i<len;i++){
			//check if the operator is there
			if(versionStms.indexOf($scope.info.operators[i].scalaOperator) != -1){
				operands = versionStms.split($scope.info.operators[i].scalaOperator);
				selectedOperator = $scope.info.operators[i].scalaOperator;
				break;
			}
		}
		if (operands) {
			stmt = operands[0];
			stmt = stmt.replace(/\s*\(\s*/, "");
			stmt = stmt.replace(/\s*\)\s*/, "");
			operands[0] = stmt;
			versionList = stringsMap[operands[1].replace(/\s*/g, "").replace(/^'%/g, "").replace(/%'$/g, "")];
			versionList = versionList.split(".");
			stmt = "";
			var versionLength = versionList.length;
			function generateEqualsCondition(operand, versions){
				var str = ""
				for (var i = 0; i < versionLength; i++) {
					if (str === "") {
						str = "(";
					} else {
						str += " && ";
					}
					str += operand + '.split("\\\\.")(' + i + ').toInt ' + " == " + parseInt(versions[i], 10);
					if(i == versionLength-1){
						var bracketslen = (str.match(/\(/gm) || []).length;
						var closedbracketslen = (str.match(/\)/gm) || []).length;
						bracketslen = bracketslen - closedbracketslen;
						for (var j = 0; j < bracketslen; j++) {
							str += ")";
						}
					}
				}
				return str;
			}
			if (versionLength) {
				if (selectedOperator === "!=") {
					stmt = "(!"+generateEqualsCondition(operands[0], versionList)+")";
				} else if (selectedOperator === "==") {
					stmt = generateEqualsCondition(operands[0], versionList);
				} else {
					var offsetVersionList = versionList;
					var addEqualsIfApplicable = false;
					if (selectedOperator === ">=") {
						addEqualsIfApplicable = true;
						selectedOperator = ">";
					} else if (selectedOperator === "<=") {
						addEqualsIfApplicable = true;
						selectedOperator = "<";
					}
					for (var i = 0; i < versionLength; i++) {
						if (stmt === "") {
							stmt = "(";
						}
						if (i < versionLength - 1) {
							stmt += operands[0] + '.split("\\\\.")(' + i + ').toInt ' + selectedOperator + " " + parseInt(offsetVersionList[i], 10) + " || " + "(" +
								operands[0] + '.split("\\\\.")(' + i + ').toInt  == ' + parseInt(offsetVersionList[i], 10) + " && (";
						} else {
							var bracketslen = (stmt.match(/\(/gm) || []).length;
							var closedbracketslen = (stmt.match(/\)/gm) || []).length;
							bracketslen = bracketslen - closedbracketslen;
							var addBracketIfApplicable = "";
							for (var j = 0; j < bracketslen; j++) {
								addBracketIfApplicable += ")";
							}
							stmt += operands[0] + '.split("\\\\.")(' + i + ').toInt ' + selectedOperator + " " + parseInt(offsetVersionList[i], 10) + addBracketIfApplicable;
							if(addEqualsIfApplicable){
								stmt = "("+generateEqualsCondition(operands[0], versionList) + " || " + stmt + ")";
							}
						}
					}
				}
			}
		}
		return stmt;
	}

	/*
	 * ----------------END--------- LOGIC PARSER ----------------------
	 */
	$scope.getJSONFromSting = function(str){
		if(!str) return "";
		var justificationRegEx = new RegExp(/{[\s\S]*}/gm);
		var justificationRegExMatchList = str.match(justificationRegEx);
		if(justificationRegExMatchList && justificationRegExMatchList.length > 0){
			return justificationRegExMatchList[0];
		}
		return "";
	}
	$scope.getSectionColumnsPairFromString = function(jsonAsString, invalid_attr_msg, local_attr_msg){
		var secColPairs = [],
		    startPos = null,
			endPos = null,
			allKeys = [], currentValue = "", tmpVal = "";
		//convert string to JSON
		var jsonObject = {};
		try{
			jsonObject = JSON.parse(jsonAsString);
		}catch(e){
			jsonObject = {};
		}
		//read value from JSON object and check for section-attribute pair
		//read all kyes
		allKeys = Object.keys(jsonObject);
		for(var k=0;k<allKeys.length;k++){
			currentValue = jsonObject[allKeys[k]];
			tmpVal = $scope.getSectionAttributeLabelMap(currentValue, invalid_attr_msg, local_attr_msg);
			if(tmpVal === false){
				return;
			}
			secColPairs = secColPairs.concat(tmpVal);
		}

		return secColPairs;
	}
	$scope.getSectionAttributeLabelMap = function(currentValue, invalid_attr_msg, local_attr_msg){
		var secColPairs = [],
		startPos = null,
		endPos = null;
		
		for (var i = 0; i < currentValue.length; i++) {
			// Check if {{ or }} exists in string
			if ((currentValue[i] == '{' && startPos) || (currentValue[i] == '}' && !startPos) || (i == currentValue.length - 1 && startPos && currentValue[i] != '}') || (i == currentValue.length - 1 && currentValue[i] == '{')) {
				ModalService.alertBox({
					msg : GlobalService.getVal('rulesMsgs')['rule_justification_error']
				});
				return false;
			}
			if (currentValue[i] == '{') {
				startPos = i + 1;
			}
			if (currentValue[i] == '}' && startPos) {
				endPos = i;
				var tmpString = currentValue.substring(startPos, endPos);
				if (!$scope.sectionsColumnLabelMap.hasOwnProperty(tmpString)) {
					ModalService.alertBox({
						msg : GlobalService.getVal('rulesMsgs')[invalid_attr_msg][0] + tmpString + GlobalService.getVal('rulesMsgs')[invalid_attr_msg][1]
					});
					return false;
				}
				if ($scope.info.scope != 'Table' && $scope.sectionsColumnLabelMap[tmpString][5] != 'G') {
					ModalService.alertBox({
						msg : GlobalService.getVal('rulesMsgs')[local_attr_msg][0] + tmpString + GlobalService.getVal('rulesMsgs')[local_attr_msg][1]
					});
					return false;
				}
				secColPairs.push(tmpString);
				startPos = null;
			}
		}
		return secColPairs;
	}
	function handleSessionTimeout(response) {
		if (!$scope.info.sessionTimedOut && response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/timeout/)) {
			$scope.info.sessionTimedOut = true;
			ModalService.sessionTimeout();
		}
	};

	//usertracking function
	$scope.trackUser = function (app_Page, operation, details) {
		var details = JSON.stringify(details);
		UserTrackingService.standard_user_tracking($scope.info.application, app_Page, operation, details).then(function (response) {

		}, handleSessionTimeout);
	}




	$scope.differenceOf2Arrays = function (array1, array2) {
		var removed = [];
		var added = [];

		if (!array1.length && array2.length) {
			return { "removed": "", "added": array2.join() };
		}

		if (!array2.length && array1.length) {
			return { "removed": array1.join(), "added": "" };
		}

		for (var i in array1) {
			if (array2.indexOf(array1[i]) === -1) removed.push(array1[i]);
		}

		for (i in array2) {
			if (array1.indexOf(array2[i]) === -1) added.push(array2[i]);
		}
		return { "removed": removed.length ? removed.join() : "", "added": added.length ? added.join() : "" };
	}


	$scope.info.autocomplete = function (searchEle, arr) {
		var currentFocus;
		searchEle.addEventListener("input", function (e) {
			var divCreate,
				b,
				i,
				fieldVal = this.value;
			closeAllLists();
			if (!fieldVal) {
				return false;
			}
			currentFocus = -1;
			divCreate = document.createElement("DIV");
			divCreate.setAttribute("id", this.id + "autocomplete-list");
			divCreate.setAttribute("class", "autocomplete-items");
			this.parentNode.appendChild(divCreate);
			for (i = 0; i < arr.length; i++) {
				if (arr[i].substr(0, fieldVal.length).toUpperCase() == fieldVal.toUpperCase()) {
					b = document.createElement("DIV");
					b.innerHTML = "<strong>" + arr[i].substr(0, fieldVal.length) + "</strong>";
					b.innerHTML += arr[i].substr(fieldVal.length);
					b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
					b.addEventListener("click", function (e) {
						searchEle.value = "";
						addToList(this.getElementsByTagName("input")[0].value)
						closeAllLists();
					});
					divCreate.appendChild(b);
				}
			}
		});

		searchEle.addEventListener("keydown", function (e) {
			var autocompleteList = document.getElementById(this.id + "autocomplete-list");
			if (autocompleteList)
				autocompleteList = autocompleteList.getElementsByTagName("div");
			if (e.keyCode == 40) {
				currentFocus++;
				addActive(autocompleteList);
			}
			else if (e.keyCode == 38) {
				//up
				currentFocus--;
				addActive(autocompleteList);
			}
			else if (e.keyCode == 13) {
				e.preventDefault();
				if (currentFocus > -1) {
					if (autocompleteList) autocompleteList[currentFocus].click();
				}
			}
		});

		function addActive(autocompleteList) {
			if (!autocompleteList) return false;
			removeActive(autocompleteList);
			if (currentFocus >= autocompleteList.length) currentFocus = 0;
			if (currentFocus < 0) currentFocus = autocompleteList.length - 1;
			autocompleteList[currentFocus].classList.add("autocomplete-active");
		}

		function removeActive(autocompleteList) {
			for (var i = 0; i < autocompleteList.length; i++) {
				autocompleteList[i].classList.remove("autocomplete-active");
			}
		}

		function closeAllLists(elmnt) {
			var autocompleteList = document.getElementsByClassName(
				"autocomplete-items"
			);
			for (var i = 0; i < autocompleteList.length; i++) {
				if (elmnt != autocompleteList[i] && elmnt != searchEle) {
					autocompleteList[i].parentNode.removeChild(autocompleteList[i]);
				}
			}
		}

		document.addEventListener("click", function (e) {
			closeAllLists(e.target);
		});

		function addToList(email) {
			if (!$scope.info.subscriptionEmailList.includes(email)) {
				$scope.info.subscriptionEmailList.unshift(email)
				$scope.info.subscriberObj.unshift({
					'label': email,
					'selected': false
				})
				$scope.loadSubscribers();
			}
		}

	}

	$scope.openAddSubscribers = function () {
		$scope.info.subBulkRemoveBtn = false;
		$scope.info.emailText = "";
		$scope.info.searchEmailText = ""
		$scope.info.subloading = true;
		$scope.msg = "";
		$scope.info.subscriberObj = $scope.info.subscriptionEmailList.reduce(function (acc, cur) {
			acc.push({
				'label': cur,
				'selected': false
			})
			return acc;
		}, []) || []
		$scope.loadSubscribers();
		$scope.originalSub = $scope.info.subscriberObj.slice();
		$scope.modal = ModalService.openModal("partials/rules-and-alerts/add_rule_subscribers.html", $scope, 'gb-add-edit-subscribers', true, 'static');
		setTimeout(function () { $scope.info.autocomplete(document.getElementById("searchField"), $scope.info.emailList); }, 2000);
		$scope.info.subloading = false;
	}

	$scope.loadSubscribers = function () {
		if ($scope.info.searchEmailText) {
			$scope.info.showSubList = $scope.info.subscriberObj.filter(function (item) {
				return item.label.indexOf($scope.info.searchEmailText) > -1
			})
		}
		else {
			$scope.info.showSubList = $scope.info.subscriberObj;
		}
	}

	

	$scope.checkemail = function (event) {
		if (event.keyCode == 13 || event.keyCode == 32) {
			$scope.info.re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
			if ($scope.info.re.test($scope.info.emailText)) {
				if (!$scope.info.subscriptionEmailList.includes($scope.info.emailText)) {
					$scope.info.subscriptionEmailList.unshift($scope.info.emailText)
					$scope.info.subscriberObj.unshift({
						'label': $scope.info.emailText,
						'selected': false
					})
					$scope.info.emailText = "";
					$scope.loadSubscribers();
				}
			}
		}
	}
	$scope.removeFromSubscriptionList = function (email) {
		$scope.info.subloading = true;
		$scope.info.subscriptionEmailList = $scope.info.subscriptionEmailList.filter(function (item) {
			return item != email.label;
		})
		$scope.info.subscriberObj = $scope.info.subscriberObj.filter(function (item) {
			return item.label != email.label;
		})
		$scope.loadSubscribers();
		$scope.info.subloading = false;
	}


	$scope.getSelectedSubs = function(){
		var found = false
		for(var i=0;i<$scope.info.subscriberObj.length;i++){
			if($scope.info.subscriberObj[i].selected){
				found = true;
				break;
			}
		}
		return found;
	}

	$scope.showBulkRemoveBtn = function(){
		
		$scope.info.subBulkRemoveBtn =	$scope.getSelectedSubs();
	}
	$scope.bulkRemoveSubscriers = function () {
		$scope.info.subloading = true;
		$scope.info.subscriptionEmailList = $scope.info.subscriberObj.reduce(function (acc, cur) {
			if(cur.selected == false){
				acc.push(cur.label)
			}
			return acc;
		},[])
		$scope.info.subscriberObj = $scope.info.subscriberObj.filter(function (item) {
			return item.selected == false
		})
		$scope.loadSubscribers();
		$scope.showBulkRemoveBtn();
		$scope.info.subloading = false;
	}

	$scope.addSubscribersbtn = function () {
		$scope.info.subloading = true;
		$scope.info.re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
		if ($scope.info.re.test($scope.info.emailText)) {
			if (!$scope.info.subscriptionEmailList.includes($scope.info.emailText)) {
				$scope.info.subscriptionEmailList.unshift($scope.info.emailText)
				$scope.info.subscriberObj.unshift({
					'label': $scope.info.emailText,
					'selected': false
				})
				$scope.info.emailText = "";
				$scope.loadSubscribers();
			}
		}
		$scope.info.subloading = false;
	}

	$scope.deleteSubscriptionFilterBulk = function (rule, removedEmails) {
		var postdata = {
			"ruleId": rule.rule_id,
			"mps": $cookies.mps,
			"emailIds": removedEmails
		};
		RulesService.deleteFilterAttributesMultiple(postdata).then(function (response) {
			// $scope.info.rulesListMsg = {
			// 	type: 'success',
			// 	msg: GlobalService.getVal('rulesMsgs')['rule_unsubscription_success: "Unsubscribed from rule successfully"']
			// }
		}, function (response) {
			console.error("Unable to load templates");
			if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
				$scope.info.rulesListMsg = {
					type: 'failure',
					msg: GlobalService.getVal('rulesMsgs')['h2_down_msg']
				};
			}else{
				$scope.info.rulesListMsg = {
					type: 'failure',
					msg: "Unable to load data Please contact " + $scope.supportEmail
				};
			}
			handleSessionTimeout(response);
			$scope.info.rulesLoading = false;
			$scope.info.sysidLoading = false;
		});

	}

	$scope.deleteSubscriptionFilter = function (rule, bulk) {
		if(bulk){
			var postdata = {
				"ruleIds": rule,
				"mps": $cookies.mps
			};
		}else{
			var postdata = {
				"ruleIds": [rule.rule_id],
				"mps": $cookies.mps
			};
		}
		
		RulesService.deleteFilterAttributes(postdata).then(function (response) {
			// $scope.info.rulesListMsg = {
			// 	type: 'success',
			// 	msg: GlobalService.getVal('rulesMsgs')['rule_unsubscription_success: "Unsubscribed from rule successfully"']
			// }

		}, function (response) {
			console.error("Unable to load templates");
			if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
				$scope.info.rulesListMsg = {
					type: 'failure',
					msg: GlobalService.getVal('rulesMsgs')['h2_down_msg']
				};
			}else{
				$scope.info.rulesListMsg = {
					type: 'failure',
					msg: "Unable to load data Please contact " + $scope.supportEmail
				};
			}
			handleSessionTimeout(response);
			$scope.info.rulesLoading = false;
			$scope.info.sysidLoading = false;
		});

	}


	$scope.tagFilterFunction = function (t) {
		return t.selected;
	}
	$scope.getAddUpdateTagPayload = function(rule_id){

		//payload
		return {
			"associate": [{
				"tag_ids": $scope.info.tagList.filter($scope.tagFilterFunction).map(function(t){return t.tag_id}),
				"rule_ids": [rule_id]
			}],
			"disassociate": [{}]
		}
	} 

	$scope.checktagselectedstatus = function(){
		if(!$scope.info.subscription_enabled && $scope.info.selectedTagsCount>0){
			ModalService.alertBox({
				msg : 'Selected tags will be disassociated if auto-subscription is turned off.'
			});
		}
	}

	$scope.resetSelectedTags = function(){
		$scope.info.tagList.forEach(function(tag){
			tag.selected = false;
		});
		$scope.updateTagSelectedCount();
	}


}])

// Controller to handle adding and editing of templates
.controller('AnalyticsCtrl', ['$scope', '$sce', '$timeout', '$filter', 'ModalService', 'RulesService', 'GlobalService', 'UserTrackingService', 'AppService', '$rootScope',
function($scope, $sce, $timeout, $filter, ModalService, RulesService, GlobalService, UserTrackingService, AppService, $rootScope) {
	// Object to store all information about Add/Edit Template page
	$scope.info = {};
	// Stores application name which is used for user tracking
	$scope.info.application = GlobalService.getVal('navRules');
	// Defines whether the page is loading
	$scope.info.pageLoading = false;

	//Used for analytuics graph
	$scope.analytics = {};
	$scope.analytics.status = [];
	$scope.analytics.priorities = [];
	$scope.analytics.severities = [];
	$scope.analytics.creatorVsCategory = [];
	$scope.timefilter = GlobalService.getVal('alertTimeFilter');
	$scope.customTimeMsg = GlobalService.getVal('analyticsCustomTimeMsg');

	$scope.selectedTimeFilter = $scope.timefilter[0];
	$scope.maxToDate = moment.utc().format();
	$scope.minFromDate = moment().subtract(30,'day').utc().format();
	RulesService.setSelectedTimeFilter($scope.selectedTimeFilter);
	var startTime, endTime;
	// Stores whether session is timed out or not
	$scope.info.sessionTimedOut = false;
	//$scope.selectedTimeFilter
	// $scope.$watch('selectedTimeFilter', function() {
    //     $scope.minFromDate = moment($scope.selectedTimeFilter.endTime).subtract(30,'day').utc().format();
    // }, true);
	var manufacturer = GlobalService.getVal('manufacturer');
	var product = GlobalService.getVal('product');
	var schema = GlobalService.getVal('schema');
	// Function to render text in html format
	$scope.renderHtml = function(html) {
		return $sce.trustAsHtml(html);
	};

	// Function to handle session timeout
	function handleSessionTimeout(response) {
		if (!$scope.info.sessionTimedOut && response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/timeout/)) {
			$scope.info.sessionTimedOut = true;
			ModalService.sessionTimeout();
		}
	};

	$scope.makeAnalyticsData = function(rules){
		// rules.forEach(function(rule){
		// 	//for status
		// 	if($scope.analytics.status.length == 0){
		// 		$scope.analytics.status.push({name:rule.status,count:1,details:[rule]});
		// 	}else{
		// 		$scope.analyticsUpdateStatus(rule);
		// 	}
		// 	//for priority
		// 	if($scope.analytics.priorities.length == 0){
		// 		$scope.analytics.priorities.push({name:rule.priority,count:1,details:[rule]});
		// 	}else{
		// 		$scope.analyticsUpdatePriorities(rule);
		// 	}
		// 	//for severity
		// 	if($scope.analytics.severities.length == 0){
		// 		$scope.analytics.severities.push({name:rule.severity,count:1,details:[rule]});
		// 	}else{
		// 		$scope.analyticsUpdateSeverities(rule);
		// 	}
		// 	//for creater vr category head map
		// 	//formate data for heat map {x: "creator", y: "categgory", value: no}
		// 	if(rule.created_by && (rule.created_by && rule.created_by.trim())){
		// 		if($scope.analytics.creatorVsCategory.length == 0){
		// 			$scope.analytics.creatorVsCategory.push({'x':rule.created_by, 'y': rule.category, 'value': 1});
		// 		}else{
		// 			$scope.analyticsUpdateCreatorVsCategory(rule);
		// 		}
		// 	}
		// 	// if($scope.analytics.severities.length == 0){
		// 	// 	$scope.analytics.severities.push({name:rule.severity,count:1,details:[rule]});
		// 	// }else{
		// 	// 	$scope.analyticsUpdateAlertsTriggeredBySeverity(rule);
		// 	// }
		// });
		//$scope.processCreatorVsCategoryData();
		//RulesService.setAnalyticsData($scope.analytics);

		RulesService.setAnalyticsLoaderWait(false);

		RulesService.newAnalyticsApi().then(function(response) {
			$scope.analytics = response.data.Data;
			RulesService.setAnalyticsData($scope.analytics);
			//set to true
			RulesService.setAnalyticsLoaderWait(true);
		});
	};

	$scope.processCreatorVsCategoryData = function(){
		var allCategory = {}, allData = [], allUsers = [];
		$scope.analytics.creatorVsCategory.map(function(item){
			if(!allCategory[item.y]) {
				allCategory[item.y] = [];
			}
			allCategory[item.y].push(item.x);
			if(allUsers.indexOf(item.x) == -1){
				allUsers.push(item.x);
			}
		});
		var categories = Object.keys(allCategory)
		for(var i=0;i<categories.length;i++){
			var tmpUserList = allCategory[categories[i]];
			for(var j=0;j<allUsers.length;j++){
				var user = allUsers[j];
				if(tmpUserList.indexOf(user) == -1){
					$scope.analytics.creatorVsCategory.push({'x':user, 'y': categories[i], 'value': 0})
				}
			}
		}		
	};
	$scope.analyticsUpdateSeverities = function(rule){
		var cRule,newStatusElm, isFound=false;
		for(var i=0;i<$scope.analytics.severities.length;i++){
			cRule = $scope.analytics.severities[i];
			if(cRule.name == rule.severity){
				cRule.count++;
				cRule.details.push(rule);
				isFound = true;
				break;
			}
		}
		if(!isFound){
			newStatusElm = {};
			newStatusElm.name = rule.severity;
			newStatusElm.count = 1;
			newStatusElm.details = [rule];
			$scope.analytics.severities.push(angular.copy(newStatusElm));
		}
	};

	$scope.analyticsUpdatePriorities = function(rule){
		var cRule,newStatusElm, isFound=false;
		for(var i=0;i<$scope.analytics.priorities.length;i++){
			cRule = $scope.analytics.priorities[i];
			if(cRule.name == rule.priority){
				cRule.count++;
				cRule.details.push(rule);
				isFound = true;
				break;
			}
		}
		if(!isFound){
			newStatusElm = {};
			newStatusElm.name = rule.priority;
			newStatusElm.count = 1;
			newStatusElm.details = [rule];
			$scope.analytics.priorities.push(angular.copy(newStatusElm));
		}
	};
	
	$scope.analyticsUpdateStatus = function(rule){
		var cRule,newStatusElm, isFound=false;
		for(var i=0;i<$scope.analytics.status.length;i++){
			cRule = $scope.analytics.status[i];
			if(cRule.name == rule.status){
				cRule.count++;
				cRule.details.push(rule);
				isFound = true;
				break;
			}
		}
		if(!isFound){
			newStatusElm = {};
			newStatusElm.name = rule.status;
			newStatusElm.count = 1;
			newStatusElm.details = [rule];
			$scope.analytics.status.push(angular.copy(newStatusElm));
		}
	};
	$scope.analyticsUpdateCreatorVsCategory = function(rule){
		var cRule, isFound=false;
		for(var i=0;i<$scope.analytics.creatorVsCategory.length;i++){
			cRule = $scope.analytics.creatorVsCategory[i];
			if(cRule.x == rule.created_by && (cRule.y == rule.category)){
				cRule.value++;
				isFound = true;
				break;
			}
		}
		if(!isFound){
			$scope.analytics.creatorVsCategory.push({'x':rule.created_by, 'y': rule.category, 'value': 1});
		}
	};
	
	$scope.analyticsUpdateAlertsTriggeredBySeverity = function(rule){
		var cRule,newStatusElm, isFound=false;
		for(var i=0;i<$scope.analytics.severities.length;i++){
			cRule = $scope.analytics.severities[i];
			if(cRule.name == rule.severity){
				cRule.count++;
				cRule.details.push(rule);
				isFound = true;
				break;
			}
		}
		if(!isFound){
			newStatusElm = {};
			newStatusElm.name = rule.severity;
			newStatusElm.count = 1;
			newStatusElm.details = [rule];
			$scope.analytics.severities.push(angular.copy(newStatusElm));
		}
	};
	
	var rules = RulesService.getRulesList();
	if(rules){
		$scope.makeAnalyticsData(rules);
	};
	$scope.alertsGraphTimeFilterChange = function(item){
		$scope.selectedTimeFilter = item;
		RulesService.setSelectedTimeFilter($scope.selectedTimeFilter);
		if(item.label != 'Custom filter'){
			$scope.applyTimeFilter();
		}
		$scope.trackUser('Alert Analtics', 'TimeFilter change',{'Timefilter': item});
	}
	$scope.applyTimeFilter = function(){
		$scope.trackUser('Alert Analtics', 'TimeFilter change',{'Timefilter': $scope.selectedTimeFilter});
		$rootScope.$broadcast('analytics-timefilter-changes', $scope.selectedTimeFilter);
	}
		//usertracking function
		$scope.trackUser = function(app_Page, operation, details){
			var details = JSON.stringify(details);
			UserTrackingService.standard_user_tracking($scope.info.application, app_Page, operation, details).then(function(response) {
	
			}, handleSessionTimeout);
		};

}])

// Controller to handle the manage API templates page
.controller('ManageAPITemplateCtrl', ['$scope', '$sce', '$timeout', '$filter', 'ngTableParams', 'RulesService', 'GlobalService', 'ModalService', 'UserTrackingService', 'AppService',
function($scope, $sce, $timeout, $filter, ngTableParams, RulesService, GlobalService, ModalService, UserTrackingService, AppService) {
	// Object to store the information for manage template page
	$scope.info = {};

	// Stores application name which is used for user tracking
	$scope.info.application = GlobalService.getVal('navRules');

	// Object that stores all the filter information
	$scope.info.filter = {};

	// Stores success messages
	$scope.info.successMsg = "";

	// Stores error messages
	$scope.info.errorMsg = "";

	// Stores whether session is timed out or not
	$scope.info.sessionTimedOut = false;

	// Stores the list of columns
	$scope.columns = $filter('filter')(GlobalService.getVal('APItemplatesColumns'), {
		enabled: true
	});

	// Stores the field of initial Sorting
	$scope.info.initialSortField = GlobalService.getVal('templatesSortField');

	// Initializing the filter model of each column
	for (var i in $scope.columns) {
		$scope.info[$scope.columns[i]['field']] = "";
	}

	// Sets the object of initial sorting
	$scope.info.initialSorting = {};
	$scope.info.initialSorting[$scope.info.initialSortField] = 'desc';

	// Object that stores the page information for custom pagination
	$scope.info.page = {
		"total": 0,
		"current": 1,
		"pages": 0,
		"count": 10,
		"sortField": $scope.info.initialSortField + "desc"
	};

	// Defines whether templates are loading
	$scope.info.templatesLoading = true;
	$scope.info.pageLoading = true;

	//An array that holds apiTemplateId's filtered from rule
	$scope.apiTempIdlist = [];

	$scope.templatesList = [];

	//variavles to handle delete operation
	$scope.multiDelobj = {};
	$scope.apiTemplateIds = [];
	$scope.showDeleteList = [];
	$scope.ignoreDeleteList = [];

	//mps
	$scope.mps = GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema');
	
	// Populate the table data for first load
	$scope.populateTable = function () {
		$scope.tableParams = new ngTableParams({
			page: 1, // show first page
			count: $scope.info.page['count'], // count per page
			sorting: $scope.info.initialSorting // Initial Sorting
		}, {
				total: $scope.templatesList.length, // length of data
				getData: function ($defer, params) {
					var orderedData = params.sorting() ? $filter('orderBy')($scope.templatesList, params.orderBy()) : $scope.templatesList;
					orderedData = $filter('filterTemplates')(orderedData, $scope.info.filter);
					params.total(orderedData.length);
					$scope.info.page['total'] = orderedData.length;
					$scope.info.page['pages'] = Math.ceil($scope.info.page['total'] / $scope.info.page['count']);
					$defer.resolve(orderedData.slice((params.page() - 1) * params.count(), params.page() * params.count()));
				}
			});
	};

	// Function to reload templates
	$scope.reloadTemplates = function () {
		//call to fetch api template list
		RulesService.getAPITemplates().then(function (response) {
			var templatesData = response.data.Data;
			//call to fetch config template list
			RulesService.getAPIConfigTemplates().then(function (response) {
				$scope.alertConfigList = response.data.Data;
				//combine the  data[based on config id from template add few more details(base url and Auth key) to yhe template object]
				//This is babel compiled code of ES6
				$scope.combinedData = templatesData.map(function (a) {
					return Object.assign(a, $scope.alertConfigList.find(function (b) {
						return b.apiConfigId == a.apiConfigId;
					}));
				});
				$scope.templatesList = $scope.combinedData;
				$scope.clearAppliedFilters();
				$scope.info.page['current'] = 1;
				$scope.tableParams.reload();
				$scope.tableParams.page(1);
				$scope.info.templatesLoading = false;
				RulesService.setAPITemplatesList($scope.templatesList);
				$scope.info.rulesList = RulesService.getRulesList();
				$scope.setTemplatesLabelMap();
				$scope.showDeleteList = [];
			}), function (response) {
				$scope.info.templatesLoading = false;

			}
		}, function (response) {
			$scope.templatesList = "";
			$scope.clearAppliedFilters();
			$scope.info.page['current'] = 1;
			$scope.tableParams.reload();
			$scope.tableParams.page(1);
			$scope.info.templatesLoading = false;
			if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
				$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['h2_down_msg'];
			} else {
				if ($scope.info.errorMsg == "") {
					$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['temp_load_failed'];
				} else {
					$scope.info.errorMsg += "<br>" + GlobalService.getVal('rulesMsgs')['temp_load_failed'];
				}
			}

			handleSessionTimeout(response);
		});
	};

	// Function to clear all messages
	$scope.clearMessage = function () {
		if (!$scope.info.templatesLoading) {
			$scope.info.successMsg = "";
			$scope.info.errorMsg = "";
			$scope.info.addTemplateMsg = {};
		}
	};

	// Stores the list of templates
	RulesService.getAPITemplates().then(function (response) {
		$scope.templatesData = response.data.Data;
		//call get alert config list
		RulesService.getAPIConfigTemplates().then(function (response) {
			$scope.alertConfigList = response.data.Data;
			//combine the  data
			$scope.combinedData = $scope.templatesData.map(function (a) {
				return Object.assign(a, $scope.alertConfigList.find(function (b) {
					return b.apiConfigId == a.apiConfigId;
				}));
			});
			$scope.templatesList = $scope.combinedData;
			$scope.populateTable();
			$scope.info.templatesLoading = false;
			RulesService.setAPITemplatesList($scope.templatesList);
			$scope.info.rulesList = RulesService.getRulesList();
			$scope.setTemplatesLabelMap();
		}), function (response) {

		}
	}, function (response) {
		$scope.templatesList = "";
		$scope.populateTable();
		$scope.info.templatesLoading = false;
		console.error('Error loading templates list');
		if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
			GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
			$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['h2_down_msg'];
		} else {
			if ($scope.info.errorMsg == "") {
				$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['temp_load_failed'];
			} else {
				$scope.info.errorMsg += "<br>" + GlobalService.getVal('rulesMsgs')['temp_load_failed'];
			}
		}
		handleSessionTimeout(response);
	});

	// Function to set the templates label map
	$scope.setTemplatesLabelMap = function () {
		var map = {};
		for (var i = 0; i < $scope.templatesList.length; i++) {
			map[$scope.templatesList[i]['template_name']] = true;
		}
		RulesService.setTemplatesLabelMap(map);
	};

	// Changes page size
	$scope.changePageSize = function () {
		$scope.info.page['count'] = parseInt($scope.info.page['count']);
		$scope.tableParams.count($scope.info.page['count']);
		$scope.info.page['pages'] = Math.ceil($scope.info.page['total'] / $scope.info.page['count']);
		if ($scope.info.page['current'] > $scope.info.page['pages']) {
			$scope.info.page['current'] = $scope.info.page['pages'];
			$scope.tableParams.page($scope.info.page['current']);
		}
	};

	// Switch to next page if current page is not last page
	$scope.nextPage = function () {
		if ($scope.info.page['current'] < $scope.info.page['pages']) {
			$scope.info.page['current'] += 1;
			$scope.tableParams.page($scope.info.page['current']);
		}
	};

	// Switch to previous page if current page is not first page
	$scope.prevPage = function () {
		if ($scope.info.page['current'] > 1) {
			$scope.info.page['current'] -= 1;
			$scope.tableParams.page($scope.info.page['current']);
		}
	};

	// Switch to first page if not on first page
	$scope.firstPage = function () {
		if ($scope.info.page['current'] == 1)
			return;
		$scope.info.page['current'] = 1;
		$scope.tableParams.page($scope.info.page['current']);
	};

	// Switch to last page if not on last page
	$scope.lastPage = function () {
		if ($scope.info.page['current'] == $scope.info.page['pages'])
			return;
		$scope.info.page['current'] = $scope.info.page['pages'];
		$scope.tableParams.page($scope.info.page['current']);
	};

	// Select/unselect select all checkbox based on templates selection
	$scope.checkTemplatesSelection = function () {
		for (var i in $scope.templatesList) {
			if (!$scope.templatesList[i].selected) {
				$scope.info.selectAll = false;
				return;
			}
		}
		$scope.info.selectAll = true;
	};

	// Select/unselect all templates on the page
	$scope.checkSelectAll = function () {
		if (!!$scope.info.selectAll) {
			for (var i = 0; i < $scope.templatesList.length; i++) {
				$scope.templatesList[i].selected = true;
			}
		} else {
			for (var i = 0; i < $scope.templatesList.length; i++) {
				delete $scope.templatesList[i].selected;
			}
		}
	};

	// Check if any template is selected
	$scope.checkTemplateSelected = function () {
		if (!!$scope.tableParams) {
			var selectedTemplates = $filter('filter')($scope.tableParams.data, {
				selected: true
			});
			if (!!selectedTemplates.length) {
				return true;
			}
		}
		return false;
	};

	// Function to add a new API  template
	$scope.addNewTemplate = function () {
		$scope.info.templatesLoading = true;
		RulesService.setTemplateMode('new');
		$scope.$parent.changeCurrentPage('add_edit_API_template');
	};

	// Function to edit a template
	$scope.editTemplate = function (template) {
		$scope.info.templatesLoading = true;
		RulesService.setTemplateMode('edit', template);
		$scope.$parent.changeCurrentPage('add_edit_API_template');
	};

	// Function to delete a single template
	$scope.deleteAPITemplate = function (template) {
		if ($scope.filteredapiTempIdlist.includes(template.apiTemplateId)) {
			ModalService.alertBox({
				msg: GlobalService.getVal('rulesMsgs')['API_temp_del_rule_associated']
			});
			return;
		}

		$scope.delTemplate = template;
		$scope.msg = GlobalService.getVal('rulesMsgs')['temp_del_single'][0] + template.apiTemplateName + GlobalService.getVal('rulesMsgs')['temp_del_single'][1];
		$scope.modal = ModalService.openModal("partials/rules-and-alerts/delete_template.html", $scope, false, 'static');
	};

	// Confirm the deletion of template
	$scope.deleteTemplateConfirm = function () {
		var template = $scope.delTemplate;
		$scope.info.templatesLoading = true;
		$scope.mps = GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema');
		var deleteObj = {};
		deleteObj.apiTemplateId = template.apiTemplateId;
		deleteObj.mps = $scope.mps;
		RulesService.deleteAPITemplate(deleteObj).then(function (response) {
			UserTrackingService.standard_user_tracking($scope.info.application, 'Manage API Template', 'delete', JSON.stringify(deleteObj)).then(function (response) {

			}, handleSessionTimeout);
			$scope.reloadTemplates();
			if ($scope.info.successMsg == "") {
				$scope.info.successMsg = GlobalService.getVal('rulesMsgs')['temp_del_success'][0] + template.apiTemplateName + GlobalService.getVal('rulesMsgs')['temp_del_success'][1];
			} else {
				$scope.info.successMsg += "<br>" + GlobalService.getVal('rulesMsgs')['temp_del_success'][0] + template.apiTemplateName + GlobalService.getVal('rulesMsgs')['temp_del_success'][1];
			}
		}, function (response) {
			console.error('Unable to delete ' + template.template_name);
			$scope.info.templatesLoading = false;
			if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
				$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['h2_down_msg'];
			} else {
				if ($scope.info.errorMsg == "") {
					$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['temp_del_failed'][0] + template.template_name + GlobalService.getVal('rulesMsgs')['temp_del_failed'][1];
				} else {
					$scope.info.errorMsg += "<br>" + GlobalService.getVal('rulesMsgs')['temp_del_failed'][0] + template.template_name + GlobalService.getVal('rulesMsgs')['temp_del_failed'][1];
				}
			}
			handleSessionTimeout(response);
		});
	};

	// Function to delete selected templates
	$scope.deleteSelectedTemplates = function () {
		$scope.selectedTemplates = $filter('filter')($scope.tableParams.data, {
			selected: true
		});
		var found = $scope.selectedTemplates.filter(function (obj) {
			if (!$scope.filteredapiTempIdlist.includes(obj.apiTemplateId)) {
				$scope.showDeleteList.push(obj);
				$scope.apiTemplateIds.push(obj.apiTemplateId);
			}

		});

		if ($scope.showDeleteList.length == 0) {
			ModalService.alertBox({
				msg: GlobalService.getVal('rulesMsgs')['map_temp_multiple_Del_none']
			});
			return;
		}
		var templatesString = "<br>";
		for (var i = 0; i < $scope.selectedTemplates.length; i++) {
			if (i != $scope.selectedTemplates.length - 1) {
				templatesString += "<strong>" + $scope.selectedTemplates[i].apiTemplateName + "<strong>, ";
			} else {
				templatesString += "<strong>" + $scope.selectedTemplates[i].apiTemplateName + "<strong>";
			}
		}
		$scope.msg = GlobalService.getVal('rulesMsgs')['temp_del_multiple'] + templatesString;
		$scope.modal = ModalService.openModal("partials/rules-and-alerts/delete_api_template_multiple.html", $scope, false, 'static');
	};

	// Function to confirm the deletion of selected templates
	$scope.deleteSelectedTemplatesConfirm = function () {
		$scope.info.templatesLoading = true;
		$scope.multiDelobj.apiTemplateIds = $scope.apiTemplateIds;
		$scope.multiDelobj.mps = $scope.mps;
		RulesService.deleteAPITemplateMultiple($scope.multiDelobj).then(function (response) {
			$scope.reloadTemplates();
			if ($scope.info.successMsg == "") {
				$scope.info.successMsg = GlobalService.getVal('rulesMsgs')['temp_del_success'][0] + GlobalService.getVal('rulesMsgs')['temp_del_success'][1];
			} else {
				$scope.info.successMsg += "<br>" + GlobalService.getVal('rulesMsgs')['temp_del_success'][0] + GlobalService.getVal('rulesMsgs')['temp_del_success'][1];
			}
			UserTrackingService.standard_user_tracking($scope.info.application, 'Manage API Template', 'delete', JSON.stringify($scope.multiDelobj)).then(function (response) {

			}, handleSessionTimeout);
			$scope.info.selectAll = false;
		}), function (response) {
			$scope.info.templatesLoading = false;
			if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
				$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['h2_down_msg'];
			} else {
				if ($scope.info.errorMsg == "") {
					$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['temp_del_failed'][0] + template.template_name + GlobalService.getVal('rulesMsgs')['temp_del_failed'][1];
				} else {
					$scope.info.errorMsg += "<br>" + GlobalService.getVal('rulesMsgs')['temp_del_failed'][0] + template.template_name + GlobalService.getVal('rulesMsgs')['temp_del_failed'][1];
				}
			}
			handleSessionTimeout(response);
		}
	};

	// Function to call the delete API for each selected template
	$scope.callDeleteTemplate = function (template, total) {
		RulesService.deleteTemplate(template.template_id).then(function (response) {
			$scope.info.doneDeletions++;
			$scope.info.deletedTemplates.push(template.template_name);
			if ($scope.info.doneDeletions == total) {
				UserTrackingService.standard_user_tracking($scope.info.application, 'Manage Template', 'multiple delete', "[" + $scope.info.deletedTemplates.toString() + "]").then(function (response) {

				}, handleSessionTimeout);
				$scope.reloadTemplates();
			}
			if ($scope.info.successMsg == "") {
				$scope.info.successMsg = GlobalService.getVal('rulesMsgs')['temp_del_success'][0] + template.template_name + GlobalService.getVal('rulesMsgs')['temp_del_success'][1];
			} else {
				$scope.info.successMsg += "<br>" + GlobalService.getVal('rulesMsgs')['temp_del_success'][0] + template.template_name + GlobalService.getVal('rulesMsgs')['temp_del_success'][1];
			}
		}, function (response) {
			console.error('Unable to delete');
			$scope.info.doneDeletions++;
			if ($scope.info.doneDeletions == total) {
				if ($scope.info.deletedTemplates.length) {
					UserTrackingService.standard_user_tracking($scope.info.application, 'Manage Template', 'multiple delete', "[" + $scope.info.deletedTemplates.toString() + "]").then(function (response) {

					}, function (response) {

					});
				}
				$scope.reloadTemplates();
			}
			if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
				$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['h2_down_msg'];
			} else {
				if ($scope.info.errorMsg == "") {
					$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['temp_del_failed'][0] + template.template_name + GlobalService.getVal('rulesMsgs')['temp_del_failed'][1];
				} else {
					$scope.info.errorMsg += "<br>" + GlobalService.getVal('rulesMsgs')['temp_del_failed'][0] + template.template_name + GlobalService.getVal('rulesMsgs')['temp_del_failed'][1];
				}
			}
			handleSessionTimeout(response);
		});
	};

	// Update the filter object if any of the filter model is updated
	$scope.searchTemplate = function (field) {
		if ($scope.info[field] != "") {
			$scope.info.filter[field] = $scope.info[field];
		} else {
			if (!!$scope.info.filter[field]) {
				delete $scope.info.filter[field];
			}
		}
		$scope.tableParams.reload();
		if ($scope.info.page['current'] > $scope.info.page['pages']) {
			if ($scope.info.page['pages'] == 0) {
				$scope.info.page['current'] = 1;
			} else {
				$scope.info.page['current'] = $scope.info.page['pages'];
			}
			$scope.tableParams.page($scope.info.page['current']);
		}
	};

	// Sort the column on clicking the column header
	$scope.sortColumn = function (field) {
		if (!(document.activeElement.tagName == "INPUT" || document.activeElement.tagName == "BUTTON")) {
			$scope.tableParams.sorting(field, $scope.tableParams.isSortBy(field, 'asc') ? 'desc' : 'asc');
			$scope.info.page['sortField'] = field + ($scope.tableParams.isSortBy(field, 'asc') ? 'asc' : 'desc');
		}
	};

	// Clear all the applied filters
	$scope.clearAppliedFilters = function () {
		if (Object.keys($scope.info.filter).length != 0) {
			for (var i in $scope.columns) {
				delete $scope.columns[i].filterString;
			}

			for (var i in $scope.columns) {
				$scope.info[$scope.columns[i]['field']] = "";
			}

			$scope.info.filter = {};
			$scope.tableParams.reload();

			$scope.info.page['current'] = 1;
			$scope.tableParams.page($scope.info.page['current']);
		}
		if ($scope.info.page['sortField'] != $scope.info.initialSortField + 'desc') {
			$scope.tableParams.sorting($scope.info.initialSortField, 'desc');
			$scope.info.page['sortField'] = $scope.info.initialSortField + 'desc';
		}
	};

	// Check if any filter is applied or not
	$scope.checkAppliedFilters = function () {
		var filters = false;
		if (Object.keys($scope.info.filter).length != 0)
			filters = true;
		if (filters || $scope.info.page['sortField'] != $scope.info.initialSortField + 'desc') {
			return true;
		}
		return false;
	};

	// Function to render text in html format
	$scope.renderHtml = function (html) {
		return $sce.trustAsHtml(html);
	};

	// Function to handle session timeout
	function handleSessionTimeout(response) {
		if (!$scope.info.sessionTimedOut && response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/timeout/)) {
			$scope.info.sessionTimedOut = true;
			ModalService.sessionTimeout();
		}
	};

	$scope.info.addTemplateMsg = RulesService.getApiTemplateAddedMessage();

	//fetches the rule list
	$scope.rulesList = RulesService.getRulesList();

	var list = $scope.rulesList.filter(function (obj) {
		if (obj.api_template_id) {
			$scope.apiTempIdlist.push(obj.api_template_id);
		}
	});
	$scope.filteredapiTempIdlist = $scope.apiTempIdlist.filter(function (elem, index, self) {
		return index == self.indexOf(elem);
	});


	$timeout(function () {
		var data = {}
		RulesService.setApiTemplateAddedMessage(data);
	}, 2000);

	//function to clear/reset the list
	$scope.emptySelectedList = function(){
		$scope.showDeleteList = [];
		}

}])


// Controller to handle adding and editing of API templates
.controller('AddEditAPITemplateCtrl', ['$scope', '$sce', '$timeout', '$filter', 'ModalService', 'RulesService', 'GlobalService', 'UserTrackingService', 'AppService',
function($scope, $sce, $timeout, $filter, ModalService, RulesService, GlobalService, UserTrackingService, AppService) {

	/*-------------------------------------------------------------------------------
	 @All Variables Declaraction Getter and Setter methods	
	---------------------------------------------------------------------------------*/

	// Object to store all information about Add/Edit Template page
	$scope.info = {};

	// Stores application name which is used for user tracking
	$scope.info.application = GlobalService.getVal('navRules');

	

	// Specifies whether rule is added
	$scope.info.templateAdded = false;

	// Stores the message to be displayed on top
	$scope.info.addTemplateMsg = {};

	// Stores whether session is timed out or not
	$scope.info.sessionTimedOut = false;

	// Stores the section column label map
	$scope.sectionsColumnLabelMap = {};

	$scope.info.scope = "row";

	$scope.alertConfigList = '';
	$scope.info.lastElementFocused = null;;
	//variables binded to form elements
	$scope.addApiTemplate = { 
		
		"apiTemplateName": "",
		"apiConfigId": "",
		"apiPayload": "",
	}

	var manufacturer = GlobalService.getVal('manufacturer');
	var product = GlobalService.getVal('product');
	var schema = GlobalService.getVal('schema');
	$scope.sectionAttributeLabelList = RulesService.getSectionsColumnLabelForManageAPI();
	$scope.showGlobAttrib = true;

	$scope.nameBeforeEdit = "";
	//console.log('sectionAttributeLabelList', $scope.sectionAttributeLabelList);

	/*----------------------------------------------------------------------------------
	@ Add Edit API Tempalte Logic and Functions 
	-----------------------------------------------------------------------------------*/

	// Function to populate add template data
	$scope.populateAddTemplate = function () {
		$scope.addApiTemplate.mps = GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema');
		$scope.addApiTemplate.pageLabel = 'Add Template';
		$scope.addApiTemplate.apiTemplateName = "";
		$scope.addApiTemplate.apiConfigId = "select";
		$scope.addApiTemplate.apiPayload = "";
		$scope.setSavedMode();
		
	};

	// Function to populate edit template data
	$scope.populateEditTemplate = function () {
		$scope.nameBeforeEdit = RulesService.getTemplateMode()['data']['apiTemplateName'];
		$scope.addApiTemplate.pageLabel = 'Edit Template - ' + RulesService.getTemplateMode()['data']['apiTemplateName'];
		$scope.addApiTemplate.mps = GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema');
		$scope.addApiTemplate.apiTemplateName = RulesService.getTemplateMode()['data']['apiTemplateName'];
		$scope.addApiTemplate.apiConfigId = RulesService.getTemplateMode()['data']['apiConfigId'];
		$scope.addApiTemplate.apiPayload = RulesService.getTemplateMode()['data']['apiPayload'];
		$scope.addApiTemplate.apiTemplateId = RulesService.getTemplateMode()['data']['apiTemplateId'];
		$scope.currentKeyLabel = RulesService.getTemplateMode()['data']['apiAuthKey'];
		$scope.setSavedMode();
	};

	// Function to set template in saved mode
	$scope.setSavedMode = function () {
		RulesService.setAPITemplateSavedStatus(false);
	};

	// Function to set template in unsaved mode
	$scope.setUnsavedMode = function () {
		RulesService.setAPITemplateSavedStatus(true);
	};
	
	// Set form elements according to new or edit mode
	if (RulesService.getTemplateMode() && RulesService.getTemplateMode()['mode'] == 'edit') {
		$scope.populateEditTemplate();
		//$scope.setKeyName();
		$scope.info.pageLoading = false;
	} else {
		$scope.populateAddTemplate();
	}
	// Function to add new template
	$scope.addNewTemplate = function () {
		RulesService.setTemplateMode('new');
		$scope.info.templateAdded = false;
		$scope.info.addTemplateMsg = {};
		$scope.populateAddTemplate();
	};
	//call get alert config list
	RulesService.getAPIConfigTemplates().then(function (response) {
		$scope.alertConfigList = response.data.Data;
		//console.log($scope.alert_config_list);
	}), function (response) {

	}
	// Function to save the template
	$scope.saveTemplate = function () {
		//var sectionColumnValues = RulesService.getSectionsAndAttributePair($scope.addApiTemplate.httpVarMap);
		if (!$scope.validateTemplate()) {
			return;
		}
		if (RulesService.getTemplateMode() && RulesService.getTemplateMode()['mode'] == 'edit') {
			// if (!$scope.validateTemplateName()) {
			// 	return;
			// }
			
			$scope.info.pageLoading = true;
			// $scope.addApiTemplate.httpCredentials = JSON.stringify($scope.addApiTemplate.httpCredentials);
			RulesService.editAPITemplateCall($scope.addApiTemplate).then(function (response) {
				$scope.info.addTemplateMsg = {
					type: 'success',
					msg: GlobalService.getVal('rulesMsgs')['add_template_success']
				};
				RulesService.setApiTemplateAddedMessage($scope.info.addTemplateMsg);
				$scope.setSavedMode();
				$scope.$parent.changeCurrentPage('manage_API_template');
				UserTrackingService.standard_user_tracking($scope.info.application, 'Add_Edit template', 'edit', JSON.stringify($scope.addApiTemplate)).then(function (response) {

				});
				$scope.info.templateAdded = true;
			}, function (response) {
				if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
					GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
					$scope.info.addTemplateMsg = {
						type: 'failure',
						msg: GlobalService.getVal('rulesMsgs')['h2_down_msg']
					};
				} else {
					$scope.info.addTemplateMsg = {
						type: 'failure',
						msg: GlobalService.getVal('rulesMsgs')['add_template_fail']
					};
				}
				$scope.info.templateAdded = false;
				$scope.info.pageLoading = false;
				handleSessionTimeout(response);
			});
		}
		else {			
			$scope.info.pageLoading = true;
			//$scope.addApiTemplate.httpCredentials = JSON.stringify($scope.addApiTemplate.httpCredentials);
			delete $scope.addApiTemplate.pageLabel;
			RulesService.addAPITemplateCall($scope.addApiTemplate).then(function (response) {
			$scope.info.addTemplateMsg = {
				type: 'success',
				msg: GlobalService.getVal('rulesMsgs')['add_template_success']
			};
			//Rule$scope.info.addTemplateMsg); 
			RulesService.setApiTemplateAddedMessage($scope.info.addTemplateMsg);
			$scope.setSavedMode();
			$scope.$parent.changeCurrentPage('manage_API_template');

			UserTrackingService.standard_user_tracking($scope.info.application, 'Add_Edit template', 'add', JSON.stringify($scope.addApiTemplate)).then(function (response) {

			}, handleSessionTimeout);

			$scope.info.templateAdded = true;
			}, function (response) {
				if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
					GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
					$scope.info.addTemplateMsg = {
						type: 'failure',
						msg: GlobalService.getVal('rulesMsgs')['h2_down_msg']
					};
				} else {
					$scope.info.addTemplateMsg = {
						type: 'failure',
						msg: GlobalService.getVal('rulesMsgs')['add_template_fail']
					};
				}
				$scope.info.templateAdded = false;
				$scope.info.pageLoading = false;
				handleSessionTimeout(response);
			});
		}
	};

	$scope.setKeyName = function () {
		var tempList = $scope.alertConfigList.filter(function (i) {
			return i.apiConfigId == $scope.addApiTemplate.apiConfigId;
		});
		$scope.currentKeyLabel = tempList[0].apiAuthKey;
	}

	/*--------------------------------------------------------------------
	  Form Validation
	 ---------------------------------------------------------------------*/

	// Function to validate the template details entered
	$scope.validateTemplate = function () {
		var found = [];
		$scope.info.apiTemplateList = RulesService.getAPITemplatesList();
		if (/^\s*$/.test($scope.addApiTemplate.apiTemplateName)) {
			ModalService.alertBox({
				msg: "Template Name" + GlobalService.getVal('rulesMsgs')['temp_field_blank']
			});
			return;
		}

		if (RulesService.getTemplateMode() && RulesService.getTemplateMode()['mode'] != 'new') {

			if ($scope.nameBeforeEdit != $scope.addApiTemplate.apiTemplateName) {
				found = $scope.info.apiTemplateList.filter(function (name) {
					return name.apiTemplateName == $scope.addApiTemplate.apiTemplateName
				});
			}
			///var filteredList = $scope.info.apiTemplateList.filter(function(name){return name.apiTemplateName != $scope.addApiTemplate.apiTemplateName});
			

		} else {
			if ($scope.info.apiTemplateList != undefined && $scope.info.apiTemplateList) {
				found = $scope.info.apiTemplateList.filter(function (name) {
					return name.apiTemplateName == $scope.addApiTemplate.apiTemplateName;
				});
			}
		}

		if (found.length > 0) {
			ModalService.alertBox({
				msg: GlobalService.getVal('rulesMsgs')['duplicateTemplateName']
			});
			return false;
		}
		// if (RulesService.getTemplateMode() && RulesService.getTemplateMode()['mode'] != 'new') {
		// 	return true;
		// }

		//check if apiconfigId is empty
		if (/^\s*$/.test($scope.addApiTemplate.apiConfigId) || $scope.addApiTemplate.apiConfigId == 'select' ) {
			ModalService.alertBox({
				msg:  GlobalService.getVal('rulesMsgs')['baseTemplateEmpty']
			});
			return;
		}

		//check if Payload Data(VarMap) is empty
		if (/^\s*$/.test($scope.addApiTemplate.apiPayload)) {
			ModalService.alertBox({
				msg: "Payload Data" + GlobalService.getVal('rulesMsgs')['temp_field_blank']
			});
			return;
		}

		// //check if Payload Data(VarMap) is valid JSON
		// var str = $scope.addApiTemplate.apiPayload;
		// function IsJsonString(str) {
		// 	try {
		// 		JSON.parse(str);
		// 	} catch (e) {
		// 		return false;
		// 	}
		// 	return true;
		// }

		// if (!IsJsonString(str)) {
		// 	ModalService.alertBox({
		// 		msg: GlobalService.getVal('rulesMsgs')['invalidJson']
		// 	});
		// 	return;
		// }

		// //check for string with #
		// if ($scope.showGlobAttrib) {
		// 	var payloadValArr = Object.values(JSON.parse(str));
		// 	for (i = 0; i < payloadValArr.length; i++) {

		// 		var splitvalues = [];
		// 		splitvalues = String(payloadValArr[i]).split(' ');
		// 		var validateValues = [];

		// 		for (j = 0; j < splitvalues.length; j++) {
		// 			if (String(splitvalues[j]).startsWith("#")) {
		// 				validateValues.push(splitvalues[j]);
		// 			}
		// 		}
		// 		if (validateValues.length > 0) {
		// 			for (k = 0; k < validateValues.length; k++) {
		// 				if ($scope.info.globalAtrributeValues.indexOf(validateValues[k]) == -1) {
		// 					ModalService.alertBox({
		// 						msg: "The attribute " + "<strong>&nbsp;" + validateValues[k] + "</strong>&nbsp;" + " is Invalid."//GlobalService.getVal('rulesMsgs')['invalidJson']
		// 					});
		// 					return;
		// 				}
		// 			}
		// 		}
		// 	}
		// }	
		if ($scope.showGlobAttrib) {
			var str = $scope.addApiTemplate.apiPayload;
			var matchList = str.match(/#\w+/gim);
			console.log(matchList);
			if (!matchList) {
				ModalService.alertBox({
					msg: "The Payload must contain altleast one global attribute."//GlobalService.getVal('rulesMsgs')['invalidJson']
				});
				return;
			}
			else {
				matchList.filter(function (item, index, inputArray) {
					return inputArray.indexOf(item) == index;
				});
		}
			if (matchList) {
				for (i = 0; i < matchList.length; i++) {
					if ($scope.info.globalAtrributeValues.indexOf(matchList[i]) == -1) {
						ModalService.alertBox({
							msg: "The attribute " + "<strong>&nbsp;" + matchList[i] + "</strong>&nbsp;" + " is Invalid."//GlobalService.getVal('rulesMsgs')['invalidJson']
						});
						return;
					}
				}
			}
		}
		return true;
	};


	// Function to render text in html format
	$scope.renderHtml = function (html) {
		return $sce.trustAsHtml(html);
	};

	// Function to handle session timeout
	function handleSessionTimeout(response) {
		if (!$scope.info.sessionTimedOut && response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/timeout/)) {
			$scope.info.sessionTimedOut = true;
			ModalService.sessionTimeout();
		}
	};


	// /*---------------------------------------------------------------------
	//   @ Template constants code
	//  ----------------------------------------------------------------------*/
	var globalTemplatesCons = angular.copy(GlobalService.getVal('templateConstants')['common']);
	// Stores the contants to be shown on templates page
	$scope.info.commonConstants = $filter('filter')(globalTemplatesCons, {
		enabled: true
	});
	$scope.info.customerConstants = $filter('filter')(globalTemplatesCons[manufacturer], {
		enabled: true
	});
	if($scope.info.customerConstants != undefined){
		$scope.info.templateConstants = new Array($scope.info.commonConstants.concat($scope.info.customerConstants));
		$scope.rawconstants = $scope.info.templateConstants;
	}
	else{
		$scope.info.templateConstants = $scope.info.commonConstants;
		$scope.rawconstants = $scope.info.templateConstants;
	}
	
	//replace object values with # and remove curly brackets
	$scope.info.templateConstants.forEach(function (obj) {
		obj.value ="#" + obj.value.replace(/{|}/gm, "");
	});

	var constValues = $scope.info.templateConstants.map(function(obj){
		return obj.value;
	});

	//Get Global attributes to display on add/edit page
	$scope.info.globalAtrributeList = RulesService.getGlobalAttribArr();
	if (Object.keys($scope.info.globalAtrributeList).length === 0 && $scope.info.globalAtrributeList.constructor === Object) {
		$scope.showGlobAttrib = false;
		$scope.info.globalAtrributeValues = constValues;
	}
	else {
		$scope.info.globalAtrributeValues = Object.values($scope.info.globalAtrributeList).concat(constValues);
	}
	
	

	/*-------------------------------------------------------------------------------
	*********************************************************************************
	END AddEditAPITemplateCtrl Controller
	*********************************************************************************
	---------------------------------------------------------------------------------*/
	
}])


// Controller to handle adding and editing of API templates
.controller('apiAdminConfigCtrl', ['$scope', '$sce', '$timeout', '$filter', 'ModalService', 'RulesService', 'GlobalService', 'UserTrackingService', 'AppService','$interval',
function($scope, $sce, $timeout, $filter, ModalService, RulesService, GlobalService, UserTrackingService, AppService, $interval) {
	/*-------------------------------------------------------------------------------
	@Author: Nishanth
	This controller is used for alert api config feature
	---------------------------------------------------------------------------------*/

	/*-------------------------------------------------------------------------------
	 @All Variables Declaraction Getter and Setter methods	
	---------------------------------------------------------------------------------*/

	// Object to store all information about Add/Edit Template page
	$scope.info = {};

	$scope.info.currentPage = 'template'; //can be "register" or "list" or "template" or edit
	$scope.info.showMsg = false;

	// Stores application name which is used for user tracking
	$scope.info.application = GlobalService.getVal('navRules');

	// Defines whether the page is loading
	$scope.info.pageLoading = true;

	// Specifies whether rule is added
	$scope.info.templateAdded = false;

	// Stores the message to be displayed on top
	$scope.info.addTemplateMsg = {};

	// Stores whether session is timed out or not
	$scope.info.sessionTimedOut = false;

	$scope.showimg = false;

	// Stores success messages
	$scope.info.successMsg = "";

	// Stores error messages
	$scope.info.errorMsg = "";

	//MPS
	var manufacturer = GlobalService.getVal('manufacturer');
	var product = GlobalService.getVal('product');
	var schema = GlobalService.getVal('schema');

	$scope.configTableData = [];

	//initial placeholders
	$scope.userplacehld = "Username";
	$scope.userpassplacehld = "Password";

	//initial data
	$scope.apiConfigPost = {
		apiConfigName: '',
		apiAuthType: 'PWD',
		apiHeaders: '',
		apiUrl: '',
		apiAuthKey: '',
		apiAuthPass: '',
		apiRequestType: "POST",
		apiTimeout: 3,
		apiRetries: 3
	};

	//setting up dynamic placeholders
	$scope.changeplaceholders = function () {
		if ($scope.apiConfigPost.apiAuthType == 'PWD') {
			$scope.userplacehld = "Username";
			$scope.userpassplacehld = "Password";
		} else {
			$scope.userplacehld = "Auth Key Label";
			$scope.userpassplacehld = "Auth Key Value";
		}
	}


	$scope.populateConfigTable = function () {
		$scope.loadListPage();
	}

	$scope.changePage = function (page) {
		$scope.info.pageLoading = true;

		if (page == 'register') {
			$scope.resetForm();
			$scope.$parent.changeCurrentPage('api_admin_config_register');
		}
		if (page == 'edit') {
			
			$scope.$parent.changeCurrentPage('api_admin_config_register');
		}
		$scope.info.currentPage = page;
		$scope.info.pageLoading = false;
	}

	$scope.imInregisterPage = function () {
		if ($scope.info.currentPage == 'register' || $scope.info.currentPage == 'edit') {
			return true;
		}

		return false;
	}

	$scope.imInListPage = function () {
		return $scope.info.currentPage == 'list';
	}

	$scope.imInAddTemplatePage = function () {
		return $scope.info.currentPage == 'template';
	}

	$scope.resetForm = function () {
		$scope.apiConfigPost = {
			apiConfigName: '',
			apiAuthType: 'PWD',
			apiHeaders: '',
			apiUrl: '',
			apiAuthKey: '',
			apiAuthPass: '',
			apiRequestType: "POST",
			apiTimeout: 3,
			apiRetries: 3
		};
	}
	//Add template function for api config
	$scope.addEditApiConfig = function () {
		if (!$scope.validateConfigTemplate()) {
			return;
		}
		$scope.info.pageLoading = true;
		if ($scope.info.currentPage == 'edit') {
			RulesService.editAPIConfigTemplate($scope.apiConfigPost).then(function (response) {
				$scope.info.addTemplateMsg = {
					type: 'success',
					msg: GlobalService.getVal('rulesMsgs')['add_template_success']
				};
				$scope.populateConfigTable();
				$scope.$parent.changeCurrentPage('api_admin_config');
				UserTrackingService.standard_user_tracking($scope.info.application, 'API config', 'Update', JSON.stringify($scope.apiConfigPost)).then(function(response) {

				});
			}, function (response) {
				if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
					GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
					$scope.info.addTemplateMsg = {
						type: 'failure',
						msg: GlobalService.getVal('rulesMsgs')['h2_down_msg']
					};
				} else {
					$scope.info.addTemplateMsg = {
						type: 'failure',
						msg: GlobalService.getVal('rulesMsgs')['add_template_fail']
					};
				}
				$scope.info.pageLoading = false;
			});

		} else {
			RulesService.addAPIConfigTemplate($scope.apiConfigPost).then(function (response) {
				$scope.info.addTemplateMsg = {
					type: 'success',
					msg: GlobalService.getVal('rulesMsgs')['add_template_success']
				};
				$scope.populateConfigTable();
				$scope.$parent.changeCurrentPage('api_admin_config');
				UserTrackingService.standard_user_tracking($scope.info.application, 'API config', 'Add', JSON.stringify($scope.apiConfigPost)).then(function(response) {

				});

			}, function (response) {
				if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
					GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
					$scope.info.addTemplateMsg = {
						type: 'failure',
						msg: GlobalService.getVal('rulesMsgs')['h2_down_msg']
					};
				} else {
					$scope.info.addTemplateMsg = {
						type: 'failure',
						msg: GlobalService.getVal('rulesMsgs')['add_template_fail']
					};
				}
				$scope.info.pageLoading = false;
			});


		}
	}

	//Edit function for api config
	$scope.editConfig = function (data) {
		if (!data.apiAuthPass) {
			data.apiAuthPass = '';
		}
		data.apiTimeout = 3;
		data.apiRetries = 3;
		$scope.apiConfigPost = data;
		$scope.changePage('edit');
	}

	// Function to delete a single template
	$scope.deleteConfigTemplateModal = function (template) {
		$scope.delTemplate = template;
		$scope.msg = GlobalService.getVal('rulesMsgs')['admin_config_temp_del_single'][0] + "<strong>" + template.apiConfigName + "</strong>" + GlobalService.getVal('rulesMsgs')['temp_del_single'][1];
		$scope.modal = ModalService.openModal("partials/rules-and-alerts/delete_api_config_template.html", $scope, false, 'static');
	};

	//Delete confirm function for api config
	$scope.deleteConfig = function () {


		if ($scope.configidarr.includes($scope.delTemplate.apiConfigId)) {
			ModalService.alertBox({
				msg: GlobalService.getVal('rulesMsgs')['admin_config_temp_associated'][0] + $scope.delTemplate.apiConfigName + GlobalService.getVal('rulesMsgs')['admin_config_temp_associated'][1]  + $scope.delTemplate.apiConfigName + GlobalService.getVal('rulesMsgs')['admin_config_temp_associated'][2] 
			});
			return;
		}

		$scope.info.pageLoading = true;
		RulesService.deleteAPIConfigTemplate($scope.delTemplate.apiConfigId).then(function (response) {
			$scope.info.addTemplateMsg = {
				type: 'success',
				msg: GlobalService.getVal('rulesMsgs')['temp_del_success'][0] + $scope.delTemplate.apiConfigName + GlobalService.getVal('rulesMsgs')['temp_del_success'][1]
			};
			$scope.populateConfigTable();
			UserTrackingService.standard_user_tracking($scope.info.application, 'API config', 'Delete', $scope.delTemplate.apiConfigId).then(function(response) {

			});
		}, function (response) {
			if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
				$scope.info.addTemplateMsg = {
					type: 'failure',
					msg: GlobalService.getVal('rulesMsgs')['h2_down_msg']
				};
			} else {
				$scope.info.addTemplateMsg = {
					type: 'failure',
					msg: GlobalService.getVal('rulesMsgs')['admin_config_temp_delete_fail']
				};
			}
			$scope.info.pageLoading = false;
		});
	}

	//function to load list page table data
	$scope.loadListPage = function () {
		RulesService.getAPIConfigTemplates().then(function (response) {

			$scope.configTableData = response.data.Data;


			if (!$scope.configTableData || !$scope.configTableData.length) {
				$scope.changePage('template');
			}
			else {
				$scope.changePage('list');
			}
			$scope.info.pageLoading = false;
		}, function (response) {
			if (response.data && response.data.hasOwnProperty('Msg') && response.data.Msg.match(/Connection\srefused/)) {
				GlobalService.logError(Object.values(GlobalService.getVal('errorMsgs'))[1]);
				$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['h2_down_msg'];
			} else {
				if ($scope.info.errorMsg == "") {
					$scope.info.errorMsg = GlobalService.getVal('rulesMsgs')['temp_load_failed'];
				} else {
					$scope.info.errorMsg += "<br>" + GlobalService.getVal('rulesMsgs')['temp_load_failed'];
				}
			}
			$scope.info.pageLoading = false;

		});

	}

	/*-----------------------------------------------------------------------------
	//form Validation
	------------------------------------------------------------------------------*/

	$scope.validateConfigTemplate = function () {

		//check if Base template label  is empty
		if (/^\s*$/.test($scope.apiConfigPost.apiConfigName)) {
			ModalService.alertBox({
				msg: "Base Template Name" + GlobalService.getVal('rulesMsgs')['temp_field_blank']
			});
			return;
		}

		//Validate Duplicat template names in case of edit template
		if ($scope.info.currentPage == 'edit') {
			var filteredList = $scope.configTableData.filter(function (name) { return name.apiConfigName != $scope.apiConfigPost.apiConfigName });
			var found = filteredList.filter(function (name) { return name.apiConfigName == $scope.apiConfigPost.apiConfigName });
			if (found.length > 0) {
				ModalService.alertBox({
					msg: GlobalService.getVal('rulesMsgs')['duplicateTemplateName']
				});
				return;
			}

			return true;
		}

		//Validate Duplicat template names in case of add template
		var found = $scope.configTableData.filter(function (name) { return name.apiConfigName == $scope.apiConfigPost.apiConfigName });
		if (found.length > 0) {
			ModalService.alertBox({
				msg: GlobalService.getVal('rulesMsgs')['duplicateTemplateName']
			});
			return;
		}



		//check if Base template label  is empty
		if (/^\s*$/.test($scope.apiConfigPost.apiHeaders)) {
			ModalService.alertBox({
				msg: "Http Header" + GlobalService.getVal('rulesMsgs')['temp_field_blank']
			});
			return;
		}

		//check if Base url  label  is empty
		if (/^\s*$/.test($scope.apiConfigPost.apiUrl)) {
			ModalService.alertBox({
				msg: "Base URL" + GlobalService.getVal('rulesMsgs')['temp_field_blank']
			});
			return;
		}

		//check for valid http url
		var validateUrl = /^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:[/?#]\S*)?$/i
			.test($scope.apiConfigPost.apiUrl);
		if (!validateUrl) {
			ModalService.alertBox({
				msg: GlobalService.getVal('rulesMsgs')['invalidHttpUrl']
			});
			return;
		}

		//check if Base template username  is empty
		if (/^\s*$/.test($scope.apiConfigPost.apiAuthKey)) {
			if ($scope.apiConfigPost.apiAuthType == "PWD") {
				var message = "Username" + GlobalService.getVal('rulesMsgs')['temp_field_blank'];
			}
			else {
				var message = "Auth Key Label" + GlobalService.getVal('rulesMsgs')['temp_field_blank'];
			}
			ModalService.alertBox({
				msg: message
			});
			return;
		}

		//check if Base template password  is empty
		if ($scope.info.currentPage == 'register') {
			if (/^\s*$/.test($scope.apiConfigPost.apiAuthPass)) {

				if ($scope.apiConfigPost.apiAuthType == "PWD") {
					var message = "Password" + GlobalService.getVal('rulesMsgs')['temp_field_blank'];
				}
				else {
					var message = "Auth Key Value" + GlobalService.getVal('rulesMsgs')['temp_field_blank'];
				}
				ModalService.alertBox({
					msg: message
				});
				return;
			}
		} return true;
	}

	// Function to clear all notification messages
	$scope.clearMessage = function () {
		if (!$scope.info.templatesLoading) {
			$scope.info.successMsg = "";
			$scope.info.errorMsg = "";
			$scope.info.addTemplateMsg = {};
		}
	};

	//Load api template list from service for validation purpose
	$scope.info.apiTemplateList = RulesService.getApiTemplateList();
	if($scope.info.apiTemplateList != undefined){
		$scope.configidarr = [];
		$scope.info.apiTemplateList.filter(function (obj) {
			$scope.configidarr.push(obj.apiConfigId);
		})
	}
	
	$scope.$on("broadPageChange", function(evt,data){ 
		//$scope.changePage('list');
		$scope.info.pageLoading = true;
		$scope.loadListPage();
	});
	 
	//load list initially
	$scope.loadListPage();

}]);

angular.module('gbApp.services.rules', []).factory('RulesService', ['$http', '$location', '$cookies', 'GlobalService', 'UserTrackingService',
function($http, $location, $cookies, GlobalService, UserTrackingService) {
	var rulesList,
	    templatesList,
	    rulesColumns,
	    templatesColumns,
	    categories,
	    attributes = null,
	    attributesLoaded = false,
	    rulesList = null,
	    templatesList = null,
	    severitiesList = null,
	    prioritiesList = null,
	    testRuleData = null,
	    templateMode = {mode: 'new'},
	    ruleMode = {mode: 'new'},
	    rulesLabelMap = {},
	    templatesLabelMap = {},
	    stagingRules = false,
	    ruleSaved = false,
	    templateSaved = false,
	    infoserverDomainStaging,
	    infoserverStagingKeyspace,
	    logMoving = false,
	    lastLogUploadTime,
        loadExplorerData = false,
        analyticsTimeFilter = null,
        analytics={}, selectedRuleForAnalytics = null,
        analyticsColor= GlobalService.getVal('analyticsColor'),
        analyticsLoaderWait = false,
        sectionsColumnLabelMap = null,
        sectionsColumnLabelList = null,
        globalAttributes = [],
        showAlertApiFeatureflag,
        groupedData = null,
        filterState = {},
        stateGroupedData = undefined,
        infoData = {},
        pageState;


       

	return {
        ruleType: 'supported',
        setSelectedTimeFilter: function(value){
            analyticsTimeFilter = value;
        },
        getSelectedTimeFilter: function(){
            return analyticsTimeFilter;
        },
        setAnalyticsData: function(data){
            analytics = data;
        },
        getAnalytics: function(type){
            if(!type){
                return analytics;
            }
            else{
                return analytics[type];
            }
            
        },
        getAnalyticsColor: function(type){
            return analyticsColor[type];
        },
        getRuleType: function(){
            return this.ruleType;
        },
        setRuleType: function(rType){
            this.ruleType = rType;
        },	  
        //checking if api has returned with response
        setAnalyticsLoaderWait:function(state){
            analyticsLoaderWait = state;
        },
        getAnalyticsLoaderWait:function(){
            return analyticsLoaderWait;
        },     
	    //Service Method to get all owenr list
	    getRulesOwenrList : function() {
            var umsDomain = GlobalService.getVal('umsDomain');
	        return $http({
	            url: umsDomain + '/customer/user/listrulecreator/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'),
	            method: 'GET'
	        });
        },        
        updateRuleOwnership : function(param) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http({
                url: infoserverDomain + "/rules/change_owner/"+ GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'),
                method: 'POST',
                data : param
            });
        },
	    //Service Method to get Sections from API
	    getSectionsAPI : function() {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
	        return $http({
	            url: infoserverDomain + '/meta/sections/all/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'),
                method: 'GET',
                cache: true
	        });
        },
        //Service method for searching of attribute
        getSectionsFromAttrAPI : function(attr) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
	        return $http({
	            url: infoserverDomain + '/attribute/suggestion/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema')+ '/' + attr,
	            method: 'GET'
	        });
	    },	    
	    //Service Method to get Columns for a section from API
        getSectionColumns : function(sec_table_name) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http({
                url: infoserverDomain + '/meta/columns/table_name/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + sec_table_name,
                method: 'GET'
            });
        },
        
        // Set this flag if you landed from explorer/apps to R&a
        loadExplorerRules : function() {
        	this.loadExplorerData = true;
        },
        
        // Returns the value of flag set above
        getloadExplorerRules : function() {
        	return this.loadExplorerData;
        },
        
        // Sets the flag to false so that it doesn't expect any logic/sections passed from explorer/apps
        disableExplorerRules : function() {
        	this.loadExplorerData = false;
        },
        
        // Service method to get the log moving status
        getLogMoving : function() {
            return this.logMoving;
        },
        
        // Service method to set the log moving status
        setLogMoving : function(data) {
            this.logMoving = data;
        },
        
        // Service method to set last log uploaded time
        setLastLogUploadTime : function(data) {
            this.lastLogUploadTime = data;
        },
        
        // Service method to get last log uploaded time
        getLastLogUploadTime : function() {
            return this.lastLogUploadTime;
        },
	    
	    // Service method to get Attributes from cache
	    getAttributes : function() {
	        return this.attributes;
	    },
	    
	    // Service method to cache Attributes data
	    setAttributes : function(data) {
	        this.attributes = data;
	    },
	    
	    // Service method to get the status of Attributes cached or not
	    getAttributesLoaded : function() {
	        return this.attributesLoaded;
	    },
	    
	    // Service method to set the status of Attributes cached or not
	    setAttributesLoaded : function(bool) {
	        this.attributesLoaded = bool;
	    },
	    
	    // Service method to get the list of prod rules from API
	    getAllRules : function(rtype) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http({
                    url: infoserverDomain + '/rules/list/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + rtype,
                    method: 'GET'
                });
            
            /* if(!rtype || rtype=='supported'){
                return $http({
                    url: infoserverDomain + '/rules/list/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'),
                    method: 'GET'
                });
            }else{
                return $http({
                    url: infoserverDomain + '/rules/unsupported/list/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'),
                    method: 'GET'
                });
            } */
	    },
	    
	    // Service method to get rule data from staging
	    getStagingRulesData : function(ruleIDs) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
	        return $http({
                url: infoserverDomain + '/rules/stage/list/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'),
                method: 'POST',
                data : {
                    rule_id: ruleIDs
                }
            });
	    },
	    
	    // Service method to get the list of prod rules Labels
	    getRulesLabelsList : function() {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
	        return $http({
                url: infoserverDomain + '/rules/labels/list/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'),
                method: 'GET'
            });
	    },
	    
	    // Service method to get the rule mode
        getRuleMode : function() {
            return this.ruleMode;
        },
        
        // Service method to set the rule mode
        setRuleMode : function(mode, ruleData) {
            if(mode == 'new') {
                this.ruleMode = {mode: 'new'};
            } else {
                this.ruleMode = {mode: 'edit', data: ruleData};
            }
        },
        
        // Service method to modify rule data
        modifyRuleData : function(modifiedData) {
            this.ruleMode.modifiedData = modifiedData;
        },
        
        // Service method to enable a prod rule
        enableRule : function(id, comments) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http({
                url: infoserverDomain + '/rules/enable/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + id,
                method: 'POST',
                data: {
                    comments: comments
                }
            });
        },
        
        // Service method to update staging C* bundle_rule in case of enable rule
        enableStageRule : function(id) {
            return $http({
                url: this.getStagingDomain() + '/rules/stage/enable/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + id,
                method: 'POST'
            });
        },
        
        // Service method to disable a prod rule
        disableRule : function(id, comments) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http({
                url: infoserverDomain + '/rules/disable/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + id,
                method: 'POST',
                data: {
                    comments: comments
                }
            });
        },
        
        // Service method to edit/update a prod rule
        editRule : function(id, data, ruletype) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http({
                url: infoserverDomain + '/rules/update/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + id + '/' + ruletype,
                method: 'POST',
                data: data
            });
        },
        
        // Service method to update staging C* bundle_rule in case of edit/update rule
        editStageRule : function(id) {
            return $http({
                url: this.getStagingDomain() + '/rules/stage/update/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + id,
                method: 'POST'
            });
        },
        
        // Service method to add a prod rule
        addRule : function(data) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http({
                url: infoserverDomain + '/rules/add/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'),
                method: 'POST',
                data: data
            });
        },
	    
	    // Service method to delete a prod rule
        deleteRule : function(ids, status, email_template_ids) {
            var data = {
                rule_ids: ids,
                rule_status: status,
                api_template_ids: email_template_ids
            };
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http({
                url: infoserverDomain + '/rules/delete/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'),
                method: 'POST',
                data: data
            });
        },
		
		// Service method to get the list of prod rules from local variable
		getRulesList : function() {
		    return this.rulesList;
		},
		
		// Service method to store the list of prod rules in local variable
		setRulesList : function(data) {
		    this.rulesList = data;
		},
		
		// Service method to get prod rules label map
		getRulesLabelMap : function() {
		    return this.rulesLabelMap;
		},
		
		// Service method to set prod rules label map
		setRulesLabelMap : function(data) {
		    this.rulesLabelMap = data;
		},
		
		// Service method to get test rule data(Rules to be tested on Test Rule page)
		getTestRuleData : function() {
		    return this.testRuleData;
		},
		
		// Service method to set test rule data(Rules to be tested on Test Rule page)
		setTestRuleData : function(data) {
		    this.testRuleData = data;
		},
		
		// Service method to get the list of categories
        getCategories : function() {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http({
                url: infoserverDomain + '/rules/category/list/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'),
                method: 'GET',
                headers: {
                    'Cache-Control': 'no-cache'
                }
            });
        },
        
        // Service method to add a category
        addCategory : function(category, description) {
            var conf = {
                'category': category,
                'category_description': description
            };
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http({
                url: infoserverDomain + '/rules/category/add/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'),
                method: 'POST',
                data: conf
            });
        },
        
        // Service method to delete a category
        deleteCategory : function(id) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http({
                url: infoserverDomain + '/rules/category/delete/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + id,
                method: 'POST'
            });
        },
        
        // Service method to update a category
        updateCategory : function(id, category, description) {
            var conf = {
                'category': category,
                'category_description': description
            };
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http({
                url: infoserverDomain + '/rules/category/update/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + id,
                method: 'POST',
                data: conf
            });
        },
        
        // Service method to get the list of severity
        getSeverities : function() {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http({
                url: infoserverDomain + '/rules/severity/list/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'),
                method: 'GET'
            });
        },
        
        // Service method to get the stored list of severities
        getSeveritiesList : function() {
            return this.severitiesList;
        },
        
        // Service method to store the list of severities locally
        setSeveritiesList : function(data) {
            this.severitiesList = data;
        },
        
        // Service method to get the list of priorities
        getPriorities : function() {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http({
                url: infoserverDomain + '/rules/priority/list/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'),
                method: 'GET'
            });
        },
        
         // Service method to get the stored list of priorities
        getPrioritiesList : function() {
            return this.prioritiesList;
        },
        
        // Service method to store the list of priorities locally
        setPrioritiesList : function(data) {
            this.prioritiesList = data;
        },
		
		// Service method to get the list of templates from API
		getTemplates : function() {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
		    return $http({
                url: infoserverDomain + '/rules/email_template/list/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'),
                method: 'GET'
            });
		},
		
		// Service method to get the templates list from local variable
		getTemplatesList : function() {
		    return this.templatesList;
		},
		
		// Service method to set the value of templates list
		setTemplatesList : function(data) {
		    this.templatesList = data;
		},
		
		// Service method to get templates label map
		getTemplatesLabelMap : function() {
            return this.templatesLabelMap;
        },
        
        // Service method to set templates label map
        setTemplatesLabelMap : function(data) {
            this.templatesLabelMap = data;
        },
		
		// Service method to get the template mode
		getTemplateMode : function() {
		    return this.templateMode;
		},
		
		// Service method to set the template mode
		setTemplateMode : function(mode, template) {
		    if(mode == 'new') {
		        this.templateMode = {mode: 'new'};
		    } else {
		        this.templateMode = {mode: 'edit', data: template};
		    }
		},
		
		// Service method to delete a template
		deleteTemplate : function(id) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
		    return $http({
                url: infoserverDomain + '/rules/email_template/delete/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + id,
                method: 'POST'
            });
		},
		
		// Service method to add a template
		addTemplate : function(name, subject, body, alertperrow) {
		    var conf = {
                'template_name': name,
                'subject': subject,
                'body': body,
            };
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http({
                url: infoserverDomain + '/rules/email_template/add/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'),
                method: 'POST',
                data: conf
            });
		},
		
		// Service method to edit a template
		editTemplate : function(id, name,  subject, body, alertperrow) {
            var conf = {
                'template_name': name,
                'subject': subject,
                'body': body,
            };
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http({
                url: infoserverDomain + '/rules/email_template/update/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + id,
                method: 'POST',
                data: conf
            });
        },
        
        // Service method to get bundles list from staging H2
        getStageBundles : function() {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http({
                url: this.getStagingDomain() + '/rules/stage/bundle/list/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'),
                method: 'GET'
            });
        },
        
        // Service method to insert rule into staging H2
        insertRuleStaging : function(data) {
            return $http({
                url: this.getStagingDomain() + '/rules/stage/insert/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'),
                method: 'POST',
                data: data
            });
        },
        
        // Service method to get staging rule data
        getStagingRules : function() {
            return this.stagingRules;
        },
        
        // Service method to set staging rule data
        setStagingRules : function(data) {
            this.stagingRules = data;
        },
        
        // Service method to get rule saved status
        getRuleSavedStatus : function() {
            return this.ruleSaved;
        },
        
        // Service method to set rule saved status
        setRuleSavedStatus : function(data) {
            this.ruleSaved = data;
        },
        
        // Service method to get template saved status
        getTemplateSavedStatus : function() {
            return this.templateSaved;
        },
        
        // Service method to set template saved status
        setTemplateSavedStatus : function(data) {
            this.templateSaved = data;
        },
        
        // Service method to insert rule association with bundle(bundle_rule CF)
        insertBundleRuleAssociation : function(data) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http({
                method: 'POST',
                url: this.getStagingDomain() + '/rules/stage/bundle/insert/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'),
                data: data
            });
        },
        
        // Service method to get bundle ID from load ID for a bundle
        getBundleId : function(load_id) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http({
                method: 'GET',
                url: this.getStagingDomain() + '/rules/stage/bundle_id/list/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + load_id
            });
        },
        
        // Service method to get test results for a selected bundle 
        getTestResults : function(selectQuery, defer) {
            return $http({ 
            	method: 'GET', 
                url: this.getStagingDomain() + '/analytics/' + GlobalService.getVal('manufacturer') + '/' + selectQuery,
                timeout: defer.promise
            });
        },
        
        // Service method to get file upload to LCP status
        checkfileUploadToLCPStatus : function(fileEpoch) {
            return $http({ 
                method: 'GET', 
                url: this.getStagingDomain() + '/fileupload/stage/status/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + fileEpoch
            });
        },
        
        // Service method to check the running status of LCP
        checkLCPStatus : function() {
            return $http({ 
                method: 'GET', 
                url: this.getStagingDomain() + '/monitor/stage/lcp/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema')
            });
        },
        
        // Service method to make an XHR to fetch all config meta info
        getAllConfig : function() {
            return UserTrackingService.getAllConfig();
        },
        
        // Service method to set staging infoserver domain
        setStagingDomain : function(domain) {
            this.infoserverDomainStaging = domain;
        },
        
        // Service method to get staging infoserver domain
        getStagingDomain : function() {
            return this.infoserverDomainStaging;
        },
        
        // Service method to get staging C* keyspace where test results are stored
        setStagingKeyspace : function(keyspace) {
            this.infoserverStagingKeyspace = keyspace;
        },
        
        // Service method to set staging C* keyspace where test results are stored
        getStagingKeyspace : function() {
            return this.infoserverStagingKeyspace;
        },
        getTopTenRulesByAlerts : function(st, et) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            //var url = 'stat/top10rulesbyalerts.json';
            var url = infoserverDomain + '/analytics/top_n/rules/by_count/'+ GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema')  + '/' +  GlobalService.getVal('manufacturer') +'/'+st+'/'+et + '/10';
            
		    return $http({
                url : url,
                method: 'GET'
            });
        },
        getAlertsTriggerBySeverity: function (st, et) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            // var url = 'stat/alertsBySevirityvyTime.json';
            var url = infoserverDomain + '/analytics/alerts/by_severity/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema')  + '/' +  GlobalService.getVal('manufacturer') +'/'+st+'/'+et;
            return $http({
                'url' : url,
                'method': 'GET'
            });
        },
        getAlertsOfARule: function (ruleId, st, et) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            //var url = 'stat/alertsByRuleId.json?ruleId='+ruleId+'&st='+st+"&et="+et;
            var url = infoserverDomain + '/analytics/alerts/by_rule_id/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema')  + '/' +  GlobalService.getVal('manufacturer') +'/'+st+'/'+et + '/' + ruleId;
            return $http({
                'url' : url,
                'method': 'GET'
            });
        },
        getRulesNotTriggered: function (st, et) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            var url = infoserverDomain + '/analytics/rules/nontriggered/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema')  + '/' +  GlobalService.getVal('manufacturer') +'/'+st+'/'+et;
            return $http({
                'url' : url,
                'method': 'GET'
            });
        },
        getCompleteAlertsCount: function (st, et) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
           // var url = 'stat/alertsByRuleId.json?ruleId='+ruleId+'&st='+st+"&et="+et;
            var url = infoserverDomain + '/analytics/alerts/by_date/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema')  + '/' +  GlobalService.getVal('manufacturer') +'/'+st+'/'+et;
            return $http({
                'url' : url,
                'method': 'GET'
            });
        },
        setSelectedRuleForAnalytics: function(rule){
            selectedRuleForAnalytics = rule;
        },
        getSelectedRuleForAnalytics: function(){
            return selectedRuleForAnalytics;
        },
        setLogBundle: function(bundles){
            this.logBundles = bundles;
        },
        getLogBundle: function(bundles){
            return this.logBundles;
        },        
        // Service method to send bundle info
        sendRulesWithLogvaultBundle : function(data) {
            var url = this.getStagingDomain() + '/logvault/rules_testing/download/bundles/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema');
            return $http({              
                'url' : url,
                method: 'POST',
                data: data
            });
        },
        //API for supported and unsupported rules in analytics
        newAnalyticsApi: function () {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            // var url = 'stat/alertsBySevirityvyTime.json';
            var url = infoserverDomain + '/rules/analytics/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema');
            return $http({
                'url' : url,
                'method': 'GET'
            });
        },
        //API for Rule drill details and change history 
        getRuleDrillDetails: function (rule_id) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            // var url = 'stat/alertsBySevirityvyTime.json';
            var url = infoserverDomain + '/rules/history/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema')+ '/' + rule_id;
            return $http({
                'url' : url,
                'method': 'GET'
            });
        },
        // Service method to get the list of templates from API
		getAPITemplates : function() {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
             //var url = 'stat/alert_api.json';
             var url = infoserverDomain + '/rules/api_template/list/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema')
		     return $http({
                'url' : url,
                'method': 'POST'
            });
        },

        // Service method to store the list of prod rules in local variable
		setApiTemplateList : function(data) {
		    this.apiTemplateList = data;
		},
		
		
		// Service method to get the list of prod rules from local variable
		getApiTemplateList : function() {
		    return this.apiTemplateList;
		},


        // Service method to get the list of alert config
		getAPIConfigTemplates : function() {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
             //var url = 'stat/alert_config_list.json';
             var url = infoserverDomain + '/rules/api_template/listconfig/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema')
		     return $http({
                'url' : url,
                'method': 'POST'
            });
        },

         // Service method to delete  alert config
         deleteAPIConfigTemplate : function(id) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
             //var url = 'stat/alert_config_list.json';
             var url = infoserverDomain + '/rules/api_template/deleteconfig/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema')+ '/' + id;
		     return $http({
                'url' : url,
                'method': 'POST'
            });
        },

        // Service method to ADD  alert config
        addAPIConfigTemplate : function(data) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
             //var url = 'stat/alert_config_list.json';
             var url = infoserverDomain + '/rules/api_template/addconfig/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema')
		     return $http({
                'url' : url,
                'method': 'POST',
                data: data
            });
        },
        // Service method to ADD  alert config
        editAPIConfigTemplate : function(data) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
             //var url = 'stat/alert_config_list.json';
             var url = infoserverDomain + '/rules/api_template/updateconfig/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema')
		     return $http({
                'url' : url,
                'method': 'POST',
                data: data
            });
        },
        setSectionsColumnLabelMap : function(sectionColumnMap){
            sectionsColumnLabelMap = sectionColumnMap;
        },

        getSectionsColumnLabelMap : function(){
            return sectionsColumnLabelMap;
        },

        setSectionsColumnLabelForManageAPI : function(list){
            sectionsColumnLabelList = list;
        },

        getSectionsColumnLabelForManageAPI : function(){
            return sectionsColumnLabelList;
        },

        getSectionsAndAttributePair : function(text){
            
            //get REGEX start index and end index
            var isPartOfRegex = function(curlyBraceIndex) {
                var logic = text, regexToken="", searchEndIndex=0;
                var searchIndex = logic.indexOf('REGEX');
                if( searchIndex== -1) {
                    return false;
                };
                while(searchIndex >= 0){
                    //get complete regex 
                    regexToken = $scope.parseToken(logic,searchIndex, '(', ')');
                    searchEndIndex = regexToken.length + searchIndex;
                    //check if curlyBraceIndex is within REGEX statment or not
                    if((curlyBraceIndex > searchIndex) && (curlyBraceIndex < searchEndIndex)){
                        return true;
                    }
                    searchIndex = logic.indexOf('REGEX', searchEndIndex);
                    if( searchIndex== -1) {
                        return false;
                    };
                }
                return false;
            };
            
            var isPartOfLikeoperator = function(curlyBraceIndex) {
                var logic = text, regexToken="", searchEndIndex=0;
                var searchIndex = logic.indexOf('LIKE');
                if( searchIndex== -1) {
                    return false;
                };
                while(searchIndex >= 0){
                    //get complete like operator 
                    regexToken = parseToken(logic,searchIndex, '{', '}');
                    searchEndIndex = regexToken.length + searchIndex;
                    //check if curlyBraceIndex is within LIKE statment or not
                    if((curlyBraceIndex > searchIndex) && (curlyBraceIndex < searchEndIndex)){
                        return true;
                    }
                    searchIndex = logic.indexOf('LIKE', searchEndIndex);
                    if( searchIndex== -1) {
                        return false;
                    };
                };
                return false;
            };

            var parseToken = function(msg, startIndex,targetStartChar,targetEndChar) {
                var len = msg.length, curlyBrace=0, sIndex=0, endIndex=0;
                //search sould start from first brace
                sIndex = msg.indexOf('(', startIndex);
                for(var index=sIndex;index<len;index++) {
                    switch (msg[index]){
                        case targetStartChar:
                            curlyBrace++;
                            break;
                        case targetEndChar:
                            curlyBrace--;
                            break;
                    }
                    if(curlyBrace == 0){
                        endIndex = index;
                        break;
                    }
                }
                var res = msg.substring(startIndex, (endIndex+1));
                return res;
            };

            if(!sectionsColumnLabelMap)   sectionsColumnLabelMap = {};
            var secColPairs = [],
                startPos = null,
                endPos = null,
                msg = '';
    
            if (!text.length)
                return secColPairs;
    
            for (var i = 0; i < text.length; i++) {
                // Check if {{ or }} exists in string
                if ((text[i] == '{' && startPos) || (text[i] == '}' && !startPos) || (i == text.length - 1 && startPos && text[i] != '}') || (i == text.length - 1 && text[i] == '{')) {
                     return [];
                }
                if (text[i] == '{') {
                    startPos = i + 1;
                }
                if (text[i] == '}' && startPos) {
                    endPos = i;
                    var tmpString = text.substring(startPos, endPos);
                    if (!sectionsColumnLabelMap.hasOwnProperty(tmpString)) {
                        //check if it is a part of REGEX i.e REGEX(...\d{2}..)
                        if(isPartOfRegex(startPos)){
                            msg = GlobalService.getRulesLogicAlerts('rule_logic_invalid_regex_len_attr', tmpString);
                        }else if(isPartOfLikeoperator(startPos)){
                            msg = GlobalService.getRulesLogicAlerts('rule_logic_invalid_like_curly_brace', tmpString);
                        }else{
                            msg = GlobalService.getRulesLogicAlerts('rule_logic_invalid_attr', tmpString);
                        }		
                        if(msg){
                            //displayLogicAlert(msg, startPos, endPos);
                            return;
                        }
                    }
                    secColPairs.push(tmpString);
                    startPos = null;
                }
            }
            return secColPairs;
        },

        
        // Service method to add API template
		addAPITemplateCall : function(apiData) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http({
                'url': infoserverDomain + '/rules/api_template/add/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'),
                method: 'POST',
                data: apiData
            });
        },

        // Service method to add API template
		editAPITemplateCall : function(apiData) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http({
                'url': infoserverDomain + '/rules/api_template/update/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'),
                method: 'POST',
                data: apiData
            });
        },

        // Service method to delete a template
		deleteAPITemplate : function(obj) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
		    return $http({
                url: infoserverDomain + '/rules/api_template/delete/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'),
                method: 'POST',
                data: obj
            });
        },

        
        // Service method to delete multiple template
		deleteAPITemplateMultiple : function(obj) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
		    return $http({
                url: infoserverDomain + '/rules/api_template/deletemultiple/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'),
                method: 'POST',
                data: obj
            });
        },

        // Service method to get the templates list from local variable
		getAPITemplatesList : function() {
		    return this.templatesList;
		},
		
		// Service method to set the value of templates list
		setAPITemplatesList : function(data) {
		    this.templatesList = data;
        },
        
        
		// Service method to set the value of templates list
		setApiTemplateAddedMessage : function(data) {
		    this.templateAddedMsg = data;
		},
        
        // Service method to get the templates list from local variable
		getApiTemplateAddedMessage : function() {
		    return this.templateAddedMsg;
		},
		
        
        // Service method to set the value of Global attributes
		setGlobalAttribArr : function(data) {
            this.globalAttributes = data;
        },
        
        // Service method to get the  value of Global attributes
		getGlobalAttribArr : function() {
		    return this.globalAttributes;
        },
        // get details of chart 
        getDrillDownData : function(cType, pie){
            var result = [], _selectedPieType = "";
            if(pie.data && pie.data['name']){
                _selectedPieType =  pie.data['name'];
            }
            var _rulesList = angular.copy(this.getRulesList());

            _rulesList.forEach(function(rule){
                if(rule[cType] == _selectedPieType){
                    result.push(rule);
                }
            });
            return result;
        },
        // Service method to set the value of Global attributes
        setshowAlertApiFeature : function(data) {
            this.showAlertApiFeatureflag = data;
        },  
        
        // Service method to get the  value of Global attributes
		getshowAlertApiFeature : function() {
		    return this.showAlertApiFeatureflag;
        },
        // Service method to get template saved status
        getAPITemplateSavedStatus : function() {
            return this.templateSaved;
        },
        // Service method to set template saved status
        setAPITemplateSavedStatus : function(data) {
            this.templateSaved = data;
        },
        //get rules and alerts constants from json
        getRulesConstants: function () {
            var htmconst_url = "../config/constants/rules_constants.json";
            return $http({
                url: htmconst_url,
                method: 'GET'
            });
        },

        // Service method to get the  value of Global attributes
        getgroupdata: function (data) {
            var clinsightFlag = GlobalService.getVal('clinsightFlag')|| false;
            
            var ruledata = data;
            var me = this;
            if (stateGroupedData) {
                groupedData = stateGroupedData;
            }
            else {
                groupedData = GlobalService.getVal('groupedData')
                groupedData.forEach(function (item) {
                    if (item.field == 'tags') {
                        if (!clinsightFlag) {
                            item.multiselect = false,
                            item.enabled = false,
                            item.selected = false
                        }
                    }
                    item.data = [];
                })
            }
            ruledata.forEach(function (item) {
                groupedData.forEach(function (groupedItem) {
                    if(groupedItem.field != "tags"){
                        var freshData = item[groupedItem.field] ? angular.copy(item[groupedItem.field]) : "";
                    }
                    else {
                        var freshData = angular.copy(item[groupedItem.field])
                    }
                    
                    if (groupedItem.multiselect && freshData) {
                        if(groupedItem.field == "tags" && item[groupedItem.field].length){
                           
                            item[groupedItem.field].forEach(function(tag){
                                groupedItem.data.push(tag)
                            })
                            groupedItem.data =  groupedItem.data.filter(function (a) {
                                return !this[a.tag_id] && (this[a.tag_id] = true);
                            }, Object.create(null)) 
                        
                        }
                        else if ((!groupedItem.data || !Array.isArray(groupedItem.data)) && groupedItem.field != "tags" ) {
                            groupedItem.data = [];
                            groupedItem.data.push(freshData);
                        } else if (groupedItem.data && Array.isArray(groupedItem.data) && groupedItem.data.length == 0 && groupedItem.field != "tags") {
                            groupedItem.data.push(freshData);
                        } else {
                            var found = false, foundIndex = null;
                            groupedItem.data.forEach(function (dataItem, dataIndex) {
                                if (groupedItem.field != "tags" && typeof dataItem === "object" && dataItem.label && dataItem.label.toUpperCase() === freshData.toUpperCase()  ) {
                                    found = true;
                                } else if (groupedItem.field != "tags" && typeof dataItem === "string" && dataItem.toUpperCase() === freshData.toUpperCase() ) {
                                    found = true;
                                }
                            });
                            if (!found && groupedItem.field != "tags") {
                                groupedItem.data.push(freshData);
                            }
                        }
                    }
                })
            });

            groupedData.forEach(function (groupedItem) {

                if (groupedItem.multiselect) {
                    if (!groupedItem.data.length) {
                        groupedItem.enabled = false;
                    }
                    var len = groupedItem.data.length;
                    for (var i = 0; i < len; i++) {
                        var value = angular.copy(groupedItem.data[i]);
                        var obj = {};
                        if (typeof value !== "object") {
                            obj.label = value;
                        } else {
                            obj = value;
                        }
                        groupedItem.data[i] = obj;
                    }

                    me.deleteDataWhichAreNotInFreshlist(groupedItem, groupedItem.data, groupedItem.field, ruledata);
                }
            });
            return groupedData;
        },
        //delete data which are not in the fresh data
        deleteDataWhichAreNotInFreshlist: function(groupedItem,groupedItemData,groupedItemField,ruledata){
            for(var j=0;j<groupedItemData.length;j++){
                var found = false;
                for(var i=0;i<ruledata.length;i++){               
                    if(groupedItemField == "tags" && groupedItemData.length ){
                        if (ruledata[i][groupedItemField] && ruledata[i][groupedItemField].map(function(cur){ return cur.tag_name}).indexOf(groupedItemData[j]['label']) != -1) {
                            found = true;
                            break;
                        }
                    }else{
                        if (groupedItemData[j]['label'] === ruledata[i][groupedItemField]) {
                            found = true;
                            break;
                        }
                    }
                }
                if(!found){
                    groupedItemData.splice(j, 1);
                    groupedItem.expanded = false;
                }  
            }
        },
        //setting state of $scope.info.filter from controller
        setFilterState: function(filterObj){
           this.filterState = filterObj;
        },

        //return the filter state
        getFilterState: function(){
            return this.filterState;
        },

        //set the state maintained data of groupedfilter data
        setStateGroupData: function(filterObj){
           stateGroupedData = filterObj;
        },

        //return the state of groupedfilter data
        getStateGroupData: function(){
            return stateGroupedData;
        },

        //set the $scope.info data as its binded and used in filter
        setInfoData: function(infoData){
           this.infoData = infoData;
        },

        //return the info data
        getInfoData: function(){
            return this.infoData;
        },
          //set the page number
          setPageState: function(pagenum){
            this.pageState = pagenum;
         },
           //get the page number
           getPageState: function(){
            return this.pageState;
         },
         //Bult edit rules api
         bulkUpdateRules : function(param) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http({
                url: infoserverDomain + "/rules/bulk_update/"+ GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'),
                method: 'POST',
                data : param
            });
        },

        //Single subscribe Rule
        singleSubscribeRule : function(rule_id) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http({
                url: infoserverDomain + "/rules/subscription/subscribe_user/"+ GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + rule_id,
                method: 'POST'
            });
        },

         //Single Unsubscribe Rule
         singleUnsubscribeRule : function(rule_id) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http({
                url: infoserverDomain + "/rules/subscription/unsubscribe_user"+ '/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '/' + rule_id,
                method: 'POST'
            });
        },

        //subscribe Rule
        subscribeRule : function(param) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http({
                url: infoserverDomain + "/rules/subscription/subscribe/"+ GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'),
                method: 'POST',
                data : param
            });
        },

        //unsubscribe Rule
        unsubscribeRule : function(param) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http({
                url: infoserverDomain + "/rules/subscription/unsubscribe/"+ GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'),
                method: 'POST',
                data : param
            });
        },

        //get all subscribers list from alertengine
        getallSubscriberList : function() {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            var url = 'stat/getRuleSubscriptionAssociation.json';
            //var url = infoserverDomain + '/analytics/top_n/rules/by_count/'+ GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema')  + '/' +  GlobalService.getVal('manufacturer') +'/'+st+'/'+et + '/10';
            
		    return $http({
                url : url,
                method: 'GET'
            });
        },

        
         //Update Subscription
         updateSubscription : function(param) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http({
                url: infoserverDomain + "/rules/subscription/updatesubscription/"+ GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'),
                method: 'POST',
                data : param
            });
        },

        getNonSsoUsers : function() {
            var umsDomain = GlobalService.getVal('umsDomain');
	        return $http({
	            url: umsDomain + '/customer/user/list/' + GlobalService.getVal('manufacturer'),
	            method: 'GET'
	        });
        },

        

          // Service method to get test results for a selected bundle 
          getSingleTestResult : function(selectQuery) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http({ 
            	method: 'GET', 
                url: infoserverDomain + '/analytics/' + GlobalService.getVal('manufacturer') + '/' + selectQuery,
                timeout: defer.promise
            });
        },
        
        
        getSysidList : function(startIndex, endIndex, searchObj, email) {
           
            var umsDomain = GlobalService.getVal('umsDomain');
           // https://umsqa.glassbeam.com//v1bundle/system_info/ec/list/siemens/siemens/podui/siemens/0/199
            //var infoserverDomain = GlobalService.getVal('infoserverDomain');
             //var url = 'stat/available_sysid.json';
            // "https://searchdevums.glassbeam.com/v1/user/ec/system_info/list/:mfr/:prod/:sch/:email/:st/:en"
             var umsDomain = GlobalService.getVal('umsDomain');
             var url = umsDomain + "/user/ec/system_info/list/"+ GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') +'/'+ encodeURIComponent(email) + '/'+ startIndex + '/' + endIndex;
             //var url = umsDomain + "/bundle/system_info/ec/list/"+ GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') +'/'+GlobalService.getVal('manufacturer') + '/'+ startIndex + '/' + endIndex;
             return $http({ 
            	method: 'POST', 
                url: url ,
                data: searchObj
            });
        },

        getUnsubscribedSysids : function(ruleid,email) {
            //var infoserverDomain = GlobalService.getVal('infoserverDomain');
             //var url = 'stat/excluded_sysid.json';
             var umsDomain = GlobalService.getVal('umsDomain');
             var url = umsDomain + "/rules/alerts/filters/list/"+ GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') + '?ruleId=' + ruleid + '&user=' + encodeURIComponent(email);
            // var url = 'stat/excluded_sysid.json';
             return $http({ 
            	method: 'GET', 
                url: url ,
            });
        },

        getSysidColList : function() {
           // https://umsqa.glassbeam.com/v1/bundle/system_cols_info/ec/list/gdi/gdi/podv10
           var umsDomain = GlobalService.getVal('umsDomain');
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            //var url = 'stat/col_list.json';
             var url = umsDomain + '/bundle/system_cols_info/ec/list/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema')
            return $http({ 
            	method: 'GET', 
                url: url ,
            });
        },
        
        
        saveFilterAttributes : function(postdata) {
            //var infoserverDomain = GlobalService.getVal('infoserverDomain');
            var umsDomain = GlobalService.getVal('umsDomain');
             var url = umsDomain + "/rules/alerts/filters/add_update/"+ GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema');
            return $http({ 
            	method: 'POST', 
                url: url ,
                data: postdata
            });
        },

        deleteFilterAttributes: function (postdata) {
            var umsDomain = GlobalService.getVal('umsDomain');
            var url = umsDomain + "/rules/alerts/filters/bulk_rules_delete/" + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema');
            return $http({
                method: 'POST',
                url: url,
                data: postdata
            });
        },

        //bulk subscribe and Unsubscribe
        bulkSubscribeUnsubscribe: function (postdata,type) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http({
                url: infoserverDomain + "/rules/subscription/bulk_rules_subscription/" + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') +'/'+ type,
                method: 'POST',
                data: postdata
            });
        },

        deleteFilterAttributesMultiple: function (postdata) {
            var umsDomain = GlobalService.getVal('umsDomain');
            var url = umsDomain + "/rules/alerts/filters/bulk_users_delete/" + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema');
            return $http({
                method: 'POST',
                url: url,
                data: postdata
            });
        },
       
        
        getExcludedSysidDetails : function(postdata) {
            // https://umsqa.glassbeam.com/v1/bundle/system_cols_info/ec/list/gdi/gdi/podv10
            var umsDomain = GlobalService.getVal('umsDomain');
             var infoserverDomain = GlobalService.getVal('infoserverDomain');
             //var url = 'stat/col_list.json';
              var url = umsDomain + '/bundle/available_system_info/ec/list/' + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema')
             return $http({ 
                 method: 'POST', 
                 url: url,
                 data: postdata
             });
         },

         //Get predefined tag list
         getPredefinedTagList : function() {
             //var url = 'stat/tagList.json';
             var infoserverDomain = GlobalService.getVal('infoserverDomain');
             return $http({ 
            	method: 'GET', 
                url: infoserverDomain + "/rules/tags/rules/list/" + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema') +'/'+ $cookies.username, 
            });
        },

        //Add update tag association
        associateDisassociateTag: function (postdata) {
            var infoserverDomain = GlobalService.getVal('infoserverDomain');
            return $http({
                url: infoserverDomain + "/tags/associate/disassociate/rules/" + GlobalService.getVal('manufacturer') + '/' + GlobalService.getVal('product') + '/' + GlobalService.getVal('schema'),
                method: 'POST',
                data: postdata
            });
        }
};
}]);
