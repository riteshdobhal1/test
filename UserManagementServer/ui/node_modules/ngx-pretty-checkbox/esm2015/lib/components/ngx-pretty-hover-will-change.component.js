/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable:use-host-property-decorator
import { Component, Input, ElementRef, Renderer2, ChangeDetectionStrategy } from '@angular/core';
import { DEFAULT_PREFIX } from '../model/params';
import { PrettyCheckboxColor } from '../model/interfaces';
import { getColorClassName } from '../utility';
export class NgxPrettyHoverWillChangeComponent {
    /**
     * @param {?} el
     * @param {?} renderer
     */
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.outline = false;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.color || changes.outline) {
            /** @type {?} */
            const oldClass = getColorClassName(changes.color ? changes.color.previousValue : this.color, changes.outline ? changes.outline.previousValue : null);
            /** @type {?} */
            const newClass = getColorClassName(changes.color ? changes.color.currentValue : this.color, changes.outline ? changes.outline.currentValue : null);
            this.renderer.removeClass(this.el.nativeElement, oldClass);
            this.renderer.addClass(this.el.nativeElement, newClass);
        }
    }
}
NgxPrettyHoverWillChangeComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-p-hover[will-change], p-hover[will-change]',
                template: `
    <ng-content select="[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]"></ng-content>
    <label><ng-content></ng-content></label>
  `,
                host: {
                    class: `state ${DEFAULT_PREFIX}is-hover`
                },
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
NgxPrettyHoverWillChangeComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
NgxPrettyHoverWillChangeComponent.propDecorators = {
    color: [{ type: Input }],
    outline: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NgxPrettyHoverWillChangeComponent.prototype.color;
    /** @type {?} */
    NgxPrettyHoverWillChangeComponent.prototype.outline;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyHoverWillChangeComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyHoverWillChangeComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXByZXR0eS1ob3Zlci13aWxsLWNoYW5nZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcHJldHR5LWNoZWNrYm94LyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvbmd4LXByZXR0eS1ob3Zlci13aWxsLWNoYW5nZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUE0Qix1QkFBdUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzSCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDakQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sWUFBWSxDQUFDO0FBYS9DLE1BQU0sT0FBTyxpQ0FBaUM7Ozs7O0lBSzVDLFlBQ1UsRUFBYyxFQUNkLFFBQW1CO1FBRG5CLE9BQUUsR0FBRixFQUFFLENBQVk7UUFDZCxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBSnBCLFlBQU8sR0FBRyxLQUFLLENBQUM7SUFLckIsQ0FBQzs7Ozs7SUFFTCxXQUFXLENBQUMsT0FBc0I7UUFDaEMsSUFBSSxPQUFPLENBQUMsS0FBSyxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUU7O2tCQUU5QixRQUFRLEdBQ1osaUJBQWlCLENBQ2YsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQ3hELE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQ3ZEOztrQkFFRyxRQUFRLEdBQ1osaUJBQWlCLENBQ2YsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQ3ZELE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQ3REO1lBRUgsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDM0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDekQ7SUFDSCxDQUFDOzs7WUF2Q0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxnREFBZ0Q7Z0JBQzFELFFBQVEsRUFBRTs7O0dBR1Q7Z0JBQ0QsSUFBSSxFQUFFO29CQUNKLEtBQUssRUFBRSxTQUFTLGNBQWMsVUFBVTtpQkFDekM7Z0JBQ0QsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07YUFDaEQ7Ozs7WUFmMEIsVUFBVTtZQUFFLFNBQVM7OztvQkFrQjdDLEtBQUs7c0JBQ0wsS0FBSzs7OztJQUROLGtEQUFvQzs7SUFDcEMsb0RBQXlCOzs7OztJQUd2QiwrQ0FBc0I7Ozs7O0lBQ3RCLHFEQUEyQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRzbGludDpkaXNhYmxlOnVzZS1ob3N0LXByb3BlcnR5LWRlY29yYXRvclxyXG5cclxuaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBTaW1wbGVDaGFuZ2VzLCBPbkNoYW5nZXMsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERFRkFVTFRfUFJFRklYIH0gZnJvbSAnLi4vbW9kZWwvcGFyYW1zJztcclxuaW1wb3J0IHsgUHJldHR5Q2hlY2tib3hDb2xvciB9IGZyb20gJy4uL21vZGVsL2ludGVyZmFjZXMnO1xyXG5pbXBvcnQgeyBnZXRDb2xvckNsYXNzTmFtZSB9IGZyb20gJy4uL3V0aWxpdHknO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICduZ3gtcC1ob3Zlclt3aWxsLWNoYW5nZV0sIHAtaG92ZXJbd2lsbC1jaGFuZ2VdJyxcclxuICB0ZW1wbGF0ZTogYFxyXG4gICAgPG5nLWNvbnRlbnQgc2VsZWN0PVwiW3BJY29uXSwgW3AtaWNvbl0sIFtwU3ZnXSwgW3Atc3ZnXSwgW3BJbWFnZV0sIFtwLWltYWdlXVwiPjwvbmctY29udGVudD5cclxuICAgIDxsYWJlbD48bmctY29udGVudD48L25nLWNvbnRlbnQ+PC9sYWJlbD5cclxuICBgLFxyXG4gIGhvc3Q6IHtcclxuICAgIGNsYXNzOiBgc3RhdGUgJHtERUZBVUxUX1BSRUZJWH1pcy1ob3ZlcmBcclxuICB9LFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ3hQcmV0dHlIb3ZlcldpbGxDaGFuZ2VDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xyXG5cclxuICBASW5wdXQoKSBjb2xvcjogUHJldHR5Q2hlY2tib3hDb2xvcjtcclxuICBASW5wdXQoKSBvdXRsaW5lID0gZmFsc2U7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBlbDogRWxlbWVudFJlZixcclxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMlxyXG4gICkgeyB9XHJcblxyXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcclxuICAgIGlmIChjaGFuZ2VzLmNvbG9yIHx8IGNoYW5nZXMub3V0bGluZSkge1xyXG5cclxuICAgICAgY29uc3Qgb2xkQ2xhc3MgPVxyXG4gICAgICAgIGdldENvbG9yQ2xhc3NOYW1lKFxyXG4gICAgICAgICAgY2hhbmdlcy5jb2xvciA/IGNoYW5nZXMuY29sb3IucHJldmlvdXNWYWx1ZSA6IHRoaXMuY29sb3IsXHJcbiAgICAgICAgICBjaGFuZ2VzLm91dGxpbmUgPyBjaGFuZ2VzLm91dGxpbmUucHJldmlvdXNWYWx1ZSA6IG51bGxcclxuICAgICAgICApO1xyXG5cclxuICAgICAgY29uc3QgbmV3Q2xhc3MgPVxyXG4gICAgICAgIGdldENvbG9yQ2xhc3NOYW1lKFxyXG4gICAgICAgICAgY2hhbmdlcy5jb2xvciA/IGNoYW5nZXMuY29sb3IuY3VycmVudFZhbHVlIDogdGhpcy5jb2xvcixcclxuICAgICAgICAgIGNoYW5nZXMub3V0bGluZSA/IGNoYW5nZXMub3V0bGluZS5jdXJyZW50VmFsdWUgOiBudWxsXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3ModGhpcy5lbC5uYXRpdmVFbGVtZW50LCBvbGRDbGFzcyk7XHJcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbC5uYXRpdmVFbGVtZW50LCBuZXdDbGFzcyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=