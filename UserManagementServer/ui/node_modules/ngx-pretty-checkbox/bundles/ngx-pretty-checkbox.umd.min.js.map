{"version":3,"sources":["ng://ngx-pretty-checkbox/lib/model/params.ts","ng://ngx-pretty-checkbox/lib/model/interfaces.ts","ng://ngx-pretty-checkbox/lib/components/ngx-pretty-hover.component.ts","ng://ngx-pretty-checkbox/lib/directives/ngx-pretty-icon.directive.ts","ng://ngx-pretty-checkbox/lib/directives/ngx-pretty-image.directive.ts","ng://ngx-pretty-checkbox/lib/components/ngx-pretty-Indeterminate.component.ts","ng://ngx-pretty-checkbox/lib/directives/ngx-pretty-svg.directive.ts","ng://ngx-pretty-checkbox/lib/components/ngx-pretty-toggle.component.ts","ng://ngx-pretty-checkbox/lib/utility.ts","ng://ngx-pretty-checkbox/lib/components/ngx-pretty-hover-will-change.component.ts","ng://ngx-pretty-checkbox/lib/components/ngx-pretty-Indeterminate-will-change.component.ts","ng://ngx-pretty-checkbox/lib/components/ngx-pretty-toggle-will-change.component.ts","ng://ngx-pretty-checkbox/lib/components/ngx-pretty-checkbox.component.ts","ng://ngx-pretty-checkbox/lib/components/ngx-pretty-checkbox-will-change.component.ts","ng://ngx-pretty-checkbox/lib/ngx-pretty-checkbox.service.ts","ng://ngx-pretty-checkbox/lib/components/ngx-pretty-radio-group.component.ts","ng://ngx-pretty-checkbox/lib/components/ngx-pretty-radio.component.ts","ng://ngx-pretty-checkbox/lib/components/ngx-pretty-radio-will-change.component.ts","ng://ngx-pretty-checkbox/lib/ngx-pretty-checkbox.module.ts"],"names":["DEFAULT_PREFIX","DEFAULT_OUTLINE_PREFIX","GROUP_NAME","On","Off","Fill","Thick","Slim","Curve","Round","Primary","Success","Info","Warning","Danger","Smooth","Jelly","Tada","Rotate","Pulse","NgxPrettyHoverComponent","el","renderer","_outline","_color","this","prototype","ngAfterViewInit","addClass","nativeElement","Component","args","selector","template","host","class","changeDetection","ChangeDetectionStrategy","OnPush","ElementRef","Renderer2","Attribute","PrettyCheckboxColor","decorators","type","NgxPrettyIconDirective","elemRef","classList","add","Directive","NgxPrettyImageDirective","console","log","NgxPrettyIndeterminateComponent","NgxPrettySvgDirective","NgxPrettyToggleComponent","_type","PrettyCheckBoxToggleType","getColorClassName","color","outline","strToBoolean","str","test","NgxPrettyHoverWillChangeComponent","ngOnChanges","changes","oldClass","previousValue","newClass","currentValue","removeClass","Input","NgxPrettyIndeterminateWillChangeComponent","NgxPrettyToggleWillChangeComponent","Object","defineProperty","HostBinding","NgxPrettyCheckboxComponent","cd","_stroke","_shape","_animation","_isSwitch","_bigger","_enableFocus","_plain","_prefix","_outlinePrefix","checked","disabled","lock","change","EventEmitter","_iconDir","_svgDir","_imgDir","_hoverDir","_hoverWillChangeDir","_indeterminateDir","_indeterminateWillChangeDir","_isToggle","_stateElem","_onChange","event","value","stopPropagation","emit","_toggleComps","length","_toggleWillChangeComps","setIndeterminate","_inputElem","indeterminate","forceCheck","check","markForCheck","encapsulation","ViewEncapsulation","None","exportAs","ChangeDetectorRef","PrettyCheckboxStroke","PrettyCheckboxShape","PrettyCheckboxAnimation","ViewChild","static","Output","ContentChild","ContentChildren","NgxPrettyCheckboxWillChangeComponent","isSwitch","bigger","enableFocus","plain","stroke","shape","animation","_toggleComp","_toggleWillChangeComp","_iconElem","_svgElem","_imageElem","_hoverComp","_indeterminateComp","_indeterminateWillChangeComp","NgxPrettyRadioService","Injectable","providedIn","nextId","NgxPrettyRadioGroupDirective","name","_emitChange","providers","NgxPrettyRadioComponent","radioGroup","_name","Optional","NgxPrettyRadioWillChangeComponent","radioGroupName","DECLARATIONS","NgxPrettyCheckboxModule","NgModule","imports","CommonModule","FormsModule","declarations","exports"],"mappings":"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","sourcesContent":["export const DEFAULT_PRETTY_CLASS_NAME = 'pretty';\r\nexport const DEFAULT_PREFIX = 'p-';\r\nexport const DEFAULT_OUTLINE_PREFIX = '-o';\r\n\r\nexport const GROUP_NAME = 'p-radio';\r\n","export enum PrettyCheckBoxToggleType {\r\n  On = 'on',\r\n  Off = 'off'\r\n}\r\nexport enum PrettyCheckboxStroke {\r\n  // Accept Null\r\n  Fill = 'fill',   // Square and Switch\r\n  Thick = 'thick', // Square\r\n  Slim = 'slim' // Switch\r\n}\r\n\r\nexport enum PrettyCheckboxShape {\r\n  // Accept Null\r\n  Curve = 'curve',\r\n  Round = 'round',\r\n}\r\n\r\n\r\nexport enum PrettyCheckboxColor {\r\n  Primary = 'primary',\r\n  Success = 'success',\r\n  Info = 'info',\r\n  Warning = 'warning',\r\n  Danger = 'danger',\r\n}\r\n\r\nexport enum PrettyCheckboxAnimation {\r\n  Smooth = 'smooth',\r\n  Jelly = 'jelly',\r\n  Tada = 'tada',\r\n  Rotate = 'rotate',\r\n  Pulse = 'pulse',\r\n}\r\n\r\nexport interface PrettyCheckBoxChange {\r\n  checked: boolean;\r\n  value: string;\r\n  event: Event;\r\n}\r\n\r\nexport interface PrettyRadioChange {\r\n  checked: boolean;\r\n  value: string;\r\n  event: Event;\r\n}\r\n","// tslint:disable:use-host-property-decorator\r\n\r\nimport { Component, Input, ElementRef, Renderer2, SimpleChanges, AfterViewInit, ChangeDetectionStrategy, Attribute } from '@angular/core';\r\nimport { DEFAULT_PREFIX, DEFAULT_OUTLINE_PREFIX } from '../model/params';\r\nimport { PrettyCheckboxColor } from '../model/interfaces';\r\nimport { getColorClassName } from '../utility';\r\n\r\n@Component({\r\n  selector: 'ngx-p-hover:not([will-change]), p-hover:not([will-change])',\r\n  template: `\r\n    <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n    <label><ng-content></ng-content></label>\r\n  `,\r\n  host: {\r\n    class: `state ${DEFAULT_PREFIX}is-hover`\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxPrettyHoverComponent implements AfterViewInit {\r\n\r\n  constructor(\r\n    private el: ElementRef,\r\n    private renderer: Renderer2,\r\n    @Attribute('outline') private _outline = false,\r\n    @Attribute('color')   private _color: PrettyCheckboxColor,\r\n  ) { }\r\n\r\n  ngAfterViewInit() {\r\n    if (this._color) {\r\n      this.renderer.addClass(this.el.nativeElement,\r\n        `${DEFAULT_PREFIX}${this._color}${this._outline ? DEFAULT_OUTLINE_PREFIX : ''}`\r\n      );\r\n    }\r\n  }\r\n\r\n\r\n}\r\n","import { Directive, ElementRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[pIcon], [p-icon]'\r\n})\r\nexport class NgxPrettyIconDirective {\r\n\r\n  constructor(private elemRef: ElementRef) {\r\n    this.elemRef.nativeElement.classList.add('icon');\r\n  }\r\n\r\n}\r\n","import { Directive, ElementRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[pImage], [p-image]'\r\n})\r\nexport class NgxPrettyImageDirective {\r\n\r\n  constructor(private elemRef: ElementRef) {\r\n    console.log('TCL: NgxPrettyImageDirective -> constructor -> elemRef', elemRef);\r\n    this.elemRef.nativeElement.classList.add('image');\r\n  }\r\n\r\n}\r\n","// tslint:disable:use-host-property-decorator\r\n\r\nimport { Component, Input, ElementRef, Renderer2, AfterViewInit, ChangeDetectionStrategy, Attribute } from '@angular/core';\r\nimport { DEFAULT_PREFIX, DEFAULT_OUTLINE_PREFIX } from '../model/params';\r\nimport { PrettyCheckboxColor } from '../model/interfaces';\r\n\r\n@Component({\r\n  selector: 'ngx-p-indeterminate:not([will-change]), p-indeterminate:not([will-change])',\r\n  template: `\r\n    <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n    <label><ng-content></ng-content></label>\r\n  `,\r\n  host: {\r\n    class: `state ${DEFAULT_PREFIX}is-indeterminate`\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxPrettyIndeterminateComponent implements AfterViewInit {\r\n\r\n  constructor(\r\n    private el: ElementRef,\r\n    private renderer: Renderer2,\r\n    @Attribute('outline') private _outline = false,\r\n    @Attribute('color')   private _color: PrettyCheckboxColor,\r\n  ) { }\r\n\r\n  ngAfterViewInit() {\r\n    if (this._color) {\r\n      this.renderer.addClass(this.el.nativeElement,\r\n        `${DEFAULT_PREFIX}${this._color}${this._outline ? DEFAULT_OUTLINE_PREFIX : ''}`\r\n      );\r\n    }\r\n  }\r\n\r\n\r\n}\r\n","import { Directive, AfterViewInit, ElementRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[pSvg], [p-svg]'\r\n})\r\nexport class NgxPrettySvgDirective implements AfterViewInit {\r\n\r\n  constructor(private elemRef: ElementRef) { }\r\n\r\n  ngAfterViewInit() {\r\n    this.elemRef.nativeElement.classList.add('svg');\r\n  }\r\n\r\n}\r\n","// tslint:disable:use-host-property-decorator\r\n\r\nimport { Input, ElementRef, Component, AfterViewInit, Renderer2, ChangeDetectionStrategy, Attribute } from '@angular/core';\r\nimport { PrettyCheckboxColor, PrettyCheckBoxToggleType } from '../model/interfaces';\r\nimport { DEFAULT_PREFIX, DEFAULT_OUTLINE_PREFIX } from '../model/params';\r\nimport { getColorClassName } from '../utility';\r\n\r\n@Component({\r\n  selector: 'ngx-p-toggle:not([will-change]), p-toggle:not([will-change])',\r\n  template: `\r\n    <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n    <label><ng-content></ng-content></label>\r\n  `,\r\n  host: {\r\n    class: 'state'\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxPrettyToggleComponent implements AfterViewInit {\r\n\r\n  constructor(\r\n    private el: ElementRef,\r\n    private renderer: Renderer2,\r\n    @Attribute('outline') private _outline = false,\r\n    @Attribute('color')   private _color: PrettyCheckboxColor,\r\n    @Attribute('type')   private _type: PrettyCheckBoxToggleType,\r\n  ) { }\r\n\r\n  ngAfterViewInit() {\r\n    if (this._color) {\r\n      this.renderer.addClass(this.el.nativeElement,\r\n        `${DEFAULT_PREFIX}${this._color}${this._outline ? DEFAULT_OUTLINE_PREFIX : ''}`\r\n      );\r\n    }\r\n\r\n    this.renderer.addClass(this.el.nativeElement, `${DEFAULT_PREFIX}${this._type}`);\r\n  }\r\n\r\n}\r\n","import { PrettyCheckboxColor } from './model/interfaces';\r\nimport { DEFAULT_PREFIX, DEFAULT_OUTLINE_PREFIX } from './model/params';\r\n\r\nexport function getColorClassName(color: PrettyCheckboxColor, outline?: boolean) {\r\n  if (!color) { return null; }\r\n  return DEFAULT_PREFIX + color + (outline ? DEFAULT_OUTLINE_PREFIX : '');\r\n}\r\n\r\nexport function strToBoolean(str?: string | boolean): boolean {\r\n  if (typeof str === 'boolean') {\r\n    return str;\r\n  }\r\n\r\n  const regex = /^\\s*(true|1|on|enable)\\s*$/i;\r\n  return regex.test(str);\r\n}\r\n","// tslint:disable:use-host-property-decorator\r\n\r\nimport { Component, Input, ElementRef, Renderer2, SimpleChanges, OnChanges, ChangeDetectionStrategy } from '@angular/core';\r\nimport { DEFAULT_PREFIX } from '../model/params';\r\nimport { PrettyCheckboxColor } from '../model/interfaces';\r\nimport { getColorClassName } from '../utility';\r\n\r\n@Component({\r\n  selector: 'ngx-p-hover[will-change], p-hover[will-change]',\r\n  template: `\r\n    <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n    <label><ng-content></ng-content></label>\r\n  `,\r\n  host: {\r\n    class: `state ${DEFAULT_PREFIX}is-hover`\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxPrettyHoverWillChangeComponent implements OnChanges {\r\n\r\n  @Input() color: PrettyCheckboxColor;\r\n  @Input() outline = false;\r\n\r\n  constructor(\r\n    private el: ElementRef,\r\n    private renderer: Renderer2\r\n  ) { }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.color || changes.outline) {\r\n\r\n      const oldClass =\r\n        getColorClassName(\r\n          changes.color ? changes.color.previousValue : this.color,\r\n          changes.outline ? changes.outline.previousValue : null\r\n        );\r\n\r\n      const newClass =\r\n        getColorClassName(\r\n          changes.color ? changes.color.currentValue : this.color,\r\n          changes.outline ? changes.outline.currentValue : null\r\n        );\r\n\r\n      this.renderer.removeClass(this.el.nativeElement, oldClass);\r\n      this.renderer.addClass(this.el.nativeElement, newClass);\r\n    }\r\n  }\r\n\r\n}\r\n","// tslint:disable:use-host-property-decorator\r\n\r\nimport { Component, Input, ElementRef, Renderer2, SimpleChanges, OnChanges, ChangeDetectionStrategy } from '@angular/core';\r\nimport { getColorClassName } from '../utility';\r\nimport { DEFAULT_PREFIX } from '../model/params';\r\nimport { PrettyCheckboxColor } from '../model/interfaces';\r\n\r\n@Component({\r\n  selector: 'ngx-p-indeterminate[will-change], p-indeterminate[will-change]',\r\n  template: `\r\n    <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n    <label><ng-content></ng-content></label>\r\n  `,\r\n  host: {\r\n    class: `state ${DEFAULT_PREFIX}is-indeterminate`\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxPrettyIndeterminateWillChangeComponent implements OnChanges {\r\n\r\n  @Input() color: PrettyCheckboxColor;\r\n  @Input() outline = false;\r\n\r\n  constructor(private el: ElementRef, private renderer: Renderer2) { }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.color || changes.outline) {\r\n\r\n      const oldClass =\r\n        getColorClassName(\r\n          changes.color ? changes.color.previousValue : this.color,\r\n          changes.outline ? changes.outline.previousValue : null\r\n        );\r\n\r\n      const newClass =\r\n        getColorClassName(\r\n          changes.color ? changes.color.currentValue : this.color,\r\n          changes.outline ? changes.outline.currentValue : null\r\n        );\r\n\r\n      this.renderer.removeClass(this.el.nativeElement, oldClass);\r\n      this.renderer.addClass(this.el.nativeElement, newClass);\r\n    }\r\n  }\r\n\r\n}\r\n","// tslint:disable:use-host-property-decorator\r\n\r\nimport { Input, ElementRef, Component, HostBinding, SimpleChanges, OnChanges, Renderer2, ChangeDetectionStrategy } from '@angular/core';\r\nimport { PrettyCheckboxColor, PrettyCheckBoxToggleType } from '../model/interfaces';\r\nimport { DEFAULT_PREFIX, DEFAULT_OUTLINE_PREFIX } from '../model/params';\r\nimport { getColorClassName } from '../utility';\r\n\r\n@Component({\r\n  selector: 'ngx-p-toggle[will-change], p-toggle[will-change]',\r\n  template: `\r\n    <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n    <label><ng-content></ng-content></label>\r\n  `,\r\n  host: {\r\n    class: 'state'\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxPrettyToggleWillChangeComponent implements OnChanges {\r\n\r\n  @Input() type: PrettyCheckBoxToggleType;\r\n\r\n  @HostBinding(`class.${DEFAULT_PREFIX}on`)\r\n  get isToggleOn() { return this.type === PrettyCheckBoxToggleType.On; }\r\n\r\n  @HostBinding(`class.${DEFAULT_PREFIX}off`)\r\n  get isToggleOff() { return this.type === PrettyCheckBoxToggleType.Off; }\r\n\r\n\r\n  @Input() color: PrettyCheckboxColor;\r\n  @Input() outline = false;\r\n\r\n  constructor(private el: ElementRef, private renderer: Renderer2) { }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.color || changes.outline) {\r\n\r\n      const oldClass =\r\n        getColorClassName(\r\n          changes.color ? changes.color.previousValue : this.color,\r\n          changes.outline ? changes.outline.previousValue : null\r\n        );\r\n\r\n      const newClass =\r\n        getColorClassName(\r\n          changes.color ? changes.color.currentValue : this.color,\r\n          changes.outline ? changes.outline.currentValue : null\r\n        );\r\n\r\n      this.renderer.removeClass(this.el.nativeElement, oldClass);\r\n      this.renderer.addClass(this.el.nativeElement, newClass);\r\n    }\r\n  }\r\n\r\n}\r\n","import {\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  Output,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  Attribute,\r\n  AfterViewInit,\r\n  Renderer2,\r\n  ChangeDetectorRef\r\n  } from '@angular/core';\r\nimport { DEFAULT_OUTLINE_PREFIX, DEFAULT_PREFIX, DEFAULT_PRETTY_CLASS_NAME } from '../model/params';\r\nimport { NgxPrettyHoverComponent } from './ngx-pretty-hover.component';\r\nimport { NgxPrettyIconDirective } from '../directives/ngx-pretty-icon.directive';\r\nimport { NgxPrettyImageDirective } from '../directives/ngx-pretty-image.directive';\r\nimport { NgxPrettyIndeterminateComponent } from './ngx-pretty-Indeterminate.component';\r\nimport { NgxPrettySvgDirective } from '../directives/ngx-pretty-svg.directive';\r\nimport { NgxPrettyToggleComponent } from './ngx-pretty-toggle.component';\r\nimport {\r\n  PrettyCheckboxAnimation,\r\n  PrettyCheckBoxChange,\r\n  PrettyCheckboxColor,\r\n  PrettyCheckboxShape,\r\n  PrettyCheckboxStroke\r\n  } from '../model/interfaces';\r\nimport { NgxPrettyHoverWillChangeComponent } from './ngx-pretty-hover-will-change.component';\r\nimport { NgxPrettyIndeterminateWillChangeComponent } from './ngx-pretty-Indeterminate-will-change.component';\r\nimport { NgxPrettyToggleWillChangeComponent } from './ngx-pretty-toggle-will-change.component';\r\nimport { strToBoolean } from '../utility';\r\n// tslint:disable:use-host-property-decorator\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'ngx-pretty-checkbox:not([will-change]), p-checkbox:not([will-change])',\r\n  template: `\r\n    <input\r\n      #inputElem\r\n      type=\"checkbox\"\r\n      [value]=\"value\"\r\n      [checked]=\"checked\"\r\n      [disabled]=\"disabled\"\r\n      (change)=\"_onChange($event, inputElem.checked, inputElem.value)\"/>\r\n\r\n    <div #stateElem *ngIf=\"!_isToggle\" class=\"state\">\r\n\r\n      <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n      <label><ng-content></ng-content></label>\r\n\r\n    </div>\r\n\r\n    <ng-content select=\"ngx-p-indeterminate, p-indeterminate, ngx-p-hover, p-hover, ngx-p-toggle, p-toggle\"></ng-content>\r\n  `,\r\n  // changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    'class': DEFAULT_PRETTY_CLASS_NAME\r\n  },\r\n  exportAs: 'ngxPrettyCheckbox'\r\n})\r\nexport class NgxPrettyCheckboxComponent implements AfterViewInit {\r\n\r\n  public readonly _prefix = DEFAULT_PREFIX;\r\n  public readonly _outlinePrefix = DEFAULT_OUTLINE_PREFIX;\r\n\r\n\r\n  @Input() checked = false;\r\n  @Input() disabled = false;\r\n  @Input() value;\r\n\r\n\r\n  @HostBinding(`class.${DEFAULT_PREFIX}locked`)\r\n  @Input() lock = false;\r\n\r\n\r\n  @ViewChild('inputElem', { static: true }) private _inputElem: ElementRef;\r\n  @ViewChild('stateElem', { static: false }) private _stateElem: ElementRef;\r\n\r\n  @Output() change = new EventEmitter<PrettyCheckBoxChange>();\r\n\r\n\r\n  @ContentChild(NgxPrettyIconDirective, {static: false}) private _iconDir: NgxPrettyIconDirective;\r\n  @ContentChild(NgxPrettySvgDirective, {static: false}) private _svgDir: NgxPrettySvgDirective;\r\n  @ContentChild(NgxPrettyImageDirective, {static: false}) private _imgDir: NgxPrettyImageDirective;\r\n\r\n  @ContentChild(NgxPrettyHoverComponent, {static: false}) private _hoverDir: NgxPrettyHoverComponent;\r\n  @ContentChild(NgxPrettyHoverWillChangeComponent, {static: false}) private _hoverWillChangeDir: NgxPrettyHoverWillChangeComponent;\r\n\r\n  @ContentChild(NgxPrettyIndeterminateComponent, {static: false}) private _indeterminateDir: NgxPrettyIndeterminateComponent;\r\n  @ContentChild(NgxPrettyIndeterminateWillChangeComponent, {static: false}) private _indeterminateWillChangeDir: NgxPrettyIndeterminateWillChangeComponent;\r\n\r\n  @ContentChildren(NgxPrettyToggleComponent) public _toggleComps: QueryList<NgxPrettyToggleComponent>;\r\n  @ContentChildren(NgxPrettyToggleWillChangeComponent) public _toggleWillChangeComps: QueryList<NgxPrettyToggleWillChangeComponent>;\r\n\r\n  constructor (\r\n    private renderer: Renderer2,\r\n    private el: ElementRef,\r\n    private cd: ChangeDetectorRef,\r\n\r\n    @Attribute('stroke')      private _stroke: PrettyCheckboxStroke,\r\n    @Attribute('shape')       private _shape: PrettyCheckboxShape,\r\n    @Attribute('animation')   private _animation: PrettyCheckboxAnimation,\r\n    @Attribute('isSwitch')    private _isSwitch = false,\r\n    @Attribute('bigger')      private _bigger = false,\r\n    @Attribute('enableFocus') private _enableFocus = false,\r\n    @Attribute('plain')       private _plain = false,\r\n\r\n    @Attribute('outline') private _outline = false,\r\n    @Attribute('color')   private _color: PrettyCheckboxColor,\r\n  ) {\r\n      this._isSwitch    = strToBoolean(this._isSwitch);\r\n      this._bigger      = strToBoolean(this._bigger);\r\n      this._enableFocus = strToBoolean(this._enableFocus);\r\n      this._plain       = strToBoolean(this._plain);\r\n      this._outline     = strToBoolean(this._outline);\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    const el = this.el.nativeElement;\r\n\r\n    if (this._isSwitch)    { this.renderer.addClass(el, `${DEFAULT_PREFIX}switch`); }\r\n    if (this._bigger)      { this.renderer.addClass(el, `${DEFAULT_PREFIX}bigger`); }\r\n    if (this._enableFocus) { this.renderer.addClass(el, `${DEFAULT_PREFIX}has-focus`); }\r\n    if (this._plain)       { this.renderer.addClass(el, `${DEFAULT_PREFIX}plain`); }\r\n\r\n    if (this._stroke)     { this.renderer.addClass(el, `${DEFAULT_PREFIX}${this._stroke}`); }\r\n    if (this._shape)      { this.renderer.addClass(el, `${DEFAULT_PREFIX}${this._shape}`); }\r\n    if (this._animation)  { this.renderer.addClass(el, `${DEFAULT_PREFIX}${this._animation}`); }\r\n\r\n    if (this._iconDir)          { this.renderer.addClass(el, `${DEFAULT_PREFIX}icon`); }\r\n    if (this._svgDir)           { this.renderer.addClass(el, `${DEFAULT_PREFIX}svg`); }\r\n    if (this._imgDir)           { this.renderer.addClass(el, `${DEFAULT_PREFIX}image`); }\r\n\r\n    if (this._hoverDir || this._hoverWillChangeDir) {\r\n      this.renderer.addClass(el, `${DEFAULT_PREFIX}has-hover`);\r\n    }\r\n\r\n    if (this._indeterminateDir || this._indeterminateWillChangeDir) {\r\n      this.renderer.addClass(el, `${DEFAULT_PREFIX}has-indeterminate`);\r\n    }\r\n\r\n    if (this._isToggle) { this.renderer.addClass(el, `${DEFAULT_PREFIX}toggle`); }\r\n\r\n    if (!this._isSwitch && !this._iconDir && !this._svgDir && !this._imgDir) {\r\n      this.renderer.addClass(el, `${DEFAULT_PREFIX}default`);\r\n    }\r\n\r\n    // STATE ELEM\r\n    if (this._color && !this._isToggle) {\r\n      this.renderer.addClass(this._stateElem.nativeElement,\r\n        `${DEFAULT_PREFIX}${this._color}${this._outline ? DEFAULT_OUTLINE_PREFIX : ''}`\r\n      );\r\n    }\r\n\r\n  }\r\n\r\n\r\n  // ---------- PRIVATE METHODS ---------\r\n  public _onChange(event: Event, checked: boolean, value: string) {\r\n    // I stop propagation on the change event.\r\n    // Otherwise the change event, from the input element, will bubble up and\r\n    event.stopPropagation();\r\n    this.checked = checked;\r\n    this.change.emit({ value, checked, event });\r\n  }\r\n\r\n  public get _isToggle() { return this._toggleComps.length === 2 || this._toggleWillChangeComps.length === 2; }\r\n\r\n  // ---------- PUBLIC METHODS ---------\r\n  public setIndeterminate(value = true) {\r\n    this._inputElem.nativeElement.indeterminate = value;\r\n  }\r\n\r\n  public forceCheck(check: boolean) {\r\n    this.checked = check;\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n}\r\n","import {\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  Output,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef\r\n  } from '@angular/core';\r\nimport { DEFAULT_OUTLINE_PREFIX, DEFAULT_PREFIX, DEFAULT_PRETTY_CLASS_NAME } from '../model/params';\r\nimport { NgxPrettyHoverComponent } from './ngx-pretty-hover.component';\r\nimport { NgxPrettyIconDirective } from '../directives/ngx-pretty-icon.directive';\r\nimport { NgxPrettyImageDirective } from '../directives/ngx-pretty-image.directive';\r\nimport { NgxPrettyIndeterminateComponent } from './ngx-pretty-Indeterminate.component';\r\nimport { NgxPrettySvgDirective } from '../directives/ngx-pretty-svg.directive';\r\nimport { NgxPrettyToggleComponent } from './ngx-pretty-toggle.component';\r\nimport {\r\n  PrettyCheckboxAnimation,\r\n  PrettyCheckBoxChange,\r\n  PrettyCheckboxColor,\r\n  PrettyCheckboxShape,\r\n  PrettyCheckboxStroke,\r\n  } from '../model/interfaces';\r\nimport { NgxPrettyHoverWillChangeComponent } from './ngx-pretty-hover-will-change.component';\r\nimport { NgxPrettyToggleWillChangeComponent } from './ngx-pretty-toggle-will-change.component';\r\nimport { NgxPrettyIndeterminateWillChangeComponent } from './ngx-pretty-Indeterminate-will-change.component';\r\n// tslint:disable:use-host-property-decorator\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'ngx-pretty-checkbox[will-change], p-checkbox[will-change]',\r\n  template: `\r\n    <input\r\n      #inputElem\r\n      type=\"checkbox\"\r\n      [value]=\"value\"\r\n      [checked]=\"checked\"\r\n      [disabled]=\"disabled\"\r\n      (change)=\"_onChange($event, inputElem.checked, inputElem.value)\"/>\r\n\r\n    <div *ngIf=\"!_isToggle\" class=\"state\"\r\n        [ngClass]=\"[ color ? _prefix + color + (outline ? _outlinePrefix : '') : '' ]\">\r\n\r\n        <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n        <label><ng-content></ng-content></label>\r\n    </div>\r\n\r\n    <ng-content select=\"ngx-p-indeterminate, p-indeterminate, ngx-p-hover, p-hover, ngx-p-toggle, p-toggle\"></ng-content>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    'class': DEFAULT_PRETTY_CLASS_NAME\r\n  },\r\n  exportAs: 'ngxPrettyCheckboxWillChange'\r\n})\r\nexport class NgxPrettyCheckboxWillChangeComponent {\r\n\r\n  constructor(private cd: ChangeDetectorRef) {}\r\n\r\n  public readonly _prefix = DEFAULT_PREFIX;\r\n  public readonly _outlinePrefix = DEFAULT_OUTLINE_PREFIX;\r\n\r\n  @ViewChild('inputElem', { static: true }) private _inputElem: ElementRef;\r\n  @Output() change = new EventEmitter<PrettyCheckBoxChange>();\r\n\r\n\r\n  // ---------- INPUTS ----------\r\n  @Input() stroke: PrettyCheckboxStroke;\r\n  @Input() shape: PrettyCheckboxShape;\r\n  @Input() animation: PrettyCheckboxAnimation;\r\n  @Input() color: PrettyCheckboxColor;\r\n  @Input() outline = false; // COLOR . Can be used as Solid ( p-primary ) or Outline ( p-primary-o ).\r\n\r\n  @Input() checked = false;\r\n  @Input() disabled = false;\r\n  @Input() value;\r\n\r\n\r\n  // ----- INPUTS AND BINDING ------\r\n  // SWITCH\r\n  @HostBinding(`class.${DEFAULT_PREFIX}switch`)\r\n  @Input() isSwitch = false;\r\n\r\n  //  LOCK\r\n  @HostBinding(`class.${DEFAULT_PREFIX}locked`)\r\n  @Input() lock = false;\r\n\r\n  //  BIGGER\r\n  @HostBinding(`class.${DEFAULT_PREFIX}bigger`)\r\n  @Input() bigger = false;\r\n\r\n  //  FOCUS\r\n  @HostBinding(`class.${DEFAULT_PREFIX}has-focus`)\r\n  @Input() enableFocus = false;\r\n\r\n  //  PLAIN\r\n  @HostBinding(`class.${DEFAULT_PREFIX}plain`)\r\n  @Input() plain = false; // To remove the border ( when checkbox is checked ) \r\n\r\n\r\n  // ---------- STROKE ----------\r\n  // Fill\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxStroke.Fill}`)\r\n  get _isFill() { return this.stroke === PrettyCheckboxStroke.Fill; }\r\n\r\n  // Slim\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxStroke.Slim}`)\r\n  get _isSlim() { return this.stroke === PrettyCheckboxStroke.Slim; }\r\n\r\n  // Thick\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxStroke.Thick}`)\r\n  get _isThick() { return this.stroke === PrettyCheckboxStroke.Thick; }\r\n\r\n\r\n  // ---------- SHAPE ----------\r\n  // Curve\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxShape.Curve}`)\r\n  get _isCurve() { return this.shape === PrettyCheckboxShape.Curve; }\r\n\r\n  // Round\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxShape.Round}`)\r\n  get _isRound() { return this.shape === PrettyCheckboxShape.Round; }\r\n\r\n\r\n  // ---------- ANIMATION ----------\r\n  // Smooth\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxAnimation.Smooth}`)\r\n  get _isSmooth() { return this.animation === PrettyCheckboxAnimation.Smooth; }\r\n\r\n  // Jelly\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxAnimation.Jelly}`)\r\n  get _isJelly() { return this.animation === PrettyCheckboxAnimation.Jelly; }\r\n\r\n  // Tada\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxAnimation.Tada}`)\r\n  get _isTada() { return this.animation === PrettyCheckboxAnimation.Tada; }\r\n\r\n  // Rotate\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxAnimation.Rotate}`)\r\n  get _isRotate() { return this.animation === PrettyCheckboxAnimation.Rotate; }\r\n\r\n  // Pulse\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxAnimation.Pulse}`)\r\n  get _isPulse() { return this.animation === PrettyCheckboxAnimation.Pulse; }\r\n\r\n\r\n  // ---------- BINDING ----------\r\n  // Toggle\r\n  @ContentChildren(NgxPrettyToggleComponent) _toggleComp: QueryList<NgxPrettyToggleComponent>;\r\n  @ContentChildren(NgxPrettyToggleWillChangeComponent) _toggleWillChangeComp: QueryList<NgxPrettyToggleWillChangeComponent>;\r\n\r\n  @HostBinding(`class.${DEFAULT_PREFIX}toggle`)\r\n  get _isToggle() { return this._toggleComp.length === 2 || this._toggleWillChangeComp.length === 2; }\r\n\r\n  // DEFAULT\r\n  @HostBinding(`class.${DEFAULT_PREFIX}default`)\r\n  get _isDefault() { return !this.isSwitch && !this._iconElem && !this._svgElem && !this._imageElem; }\r\n\r\n\r\n\r\n  // ----- CHILD SELECTOR AND BINDING -----\r\n  // ICON\r\n  @HostBinding(`class.${DEFAULT_PREFIX}icon`)\r\n  @ContentChild(NgxPrettyIconDirective, {static: false}) _iconElem: NgxPrettyIconDirective;\r\n\r\n  // SVG\r\n  @HostBinding(`class.${DEFAULT_PREFIX}svg`)\r\n  @ContentChild(NgxPrettySvgDirective, {static: false}) _svgElem: NgxPrettySvgDirective;\r\n\r\n  // IMAGE\r\n  @HostBinding(`class.${DEFAULT_PREFIX}image`)\r\n  @ContentChild(NgxPrettyImageDirective, {static: false}) _imageElem: NgxPrettyImageDirective;\r\n\r\n  // HOVER\r\n  @ContentChild(NgxPrettyHoverWillChangeComponent, {static: false}) _hoverWillChangeDir: NgxPrettyHoverWillChangeComponent;\r\n  @ContentChild(NgxPrettyHoverComponent, {static: false}) _hoverComp: NgxPrettyHoverComponent;\r\n\r\n  @HostBinding(`class.${DEFAULT_PREFIX}has-hover`)\r\n  get _isHover() { return this._hoverComp || this._hoverWillChangeDir; }\r\n\r\n  // Indeterminate\r\n  @ContentChild(NgxPrettyIndeterminateComponent, {static: false}) _indeterminateComp: NgxPrettyIndeterminateComponent;\r\n  @ContentChild(NgxPrettyIndeterminateWillChangeComponent, {static: false}) _indeterminateWillChangeComp: NgxPrettyIndeterminateWillChangeComponent;\r\n\r\n  @HostBinding(`class.${DEFAULT_PREFIX}has-indeterminate`)\r\n  get _isIndeterminate() { return this._indeterminateComp || this._indeterminateWillChangeComp; }\r\n\r\n\r\n  // ---------- PRIVATE METHODS ---------\r\n  public _onChange(event: Event, checked: boolean, value: string) {\r\n    // I stop propagation on the change event.\r\n    // Otherwise the change event, from the input element, will bubble up and\r\n    event.stopPropagation();\r\n    this.checked = checked;\r\n    this.change.emit({ value, checked, event });\r\n  }\r\n\r\n  // ---------- PUBLIC METHODS ---------\r\n  public setIndeterminate(value = true) {\r\n    this._inputElem.nativeElement.indeterminate = value;\r\n  }\r\n\r\n  public forceCheck(check: boolean) {\r\n    this.checked = check;\r\n    this.cd.markForCheck();\r\n  }\r\n}\r\n\r\n\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NgxPrettyRadioService {\r\n\r\n  public name: string;\r\n\r\n  constructor() { }\r\n}\r\n","import { Directive, Output, EventEmitter } from '@angular/core';\r\nimport { NgxPrettyRadioService } from '../ngx-pretty-checkbox.service';\r\nimport { GROUP_NAME } from '../model/params';\r\nimport { PrettyRadioChange } from '../model/interfaces';\r\n\r\nlet nextId = 1;\r\n\r\n@Directive({\r\n  selector: 'ngx-pretty-radio-group, p-radio-group',\r\n  providers: [NgxPrettyRadioService],\r\n  exportAs: 'ngxRadioGroup'\r\n})\r\nexport class NgxPrettyRadioGroupDirective {\r\n\r\n  public name = GROUP_NAME + nextId++;\r\n\r\n  @Output() change = new EventEmitter<PrettyRadioChange>();\r\n\r\n  constructor() {}\r\n\r\n  _emitChange(event: PrettyRadioChange) {\r\n    this.change.emit(event);\r\n  }\r\n\r\n}\r\n","import {\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  Output,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  Attribute,\r\n  AfterViewInit,\r\n  Renderer2,\r\n  Optional,\r\n  OnInit\r\n  } from '@angular/core';\r\nimport { DEFAULT_OUTLINE_PREFIX, DEFAULT_PREFIX, DEFAULT_PRETTY_CLASS_NAME } from '../model/params';\r\nimport { NgxPrettyHoverComponent } from './ngx-pretty-hover.component';\r\nimport { NgxPrettyIconDirective } from '../directives/ngx-pretty-icon.directive';\r\nimport { NgxPrettyImageDirective } from '../directives/ngx-pretty-image.directive';\r\nimport { NgxPrettySvgDirective } from '../directives/ngx-pretty-svg.directive';\r\nimport { NgxPrettyToggleComponent } from './ngx-pretty-toggle.component';\r\nimport {\r\n  PrettyCheckboxAnimation,\r\n  PrettyCheckboxColor,\r\n  PrettyCheckboxShape,\r\n  PrettyCheckboxStroke,\r\n  PrettyRadioChange\r\n  } from '../model/interfaces';\r\nimport { NgxPrettyHoverWillChangeComponent } from './ngx-pretty-hover-will-change.component';\r\nimport { NgxPrettyToggleWillChangeComponent } from './ngx-pretty-toggle-will-change.component';\r\nimport { NgxPrettyRadioGroupDirective } from './ngx-pretty-radio-group.component';\r\nimport { strToBoolean } from '../utility';\r\n// tslint:disable:use-host-property-decorator\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'ngx-pretty-radio:not([will-change]), p-radio:not([will-change])',\r\n  template: `\r\n    <input\r\n      #inputElem\r\n      type=\"radio\"\r\n      [name]=\"_name\"\r\n      [value]=\"value\"\r\n      [checked]=\"checked\"\r\n      [disabled]=\"disabled\"\r\n      (change)=\"_onChange($event, inputElem.checked, inputElem.value)\"/>\r\n\r\n    <div #stateElem *ngIf=\"!_isToggle\" class=\"state\">\r\n\r\n      <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n      <label><ng-content></ng-content></label>\r\n\r\n    </div>\r\n\r\n    <ng-content select=\"ngx-p-hover, p-hover, ngx-p-toggle, p-toggle\"></ng-content>\r\n  `,\r\n  // changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    'class': DEFAULT_PRETTY_CLASS_NAME\r\n  },\r\n  exportAs: 'ngxPrettyRadio'\r\n})\r\nexport class NgxPrettyRadioComponent implements AfterViewInit {\r\n\r\n  public readonly _prefix = DEFAULT_PREFIX;\r\n  public readonly _outlinePrefix = DEFAULT_OUTLINE_PREFIX;\r\n\r\n\r\n  @Input() checked = false;\r\n  @Input() disabled = false;\r\n  @Input() value;\r\n\r\n  @HostBinding(`class.${DEFAULT_PREFIX}locked`)\r\n  @Input() lock = false;\r\n\r\n\r\n  @ViewChild('inputElem', { static: true }) private _inputElem: ElementRef;\r\n  @ViewChild('stateElem', { static: false }) private _stateElem: ElementRef;\r\n\r\n  @Output() change = new EventEmitter<PrettyRadioChange>();\r\n\r\n\r\n  @ContentChild(NgxPrettyIconDirective, {static: false}) private _iconDir: NgxPrettyIconDirective;\r\n  @ContentChild(NgxPrettySvgDirective, {static: false}) private _svgDir: NgxPrettySvgDirective;\r\n  @ContentChild(NgxPrettyImageDirective, {static: false}) private _imgDir: NgxPrettyImageDirective;\r\n\r\n  @ContentChild(NgxPrettyHoverComponent, {static: false}) private _hoverDir: NgxPrettyHoverComponent;\r\n  @ContentChild(NgxPrettyHoverWillChangeComponent, {static: false}) private _hoverWillChangeDir: NgxPrettyHoverWillChangeComponent;\r\n\r\n  @ContentChildren(NgxPrettyToggleComponent) public _toggleComps: QueryList<NgxPrettyToggleComponent>;\r\n  @ContentChildren(NgxPrettyToggleWillChangeComponent) public _toggleWillChangeComps: QueryList<NgxPrettyToggleWillChangeComponent>;\r\n\r\n  constructor (\r\n    private renderer: Renderer2,\r\n    private el: ElementRef,\r\n    @Optional() private radioGroup: NgxPrettyRadioGroupDirective,\r\n\r\n    @Attribute('stroke')      private _stroke: PrettyCheckboxStroke,\r\n    @Attribute('shape')       private _shape: PrettyCheckboxShape,\r\n    @Attribute('animation')   private _animation: PrettyCheckboxAnimation,\r\n    @Attribute('isSwitch')    private _isSwitch = false,\r\n    @Attribute('bigger')      private _bigger = false,\r\n    @Attribute('enableFocus') private _enableFocus = false,\r\n    @Attribute('plain')       private _plain = false,\r\n\r\n    @Attribute('outline') private _outline = false,\r\n    @Attribute('color')   private _color: PrettyCheckboxColor,\r\n    @Attribute('name')   public _name: string,\r\n    ) {\r\n      if (!this._name && this.radioGroup) {\r\n        this._name = this.radioGroup.name;\r\n      }\r\n\r\n      this._isSwitch    = strToBoolean(this._isSwitch);\r\n      this._bigger      = strToBoolean(this._bigger);\r\n      this._enableFocus = strToBoolean(this._enableFocus);\r\n      this._plain       = strToBoolean(this._plain);\r\n      this._outline     = strToBoolean(this._outline);\r\n    }\r\n\r\n\r\n  ngAfterViewInit(): void {\r\n    const el = this.el.nativeElement;\r\n\r\n    if (this._isSwitch)    { this.renderer.addClass(el, `${DEFAULT_PREFIX}switch`); }\r\n    if (this._bigger)      { this.renderer.addClass(el, `${DEFAULT_PREFIX}bigger`); }\r\n    if (this._enableFocus) { this.renderer.addClass(el, `${DEFAULT_PREFIX}has-focus`); }\r\n    if (this._plain)       { this.renderer.addClass(el, `${DEFAULT_PREFIX}plain`); }\r\n\r\n    if (this._stroke)     { this.renderer.addClass(el, `${DEFAULT_PREFIX}${this._stroke}`); }\r\n    if (this._shape)      { this.renderer.addClass(el, `${DEFAULT_PREFIX}${this._shape}`); }\r\n    if (this._animation)  { this.renderer.addClass(el, `${DEFAULT_PREFIX}${this._animation}`); }\r\n\r\n    if (this._iconDir)          { this.renderer.addClass(el, `${DEFAULT_PREFIX}icon`); }\r\n    if (this._svgDir)           { this.renderer.addClass(el, `${DEFAULT_PREFIX}svg`); }\r\n    if (this._imgDir)           { this.renderer.addClass(el, `${DEFAULT_PREFIX}image`); }\r\n\r\n    if (this._hoverDir || this._hoverWillChangeDir) {\r\n      this.renderer.addClass(el, `${DEFAULT_PREFIX}has-hover`);\r\n    }\r\n\r\n    if (this._isToggle) { this.renderer.addClass(el, `${DEFAULT_PREFIX}toggle`); }\r\n\r\n    if (!this._isSwitch && !this._iconDir && !this._svgDir && !this._imgDir) {\r\n      this.renderer.addClass(el, `${DEFAULT_PREFIX}default`);\r\n    }\r\n\r\n    // STATE ELEM\r\n    if (this._color && !this._isToggle) {\r\n      this.renderer.addClass(this._stateElem.nativeElement,\r\n        `${DEFAULT_PREFIX}${this._color}${this._outline ? DEFAULT_OUTLINE_PREFIX : ''}`\r\n      );\r\n    }\r\n\r\n  }\r\n\r\n\r\n  // ---------- METHODS ---------\r\n  public _onChange(event: Event, checked: boolean, value: string) {\r\n    // I stop propagation on the change event.\r\n    // Otherwise the change event, from the input element, will bubble up and\r\n    event.stopPropagation();\r\n    this.change.emit({ value, checked, event });\r\n\r\n    if (this.radioGroup) {\r\n      this.radioGroup._emitChange({ value, checked, event });\r\n    }\r\n  }\r\n\r\n  public get _isToggle() { return this._toggleComps.length === 2 || this._toggleWillChangeComps.length === 2; }\r\n}\r\n","import {\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  Output,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  Optional\r\n  } from '@angular/core';\r\nimport { DEFAULT_OUTLINE_PREFIX, DEFAULT_PREFIX, DEFAULT_PRETTY_CLASS_NAME } from '../model/params';\r\nimport { NgxPrettyHoverComponent } from './ngx-pretty-hover.component';\r\nimport { NgxPrettyIconDirective } from '../directives/ngx-pretty-icon.directive';\r\nimport { NgxPrettyImageDirective } from '../directives/ngx-pretty-image.directive';\r\nimport { NgxPrettyIndeterminateComponent } from './ngx-pretty-Indeterminate.component';\r\nimport { NgxPrettySvgDirective } from '../directives/ngx-pretty-svg.directive';\r\nimport { NgxPrettyToggleComponent } from './ngx-pretty-toggle.component';\r\nimport {\r\n  PrettyCheckboxAnimation,\r\n  PrettyCheckBoxChange,\r\n  PrettyCheckboxColor,\r\n  PrettyCheckboxShape,\r\n  PrettyCheckboxStroke,\r\n  } from '../model/interfaces';\r\nimport { NgxPrettyHoverWillChangeComponent } from './ngx-pretty-hover-will-change.component';\r\nimport { NgxPrettyToggleWillChangeComponent } from './ngx-pretty-toggle-will-change.component';\r\nimport { NgxPrettyIndeterminateWillChangeComponent } from './ngx-pretty-Indeterminate-will-change.component';\r\nimport { NgxPrettyRadioGroupDirective } from './ngx-pretty-radio-group.component';\r\n// tslint:disable:use-host-property-decorator\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'ngx-pretty-radio[will-change], p-radio[will-change]',\r\n  template: `\r\n    <input\r\n      #inputElem\r\n      type=\"radio\"\r\n      [name]=\"name || radioGroupName\"\r\n      [value]=\"value\"\r\n      [checked]=\"checked\"\r\n      [disabled]=\"disabled\"\r\n      (change)=\"_onChange($event, inputElem.checked, inputElem.value)\"/>\r\n\r\n    <div *ngIf=\"!_isToggle\" class=\"state\"\r\n        [ngClass]=\"[ color ? _prefix + color + (outline ? _outlinePrefix : '') : '' ]\">\r\n\r\n        <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n        <label><ng-content></ng-content></label>\r\n    </div>\r\n\r\n    <ng-content select=\"ngx-p-indeterminate, p-indeterminate, ngx-p-hover, p-hover, ngx-p-toggle, p-toggle\"></ng-content>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    'class': DEFAULT_PRETTY_CLASS_NAME\r\n  },\r\n  exportAs: 'ngxPrettyRadio'\r\n})\r\nexport class NgxPrettyRadioWillChangeComponent {\r\n\r\n  constructor(@Optional() private radioGroup: NgxPrettyRadioGroupDirective) {\r\n    if (radioGroup) {\r\n      this.radioGroupName = radioGroup.name;\r\n    }\r\n  }\r\n\r\n  public readonly _prefix = DEFAULT_PREFIX;\r\n  public readonly _outlinePrefix = DEFAULT_OUTLINE_PREFIX;\r\n\r\n  @ViewChild('inputElem', { static: true }) private _inputElem: ElementRef;\r\n  @Output() change = new EventEmitter<PrettyCheckBoxChange>();\r\n\r\n\r\n  // ---------- INPUTS ----------\r\n  @Input() stroke: PrettyCheckboxStroke;\r\n  @Input() shape: PrettyCheckboxShape;\r\n  @Input() animation: PrettyCheckboxAnimation;\r\n  @Input() color: PrettyCheckboxColor;\r\n  @Input() outline = false; // COLOR . Can be used as Solid ( p-primary ) or Outline ( p-primary-o ).\r\n\r\n  @Input() checked = false;\r\n  @Input() disabled = false;\r\n  @Input() value;\r\n\r\n  public radioGroupName: string;\r\n  @Input() name: string;\r\n\r\n\r\n  // ----- INPUTS AND BINDING ------\r\n  // SWITCH\r\n  @HostBinding(`class.${DEFAULT_PREFIX}switch`)\r\n  @Input() isSwitch = false;\r\n\r\n  //  LOCK\r\n  @HostBinding(`class.${DEFAULT_PREFIX}locked`)\r\n  @Input() lock = false;\r\n\r\n  //  BIGGER\r\n  @HostBinding(`class.${DEFAULT_PREFIX}bigger`)\r\n  @Input() bigger = false;\r\n\r\n  //  FOCUS\r\n  @HostBinding(`class.${DEFAULT_PREFIX}has-focus`)\r\n  @Input() enableFocus = false;\r\n\r\n  //  PLAIN\r\n  @HostBinding(`class.${DEFAULT_PREFIX}plain`)\r\n  @Input() plain = false; // To remove the border ( when checkbox is checked )\r\n\r\n\r\n  // ---------- STROKE ----------\r\n  // Fill\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxStroke.Fill}`)\r\n  get _isFill() { return this.stroke === PrettyCheckboxStroke.Fill; }\r\n\r\n  // Slim\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxStroke.Slim}`)\r\n  get _isSlim() { return this.stroke === PrettyCheckboxStroke.Slim; }\r\n\r\n  // Thick\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxStroke.Thick}`)\r\n  get _isThick() { return this.stroke === PrettyCheckboxStroke.Thick; }\r\n\r\n\r\n  // ---------- SHAPE ----------\r\n  // Curve\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxShape.Curve}`)\r\n  get _isCurve() { return this.shape === PrettyCheckboxShape.Curve; }\r\n\r\n  // Round\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxShape.Round}`)\r\n  get _isRound() { return this.shape === PrettyCheckboxShape.Round; }\r\n\r\n\r\n  // ---------- ANIMATION ----------\r\n  // Smooth\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxAnimation.Smooth}`)\r\n  get _isSmooth() { return this.animation === PrettyCheckboxAnimation.Smooth; }\r\n\r\n  // Jelly\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxAnimation.Jelly}`)\r\n  get _isJelly() { return this.animation === PrettyCheckboxAnimation.Jelly; }\r\n\r\n  // Tada\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxAnimation.Tada}`)\r\n  get _isTada() { return this.animation === PrettyCheckboxAnimation.Tada; }\r\n\r\n  // Rotate\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxAnimation.Rotate}`)\r\n  get _isRotate() { return this.animation === PrettyCheckboxAnimation.Rotate; }\r\n\r\n  // Pulse\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxAnimation.Pulse}`)\r\n  get _isPulse() { return this.animation === PrettyCheckboxAnimation.Pulse; }\r\n\r\n\r\n  // ---------- BINDING ----------\r\n  // Toggle\r\n  @ContentChildren(NgxPrettyToggleComponent) _toggleComp: QueryList<NgxPrettyToggleComponent>;\r\n  @ContentChildren(NgxPrettyToggleWillChangeComponent) _toggleWillChangeComp: QueryList<NgxPrettyToggleWillChangeComponent>;\r\n\r\n  @HostBinding(`class.${DEFAULT_PREFIX}toggle`)\r\n  get _isToggle() { return this._toggleComp.length === 2 || this._toggleWillChangeComp.length === 2; }\r\n\r\n  // DEFAULT\r\n  @HostBinding(`class.${DEFAULT_PREFIX}default`)\r\n  get _isDefault() { return !this.isSwitch && !this._iconElem && !this._svgElem && !this._imageElem; }\r\n\r\n\r\n\r\n  // ----- CHILD SELECTOR AND BINDING -----\r\n  // ICON\r\n  @HostBinding(`class.${DEFAULT_PREFIX}icon`)\r\n  @ContentChild(NgxPrettyIconDirective, {static: false}) _iconElem: NgxPrettyIconDirective;\r\n\r\n  // SVG\r\n  @HostBinding(`class.${DEFAULT_PREFIX}svg`)\r\n  @ContentChild(NgxPrettySvgDirective, {static: false}) _svgElem: NgxPrettySvgDirective;\r\n\r\n  // IMAGE\r\n  @HostBinding(`class.${DEFAULT_PREFIX}image`)\r\n  @ContentChild(NgxPrettyImageDirective, {static: false}) _imageElem: NgxPrettyImageDirective;\r\n\r\n  // HOVER\r\n  @ContentChild(NgxPrettyHoverWillChangeComponent, {static: false}) _hoverWillChangeDir: NgxPrettyHoverWillChangeComponent;\r\n  @ContentChild(NgxPrettyHoverComponent, {static: false}) _hoverComp: NgxPrettyHoverComponent;\r\n\r\n  @HostBinding(`class.${DEFAULT_PREFIX}has-hover`)\r\n  get _isHover() { return this._hoverComp || this._hoverWillChangeDir; }\r\n\r\n\r\n  // ---------- METHODS ---------\r\n  public _onChange(event: Event, checked: boolean, value: string) {\r\n    // I stop propagation on the change event.\r\n    // Otherwise the change event, from the input element, will bubble up and\r\n    event.stopPropagation();\r\n    this.change.emit({ value, checked, event });\r\n\r\n    if (this.radioGroup) {\r\n      this.radioGroup._emitChange({ value, checked, event });\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { NgxPrettyCheckboxComponent } from './components/ngx-pretty-checkbox.component';\r\nimport { NgxPrettyIconDirective } from './directives/ngx-pretty-icon.directive';\r\nimport { NgxPrettySvgDirective } from './directives/ngx-pretty-svg.directive';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgxPrettyImageDirective } from './directives/ngx-pretty-image.directive';\r\nimport { NgxPrettyHoverComponent } from './components/ngx-pretty-hover.component';\r\nimport { NgxPrettyIndeterminateComponent } from './components/ngx-pretty-Indeterminate.component';\r\nimport { NgxPrettyToggleComponent } from './components/ngx-pretty-toggle.component';\r\nimport { NgxPrettyHoverWillChangeComponent } from './components/ngx-pretty-hover-will-change.component';\r\nimport { NgxPrettyCheckboxWillChangeComponent } from './components/ngx-pretty-checkbox-will-change.component';\r\nimport { NgxPrettyIndeterminateWillChangeComponent } from './components/ngx-pretty-Indeterminate-will-change.component';\r\nimport { NgxPrettyToggleWillChangeComponent } from './components/ngx-pretty-toggle-will-change.component';\r\nimport { NgxPrettyRadioGroupDirective } from './components/ngx-pretty-radio-group.component';\r\nimport { NgxPrettyRadioComponent } from './components/ngx-pretty-radio.component';\r\nimport { NgxPrettyRadioWillChangeComponent } from './components/ngx-pretty-radio-will-change.component';\r\n\r\nconst DECLARATIONS = [\r\n  NgxPrettyCheckboxComponent,\r\n  NgxPrettyCheckboxWillChangeComponent,\r\n\r\n  NgxPrettyIconDirective,\r\n  NgxPrettySvgDirective,\r\n  NgxPrettyImageDirective,\r\n\r\n  NgxPrettyToggleComponent,\r\n  NgxPrettyToggleWillChangeComponent,\r\n\r\n  NgxPrettyHoverComponent,\r\n  NgxPrettyHoverWillChangeComponent,\r\n\r\n  NgxPrettyIndeterminateComponent,\r\n  NgxPrettyIndeterminateWillChangeComponent,\r\n\r\n  NgxPrettyRadioGroupDirective,\r\n  NgxPrettyRadioComponent,\r\n  NgxPrettyRadioWillChangeComponent\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule\r\n  ],\r\n  declarations: [ DECLARATIONS ],\r\n  exports: [ DECLARATIONS ]\r\n})\r\nexport class NgxPrettyCheckboxModule { }\r\n"]}