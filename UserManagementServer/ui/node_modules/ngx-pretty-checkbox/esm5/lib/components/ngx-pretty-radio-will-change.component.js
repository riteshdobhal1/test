/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ContentChild, ContentChildren, ElementRef, EventEmitter, HostBinding, Input, Output, QueryList, ViewChild, ViewEncapsulation, ChangeDetectionStrategy, Optional } from '@angular/core';
import { DEFAULT_OUTLINE_PREFIX, DEFAULT_PREFIX, DEFAULT_PRETTY_CLASS_NAME } from '../model/params';
import { NgxPrettyHoverComponent } from './ngx-pretty-hover.component';
import { NgxPrettyIconDirective } from '../directives/ngx-pretty-icon.directive';
import { NgxPrettyImageDirective } from '../directives/ngx-pretty-image.directive';
import { NgxPrettySvgDirective } from '../directives/ngx-pretty-svg.directive';
import { NgxPrettyToggleComponent } from './ngx-pretty-toggle.component';
import { PrettyCheckboxAnimation, PrettyCheckboxColor, PrettyCheckboxShape, PrettyCheckboxStroke, } from '../model/interfaces';
import { NgxPrettyHoverWillChangeComponent } from './ngx-pretty-hover-will-change.component';
import { NgxPrettyToggleWillChangeComponent } from './ngx-pretty-toggle-will-change.component';
import { NgxPrettyRadioGroupDirective } from './ngx-pretty-radio-group.component';
// tslint:disable:use-host-property-decorator
var NgxPrettyRadioWillChangeComponent = /** @class */ (function () {
    function NgxPrettyRadioWillChangeComponent(radioGroup) {
        this.radioGroup = radioGroup;
        this._prefix = DEFAULT_PREFIX;
        this._outlinePrefix = DEFAULT_OUTLINE_PREFIX;
        this.change = new EventEmitter();
        this.outline = false; // COLOR . Can be used as Solid ( p-primary ) or Outline ( p-primary-o ).
        // COLOR . Can be used as Solid ( p-primary ) or Outline ( p-primary-o ).
        this.checked = false;
        this.disabled = false;
        // ----- INPUTS AND BINDING ------
        // SWITCH
        this.isSwitch = false;
        //  LOCK
        this.lock = false;
        //  BIGGER
        this.bigger = false;
        //  FOCUS
        this.enableFocus = false;
        //  PLAIN
        this.plain = false; // To remove the border ( when checkbox is checked )
        if (radioGroup) {
            this.radioGroupName = radioGroup.name;
        }
    }
    Object.defineProperty(NgxPrettyRadioWillChangeComponent.prototype, "_isFill", {
        // ---------- STROKE ----------
        // Fill
        get: 
        // To remove the border ( when checkbox is checked )
        // ---------- STROKE ----------
        // Fill
        /**
         * @return {?}
         */
        function () { return this.stroke === PrettyCheckboxStroke.Fill; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxPrettyRadioWillChangeComponent.prototype, "_isSlim", {
        // Slim
        get: 
        // Slim
        /**
         * @return {?}
         */
        function () { return this.stroke === PrettyCheckboxStroke.Slim; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxPrettyRadioWillChangeComponent.prototype, "_isThick", {
        // Thick
        get: 
        // Thick
        /**
         * @return {?}
         */
        function () { return this.stroke === PrettyCheckboxStroke.Thick; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxPrettyRadioWillChangeComponent.prototype, "_isCurve", {
        // ---------- SHAPE ----------
        // Curve
        get: 
        // ---------- SHAPE ----------
        // Curve
        /**
         * @return {?}
         */
        function () { return this.shape === PrettyCheckboxShape.Curve; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxPrettyRadioWillChangeComponent.prototype, "_isRound", {
        // Round
        get: 
        // Round
        /**
         * @return {?}
         */
        function () { return this.shape === PrettyCheckboxShape.Round; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxPrettyRadioWillChangeComponent.prototype, "_isSmooth", {
        // ---------- ANIMATION ----------
        // Smooth
        get: 
        // ---------- ANIMATION ----------
        // Smooth
        /**
         * @return {?}
         */
        function () { return this.animation === PrettyCheckboxAnimation.Smooth; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxPrettyRadioWillChangeComponent.prototype, "_isJelly", {
        // Jelly
        get: 
        // Jelly
        /**
         * @return {?}
         */
        function () { return this.animation === PrettyCheckboxAnimation.Jelly; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxPrettyRadioWillChangeComponent.prototype, "_isTada", {
        // Tada
        get: 
        // Tada
        /**
         * @return {?}
         */
        function () { return this.animation === PrettyCheckboxAnimation.Tada; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxPrettyRadioWillChangeComponent.prototype, "_isRotate", {
        // Rotate
        get: 
        // Rotate
        /**
         * @return {?}
         */
        function () { return this.animation === PrettyCheckboxAnimation.Rotate; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxPrettyRadioWillChangeComponent.prototype, "_isPulse", {
        // Pulse
        get: 
        // Pulse
        /**
         * @return {?}
         */
        function () { return this.animation === PrettyCheckboxAnimation.Pulse; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxPrettyRadioWillChangeComponent.prototype, "_isToggle", {
        get: /**
         * @return {?}
         */
        function () { return this._toggleComp.length === 2 || this._toggleWillChangeComp.length === 2; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxPrettyRadioWillChangeComponent.prototype, "_isDefault", {
        // DEFAULT
        get: 
        // DEFAULT
        /**
         * @return {?}
         */
        function () { return !this.isSwitch && !this._iconElem && !this._svgElem && !this._imageElem; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NgxPrettyRadioWillChangeComponent.prototype, "_isHover", {
        get: /**
         * @return {?}
         */
        function () { return this._hoverComp || this._hoverWillChangeDir; },
        enumerable: true,
        configurable: true
    });
    // ---------- METHODS ---------
    // ---------- METHODS ---------
    /**
     * @param {?} event
     * @param {?} checked
     * @param {?} value
     * @return {?}
     */
    NgxPrettyRadioWillChangeComponent.prototype._onChange = 
    // ---------- METHODS ---------
    /**
     * @param {?} event
     * @param {?} checked
     * @param {?} value
     * @return {?}
     */
    function (event, checked, value) {
        // I stop propagation on the change event.
        // Otherwise the change event, from the input element, will bubble up and
        event.stopPropagation();
        this.change.emit({ value: value, checked: checked, event: event });
        if (this.radioGroup) {
            this.radioGroup._emitChange({ value: value, checked: checked, event: event });
        }
    };
    NgxPrettyRadioWillChangeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-pretty-radio[will-change], p-radio[will-change]',
                    template: "\n    <input\n      #inputElem\n      type=\"radio\"\n      [name]=\"name || radioGroupName\"\n      [value]=\"value\"\n      [checked]=\"checked\"\n      [disabled]=\"disabled\"\n      (change)=\"_onChange($event, inputElem.checked, inputElem.value)\"/>\n\n    <div *ngIf=\"!_isToggle\" class=\"state\"\n        [ngClass]=\"[ color ? _prefix + color + (outline ? _outlinePrefix : '') : '' ]\">\n\n        <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\n        <label><ng-content></ng-content></label>\n    </div>\n\n    <ng-content select=\"ngx-p-indeterminate, p-indeterminate, ngx-p-hover, p-hover, ngx-p-toggle, p-toggle\"></ng-content>\n  ",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                    host: {
                        'class': DEFAULT_PRETTY_CLASS_NAME
                    },
                    exportAs: 'ngxPrettyRadio'
                }] }
    ];
    /** @nocollapse */
    NgxPrettyRadioWillChangeComponent.ctorParameters = function () { return [
        { type: NgxPrettyRadioGroupDirective, decorators: [{ type: Optional }] }
    ]; };
    NgxPrettyRadioWillChangeComponent.propDecorators = {
        _inputElem: [{ type: ViewChild, args: ['inputElem', { static: true },] }],
        change: [{ type: Output }],
        stroke: [{ type: Input }],
        shape: [{ type: Input }],
        animation: [{ type: Input }],
        color: [{ type: Input }],
        outline: [{ type: Input }],
        checked: [{ type: Input }],
        disabled: [{ type: Input }],
        value: [{ type: Input }],
        name: [{ type: Input }],
        isSwitch: [{ type: HostBinding, args: ["class." + DEFAULT_PREFIX + "switch",] }, { type: Input }],
        lock: [{ type: HostBinding, args: ["class." + DEFAULT_PREFIX + "locked",] }, { type: Input }],
        bigger: [{ type: HostBinding, args: ["class." + DEFAULT_PREFIX + "bigger",] }, { type: Input }],
        enableFocus: [{ type: HostBinding, args: ["class." + DEFAULT_PREFIX + "has-focus",] }, { type: Input }],
        plain: [{ type: HostBinding, args: ["class." + DEFAULT_PREFIX + "plain",] }, { type: Input }],
        _isFill: [{ type: HostBinding, args: ["class." + DEFAULT_PREFIX + PrettyCheckboxStroke.Fill,] }],
        _isSlim: [{ type: HostBinding, args: ["class." + DEFAULT_PREFIX + PrettyCheckboxStroke.Slim,] }],
        _isThick: [{ type: HostBinding, args: ["class." + DEFAULT_PREFIX + PrettyCheckboxStroke.Thick,] }],
        _isCurve: [{ type: HostBinding, args: ["class." + DEFAULT_PREFIX + PrettyCheckboxShape.Curve,] }],
        _isRound: [{ type: HostBinding, args: ["class." + DEFAULT_PREFIX + PrettyCheckboxShape.Round,] }],
        _isSmooth: [{ type: HostBinding, args: ["class." + DEFAULT_PREFIX + PrettyCheckboxAnimation.Smooth,] }],
        _isJelly: [{ type: HostBinding, args: ["class." + DEFAULT_PREFIX + PrettyCheckboxAnimation.Jelly,] }],
        _isTada: [{ type: HostBinding, args: ["class." + DEFAULT_PREFIX + PrettyCheckboxAnimation.Tada,] }],
        _isRotate: [{ type: HostBinding, args: ["class." + DEFAULT_PREFIX + PrettyCheckboxAnimation.Rotate,] }],
        _isPulse: [{ type: HostBinding, args: ["class." + DEFAULT_PREFIX + PrettyCheckboxAnimation.Pulse,] }],
        _toggleComp: [{ type: ContentChildren, args: [NgxPrettyToggleComponent,] }],
        _toggleWillChangeComp: [{ type: ContentChildren, args: [NgxPrettyToggleWillChangeComponent,] }],
        _isToggle: [{ type: HostBinding, args: ["class." + DEFAULT_PREFIX + "toggle",] }],
        _isDefault: [{ type: HostBinding, args: ["class." + DEFAULT_PREFIX + "default",] }],
        _iconElem: [{ type: HostBinding, args: ["class." + DEFAULT_PREFIX + "icon",] }, { type: ContentChild, args: [NgxPrettyIconDirective, { static: false },] }],
        _svgElem: [{ type: HostBinding, args: ["class." + DEFAULT_PREFIX + "svg",] }, { type: ContentChild, args: [NgxPrettySvgDirective, { static: false },] }],
        _imageElem: [{ type: HostBinding, args: ["class." + DEFAULT_PREFIX + "image",] }, { type: ContentChild, args: [NgxPrettyImageDirective, { static: false },] }],
        _hoverWillChangeDir: [{ type: ContentChild, args: [NgxPrettyHoverWillChangeComponent, { static: false },] }],
        _hoverComp: [{ type: ContentChild, args: [NgxPrettyHoverComponent, { static: false },] }],
        _isHover: [{ type: HostBinding, args: ["class." + DEFAULT_PREFIX + "has-hover",] }]
    };
    return NgxPrettyRadioWillChangeComponent;
}());
export { NgxPrettyRadioWillChangeComponent };
if (false) {
    /** @type {?} */
    NgxPrettyRadioWillChangeComponent.prototype._prefix;
    /** @type {?} */
    NgxPrettyRadioWillChangeComponent.prototype._outlinePrefix;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyRadioWillChangeComponent.prototype._inputElem;
    /** @type {?} */
    NgxPrettyRadioWillChangeComponent.prototype.change;
    /** @type {?} */
    NgxPrettyRadioWillChangeComponent.prototype.stroke;
    /** @type {?} */
    NgxPrettyRadioWillChangeComponent.prototype.shape;
    /** @type {?} */
    NgxPrettyRadioWillChangeComponent.prototype.animation;
    /** @type {?} */
    NgxPrettyRadioWillChangeComponent.prototype.color;
    /** @type {?} */
    NgxPrettyRadioWillChangeComponent.prototype.outline;
    /** @type {?} */
    NgxPrettyRadioWillChangeComponent.prototype.checked;
    /** @type {?} */
    NgxPrettyRadioWillChangeComponent.prototype.disabled;
    /** @type {?} */
    NgxPrettyRadioWillChangeComponent.prototype.value;
    /** @type {?} */
    NgxPrettyRadioWillChangeComponent.prototype.radioGroupName;
    /** @type {?} */
    NgxPrettyRadioWillChangeComponent.prototype.name;
    /** @type {?} */
    NgxPrettyRadioWillChangeComponent.prototype.isSwitch;
    /** @type {?} */
    NgxPrettyRadioWillChangeComponent.prototype.lock;
    /** @type {?} */
    NgxPrettyRadioWillChangeComponent.prototype.bigger;
    /** @type {?} */
    NgxPrettyRadioWillChangeComponent.prototype.enableFocus;
    /** @type {?} */
    NgxPrettyRadioWillChangeComponent.prototype.plain;
    /** @type {?} */
    NgxPrettyRadioWillChangeComponent.prototype._toggleComp;
    /** @type {?} */
    NgxPrettyRadioWillChangeComponent.prototype._toggleWillChangeComp;
    /** @type {?} */
    NgxPrettyRadioWillChangeComponent.prototype._iconElem;
    /** @type {?} */
    NgxPrettyRadioWillChangeComponent.prototype._svgElem;
    /** @type {?} */
    NgxPrettyRadioWillChangeComponent.prototype._imageElem;
    /** @type {?} */
    NgxPrettyRadioWillChangeComponent.prototype._hoverWillChangeDir;
    /** @type {?} */
    NgxPrettyRadioWillChangeComponent.prototype._hoverComp;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyRadioWillChangeComponent.prototype.radioGroup;
}
//# sourceMappingURL=data:application/json;base64,