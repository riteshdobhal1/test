/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable:use-host-property-decorator
import { Component, Input, ElementRef, Renderer2, ChangeDetectionStrategy } from '@angular/core';
import { getColorClassName } from '../utility';
import { DEFAULT_PREFIX } from '../model/params';
import { PrettyCheckboxColor } from '../model/interfaces';
export class NgxPrettyIndeterminateWillChangeComponent {
    /**
     * @param {?} el
     * @param {?} renderer
     */
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.outline = false;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.color || changes.outline) {
            /** @type {?} */
            const oldClass = getColorClassName(changes.color ? changes.color.previousValue : this.color, changes.outline ? changes.outline.previousValue : null);
            /** @type {?} */
            const newClass = getColorClassName(changes.color ? changes.color.currentValue : this.color, changes.outline ? changes.outline.currentValue : null);
            this.renderer.removeClass(this.el.nativeElement, oldClass);
            this.renderer.addClass(this.el.nativeElement, newClass);
        }
    }
}
NgxPrettyIndeterminateWillChangeComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-p-indeterminate[will-change], p-indeterminate[will-change]',
                template: `
    <ng-content select="[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]"></ng-content>
    <label><ng-content></ng-content></label>
  `,
                host: {
                    class: `state ${DEFAULT_PREFIX}is-indeterminate`
                },
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
NgxPrettyIndeterminateWillChangeComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
NgxPrettyIndeterminateWillChangeComponent.propDecorators = {
    color: [{ type: Input }],
    outline: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    NgxPrettyIndeterminateWillChangeComponent.prototype.color;
    /** @type {?} */
    NgxPrettyIndeterminateWillChangeComponent.prototype.outline;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyIndeterminateWillChangeComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyIndeterminateWillChangeComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXByZXR0eS1JbmRldGVybWluYXRlLXdpbGwtY2hhbmdlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1wcmV0dHktY2hlY2tib3gvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9uZ3gtcHJldHR5LUluZGV0ZXJtaW5hdGUtd2lsbC1jaGFuZ2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBNEIsdUJBQXVCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0gsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQy9DLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQWExRCxNQUFNLE9BQU8seUNBQXlDOzs7OztJQUtwRCxZQUFvQixFQUFjLEVBQVUsUUFBbUI7UUFBM0MsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVc7UUFGdEQsWUFBTyxHQUFHLEtBQUssQ0FBQztJQUUwQyxDQUFDOzs7OztJQUVwRSxXQUFXLENBQUMsT0FBc0I7UUFDaEMsSUFBSSxPQUFPLENBQUMsS0FBSyxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUU7O2tCQUU5QixRQUFRLEdBQ1osaUJBQWlCLENBQ2YsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQ3hELE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQ3ZEOztrQkFFRyxRQUFRLEdBQ1osaUJBQWlCLENBQ2YsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQ3ZELE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQ3REO1lBRUgsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDM0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDekQ7SUFDSCxDQUFDOzs7WUFwQ0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxnRUFBZ0U7Z0JBQzFFLFFBQVEsRUFBRTs7O0dBR1Q7Z0JBQ0QsSUFBSSxFQUFFO29CQUNKLEtBQUssRUFBRSxTQUFTLGNBQWMsa0JBQWtCO2lCQUNqRDtnQkFDRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTthQUNoRDs7OztZQWYwQixVQUFVO1lBQUUsU0FBUzs7O29CQWtCN0MsS0FBSztzQkFDTCxLQUFLOzs7O0lBRE4sMERBQW9DOztJQUNwQyw0REFBeUI7Ozs7O0lBRWIsdURBQXNCOzs7OztJQUFFLDZEQUEyQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRzbGludDpkaXNhYmxlOnVzZS1ob3N0LXByb3BlcnR5LWRlY29yYXRvclxyXG5cclxuaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBTaW1wbGVDaGFuZ2VzLCBPbkNoYW5nZXMsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGdldENvbG9yQ2xhc3NOYW1lIH0gZnJvbSAnLi4vdXRpbGl0eSc7XHJcbmltcG9ydCB7IERFRkFVTFRfUFJFRklYIH0gZnJvbSAnLi4vbW9kZWwvcGFyYW1zJztcclxuaW1wb3J0IHsgUHJldHR5Q2hlY2tib3hDb2xvciB9IGZyb20gJy4uL21vZGVsL2ludGVyZmFjZXMnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICduZ3gtcC1pbmRldGVybWluYXRlW3dpbGwtY2hhbmdlXSwgcC1pbmRldGVybWluYXRlW3dpbGwtY2hhbmdlXScsXHJcbiAgdGVtcGxhdGU6IGBcclxuICAgIDxuZy1jb250ZW50IHNlbGVjdD1cIltwSWNvbl0sIFtwLWljb25dLCBbcFN2Z10sIFtwLXN2Z10sIFtwSW1hZ2VdLCBbcC1pbWFnZV1cIj48L25nLWNvbnRlbnQ+XHJcbiAgICA8bGFiZWw+PG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PjwvbGFiZWw+XHJcbiAgYCxcclxuICBob3N0OiB7XHJcbiAgICBjbGFzczogYHN0YXRlICR7REVGQVVMVF9QUkVGSVh9aXMtaW5kZXRlcm1pbmF0ZWBcclxuICB9LFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ3hQcmV0dHlJbmRldGVybWluYXRlV2lsbENoYW5nZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XHJcblxyXG4gIEBJbnB1dCgpIGNvbG9yOiBQcmV0dHlDaGVja2JveENvbG9yO1xyXG4gIEBJbnB1dCgpIG91dGxpbmUgPSBmYWxzZTtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXJlcjogUmVuZGVyZXIyKSB7IH1cclxuXHJcbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xyXG4gICAgaWYgKGNoYW5nZXMuY29sb3IgfHwgY2hhbmdlcy5vdXRsaW5lKSB7XHJcblxyXG4gICAgICBjb25zdCBvbGRDbGFzcyA9XHJcbiAgICAgICAgZ2V0Q29sb3JDbGFzc05hbWUoXHJcbiAgICAgICAgICBjaGFuZ2VzLmNvbG9yID8gY2hhbmdlcy5jb2xvci5wcmV2aW91c1ZhbHVlIDogdGhpcy5jb2xvcixcclxuICAgICAgICAgIGNoYW5nZXMub3V0bGluZSA/IGNoYW5nZXMub3V0bGluZS5wcmV2aW91c1ZhbHVlIDogbnVsbFxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICBjb25zdCBuZXdDbGFzcyA9XHJcbiAgICAgICAgZ2V0Q29sb3JDbGFzc05hbWUoXHJcbiAgICAgICAgICBjaGFuZ2VzLmNvbG9yID8gY2hhbmdlcy5jb2xvci5jdXJyZW50VmFsdWUgOiB0aGlzLmNvbG9yLFxyXG4gICAgICAgICAgY2hhbmdlcy5vdXRsaW5lID8gY2hhbmdlcy5vdXRsaW5lLmN1cnJlbnRWYWx1ZSA6IG51bGxcclxuICAgICAgICApO1xyXG5cclxuICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVDbGFzcyh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsIG9sZENsYXNzKTtcclxuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsIG5ld0NsYXNzKTtcclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcbiJdfQ==