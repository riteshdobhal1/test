/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ContentChild, ContentChildren, ElementRef, EventEmitter, HostBinding, Input, Output, QueryList, ViewChild, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';
import { DEFAULT_OUTLINE_PREFIX, DEFAULT_PREFIX, DEFAULT_PRETTY_CLASS_NAME } from '../model/params';
import { NgxPrettyHoverComponent } from './ngx-pretty-hover.component';
import { NgxPrettyIconDirective } from '../directives/ngx-pretty-icon.directive';
import { NgxPrettyImageDirective } from '../directives/ngx-pretty-image.directive';
import { NgxPrettyIndeterminateComponent } from './ngx-pretty-Indeterminate.component';
import { NgxPrettySvgDirective } from '../directives/ngx-pretty-svg.directive';
import { NgxPrettyToggleComponent } from './ngx-pretty-toggle.component';
import { PrettyCheckboxAnimation, PrettyCheckboxColor, PrettyCheckboxShape, PrettyCheckboxStroke, } from '../model/interfaces';
import { NgxPrettyHoverWillChangeComponent } from './ngx-pretty-hover-will-change.component';
import { NgxPrettyToggleWillChangeComponent } from './ngx-pretty-toggle-will-change.component';
import { NgxPrettyIndeterminateWillChangeComponent } from './ngx-pretty-Indeterminate-will-change.component';
// tslint:disable:use-host-property-decorator
export class NgxPrettyCheckboxWillChangeComponent {
    /**
     * @param {?} cd
     */
    constructor(cd) {
        this.cd = cd;
        this._prefix = DEFAULT_PREFIX;
        this._outlinePrefix = DEFAULT_OUTLINE_PREFIX;
        this.change = new EventEmitter();
        this.outline = false; // COLOR . Can be used as Solid ( p-primary ) or Outline ( p-primary-o ).
        // COLOR . Can be used as Solid ( p-primary ) or Outline ( p-primary-o ).
        this.checked = false;
        this.disabled = false;
        // ----- INPUTS AND BINDING ------
        // SWITCH
        this.isSwitch = false;
        //  LOCK
        this.lock = false;
        //  BIGGER
        this.bigger = false;
        //  FOCUS
        this.enableFocus = false;
        //  PLAIN
        this.plain = false; // To remove the border ( when checkbox is checked ) 
    }
    // To remove the border ( when checkbox is checked ) 
    // ---------- STROKE ----------
    // Fill
    /**
     * @return {?}
     */
    get _isFill() { return this.stroke === PrettyCheckboxStroke.Fill; }
    // Slim
    /**
     * @return {?}
     */
    get _isSlim() { return this.stroke === PrettyCheckboxStroke.Slim; }
    // Thick
    /**
     * @return {?}
     */
    get _isThick() { return this.stroke === PrettyCheckboxStroke.Thick; }
    // ---------- SHAPE ----------
    // Curve
    /**
     * @return {?}
     */
    get _isCurve() { return this.shape === PrettyCheckboxShape.Curve; }
    // Round
    /**
     * @return {?}
     */
    get _isRound() { return this.shape === PrettyCheckboxShape.Round; }
    // ---------- ANIMATION ----------
    // Smooth
    /**
     * @return {?}
     */
    get _isSmooth() { return this.animation === PrettyCheckboxAnimation.Smooth; }
    // Jelly
    /**
     * @return {?}
     */
    get _isJelly() { return this.animation === PrettyCheckboxAnimation.Jelly; }
    // Tada
    /**
     * @return {?}
     */
    get _isTada() { return this.animation === PrettyCheckboxAnimation.Tada; }
    // Rotate
    /**
     * @return {?}
     */
    get _isRotate() { return this.animation === PrettyCheckboxAnimation.Rotate; }
    // Pulse
    /**
     * @return {?}
     */
    get _isPulse() { return this.animation === PrettyCheckboxAnimation.Pulse; }
    /**
     * @return {?}
     */
    get _isToggle() { return this._toggleComp.length === 2 || this._toggleWillChangeComp.length === 2; }
    // DEFAULT
    /**
     * @return {?}
     */
    get _isDefault() { return !this.isSwitch && !this._iconElem && !this._svgElem && !this._imageElem; }
    /**
     * @return {?}
     */
    get _isHover() { return this._hoverComp || this._hoverWillChangeDir; }
    /**
     * @return {?}
     */
    get _isIndeterminate() { return this._indeterminateComp || this._indeterminateWillChangeComp; }
    // ---------- PRIVATE METHODS ---------
    /**
     * @param {?} event
     * @param {?} checked
     * @param {?} value
     * @return {?}
     */
    _onChange(event, checked, value) {
        // I stop propagation on the change event.
        // Otherwise the change event, from the input element, will bubble up and
        event.stopPropagation();
        this.checked = checked;
        this.change.emit({ value, checked, event });
    }
    // ---------- PUBLIC METHODS ---------
    /**
     * @param {?=} value
     * @return {?}
     */
    setIndeterminate(value = true) {
        this._inputElem.nativeElement.indeterminate = value;
    }
    /**
     * @param {?} check
     * @return {?}
     */
    forceCheck(check) {
        this.checked = check;
        this.cd.markForCheck();
    }
}
NgxPrettyCheckboxWillChangeComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-pretty-checkbox[will-change], p-checkbox[will-change]',
                template: `
    <input
      #inputElem
      type="checkbox"
      [value]="value"
      [checked]="checked"
      [disabled]="disabled"
      (change)="_onChange($event, inputElem.checked, inputElem.value)"/>

    <div *ngIf="!_isToggle" class="state"
        [ngClass]="[ color ? _prefix + color + (outline ? _outlinePrefix : '') : '' ]">

        <ng-content select="[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]"></ng-content>
        <label><ng-content></ng-content></label>
    </div>

    <ng-content select="ngx-p-indeterminate, p-indeterminate, ngx-p-hover, p-hover, ngx-p-toggle, p-toggle"></ng-content>
  `,
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                host: {
                    'class': DEFAULT_PRETTY_CLASS_NAME
                },
                exportAs: 'ngxPrettyCheckboxWillChange'
            }] }
];
/** @nocollapse */
NgxPrettyCheckboxWillChangeComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
NgxPrettyCheckboxWillChangeComponent.propDecorators = {
    _inputElem: [{ type: ViewChild, args: ['inputElem', { static: true },] }],
    change: [{ type: Output }],
    stroke: [{ type: Input }],
    shape: [{ type: Input }],
    animation: [{ type: Input }],
    color: [{ type: Input }],
    outline: [{ type: Input }],
    checked: [{ type: Input }],
    disabled: [{ type: Input }],
    value: [{ type: Input }],
    isSwitch: [{ type: HostBinding, args: [`class.${DEFAULT_PREFIX}switch`,] }, { type: Input }],
    lock: [{ type: HostBinding, args: [`class.${DEFAULT_PREFIX}locked`,] }, { type: Input }],
    bigger: [{ type: HostBinding, args: [`class.${DEFAULT_PREFIX}bigger`,] }, { type: Input }],
    enableFocus: [{ type: HostBinding, args: [`class.${DEFAULT_PREFIX}has-focus`,] }, { type: Input }],
    plain: [{ type: HostBinding, args: [`class.${DEFAULT_PREFIX}plain`,] }, { type: Input }],
    _isFill: [{ type: HostBinding, args: [`class.${DEFAULT_PREFIX}${PrettyCheckboxStroke.Fill}`,] }],
    _isSlim: [{ type: HostBinding, args: [`class.${DEFAULT_PREFIX}${PrettyCheckboxStroke.Slim}`,] }],
    _isThick: [{ type: HostBinding, args: [`class.${DEFAULT_PREFIX}${PrettyCheckboxStroke.Thick}`,] }],
    _isCurve: [{ type: HostBinding, args: [`class.${DEFAULT_PREFIX}${PrettyCheckboxShape.Curve}`,] }],
    _isRound: [{ type: HostBinding, args: [`class.${DEFAULT_PREFIX}${PrettyCheckboxShape.Round}`,] }],
    _isSmooth: [{ type: HostBinding, args: [`class.${DEFAULT_PREFIX}${PrettyCheckboxAnimation.Smooth}`,] }],
    _isJelly: [{ type: HostBinding, args: [`class.${DEFAULT_PREFIX}${PrettyCheckboxAnimation.Jelly}`,] }],
    _isTada: [{ type: HostBinding, args: [`class.${DEFAULT_PREFIX}${PrettyCheckboxAnimation.Tada}`,] }],
    _isRotate: [{ type: HostBinding, args: [`class.${DEFAULT_PREFIX}${PrettyCheckboxAnimation.Rotate}`,] }],
    _isPulse: [{ type: HostBinding, args: [`class.${DEFAULT_PREFIX}${PrettyCheckboxAnimation.Pulse}`,] }],
    _toggleComp: [{ type: ContentChildren, args: [NgxPrettyToggleComponent,] }],
    _toggleWillChangeComp: [{ type: ContentChildren, args: [NgxPrettyToggleWillChangeComponent,] }],
    _isToggle: [{ type: HostBinding, args: [`class.${DEFAULT_PREFIX}toggle`,] }],
    _isDefault: [{ type: HostBinding, args: [`class.${DEFAULT_PREFIX}default`,] }],
    _iconElem: [{ type: HostBinding, args: [`class.${DEFAULT_PREFIX}icon`,] }, { type: ContentChild, args: [NgxPrettyIconDirective, { static: false },] }],
    _svgElem: [{ type: HostBinding, args: [`class.${DEFAULT_PREFIX}svg`,] }, { type: ContentChild, args: [NgxPrettySvgDirective, { static: false },] }],
    _imageElem: [{ type: HostBinding, args: [`class.${DEFAULT_PREFIX}image`,] }, { type: ContentChild, args: [NgxPrettyImageDirective, { static: false },] }],
    _hoverWillChangeDir: [{ type: ContentChild, args: [NgxPrettyHoverWillChangeComponent, { static: false },] }],
    _hoverComp: [{ type: ContentChild, args: [NgxPrettyHoverComponent, { static: false },] }],
    _isHover: [{ type: HostBinding, args: [`class.${DEFAULT_PREFIX}has-hover`,] }],
    _indeterminateComp: [{ type: ContentChild, args: [NgxPrettyIndeterminateComponent, { static: false },] }],
    _indeterminateWillChangeComp: [{ type: ContentChild, args: [NgxPrettyIndeterminateWillChangeComponent, { static: false },] }],
    _isIndeterminate: [{ type: HostBinding, args: [`class.${DEFAULT_PREFIX}has-indeterminate`,] }]
};
if (false) {
    /** @type {?} */
    NgxPrettyCheckboxWillChangeComponent.prototype._prefix;
    /** @type {?} */
    NgxPrettyCheckboxWillChangeComponent.prototype._outlinePrefix;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyCheckboxWillChangeComponent.prototype._inputElem;
    /** @type {?} */
    NgxPrettyCheckboxWillChangeComponent.prototype.change;
    /** @type {?} */
    NgxPrettyCheckboxWillChangeComponent.prototype.stroke;
    /** @type {?} */
    NgxPrettyCheckboxWillChangeComponent.prototype.shape;
    /** @type {?} */
    NgxPrettyCheckboxWillChangeComponent.prototype.animation;
    /** @type {?} */
    NgxPrettyCheckboxWillChangeComponent.prototype.color;
    /** @type {?} */
    NgxPrettyCheckboxWillChangeComponent.prototype.outline;
    /** @type {?} */
    NgxPrettyCheckboxWillChangeComponent.prototype.checked;
    /** @type {?} */
    NgxPrettyCheckboxWillChangeComponent.prototype.disabled;
    /** @type {?} */
    NgxPrettyCheckboxWillChangeComponent.prototype.value;
    /** @type {?} */
    NgxPrettyCheckboxWillChangeComponent.prototype.isSwitch;
    /** @type {?} */
    NgxPrettyCheckboxWillChangeComponent.prototype.lock;
    /** @type {?} */
    NgxPrettyCheckboxWillChangeComponent.prototype.bigger;
    /** @type {?} */
    NgxPrettyCheckboxWillChangeComponent.prototype.enableFocus;
    /** @type {?} */
    NgxPrettyCheckboxWillChangeComponent.prototype.plain;
    /** @type {?} */
    NgxPrettyCheckboxWillChangeComponent.prototype._toggleComp;
    /** @type {?} */
    NgxPrettyCheckboxWillChangeComponent.prototype._toggleWillChangeComp;
    /** @type {?} */
    NgxPrettyCheckboxWillChangeComponent.prototype._iconElem;
    /** @type {?} */
    NgxPrettyCheckboxWillChangeComponent.prototype._svgElem;
    /** @type {?} */
    NgxPrettyCheckboxWillChangeComponent.prototype._imageElem;
    /** @type {?} */
    NgxPrettyCheckboxWillChangeComponent.prototype._hoverWillChangeDir;
    /** @type {?} */
    NgxPrettyCheckboxWillChangeComponent.prototype._hoverComp;
    /** @type {?} */
    NgxPrettyCheckboxWillChangeComponent.prototype._indeterminateComp;
    /** @type {?} */
    NgxPrettyCheckboxWillChangeComponent.prototype._indeterminateWillChangeComp;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyCheckboxWillChangeComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,