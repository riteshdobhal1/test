# Infoserver provides a REST API for securely accessing and analyzing parsed data stored in Cassandra and SolrCloud.
# This file defines all the URIs that InfoServers serves. It includes both URIs used by Glassbeam developers and external developers.
# URIs for internal-use only are marked with the comment INTERNAL

# INTERNAL: home page
OPTIONS /                                                                               controllers.Application.options(path="")
OPTIONS /*path                                                                          controllers.Application.options(path)

GET     /                           							controllers.Application.index()
GET 	/login/index.html                                                               controllers.Application.index()    
GET     /assets/users                                                                   controllers.Application.index()
GET     /assets/roles                                                                   controllers.Application.index()
GET     /assets/endcustomers                                                            controllers.Application.index()
GET     /assets/login                                                             	controllers.Application.index()
GET     /assets/null                                                                   controllers.Application.index()
GET     /assets/create-password                                                         controllers.Application.index()
GET     /assets/create-password/:token_id/:email/:domain                                        controllers.Application.createpwd(token_id: String,email: String,domain: String)
#GET     /assets/*file                                                                   Assets.at("public", "index.html")
#GET     /api/summary                							controllers.HomeController.appSummary
#GET     /*file                      							controllers.FrontendController.assetOrDefault(file)

GET     /:version/home/visitor                                                          controllers.Application.vHome(version: String)
GET     /:version/home/user                                                             controllers.Application.uHome(version: String)
GET     /:version/monitor                                                               controllers.Application.monitor(version: String)

# SSO Old Url link

GET     /gb/ui/prod/sso/testsso.cgi           											controllers.CGIHandler.forward(serialNumber:Option[String],cust_name:Option[String], db: Option[String],sessionId: Option[String],serverUrl: Option[String],dashboardId: Option[String])	

GET     /:version/startsso/:mfr/:prod/:domain                                           controllers.Callback.callback(version:String, mfr:String, prod:String, domain: String, code: Option[String])

# Authentication
POST    /:version/aa/login                                                              controllers.Application.login(version: String)
POST    /:version/aa/uilogin                                                            controllers.Application.uiLogin(version: String)
# POST    /:version/aa/uiloginnew                                                            controllers.Application.uiLoginNew(version: String)
GET     /:version/aa/logout                                                             controllers.Application.logout(version: String, mps: Option[String], feature: Option[String])

POST    /:version/aa/app_login                                                          controllers.Application.appLogin(version: String)

POST    /:version/aa/verifyOTP                                                          controllers.Application.verifyOTP(version: String)
POST    /:version/aa/resendOTP                                                          controllers.Application.resendOTP(version: String)

# mobile user token validation
POST    /:version/aa/validate/access_token                                              controllers.Application.validateAccessToken(version: String)

# update user if login is successfull
POST    /:version/aa/updateloginsuccess                                                 controllers.Application.updateLoginSuccess(version: String)

# INTERNAL-ONLY: XDomain
GET     /:version/xproxy                                                                controllers.Application.xProxy(version: String)

# INTERNAL: end-customer management
GET     /:version/admin/ec/list                                 controllers.AdminCustomer.list(version: String, is_request: Option[Boolean])
GET     /:version/admin/ec/add                                  controllers.AdminCustomer.addForm(version: String)
POST    /:version/admin/ec/add                                  controllers.AdminCustomer.add(version: String)
POST    /:version/admin/ec/delete/:mfr/:prod/:sch/:ec/:realm    controllers.AdminCustomer.delete(version: String, mfr: String, prod: String, sch: String, ec: String, realm: String)
GET     /:version/mpse/config/details/:mfr/:prod/:sch/:ec       controllers.AdminCustomer.getMpseInfo(version: String, mfr: String, prod: String, sch: String, ec: String)
GET     /:version/healthcheck/ec/details/:mfr/:prod/:sch        controllers.AdminCustomer.ecHealthCheck(version: String, mfr: String, prod: String, sch: String, user: Option[String], fnCallSrcOpt: Option[String])
GET     /:version/healthcheck/ec/details/:mfr        			controllers.AdminCustomer.ecHealthCheckMfr(version: String, mfr: String, user:Option[String], fnCallSrcOpt: Option[String])
POST    /:version/healthcheck/ec/add/:mfr/:prod/:sch        	controllers.AdminCustomer.ecHealthCheckAdd(version: String, mfr: String, prod: String, sch: String)
POST    /:version/healthcheck/ec/update/:mfr/:prod/:sch        	controllers.AdminCustomer.ecHealthCheckUpdate(version: String, mfr: String, prod: String, sch: String)
POST    /:version/healthcheck/ec/addUser/:mfr/:prod/:sch        	controllers.AdminCustomer.ecHealthCheckAddUser(version: String, mfr: String, prod: String, sch: String)
POST    /:version/healthcheck/ec/updateUser/:mfr/:prod/:sch        	controllers.AdminCustomer.ecHealthCheckUpdateUser(version: String, mfr: String, prod: String, sch: String)
POST    /:version/healthcheck/ec/delete/:mfr/:prod/:sch        	controllers.AdminCustomer.ecHealthCheckDelete(version: String, mfr: String, prod: String, sch: String)
POST    /:version/healthcheck/ec/delete/:mfr        	        controllers.AdminCustomer.ecHealthCheckDeleteMFr(version: String, mfr: String)
GET     /:version/analytics/system/ec/list/:mfr/:prod/:sch/:ec/:st/:en                  controllers.AdminCustomer.ecSystemsListFiltered(version: String, mfr: String, prod: String, sch: String, ec: String, st:Int, en:Int, pattern: Option[String], rt: Option[String])

# INTERNAL: manufacturer management
GET     /:version/admin/mfr/list                          controllers.AdminMfr.list(version: String, is_request: Option[Boolean])
GET     /:version/admin/mfr/listall                       controllers.AdminMfr.listall(version: String)
GET     /:version/admin/mfr/add                           controllers.AdminMfr.addForm(version: String)
POST    /:version/admin/mfr/add 	              	  	  controllers.AdminMfr.add(version: String)
POST    /:version/admin/mfr/addmfr/:mfr   	              controllers.AdminMfr.addmfr(version: String,mfr: String)
POST    /:version/admin/mfr/delete/:mfr                   controllers.AdminMfr.delete(version: String, mfr: String)
POST    /:version/admin/mfr/realm/add/:mfr                controllers.AdminMfr.manageRealm(version: String, mfr: String)
POST    /:version/admin/mfr/realm/edit/:mfr               controllers.AdminMfr.manageRealm(version: String, mfr: String)
GET	    /:version/admin/mfr/realm/list/:mfr               controllers.AdminMfr.listRealm(version: String, mfr: String)
POST    /:version/admin/mfr/defaultfeature/add/:mfr       controllers.AdminMfr.manageDefaultFeature(version: String, mfr: String)
POST    /:version/admin/mfr/defaultfeature/edit/:mfr      controllers.AdminMfr.manageDefaultFeature(version: String, mfr: String)
GET	    /:version/admin/mfr/defaultfeature/list/:mfr      controllers.AdminMfr.listDefaultFeature(version: String, mfr: String)
POST    /:version/admin/mfr/uiconfig/add/:mfr      		  controllers.AdminMfr.manageUiConfig(version: String, mfr: String)
POST    /:version/admin/mfr/uiconfig/edit/:mfr      	  controllers.AdminMfr.manageUiConfig(version: String, mfr: String)
GET	    /:version/admin/mfr/uiconfig/list/:mfr      	  controllers.AdminMfr.listUiConfig(version: String, mfr: String)


# INTERNAL: Realm management

POST	/:version/admin/realm/add						  controllers.AdminRealm.add(version: String)
POST	/:version/admin/realm/edit				  		  controllers.AdminRealm.edit(version: String)
GET		/:version/admin/realm/list						  controllers.AdminRealm.list(version: String)
POST	/:version/admin/realm/delete/:realm				  controllers.AdminRealm.delete(version: String, realm: String)


# INTERNAL: user management
GET     /:version/admin/user/list                              controllers.AdminUser.list(version: String)
GET     /:version/admin/user/list/:mfr                         controllers.AdminUser.listByOrg(version: String, mfr: String)

GET     /:version/admin/usermanagement/list/:mfr                         controllers.AdminUser.listByMfr(version: String, mfr: String)


GET     /:version/admin/user/add                               controllers.AdminUser.addForm(version: String)
POST    /:version/admin/user/add                               controllers.AdminUser.add(version: String)
POST    /:version/admin/customer/user/add/:mfr                 controllers.AdminUser.addCustomerUserAdmin(version: String, mfr: String)
POST    /:version/admin/customer/user/edit/:usr/:mfr           controllers.AdminUser.editCustomerUserAdmin(version: String, usr: String, mfr: String)
GET     /:version/admin/user/edit/:usr/:mfr                    controllers.AdminUser.editForm(version: String, usr: String, mfr: String)
POST    /:version/admin/user/edit/:usr/:mfr                    controllers.AdminUser.edit(version: String, usr: String, mfr: String)
POST    /:version/admin/user/remove/:usr/:mfr                  controllers.AdminUser.remove(version: String, usr: String, mfr: String)
GET     /:version/admin/users/edit/:mfr/:emails                controllers.AdminUser.editMultiForm(version: String, mfr: String, emails: String)
POST    /:version/admin/users/edit/:mfr                        controllers.AdminUser.editMulti(version: String, mfr: String)

POST    /:version/user/create/passwd         	               controllers.AdminUser.createPasswd(version: String)
POST    /:version/user/forgot/passwd/:usr         	           controllers.AdminUser.forgotPasswd(version: String, usr: String)
POST    /:version/user/change/passwd/:mfr                      controllers.AdminUser.changePasswd(version: String, mfr: String)
POST    /:version/user/update/defaults/:mfr                    controllers.AdminUser.updateDefaults(version: String, mfr: String)
GET     /:version/user/exists/:mfr/:userid                     controllers.AdminUser.byEmail(version: String, mfr: String, userid: String)
POST    /:version/user/disable/info/:mfr                       controllers.AdminUser.disableInfo(version: String, mfr: String)
POST    /:version/user/eventexport/:limit/:mfr                 controllers.AdminUser.exportLimit(version: String,limit: Int,mfr: String)
POST    /:version/user/reset/passwd/:mfr         	           controllers.AdminUser.resetPasswd(version: String,mfr: String)
GET     /:version/user/dashboardadmin/:mfr/:prod/:sch/:userid  controllers.AdminUser.isDashboardAdmin(version: String, mfr: String, prod: String, sch: String, userid: String)
GET     /:version/user/dashboardadmin/:mfr/:prod/:sch    controllers.AdminUser.getDashboardAdminUsers(version: String, mfr: String, prod: String, sch: String)
GET     /:version/user/tableauadmin/:mfr/:prod/:sch    controllers.AdminUser.getTableauAdminUsers(version: String, mfr: String, prod: String, sch: String)


POST    /:version/customer/user/add/:mfr                        controllers.AdminUser.addCustomerUser(version: String, mfr: String)
GET     /:version/customer/user/list/:mfr                       controllers.AdminUser.listCustomerUsers(version: String, mfr: String)
GET     /:version/customer/user/listnonsso/:mfr                 controllers.AdminUser.listCustomerUsersNonSso(version: String, mfr: String)
GET     /:version/customer/user/listsso/:mfr                 controllers.AdminUser.listCustomerUsersSso(version: String, mfr: String)
GET     /:version/customer/user/listrulecreator/:mfr/:prod/:sch            controllers.AdminUser.listCustomerUsersRuleCreator(version: String, mfr: String, prod: String, sch: String)
POST    /:version/customer/user/remove/:usr/:mfr                controllers.AdminUser.removeCustomerUsers(version: String, usr: String, mfr: String)
GET     /:version/customer/user/regenerate/verification/:email  controllers.AdminUser.regenerateVerificationEmail(version, email)
POST    /:version/customer/user/disable/:usr/:mfr               controllers.AdminUser.disableCustomerUsers(version: String, usr: String, mfr: String)
POST    /:version/customer/user/enable/:usr/:mfr               controllers.AdminUser.enableCustomerUsers(version: String, usr: String, mfr: String)
POST    /:version/customer/user/modify/:mfr               controllers.AdminUser.modifyCustomerUser(version: String, mfr: String)
POST    /:version/customer/user/bulk_update/:mfr               controllers.AdminUser.bulkUpdateCustomerUser(version: String, mfr: String)
POST    /:version/customer/user/bulk_delete/:mfr               controllers.AdminUser.bulkDeleteCustomerUser(version: String, mfr: String)


# INTERNAL: role management
GET     /:version/admin/role/add                                              controllers.AdminRole.addForm(version: String)
POST    /:version/admin/role/add/:roleName                                    controllers.AdminRole.addDomain(version: String, roleName: String)
POST    /:version/admin/role/edit/:roleName/:domain/:permissions/:mps/:realm  controllers.AdminRole.edit(version: String, roleName: String,domain:String, permissions: String, mps: String, realm: String)
POST    /:version/admin/role/add				                              controllers.AdminRole.add(version: String)
POST    /:version/admin/usermanagement/role/add/:mfr				          controllers.AdminRole.addrole(version: String,mfr: String)
POST    /:version/admin/usermanagement/role/modify/:mfr				          controllers.AdminRole.modifyRole(version: String,mfr: String)
POST    /:version/admin/usermanagement/role/bulk_update/:mfr				  controllers.AdminRole.bulkUpdateRoleProducts(version: String, mfr: String)
GET     /:version/admin/role/list                                             controllers.AdminRole.list(version: String)
GET 	/:version/admin/usermanagement/role/list/:mfr                            controllers.AdminRole.listall(version: String, mfr: String)
POST    /:version/admin/role/delete/:roleName                                 controllers.AdminRole.delete(version: String, roleName: String)
POST    /:version/admin/usermanagement/role/delete/:roleName/:mfr                  controllers.AdminRole.deleterole(version: String, roleName: String, mfr: String)
POST    /:version/admin/usermanagement/role/product/delete/:roleName/:mfr/:prod/:sch       controllers.AdminRole.deleteRoleProduct(version: String, roleName: String, mfr: String, prod: String, sch: String)
GET     /:version/admin/role/domains/:mfr/:roleName                           controllers.AdminRole.domainsList(version: String, mfr: String, roleName:String)
GET     /:version/admin/role/user/details/:mfr/:prod/:sch                     controllers.AdminRole.userDetails(version: String,mfr:String,prod,sch:String)
GET     /:version/admin/role/names/:mfr/:prod/:sch                			  controllers.AdminRole.listRoles(version: String,mfr:String,prod:String,sch:String)
GET     /:version/admin/role/healthcheck/names/:mfr/:prod/:sch                controllers.AdminRole.listHealthCheckRoles(version: String,mfr:String,prod:String,sch:String)
POST    /:version/admin/tableau/tableauUpdateRole/:mfr/:prod/:sch             controllers.AdminRole.tableauUpdateRole(version: String, mfr: String, prod: String, sch: String)
POST    /:version/admin/tableau/tableauAddUpdateUsers/:mfr/:prod/:sch         controllers.AdminRole.tableauAddUpdateUsers(version: String, mfr: String, prod: String, sch: String)
POST    /:version/admin/tableau/tableauDeleteUsers/:mfr/:prod/:sch            controllers.AdminRole.tableauDeleteUsers(version: String, mfr: String, prod: String, sch: String)
GET     /:version/admin/tableau/configured/:mfr/:prod/:sch                    controllers.AdminRole.isTableauConfigured(version: String, mfr: String, prod: String, sch: String)

# INTERNAL: SSO
GET     /:version/sso/soap/:mfr/:prod/:domain                                         controllers.SSOSoap.getUserInfo(version: String, mfr: String, prod: String, domain: String, sessionId: String, serverUrl: String, additional_params: String ?= null)
GET     /:version/sso/ping/:mfr/:prod/:domain									      controllers.SSOPingone.getUserInfo(version: String, mfr: String, prod: String, domain: String, tokenid: String, agentid: String)
#POST     /:version/sso/saml                                                                        controllers.SSOSAMLAssertionHandlerJ.getUserInfo(version: String)
GET     /:version/sso/ping/:mfr/:prod/:domain/:dashboardId						      controllers.SSOPingoneEmbedded.getUserInfo(version: String, mfr: String, prod: String, domain: String, dashboardId:String, tokenid: String, agentid: String)
# INTERNAL: User Tracking
POST 	/:version/user_tracking/:mfr/:prod/:sch/:app/:module/:activity              controllers.Application.trackUser(version: String, mfr: String, prod: String, sch: String, app: String, module: String, activity: String, switched_feature: Option[String])
GET     /:version/user_tracking/:mfr/:prod/:sch/:ec/:st/:et                         controllers.AdminUser.tsUserTracking(version: String, mfr: String, prod: String, sch: String, ec: String, st: String, et: String, col: List[String], filter: Option[String], aggr: Option[String], groupby: Option[String], orderby: Option[String], limit: Option[Integer])

# INTERNAL: Allows sql query through URI
GET     /:version/analytics/:sqlQuery                                                             controllers.Analytics.sql(version: String, sqlQuery: String)
GET     /:version/spark/refresh                                                                   controllers.Analytics.refreshSpark(version: String)
# INTERNAL: URI for HiveQL queries
GET     /:version/analytics/hql/:hqlQuery                                                         controllers.Analytics.hql(version: String, hqlQuery: String)

# VERTICA DETAILS FOR MPS REALM

GET		/:version/realm/:mfr/:prod/:sch						  						controllers.AdminRealm.realmInfo(version: String,mfr:String,prod:String,sch:String)
           
# INTERNAL: Map static resources from the /public folder to the /assets URL path
GET     /assets/*file                                 controllers.Assets.at(path="/public", file)

# Clinsight APIs
POST    /:version/create/email                                                       controllers.Clinsight.createMailWrapper(version: String)
GET     /:version/clinsight                                                          controllers.Clinsight.clinsightView(version: String)
POST    /:version/cs/login                                                           controllers.Clinsight.login(version: String)
POST    /:version/cs/userdetails                                                     controllers.Clinsight.getUserDetails(version: String)
POST    /:version/setdefaultmps                                                      controllers.Clinsight.setDefaultMPS(version: String)
POST    /:version/cs/campaign/user/add                                               controllers.Clinsight.registerProspect(version: String)
GET     /:version/cs/campaign/user/verification                                      controllers.Clinsight.verifyProspect(version: String, email: String, token_id: String)
GET     /:version/cs/campaign/user/regenerate/verification/:email                    controllers.Clinsight.regenerateVerificationEmail(version: String, email: String)
GET     /:version/cs/registration                                                    controllers.Clinsight.clinsightRegistrationView(version: String)
POST    /:version/user_info/delete/device_info                                       controllers.Clinsight.deleteUserDeviceInfo(version: String)
POST    /:version/user_info/update/device_info                                       controllers.Clinsight.updateUserDeviceInfo(version: String)
POST    /:version/decrypt                                                            controllers.AdminUser.decryptUser(version: String)
GET     /:version/tableau/user/:mfr/:prod/:sch/:email                                controllers.AdminUser.getTableauUsername(version: String, mfr: String, prod: String, sch: String, email: String)
GET     /:version/cs/role/user/details/:mfr/:prod/:sch                               controllers.AdminRole.userRoleDetails(version: String,mfr:String,prod,sch:String)
# Clinsight Menu APIs
GET     /:version/cs/master/menu/tree/:mfr                                           controllers.ClinsightMenu.clinsightsMasterTree(version: String, mfr: String)
GET     /:version/cs/mps/menu/tree/:mfr/:prod/:sch                                   controllers.ClinsightMenu.clinsightsMpsTree(version: String, mfr: String, prod: String, sch: String, user: Option[String], clinsights_role_id: Option[Long])
GET     /:version/cs/mps/menu/flat_json/:mfr/:prod/:sch                         controllers.ClinsightMenu.clinsightsMpsFlatMenu(version: String, mfr: String, prod: String, sch: String, user: Option[String], clinsights_role_id: Option[Long])
POST    /:version/cs/:operation_type/mps/menu/node/hide/:mfr                         controllers.ClinsightMenu.clinsightsMpsNodeHide(version: String, operation_type: String, mfr: String)
POST    /:version/cs/:operation_type/mps/menu/node/disable/:mfr                      controllers.ClinsightMenu.clinsightsMpsNodeDisable(version: String, operation_type: String, mfr: String)
POST    /:version/cs/:operation_type/role/menu/node/hide/:mfr/:prod/:sch             controllers.ClinsightMenu.clinsightsRoleNodeHide(version: String, operation_type: String, mfr: String, prod: String, sch: String)
POST    /:version/cs/:operation_type/role/menu/node/disable/:mfr/:prod/:sch          controllers.ClinsightMenu.clinsightsRoleNodeDisable(version: String, operation_type: String, mfr: String, prod: String, sch: String)
POST    /:version/cs/mobile/login                                                    controllers.Clinsight.mobileLogin(version: String)
POST    /:version/cs/mobile/userdetails/:mfr/:prod/:sch                              controllers.Clinsight.getUserMpsDetails(version: String, mfr: String, prod: String, sch: String)

# vertica select query
GET     /:version/db/:sqlQuery                                                       controllers.SqlHelper.getQueryDB(version: String, sqlQuery: String)
POST    /:version/db                                                                 controllers.SqlHelper.queryDB(version: String)

# sysids APIs
POST    /:version/bundle/system_info/ec/list/:mfr/:prod/:sch/:ec/:st/:en             controllers.AdminCustomer.ecSystemsListData(version: String, mfr: String, prod: String, sch: String, ec: String, st:Int, en:Int)
GET     /:version/bundle/system_cols_info/ec/list/:mfr/:prod/:sch                    controllers.AdminCustomer.ecSystemsColsListData(version: String, mfr: String, prod: String, sch: String)
POST    /:version/bundle/available_system_info/ec/list/:mfr/:prod/:sch               controllers.AdminCustomer.ecAvailableSystemsListData(version: String, mfr: String, prod: String, sch: String)
GET     /:version/user/ec/available_system_info/:mfr/:prod/:sch/:email               controllers.AdminCustomer.userECAvailableSystemsListData(version: String, mfr: String, prod: String, sch: String, email: String)
POST    /:version/user/ec/system_info/list/:mfr/:prod/:sch/:email/:st/:en            controllers.AdminCustomer.userEcSystemsListData(version: String, mfr: String, prod: String, sch: String, email: String, st:Int, en:Int)

# Rule's subscription APIs
GET     /:version/rules/alerts/filters/list/:mfr/:prod/:sch                           controllers.RulesAlerts.alertFilterList(version: String, mfr: String, prod: String, sch: String, ruleId: Option[Long], user: Option[String])
POST    /:version/rules/alerts/filters/add_update/:mfr/:prod/:sch                     controllers.RulesAlerts.addUpdateAlertFiltersAtributes(version: String, mfr: String, prod: String, sch: String)
POST    /:version/rules/alerts/filters/bulk_rules_delete/:mfr/:prod/:sch              controllers.RulesAlerts.bulkRulesDeleteAlertFiltersAtributes(version: String, mfr: String, prod: String, sch: String)
POST    /:version/rules/alerts/filters/bulk_users_delete/:mfr/:prod/:sch              controllers.RulesAlerts.bulkUsersDeleteAlertFiltersAtributes(version: String, mfr: String, prod: String, sch: String)
POST    /:version/rules/alerts/filters/group/users/notification/:mfr/:prod/:sch       controllers.RulesAlerts.sendNotification(version: String, mfr: String, prod: String, sch: String)

# Push Notification APIs
GET     /:version/notification/list/:mfr/:prod/:sch/:email                            controllers.Notification.notificationList(version: String, mfr: String, prod: String, sch: String, email: String, deleted: Option[Boolean], read: Option[Boolean])
GET     /:version/notification/list/:mfr/:prod/:sch/:email/:st/:en                    controllers.Notification.notificationPaginationList(version: String, mfr: String, prod: String, sch: String, email: String, st: Int, en: Int, deleted: Option[Boolean], read: Option[Boolean])
POST    /:version/notification/bulk_update/read/:mfr/:prod/:sch/:email/:read          controllers.Notification.updateNotificationsReadTime(version: String, mfr: String, prod: String, sch: String, email: String, read: Boolean)
POST    /:version/notification/bulk_update/delete/:mfr/:prod/:sch/:email/:delete      controllers.Notification.updateNotificationsDeletedTime(version: String, mfr: String, prod: String, sch: String, email: String, delete: Boolean)
POST    /:version/notification/mark_all/read/:mfr/:prod/:sch/:email/:read             controllers.Notification.markAllNotificationsReadTime(version: String, mfr: String, prod: String, sch: String, email: String, read: Boolean)
POST    /:version/notification/mark_all/delete/:mfr/:prod/:sch/:email/:delete         controllers.Notification.markAllNotificationsDeletedTime(version: String, mfr: String, prod: String, sch: String, email: String, delete: Boolean)
