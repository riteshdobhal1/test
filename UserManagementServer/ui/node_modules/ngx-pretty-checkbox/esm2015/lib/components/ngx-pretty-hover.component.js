/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable:use-host-property-decorator
import { Component, ElementRef, Renderer2, ChangeDetectionStrategy, Attribute } from '@angular/core';
import { DEFAULT_PREFIX, DEFAULT_OUTLINE_PREFIX } from '../model/params';
import { PrettyCheckboxColor } from '../model/interfaces';
export class NgxPrettyHoverComponent {
    /**
     * @param {?} el
     * @param {?} renderer
     * @param {?=} _outline
     * @param {?=} _color
     */
    constructor(el, renderer, _outline = false, _color) {
        this.el = el;
        this.renderer = renderer;
        this._outline = _outline;
        this._color = _color;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this._color) {
            this.renderer.addClass(this.el.nativeElement, `${DEFAULT_PREFIX}${this._color}${this._outline ? DEFAULT_OUTLINE_PREFIX : ''}`);
        }
    }
}
NgxPrettyHoverComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-p-hover:not([will-change]), p-hover:not([will-change])',
                template: `
    <ng-content select="[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]"></ng-content>
    <label><ng-content></ng-content></label>
  `,
                host: {
                    class: `state ${DEFAULT_PREFIX}is-hover`
                },
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
NgxPrettyHoverComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: undefined, decorators: [{ type: Attribute, args: ['outline',] }] },
    { type: PrettyCheckboxColor, decorators: [{ type: Attribute, args: ['color',] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxPrettyHoverComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyHoverComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyHoverComponent.prototype._outline;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyHoverComponent.prototype._color;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXByZXR0eS1ob3Zlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcHJldHR5LWNoZWNrYm94LyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvbmd4LXByZXR0eS1ob3Zlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFQSxPQUFPLEVBQUUsU0FBUyxFQUFTLFVBQVUsRUFBRSxTQUFTLEVBQWdDLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxSSxPQUFPLEVBQUUsY0FBYyxFQUFFLHNCQUFzQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDekUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFjMUQsTUFBTSxPQUFPLHVCQUF1Qjs7Ozs7OztJQUVsQyxZQUNVLEVBQWMsRUFDZCxRQUFtQixFQUNHLFdBQVcsS0FBSyxFQUNoQixNQUEyQjtRQUhqRCxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQ2QsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUNHLGFBQVEsR0FBUixRQUFRLENBQVE7UUFDaEIsV0FBTSxHQUFOLE1BQU0sQ0FBcUI7SUFDdkQsQ0FBQzs7OztJQUVMLGVBQWU7UUFDYixJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDZixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFDMUMsR0FBRyxjQUFjLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQ2hGLENBQUM7U0FDSDtJQUNILENBQUM7OztZQTFCRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLDREQUE0RDtnQkFDdEUsUUFBUSxFQUFFOzs7R0FHVDtnQkFDRCxJQUFJLEVBQUU7b0JBQ0osS0FBSyxFQUFFLFNBQVMsY0FBYyxVQUFVO2lCQUN6QztnQkFDRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTthQUNoRDs7OztZQWYwQixVQUFVO1lBQUUsU0FBUzs0Q0FxQjNDLFNBQVMsU0FBQyxTQUFTO1lBbkJmLG1CQUFtQix1QkFvQnZCLFNBQVMsU0FBQyxPQUFPOzs7Ozs7O0lBSGxCLHFDQUFzQjs7Ozs7SUFDdEIsMkNBQTJCOzs7OztJQUMzQiwyQ0FBOEM7Ozs7O0lBQzlDLHlDQUF5RCIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRzbGludDpkaXNhYmxlOnVzZS1ob3N0LXByb3BlcnR5LWRlY29yYXRvclxyXG5cclxuaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBTaW1wbGVDaGFuZ2VzLCBBZnRlclZpZXdJbml0LCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQXR0cmlidXRlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERFRkFVTFRfUFJFRklYLCBERUZBVUxUX09VVExJTkVfUFJFRklYIH0gZnJvbSAnLi4vbW9kZWwvcGFyYW1zJztcclxuaW1wb3J0IHsgUHJldHR5Q2hlY2tib3hDb2xvciB9IGZyb20gJy4uL21vZGVsL2ludGVyZmFjZXMnO1xyXG5pbXBvcnQgeyBnZXRDb2xvckNsYXNzTmFtZSB9IGZyb20gJy4uL3V0aWxpdHknO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICduZ3gtcC1ob3Zlcjpub3QoW3dpbGwtY2hhbmdlXSksIHAtaG92ZXI6bm90KFt3aWxsLWNoYW5nZV0pJyxcclxuICB0ZW1wbGF0ZTogYFxyXG4gICAgPG5nLWNvbnRlbnQgc2VsZWN0PVwiW3BJY29uXSwgW3AtaWNvbl0sIFtwU3ZnXSwgW3Atc3ZnXSwgW3BJbWFnZV0sIFtwLWltYWdlXVwiPjwvbmctY29udGVudD5cclxuICAgIDxsYWJlbD48bmctY29udGVudD48L25nLWNvbnRlbnQ+PC9sYWJlbD5cclxuICBgLFxyXG4gIGhvc3Q6IHtcclxuICAgIGNsYXNzOiBgc3RhdGUgJHtERUZBVUxUX1BSRUZJWH1pcy1ob3ZlcmBcclxuICB9LFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ3hQcmV0dHlIb3ZlckNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsXHJcbiAgICBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIsXHJcbiAgICBAQXR0cmlidXRlKCdvdXRsaW5lJykgcHJpdmF0ZSBfb3V0bGluZSA9IGZhbHNlLFxyXG4gICAgQEF0dHJpYnV0ZSgnY29sb3InKSAgIHByaXZhdGUgX2NvbG9yOiBQcmV0dHlDaGVja2JveENvbG9yLFxyXG4gICkgeyB9XHJcblxyXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgIGlmICh0aGlzLl9jb2xvcikge1xyXG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuZWwubmF0aXZlRWxlbWVudCxcclxuICAgICAgICBgJHtERUZBVUxUX1BSRUZJWH0ke3RoaXMuX2NvbG9yfSR7dGhpcy5fb3V0bGluZSA/IERFRkFVTFRfT1VUTElORV9QUkVGSVggOiAnJ31gXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuXHJcbn1cclxuIl19