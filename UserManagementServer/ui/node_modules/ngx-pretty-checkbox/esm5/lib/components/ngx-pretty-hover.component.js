/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable:use-host-property-decorator
import { Component, ElementRef, Renderer2, ChangeDetectionStrategy, Attribute } from '@angular/core';
import { DEFAULT_PREFIX, DEFAULT_OUTLINE_PREFIX } from '../model/params';
import { PrettyCheckboxColor } from '../model/interfaces';
var NgxPrettyHoverComponent = /** @class */ (function () {
    function NgxPrettyHoverComponent(el, renderer, _outline, _color) {
        if (_outline === void 0) { _outline = false; }
        this.el = el;
        this.renderer = renderer;
        this._outline = _outline;
        this._color = _color;
    }
    /**
     * @return {?}
     */
    NgxPrettyHoverComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this._color) {
            this.renderer.addClass(this.el.nativeElement, "" + DEFAULT_PREFIX + this._color + (this._outline ? DEFAULT_OUTLINE_PREFIX : ''));
        }
    };
    NgxPrettyHoverComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-p-hover:not([will-change]), p-hover:not([will-change])',
                    template: "\n    <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\n    <label><ng-content></ng-content></label>\n  ",
                    host: {
                        class: "state " + DEFAULT_PREFIX + "is-hover"
                    },
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    NgxPrettyHoverComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: undefined, decorators: [{ type: Attribute, args: ['outline',] }] },
        { type: PrettyCheckboxColor, decorators: [{ type: Attribute, args: ['color',] }] }
    ]; };
    return NgxPrettyHoverComponent;
}());
export { NgxPrettyHoverComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxPrettyHoverComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyHoverComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyHoverComponent.prototype._outline;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyHoverComponent.prototype._color;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXByZXR0eS1ob3Zlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcHJldHR5LWNoZWNrYm94LyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvbmd4LXByZXR0eS1ob3Zlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFQSxPQUFPLEVBQUUsU0FBUyxFQUFTLFVBQVUsRUFBRSxTQUFTLEVBQWdDLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxSSxPQUFPLEVBQUUsY0FBYyxFQUFFLHNCQUFzQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDekUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFHMUQ7SUFhRSxpQ0FDVSxFQUFjLEVBQ2QsUUFBbUIsRUFDRyxRQUFnQixFQUNoQixNQUEyQjtRQUQzQix5QkFBQSxFQUFBLGdCQUFnQjtRQUZ0QyxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQ2QsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUNHLGFBQVEsR0FBUixRQUFRLENBQVE7UUFDaEIsV0FBTSxHQUFOLE1BQU0sQ0FBcUI7SUFDdkQsQ0FBQzs7OztJQUVMLGlEQUFlOzs7SUFBZjtRQUNFLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNmLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUMxQyxLQUFHLGNBQWMsR0FBRyxJQUFJLENBQUMsTUFBTSxJQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUUsQ0FDaEYsQ0FBQztTQUNIO0lBQ0gsQ0FBQzs7Z0JBMUJGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsNERBQTREO29CQUN0RSxRQUFRLEVBQUUsc0pBR1Q7b0JBQ0QsSUFBSSxFQUFFO3dCQUNKLEtBQUssRUFBRSxXQUFTLGNBQWMsYUFBVTtxQkFDekM7b0JBQ0QsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQ2hEOzs7O2dCQWYwQixVQUFVO2dCQUFFLFNBQVM7Z0RBcUIzQyxTQUFTLFNBQUMsU0FBUztnQkFuQmYsbUJBQW1CLHVCQW9CdkIsU0FBUyxTQUFDLE9BQU87O0lBWXRCLDhCQUFDO0NBQUEsQUE3QkQsSUE2QkM7U0FsQlksdUJBQXVCOzs7Ozs7SUFHaEMscUNBQXNCOzs7OztJQUN0QiwyQ0FBMkI7Ozs7O0lBQzNCLDJDQUE4Qzs7Ozs7SUFDOUMseUNBQXlEIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHNsaW50OmRpc2FibGU6dXNlLWhvc3QtcHJvcGVydHktZGVjb3JhdG9yXHJcblxyXG5pbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBFbGVtZW50UmVmLCBSZW5kZXJlcjIsIFNpbXBsZUNoYW5nZXMsIEFmdGVyVmlld0luaXQsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBBdHRyaWJ1dGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgREVGQVVMVF9QUkVGSVgsIERFRkFVTFRfT1VUTElORV9QUkVGSVggfSBmcm9tICcuLi9tb2RlbC9wYXJhbXMnO1xyXG5pbXBvcnQgeyBQcmV0dHlDaGVja2JveENvbG9yIH0gZnJvbSAnLi4vbW9kZWwvaW50ZXJmYWNlcyc7XHJcbmltcG9ydCB7IGdldENvbG9yQ2xhc3NOYW1lIH0gZnJvbSAnLi4vdXRpbGl0eSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ25neC1wLWhvdmVyOm5vdChbd2lsbC1jaGFuZ2VdKSwgcC1ob3Zlcjpub3QoW3dpbGwtY2hhbmdlXSknLFxyXG4gIHRlbXBsYXRlOiBgXHJcbiAgICA8bmctY29udGVudCBzZWxlY3Q9XCJbcEljb25dLCBbcC1pY29uXSwgW3BTdmddLCBbcC1zdmddLCBbcEltYWdlXSwgW3AtaW1hZ2VdXCI+PC9uZy1jb250ZW50PlxyXG4gICAgPGxhYmVsPjxuZy1jb250ZW50PjwvbmctY29udGVudD48L2xhYmVsPlxyXG4gIGAsXHJcbiAgaG9zdDoge1xyXG4gICAgY2xhc3M6IGBzdGF0ZSAke0RFRkFVTFRfUFJFRklYfWlzLWhvdmVyYFxyXG4gIH0sXHJcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcclxufSlcclxuZXhwb3J0IGNsYXNzIE5neFByZXR0eUhvdmVyQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBlbDogRWxlbWVudFJlZixcclxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMixcclxuICAgIEBBdHRyaWJ1dGUoJ291dGxpbmUnKSBwcml2YXRlIF9vdXRsaW5lID0gZmFsc2UsXHJcbiAgICBAQXR0cmlidXRlKCdjb2xvcicpICAgcHJpdmF0ZSBfY29sb3I6IFByZXR0eUNoZWNrYm94Q29sb3IsXHJcbiAgKSB7IH1cclxuXHJcbiAgbmdBZnRlclZpZXdJbml0KCkge1xyXG4gICAgaWYgKHRoaXMuX2NvbG9yKSB7XHJcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbC5uYXRpdmVFbGVtZW50LFxyXG4gICAgICAgIGAke0RFRkFVTFRfUFJFRklYfSR7dGhpcy5fY29sb3J9JHt0aGlzLl9vdXRsaW5lID8gREVGQVVMVF9PVVRMSU5FX1BSRUZJWCA6ICcnfWBcclxuICAgICAgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG5cclxufVxyXG4iXX0=