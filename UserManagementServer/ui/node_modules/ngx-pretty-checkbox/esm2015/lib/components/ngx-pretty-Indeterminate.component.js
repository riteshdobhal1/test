/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable:use-host-property-decorator
import { Component, ElementRef, Renderer2, ChangeDetectionStrategy, Attribute } from '@angular/core';
import { DEFAULT_PREFIX, DEFAULT_OUTLINE_PREFIX } from '../model/params';
import { PrettyCheckboxColor } from '../model/interfaces';
export class NgxPrettyIndeterminateComponent {
    /**
     * @param {?} el
     * @param {?} renderer
     * @param {?=} _outline
     * @param {?=} _color
     */
    constructor(el, renderer, _outline = false, _color) {
        this.el = el;
        this.renderer = renderer;
        this._outline = _outline;
        this._color = _color;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this._color) {
            this.renderer.addClass(this.el.nativeElement, `${DEFAULT_PREFIX}${this._color}${this._outline ? DEFAULT_OUTLINE_PREFIX : ''}`);
        }
    }
}
NgxPrettyIndeterminateComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-p-indeterminate:not([will-change]), p-indeterminate:not([will-change])',
                template: `
    <ng-content select="[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]"></ng-content>
    <label><ng-content></ng-content></label>
  `,
                host: {
                    class: `state ${DEFAULT_PREFIX}is-indeterminate`
                },
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
NgxPrettyIndeterminateComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: undefined, decorators: [{ type: Attribute, args: ['outline',] }] },
    { type: PrettyCheckboxColor, decorators: [{ type: Attribute, args: ['color',] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxPrettyIndeterminateComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyIndeterminateComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyIndeterminateComponent.prototype._outline;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyIndeterminateComponent.prototype._color;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXByZXR0eS1JbmRldGVybWluYXRlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1wcmV0dHktY2hlY2tib3gvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9uZ3gtcHJldHR5LUluZGV0ZXJtaW5hdGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsT0FBTyxFQUFFLFNBQVMsRUFBUyxVQUFVLEVBQUUsU0FBUyxFQUFpQix1QkFBdUIsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0gsT0FBTyxFQUFFLGNBQWMsRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3pFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBYTFELE1BQU0sT0FBTywrQkFBK0I7Ozs7Ozs7SUFFMUMsWUFDVSxFQUFjLEVBQ2QsUUFBbUIsRUFDRyxXQUFXLEtBQUssRUFDaEIsTUFBMkI7UUFIakQsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUNkLGFBQVEsR0FBUixRQUFRLENBQVc7UUFDRyxhQUFRLEdBQVIsUUFBUSxDQUFRO1FBQ2hCLFdBQU0sR0FBTixNQUFNLENBQXFCO0lBQ3ZELENBQUM7Ozs7SUFFTCxlQUFlO1FBQ2IsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2YsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQzFDLEdBQUcsY0FBYyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsc0JBQXNCLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUNoRixDQUFDO1NBQ0g7SUFDSCxDQUFDOzs7WUExQkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSw0RUFBNEU7Z0JBQ3RGLFFBQVEsRUFBRTs7O0dBR1Q7Z0JBQ0QsSUFBSSxFQUFFO29CQUNKLEtBQUssRUFBRSxTQUFTLGNBQWMsa0JBQWtCO2lCQUNqRDtnQkFDRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTthQUNoRDs7OztZQWQwQixVQUFVO1lBQUUsU0FBUzs0Q0FvQjNDLFNBQVMsU0FBQyxTQUFTO1lBbEJmLG1CQUFtQix1QkFtQnZCLFNBQVMsU0FBQyxPQUFPOzs7Ozs7O0lBSGxCLDZDQUFzQjs7Ozs7SUFDdEIsbURBQTJCOzs7OztJQUMzQixtREFBOEM7Ozs7O0lBQzlDLGlEQUF5RCIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRzbGludDpkaXNhYmxlOnVzZS1ob3N0LXByb3BlcnR5LWRlY29yYXRvclxyXG5cclxuaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBBZnRlclZpZXdJbml0LCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQXR0cmlidXRlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERFRkFVTFRfUFJFRklYLCBERUZBVUxUX09VVExJTkVfUFJFRklYIH0gZnJvbSAnLi4vbW9kZWwvcGFyYW1zJztcclxuaW1wb3J0IHsgUHJldHR5Q2hlY2tib3hDb2xvciB9IGZyb20gJy4uL21vZGVsL2ludGVyZmFjZXMnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICduZ3gtcC1pbmRldGVybWluYXRlOm5vdChbd2lsbC1jaGFuZ2VdKSwgcC1pbmRldGVybWluYXRlOm5vdChbd2lsbC1jaGFuZ2VdKScsXHJcbiAgdGVtcGxhdGU6IGBcclxuICAgIDxuZy1jb250ZW50IHNlbGVjdD1cIltwSWNvbl0sIFtwLWljb25dLCBbcFN2Z10sIFtwLXN2Z10sIFtwSW1hZ2VdLCBbcC1pbWFnZV1cIj48L25nLWNvbnRlbnQ+XHJcbiAgICA8bGFiZWw+PG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PjwvbGFiZWw+XHJcbiAgYCxcclxuICBob3N0OiB7XHJcbiAgICBjbGFzczogYHN0YXRlICR7REVGQVVMVF9QUkVGSVh9aXMtaW5kZXRlcm1pbmF0ZWBcclxuICB9LFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOZ3hQcmV0dHlJbmRldGVybWluYXRlQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBlbDogRWxlbWVudFJlZixcclxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMixcclxuICAgIEBBdHRyaWJ1dGUoJ291dGxpbmUnKSBwcml2YXRlIF9vdXRsaW5lID0gZmFsc2UsXHJcbiAgICBAQXR0cmlidXRlKCdjb2xvcicpICAgcHJpdmF0ZSBfY29sb3I6IFByZXR0eUNoZWNrYm94Q29sb3IsXHJcbiAgKSB7IH1cclxuXHJcbiAgbmdBZnRlclZpZXdJbml0KCkge1xyXG4gICAgaWYgKHRoaXMuX2NvbG9yKSB7XHJcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbC5uYXRpdmVFbGVtZW50LFxyXG4gICAgICAgIGAke0RFRkFVTFRfUFJFRklYfSR7dGhpcy5fY29sb3J9JHt0aGlzLl9vdXRsaW5lID8gREVGQVVMVF9PVVRMSU5FX1BSRUZJWCA6ICcnfWBcclxuICAgICAgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG5cclxufVxyXG4iXX0=