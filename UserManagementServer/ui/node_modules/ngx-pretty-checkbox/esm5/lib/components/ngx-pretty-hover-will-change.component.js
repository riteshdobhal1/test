/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable:use-host-property-decorator
import { Component, Input, ElementRef, Renderer2, ChangeDetectionStrategy } from '@angular/core';
import { DEFAULT_PREFIX } from '../model/params';
import { PrettyCheckboxColor } from '../model/interfaces';
import { getColorClassName } from '../utility';
var NgxPrettyHoverWillChangeComponent = /** @class */ (function () {
    function NgxPrettyHoverWillChangeComponent(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.outline = false;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    NgxPrettyHoverWillChangeComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.color || changes.outline) {
            /** @type {?} */
            var oldClass = getColorClassName(changes.color ? changes.color.previousValue : this.color, changes.outline ? changes.outline.previousValue : null);
            /** @type {?} */
            var newClass = getColorClassName(changes.color ? changes.color.currentValue : this.color, changes.outline ? changes.outline.currentValue : null);
            this.renderer.removeClass(this.el.nativeElement, oldClass);
            this.renderer.addClass(this.el.nativeElement, newClass);
        }
    };
    NgxPrettyHoverWillChangeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-p-hover[will-change], p-hover[will-change]',
                    template: "\n    <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\n    <label><ng-content></ng-content></label>\n  ",
                    host: {
                        class: "state " + DEFAULT_PREFIX + "is-hover"
                    },
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    NgxPrettyHoverWillChangeComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    NgxPrettyHoverWillChangeComponent.propDecorators = {
        color: [{ type: Input }],
        outline: [{ type: Input }]
    };
    return NgxPrettyHoverWillChangeComponent;
}());
export { NgxPrettyHoverWillChangeComponent };
if (false) {
    /** @type {?} */
    NgxPrettyHoverWillChangeComponent.prototype.color;
    /** @type {?} */
    NgxPrettyHoverWillChangeComponent.prototype.outline;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyHoverWillChangeComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyHoverWillChangeComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXByZXR0eS1ob3Zlci13aWxsLWNoYW5nZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtcHJldHR5LWNoZWNrYm94LyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvbmd4LXByZXR0eS1ob3Zlci13aWxsLWNoYW5nZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUE0Qix1QkFBdUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzSCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDakQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sWUFBWSxDQUFDO0FBRS9DO0lBZ0JFLDJDQUNVLEVBQWMsRUFDZCxRQUFtQjtRQURuQixPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQ2QsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQUpwQixZQUFPLEdBQUcsS0FBSyxDQUFDO0lBS3JCLENBQUM7Ozs7O0lBRUwsdURBQVc7Ozs7SUFBWCxVQUFZLE9BQXNCO1FBQ2hDLElBQUksT0FBTyxDQUFDLEtBQUssSUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFOztnQkFFOUIsUUFBUSxHQUNaLGlCQUFpQixDQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUN4RCxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUN2RDs7Z0JBRUcsUUFBUSxHQUNaLGlCQUFpQixDQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUN2RCxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUN0RDtZQUVILElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQzNELElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1NBQ3pEO0lBQ0gsQ0FBQzs7Z0JBdkNGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsZ0RBQWdEO29CQUMxRCxRQUFRLEVBQUUsc0pBR1Q7b0JBQ0QsSUFBSSxFQUFFO3dCQUNKLEtBQUssRUFBRSxXQUFTLGNBQWMsYUFBVTtxQkFDekM7b0JBQ0QsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQ2hEOzs7O2dCQWYwQixVQUFVO2dCQUFFLFNBQVM7Ozt3QkFrQjdDLEtBQUs7MEJBQ0wsS0FBSzs7SUEyQlIsd0NBQUM7Q0FBQSxBQXpDRCxJQXlDQztTQTlCWSxpQ0FBaUM7OztJQUU1QyxrREFBb0M7O0lBQ3BDLG9EQUF5Qjs7Ozs7SUFHdkIsK0NBQXNCOzs7OztJQUN0QixxREFBMkIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0c2xpbnQ6ZGlzYWJsZTp1c2UtaG9zdC1wcm9wZXJ0eS1kZWNvcmF0b3JcclxuXHJcbmltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIEVsZW1lbnRSZWYsIFJlbmRlcmVyMiwgU2ltcGxlQ2hhbmdlcywgT25DaGFuZ2VzLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBERUZBVUxUX1BSRUZJWCB9IGZyb20gJy4uL21vZGVsL3BhcmFtcyc7XHJcbmltcG9ydCB7IFByZXR0eUNoZWNrYm94Q29sb3IgfSBmcm9tICcuLi9tb2RlbC9pbnRlcmZhY2VzJztcclxuaW1wb3J0IHsgZ2V0Q29sb3JDbGFzc05hbWUgfSBmcm9tICcuLi91dGlsaXR5JztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnbmd4LXAtaG92ZXJbd2lsbC1jaGFuZ2VdLCBwLWhvdmVyW3dpbGwtY2hhbmdlXScsXHJcbiAgdGVtcGxhdGU6IGBcclxuICAgIDxuZy1jb250ZW50IHNlbGVjdD1cIltwSWNvbl0sIFtwLWljb25dLCBbcFN2Z10sIFtwLXN2Z10sIFtwSW1hZ2VdLCBbcC1pbWFnZV1cIj48L25nLWNvbnRlbnQ+XHJcbiAgICA8bGFiZWw+PG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PjwvbGFiZWw+XHJcbiAgYCxcclxuICBob3N0OiB7XHJcbiAgICBjbGFzczogYHN0YXRlICR7REVGQVVMVF9QUkVGSVh9aXMtaG92ZXJgXHJcbiAgfSxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmd4UHJldHR5SG92ZXJXaWxsQ2hhbmdlQ29tcG9uZW50IGltcGxlbWVudHMgT25DaGFuZ2VzIHtcclxuXHJcbiAgQElucHV0KCkgY29sb3I6IFByZXR0eUNoZWNrYm94Q29sb3I7XHJcbiAgQElucHV0KCkgb3V0bGluZSA9IGZhbHNlO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsXHJcbiAgICBwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjJcclxuICApIHsgfVxyXG5cclxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XHJcbiAgICBpZiAoY2hhbmdlcy5jb2xvciB8fCBjaGFuZ2VzLm91dGxpbmUpIHtcclxuXHJcbiAgICAgIGNvbnN0IG9sZENsYXNzID1cclxuICAgICAgICBnZXRDb2xvckNsYXNzTmFtZShcclxuICAgICAgICAgIGNoYW5nZXMuY29sb3IgPyBjaGFuZ2VzLmNvbG9yLnByZXZpb3VzVmFsdWUgOiB0aGlzLmNvbG9yLFxyXG4gICAgICAgICAgY2hhbmdlcy5vdXRsaW5lID8gY2hhbmdlcy5vdXRsaW5lLnByZXZpb3VzVmFsdWUgOiBudWxsXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgIGNvbnN0IG5ld0NsYXNzID1cclxuICAgICAgICBnZXRDb2xvckNsYXNzTmFtZShcclxuICAgICAgICAgIGNoYW5nZXMuY29sb3IgPyBjaGFuZ2VzLmNvbG9yLmN1cnJlbnRWYWx1ZSA6IHRoaXMuY29sb3IsXHJcbiAgICAgICAgICBjaGFuZ2VzLm91dGxpbmUgPyBjaGFuZ2VzLm91dGxpbmUuY3VycmVudFZhbHVlIDogbnVsbFxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUNsYXNzKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgb2xkQ2xhc3MpO1xyXG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgbmV3Q2xhc3MpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbn1cclxuIl19