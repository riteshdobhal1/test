/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ContentChild, ContentChildren, ElementRef, EventEmitter, HostBinding, Input, Output, QueryList, ViewChild, ViewEncapsulation, Attribute, Renderer2, Optional } from '@angular/core';
import { DEFAULT_OUTLINE_PREFIX, DEFAULT_PREFIX, DEFAULT_PRETTY_CLASS_NAME } from '../model/params';
import { NgxPrettyHoverComponent } from './ngx-pretty-hover.component';
import { NgxPrettyIconDirective } from '../directives/ngx-pretty-icon.directive';
import { NgxPrettyImageDirective } from '../directives/ngx-pretty-image.directive';
import { NgxPrettySvgDirective } from '../directives/ngx-pretty-svg.directive';
import { NgxPrettyToggleComponent } from './ngx-pretty-toggle.component';
import { PrettyCheckboxAnimation, PrettyCheckboxColor, PrettyCheckboxShape, PrettyCheckboxStroke } from '../model/interfaces';
import { NgxPrettyHoverWillChangeComponent } from './ngx-pretty-hover-will-change.component';
import { NgxPrettyToggleWillChangeComponent } from './ngx-pretty-toggle-will-change.component';
import { NgxPrettyRadioGroupDirective } from './ngx-pretty-radio-group.component';
import { strToBoolean } from '../utility';
// tslint:disable:use-host-property-decorator
export class NgxPrettyRadioComponent {
    /**
     * @param {?} renderer
     * @param {?} el
     * @param {?} radioGroup
     * @param {?} _stroke
     * @param {?} _shape
     * @param {?} _animation
     * @param {?=} _isSwitch
     * @param {?=} _bigger
     * @param {?=} _enableFocus
     * @param {?=} _plain
     * @param {?=} _outline
     * @param {?=} _color
     * @param {?=} _name
     */
    constructor(renderer, el, radioGroup, _stroke, _shape, _animation, _isSwitch = false, _bigger = false, _enableFocus = false, _plain = false, _outline = false, _color, _name) {
        this.renderer = renderer;
        this.el = el;
        this.radioGroup = radioGroup;
        this._stroke = _stroke;
        this._shape = _shape;
        this._animation = _animation;
        this._isSwitch = _isSwitch;
        this._bigger = _bigger;
        this._enableFocus = _enableFocus;
        this._plain = _plain;
        this._outline = _outline;
        this._color = _color;
        this._name = _name;
        this._prefix = DEFAULT_PREFIX;
        this._outlinePrefix = DEFAULT_OUTLINE_PREFIX;
        this.checked = false;
        this.disabled = false;
        this.lock = false;
        this.change = new EventEmitter();
        if (!this._name && this.radioGroup) {
            this._name = this.radioGroup.name;
        }
        this._isSwitch = strToBoolean(this._isSwitch);
        this._bigger = strToBoolean(this._bigger);
        this._enableFocus = strToBoolean(this._enableFocus);
        this._plain = strToBoolean(this._plain);
        this._outline = strToBoolean(this._outline);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        /** @type {?} */
        const el = this.el.nativeElement;
        if (this._isSwitch) {
            this.renderer.addClass(el, `${DEFAULT_PREFIX}switch`);
        }
        if (this._bigger) {
            this.renderer.addClass(el, `${DEFAULT_PREFIX}bigger`);
        }
        if (this._enableFocus) {
            this.renderer.addClass(el, `${DEFAULT_PREFIX}has-focus`);
        }
        if (this._plain) {
            this.renderer.addClass(el, `${DEFAULT_PREFIX}plain`);
        }
        if (this._stroke) {
            this.renderer.addClass(el, `${DEFAULT_PREFIX}${this._stroke}`);
        }
        if (this._shape) {
            this.renderer.addClass(el, `${DEFAULT_PREFIX}${this._shape}`);
        }
        if (this._animation) {
            this.renderer.addClass(el, `${DEFAULT_PREFIX}${this._animation}`);
        }
        if (this._iconDir) {
            this.renderer.addClass(el, `${DEFAULT_PREFIX}icon`);
        }
        if (this._svgDir) {
            this.renderer.addClass(el, `${DEFAULT_PREFIX}svg`);
        }
        if (this._imgDir) {
            this.renderer.addClass(el, `${DEFAULT_PREFIX}image`);
        }
        if (this._hoverDir || this._hoverWillChangeDir) {
            this.renderer.addClass(el, `${DEFAULT_PREFIX}has-hover`);
        }
        if (this._isToggle) {
            this.renderer.addClass(el, `${DEFAULT_PREFIX}toggle`);
        }
        if (!this._isSwitch && !this._iconDir && !this._svgDir && !this._imgDir) {
            this.renderer.addClass(el, `${DEFAULT_PREFIX}default`);
        }
        // STATE ELEM
        if (this._color && !this._isToggle) {
            this.renderer.addClass(this._stateElem.nativeElement, `${DEFAULT_PREFIX}${this._color}${this._outline ? DEFAULT_OUTLINE_PREFIX : ''}`);
        }
    }
    // ---------- METHODS ---------
    /**
     * @param {?} event
     * @param {?} checked
     * @param {?} value
     * @return {?}
     */
    _onChange(event, checked, value) {
        // I stop propagation on the change event.
        // Otherwise the change event, from the input element, will bubble up and
        event.stopPropagation();
        this.change.emit({ value, checked, event });
        if (this.radioGroup) {
            this.radioGroup._emitChange({ value, checked, event });
        }
    }
    /**
     * @return {?}
     */
    get _isToggle() { return this._toggleComps.length === 2 || this._toggleWillChangeComps.length === 2; }
}
NgxPrettyRadioComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-pretty-radio:not([will-change]), p-radio:not([will-change])',
                template: `
    <input
      #inputElem
      type="radio"
      [name]="_name"
      [value]="value"
      [checked]="checked"
      [disabled]="disabled"
      (change)="_onChange($event, inputElem.checked, inputElem.value)"/>

    <div #stateElem *ngIf="!_isToggle" class="state">

      <ng-content select="[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]"></ng-content>
      <label><ng-content></ng-content></label>

    </div>

    <ng-content select="ngx-p-hover, p-hover, ngx-p-toggle, p-toggle"></ng-content>
  `,
                // changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                host: {
                    'class': DEFAULT_PRETTY_CLASS_NAME
                },
                exportAs: 'ngxPrettyRadio'
            }] }
];
/** @nocollapse */
NgxPrettyRadioComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: NgxPrettyRadioGroupDirective, decorators: [{ type: Optional }] },
    { type: PrettyCheckboxStroke, decorators: [{ type: Attribute, args: ['stroke',] }] },
    { type: PrettyCheckboxShape, decorators: [{ type: Attribute, args: ['shape',] }] },
    { type: PrettyCheckboxAnimation, decorators: [{ type: Attribute, args: ['animation',] }] },
    { type: undefined, decorators: [{ type: Attribute, args: ['isSwitch',] }] },
    { type: undefined, decorators: [{ type: Attribute, args: ['bigger',] }] },
    { type: undefined, decorators: [{ type: Attribute, args: ['enableFocus',] }] },
    { type: undefined, decorators: [{ type: Attribute, args: ['plain',] }] },
    { type: undefined, decorators: [{ type: Attribute, args: ['outline',] }] },
    { type: PrettyCheckboxColor, decorators: [{ type: Attribute, args: ['color',] }] },
    { type: String, decorators: [{ type: Attribute, args: ['name',] }] }
];
NgxPrettyRadioComponent.propDecorators = {
    checked: [{ type: Input }],
    disabled: [{ type: Input }],
    value: [{ type: Input }],
    lock: [{ type: HostBinding, args: [`class.${DEFAULT_PREFIX}locked`,] }, { type: Input }],
    _inputElem: [{ type: ViewChild, args: ['inputElem', { static: true },] }],
    _stateElem: [{ type: ViewChild, args: ['stateElem', { static: false },] }],
    change: [{ type: Output }],
    _iconDir: [{ type: ContentChild, args: [NgxPrettyIconDirective, { static: false },] }],
    _svgDir: [{ type: ContentChild, args: [NgxPrettySvgDirective, { static: false },] }],
    _imgDir: [{ type: ContentChild, args: [NgxPrettyImageDirective, { static: false },] }],
    _hoverDir: [{ type: ContentChild, args: [NgxPrettyHoverComponent, { static: false },] }],
    _hoverWillChangeDir: [{ type: ContentChild, args: [NgxPrettyHoverWillChangeComponent, { static: false },] }],
    _toggleComps: [{ type: ContentChildren, args: [NgxPrettyToggleComponent,] }],
    _toggleWillChangeComps: [{ type: ContentChildren, args: [NgxPrettyToggleWillChangeComponent,] }]
};
if (false) {
    /** @type {?} */
    NgxPrettyRadioComponent.prototype._prefix;
    /** @type {?} */
    NgxPrettyRadioComponent.prototype._outlinePrefix;
    /** @type {?} */
    NgxPrettyRadioComponent.prototype.checked;
    /** @type {?} */
    NgxPrettyRadioComponent.prototype.disabled;
    /** @type {?} */
    NgxPrettyRadioComponent.prototype.value;
    /** @type {?} */
    NgxPrettyRadioComponent.prototype.lock;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyRadioComponent.prototype._inputElem;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyRadioComponent.prototype._stateElem;
    /** @type {?} */
    NgxPrettyRadioComponent.prototype.change;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyRadioComponent.prototype._iconDir;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyRadioComponent.prototype._svgDir;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyRadioComponent.prototype._imgDir;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyRadioComponent.prototype._hoverDir;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyRadioComponent.prototype._hoverWillChangeDir;
    /** @type {?} */
    NgxPrettyRadioComponent.prototype._toggleComps;
    /** @type {?} */
    NgxPrettyRadioComponent.prototype._toggleWillChangeComps;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyRadioComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyRadioComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyRadioComponent.prototype.radioGroup;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyRadioComponent.prototype._stroke;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyRadioComponent.prototype._shape;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyRadioComponent.prototype._animation;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyRadioComponent.prototype._isSwitch;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyRadioComponent.prototype._bigger;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyRadioComponent.prototype._enableFocus;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyRadioComponent.prototype._plain;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyRadioComponent.prototype._outline;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyRadioComponent.prototype._color;
    /** @type {?} */
    NgxPrettyRadioComponent.prototype._name;
}
//# sourceMappingURL=data:application/json;base64,