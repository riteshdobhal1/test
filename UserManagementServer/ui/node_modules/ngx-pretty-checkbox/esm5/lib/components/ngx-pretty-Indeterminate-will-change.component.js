/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// tslint:disable:use-host-property-decorator
import { Component, Input, ElementRef, Renderer2, ChangeDetectionStrategy } from '@angular/core';
import { getColorClassName } from '../utility';
import { DEFAULT_PREFIX } from '../model/params';
import { PrettyCheckboxColor } from '../model/interfaces';
var NgxPrettyIndeterminateWillChangeComponent = /** @class */ (function () {
    function NgxPrettyIndeterminateWillChangeComponent(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.outline = false;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    NgxPrettyIndeterminateWillChangeComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.color || changes.outline) {
            /** @type {?} */
            var oldClass = getColorClassName(changes.color ? changes.color.previousValue : this.color, changes.outline ? changes.outline.previousValue : null);
            /** @type {?} */
            var newClass = getColorClassName(changes.color ? changes.color.currentValue : this.color, changes.outline ? changes.outline.currentValue : null);
            this.renderer.removeClass(this.el.nativeElement, oldClass);
            this.renderer.addClass(this.el.nativeElement, newClass);
        }
    };
    NgxPrettyIndeterminateWillChangeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-p-indeterminate[will-change], p-indeterminate[will-change]',
                    template: "\n    <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\n    <label><ng-content></ng-content></label>\n  ",
                    host: {
                        class: "state " + DEFAULT_PREFIX + "is-indeterminate"
                    },
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    NgxPrettyIndeterminateWillChangeComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    NgxPrettyIndeterminateWillChangeComponent.propDecorators = {
        color: [{ type: Input }],
        outline: [{ type: Input }]
    };
    return NgxPrettyIndeterminateWillChangeComponent;
}());
export { NgxPrettyIndeterminateWillChangeComponent };
if (false) {
    /** @type {?} */
    NgxPrettyIndeterminateWillChangeComponent.prototype.color;
    /** @type {?} */
    NgxPrettyIndeterminateWillChangeComponent.prototype.outline;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyIndeterminateWillChangeComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyIndeterminateWillChangeComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXByZXR0eS1JbmRldGVybWluYXRlLXdpbGwtY2hhbmdlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1wcmV0dHktY2hlY2tib3gvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9uZ3gtcHJldHR5LUluZGV0ZXJtaW5hdGUtd2lsbC1jaGFuZ2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBNEIsdUJBQXVCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0gsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQy9DLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUUxRDtJQWdCRSxtREFBb0IsRUFBYyxFQUFVLFFBQW1CO1FBQTNDLE9BQUUsR0FBRixFQUFFLENBQVk7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFXO1FBRnRELFlBQU8sR0FBRyxLQUFLLENBQUM7SUFFMEMsQ0FBQzs7Ozs7SUFFcEUsK0RBQVc7Ozs7SUFBWCxVQUFZLE9BQXNCO1FBQ2hDLElBQUksT0FBTyxDQUFDLEtBQUssSUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFOztnQkFFOUIsUUFBUSxHQUNaLGlCQUFpQixDQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUN4RCxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUN2RDs7Z0JBRUcsUUFBUSxHQUNaLGlCQUFpQixDQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUN2RCxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUN0RDtZQUVILElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQzNELElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1NBQ3pEO0lBQ0gsQ0FBQzs7Z0JBcENGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsZ0VBQWdFO29CQUMxRSxRQUFRLEVBQUUsc0pBR1Q7b0JBQ0QsSUFBSSxFQUFFO3dCQUNKLEtBQUssRUFBRSxXQUFTLGNBQWMscUJBQWtCO3FCQUNqRDtvQkFDRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtpQkFDaEQ7Ozs7Z0JBZjBCLFVBQVU7Z0JBQUUsU0FBUzs7O3dCQWtCN0MsS0FBSzswQkFDTCxLQUFLOztJQXdCUixnREFBQztDQUFBLEFBdENELElBc0NDO1NBM0JZLHlDQUF5Qzs7O0lBRXBELDBEQUFvQzs7SUFDcEMsNERBQXlCOzs7OztJQUViLHVEQUFzQjs7Ozs7SUFBRSw2REFBMkIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0c2xpbnQ6ZGlzYWJsZTp1c2UtaG9zdC1wcm9wZXJ0eS1kZWNvcmF0b3JcclxuXHJcbmltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIEVsZW1lbnRSZWYsIFJlbmRlcmVyMiwgU2ltcGxlQ2hhbmdlcywgT25DaGFuZ2VzLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBnZXRDb2xvckNsYXNzTmFtZSB9IGZyb20gJy4uL3V0aWxpdHknO1xyXG5pbXBvcnQgeyBERUZBVUxUX1BSRUZJWCB9IGZyb20gJy4uL21vZGVsL3BhcmFtcyc7XHJcbmltcG9ydCB7IFByZXR0eUNoZWNrYm94Q29sb3IgfSBmcm9tICcuLi9tb2RlbC9pbnRlcmZhY2VzJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnbmd4LXAtaW5kZXRlcm1pbmF0ZVt3aWxsLWNoYW5nZV0sIHAtaW5kZXRlcm1pbmF0ZVt3aWxsLWNoYW5nZV0nLFxyXG4gIHRlbXBsYXRlOiBgXHJcbiAgICA8bmctY29udGVudCBzZWxlY3Q9XCJbcEljb25dLCBbcC1pY29uXSwgW3BTdmddLCBbcC1zdmddLCBbcEltYWdlXSwgW3AtaW1hZ2VdXCI+PC9uZy1jb250ZW50PlxyXG4gICAgPGxhYmVsPjxuZy1jb250ZW50PjwvbmctY29udGVudD48L2xhYmVsPlxyXG4gIGAsXHJcbiAgaG9zdDoge1xyXG4gICAgY2xhc3M6IGBzdGF0ZSAke0RFRkFVTFRfUFJFRklYfWlzLWluZGV0ZXJtaW5hdGVgXHJcbiAgfSxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTmd4UHJldHR5SW5kZXRlcm1pbmF0ZVdpbGxDaGFuZ2VDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xyXG5cclxuICBASW5wdXQoKSBjb2xvcjogUHJldHR5Q2hlY2tib3hDb2xvcjtcclxuICBASW5wdXQoKSBvdXRsaW5lID0gZmFsc2U7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikgeyB9XHJcblxyXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcclxuICAgIGlmIChjaGFuZ2VzLmNvbG9yIHx8IGNoYW5nZXMub3V0bGluZSkge1xyXG5cclxuICAgICAgY29uc3Qgb2xkQ2xhc3MgPVxyXG4gICAgICAgIGdldENvbG9yQ2xhc3NOYW1lKFxyXG4gICAgICAgICAgY2hhbmdlcy5jb2xvciA/IGNoYW5nZXMuY29sb3IucHJldmlvdXNWYWx1ZSA6IHRoaXMuY29sb3IsXHJcbiAgICAgICAgICBjaGFuZ2VzLm91dGxpbmUgPyBjaGFuZ2VzLm91dGxpbmUucHJldmlvdXNWYWx1ZSA6IG51bGxcclxuICAgICAgICApO1xyXG5cclxuICAgICAgY29uc3QgbmV3Q2xhc3MgPVxyXG4gICAgICAgIGdldENvbG9yQ2xhc3NOYW1lKFxyXG4gICAgICAgICAgY2hhbmdlcy5jb2xvciA/IGNoYW5nZXMuY29sb3IuY3VycmVudFZhbHVlIDogdGhpcy5jb2xvcixcclxuICAgICAgICAgIGNoYW5nZXMub3V0bGluZSA/IGNoYW5nZXMub3V0bGluZS5jdXJyZW50VmFsdWUgOiBudWxsXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3ModGhpcy5lbC5uYXRpdmVFbGVtZW50LCBvbGRDbGFzcyk7XHJcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbC5uYXRpdmVFbGVtZW50LCBuZXdDbGFzcyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=