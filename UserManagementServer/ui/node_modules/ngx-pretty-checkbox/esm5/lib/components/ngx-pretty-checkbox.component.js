/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ContentChild, ContentChildren, ElementRef, EventEmitter, HostBinding, Input, Output, QueryList, ViewChild, ViewEncapsulation, Attribute, Renderer2, ChangeDetectorRef } from '@angular/core';
import { DEFAULT_OUTLINE_PREFIX, DEFAULT_PREFIX, DEFAULT_PRETTY_CLASS_NAME } from '../model/params';
import { NgxPrettyHoverComponent } from './ngx-pretty-hover.component';
import { NgxPrettyIconDirective } from '../directives/ngx-pretty-icon.directive';
import { NgxPrettyImageDirective } from '../directives/ngx-pretty-image.directive';
import { NgxPrettyIndeterminateComponent } from './ngx-pretty-Indeterminate.component';
import { NgxPrettySvgDirective } from '../directives/ngx-pretty-svg.directive';
import { NgxPrettyToggleComponent } from './ngx-pretty-toggle.component';
import { PrettyCheckboxAnimation, PrettyCheckboxColor, PrettyCheckboxShape, PrettyCheckboxStroke } from '../model/interfaces';
import { NgxPrettyHoverWillChangeComponent } from './ngx-pretty-hover-will-change.component';
import { NgxPrettyIndeterminateWillChangeComponent } from './ngx-pretty-Indeterminate-will-change.component';
import { NgxPrettyToggleWillChangeComponent } from './ngx-pretty-toggle-will-change.component';
import { strToBoolean } from '../utility';
// tslint:disable:use-host-property-decorator
var NgxPrettyCheckboxComponent = /** @class */ (function () {
    function NgxPrettyCheckboxComponent(renderer, el, cd, _stroke, _shape, _animation, _isSwitch, _bigger, _enableFocus, _plain, _outline, _color) {
        if (_isSwitch === void 0) { _isSwitch = false; }
        if (_bigger === void 0) { _bigger = false; }
        if (_enableFocus === void 0) { _enableFocus = false; }
        if (_plain === void 0) { _plain = false; }
        if (_outline === void 0) { _outline = false; }
        this.renderer = renderer;
        this.el = el;
        this.cd = cd;
        this._stroke = _stroke;
        this._shape = _shape;
        this._animation = _animation;
        this._isSwitch = _isSwitch;
        this._bigger = _bigger;
        this._enableFocus = _enableFocus;
        this._plain = _plain;
        this._outline = _outline;
        this._color = _color;
        this._prefix = DEFAULT_PREFIX;
        this._outlinePrefix = DEFAULT_OUTLINE_PREFIX;
        this.checked = false;
        this.disabled = false;
        this.lock = false;
        this.change = new EventEmitter();
        this._isSwitch = strToBoolean(this._isSwitch);
        this._bigger = strToBoolean(this._bigger);
        this._enableFocus = strToBoolean(this._enableFocus);
        this._plain = strToBoolean(this._plain);
        this._outline = strToBoolean(this._outline);
    }
    /**
     * @return {?}
     */
    NgxPrettyCheckboxComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var el = this.el.nativeElement;
        if (this._isSwitch) {
            this.renderer.addClass(el, DEFAULT_PREFIX + "switch");
        }
        if (this._bigger) {
            this.renderer.addClass(el, DEFAULT_PREFIX + "bigger");
        }
        if (this._enableFocus) {
            this.renderer.addClass(el, DEFAULT_PREFIX + "has-focus");
        }
        if (this._plain) {
            this.renderer.addClass(el, DEFAULT_PREFIX + "plain");
        }
        if (this._stroke) {
            this.renderer.addClass(el, "" + DEFAULT_PREFIX + this._stroke);
        }
        if (this._shape) {
            this.renderer.addClass(el, "" + DEFAULT_PREFIX + this._shape);
        }
        if (this._animation) {
            this.renderer.addClass(el, "" + DEFAULT_PREFIX + this._animation);
        }
        if (this._iconDir) {
            this.renderer.addClass(el, DEFAULT_PREFIX + "icon");
        }
        if (this._svgDir) {
            this.renderer.addClass(el, DEFAULT_PREFIX + "svg");
        }
        if (this._imgDir) {
            this.renderer.addClass(el, DEFAULT_PREFIX + "image");
        }
        if (this._hoverDir || this._hoverWillChangeDir) {
            this.renderer.addClass(el, DEFAULT_PREFIX + "has-hover");
        }
        if (this._indeterminateDir || this._indeterminateWillChangeDir) {
            this.renderer.addClass(el, DEFAULT_PREFIX + "has-indeterminate");
        }
        if (this._isToggle) {
            this.renderer.addClass(el, DEFAULT_PREFIX + "toggle");
        }
        if (!this._isSwitch && !this._iconDir && !this._svgDir && !this._imgDir) {
            this.renderer.addClass(el, DEFAULT_PREFIX + "default");
        }
        // STATE ELEM
        if (this._color && !this._isToggle) {
            this.renderer.addClass(this._stateElem.nativeElement, "" + DEFAULT_PREFIX + this._color + (this._outline ? DEFAULT_OUTLINE_PREFIX : ''));
        }
    };
    // ---------- PRIVATE METHODS ---------
    // ---------- PRIVATE METHODS ---------
    /**
     * @param {?} event
     * @param {?} checked
     * @param {?} value
     * @return {?}
     */
    NgxPrettyCheckboxComponent.prototype._onChange = 
    // ---------- PRIVATE METHODS ---------
    /**
     * @param {?} event
     * @param {?} checked
     * @param {?} value
     * @return {?}
     */
    function (event, checked, value) {
        // I stop propagation on the change event.
        // Otherwise the change event, from the input element, will bubble up and
        event.stopPropagation();
        this.checked = checked;
        this.change.emit({ value: value, checked: checked, event: event });
    };
    Object.defineProperty(NgxPrettyCheckboxComponent.prototype, "_isToggle", {
        get: /**
         * @return {?}
         */
        function () { return this._toggleComps.length === 2 || this._toggleWillChangeComps.length === 2; },
        enumerable: true,
        configurable: true
    });
    // ---------- PUBLIC METHODS ---------
    // ---------- PUBLIC METHODS ---------
    /**
     * @param {?=} value
     * @return {?}
     */
    NgxPrettyCheckboxComponent.prototype.setIndeterminate = 
    // ---------- PUBLIC METHODS ---------
    /**
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        if (value === void 0) { value = true; }
        this._inputElem.nativeElement.indeterminate = value;
    };
    /**
     * @param {?} check
     * @return {?}
     */
    NgxPrettyCheckboxComponent.prototype.forceCheck = /**
     * @param {?} check
     * @return {?}
     */
    function (check) {
        this.checked = check;
        this.cd.markForCheck();
    };
    NgxPrettyCheckboxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-pretty-checkbox:not([will-change]), p-checkbox:not([will-change])',
                    template: "\n    <input\n      #inputElem\n      type=\"checkbox\"\n      [value]=\"value\"\n      [checked]=\"checked\"\n      [disabled]=\"disabled\"\n      (change)=\"_onChange($event, inputElem.checked, inputElem.value)\"/>\n\n    <div #stateElem *ngIf=\"!_isToggle\" class=\"state\">\n\n      <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\n      <label><ng-content></ng-content></label>\n\n    </div>\n\n    <ng-content select=\"ngx-p-indeterminate, p-indeterminate, ngx-p-hover, p-hover, ngx-p-toggle, p-toggle\"></ng-content>\n  ",
                    // changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                    host: {
                        'class': DEFAULT_PRETTY_CLASS_NAME
                    },
                    exportAs: 'ngxPrettyCheckbox'
                }] }
    ];
    /** @nocollapse */
    NgxPrettyCheckboxComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: PrettyCheckboxStroke, decorators: [{ type: Attribute, args: ['stroke',] }] },
        { type: PrettyCheckboxShape, decorators: [{ type: Attribute, args: ['shape',] }] },
        { type: PrettyCheckboxAnimation, decorators: [{ type: Attribute, args: ['animation',] }] },
        { type: undefined, decorators: [{ type: Attribute, args: ['isSwitch',] }] },
        { type: undefined, decorators: [{ type: Attribute, args: ['bigger',] }] },
        { type: undefined, decorators: [{ type: Attribute, args: ['enableFocus',] }] },
        { type: undefined, decorators: [{ type: Attribute, args: ['plain',] }] },
        { type: undefined, decorators: [{ type: Attribute, args: ['outline',] }] },
        { type: PrettyCheckboxColor, decorators: [{ type: Attribute, args: ['color',] }] }
    ]; };
    NgxPrettyCheckboxComponent.propDecorators = {
        checked: [{ type: Input }],
        disabled: [{ type: Input }],
        value: [{ type: Input }],
        lock: [{ type: HostBinding, args: ["class." + DEFAULT_PREFIX + "locked",] }, { type: Input }],
        _inputElem: [{ type: ViewChild, args: ['inputElem', { static: true },] }],
        _stateElem: [{ type: ViewChild, args: ['stateElem', { static: false },] }],
        change: [{ type: Output }],
        _iconDir: [{ type: ContentChild, args: [NgxPrettyIconDirective, { static: false },] }],
        _svgDir: [{ type: ContentChild, args: [NgxPrettySvgDirective, { static: false },] }],
        _imgDir: [{ type: ContentChild, args: [NgxPrettyImageDirective, { static: false },] }],
        _hoverDir: [{ type: ContentChild, args: [NgxPrettyHoverComponent, { static: false },] }],
        _hoverWillChangeDir: [{ type: ContentChild, args: [NgxPrettyHoverWillChangeComponent, { static: false },] }],
        _indeterminateDir: [{ type: ContentChild, args: [NgxPrettyIndeterminateComponent, { static: false },] }],
        _indeterminateWillChangeDir: [{ type: ContentChild, args: [NgxPrettyIndeterminateWillChangeComponent, { static: false },] }],
        _toggleComps: [{ type: ContentChildren, args: [NgxPrettyToggleComponent,] }],
        _toggleWillChangeComps: [{ type: ContentChildren, args: [NgxPrettyToggleWillChangeComponent,] }]
    };
    return NgxPrettyCheckboxComponent;
}());
export { NgxPrettyCheckboxComponent };
if (false) {
    /** @type {?} */
    NgxPrettyCheckboxComponent.prototype._prefix;
    /** @type {?} */
    NgxPrettyCheckboxComponent.prototype._outlinePrefix;
    /** @type {?} */
    NgxPrettyCheckboxComponent.prototype.checked;
    /** @type {?} */
    NgxPrettyCheckboxComponent.prototype.disabled;
    /** @type {?} */
    NgxPrettyCheckboxComponent.prototype.value;
    /** @type {?} */
    NgxPrettyCheckboxComponent.prototype.lock;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyCheckboxComponent.prototype._inputElem;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyCheckboxComponent.prototype._stateElem;
    /** @type {?} */
    NgxPrettyCheckboxComponent.prototype.change;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyCheckboxComponent.prototype._iconDir;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyCheckboxComponent.prototype._svgDir;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyCheckboxComponent.prototype._imgDir;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyCheckboxComponent.prototype._hoverDir;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyCheckboxComponent.prototype._hoverWillChangeDir;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyCheckboxComponent.prototype._indeterminateDir;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyCheckboxComponent.prototype._indeterminateWillChangeDir;
    /** @type {?} */
    NgxPrettyCheckboxComponent.prototype._toggleComps;
    /** @type {?} */
    NgxPrettyCheckboxComponent.prototype._toggleWillChangeComps;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyCheckboxComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyCheckboxComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyCheckboxComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyCheckboxComponent.prototype._stroke;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyCheckboxComponent.prototype._shape;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyCheckboxComponent.prototype._animation;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyCheckboxComponent.prototype._isSwitch;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyCheckboxComponent.prototype._bigger;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyCheckboxComponent.prototype._enableFocus;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyCheckboxComponent.prototype._plain;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyCheckboxComponent.prototype._outline;
    /**
     * @type {?}
     * @private
     */
    NgxPrettyCheckboxComponent.prototype._color;
}
//# sourceMappingURL=data:application/json;base64,