{"version":3,"file":"ngx-pretty-checkbox.umd.js","sources":["ng://ngx-pretty-checkbox/lib/model/params.ts","ng://ngx-pretty-checkbox/lib/model/interfaces.ts","ng://ngx-pretty-checkbox/lib/components/ngx-pretty-hover.component.ts","ng://ngx-pretty-checkbox/lib/directives/ngx-pretty-icon.directive.ts","ng://ngx-pretty-checkbox/lib/directives/ngx-pretty-image.directive.ts","ng://ngx-pretty-checkbox/lib/components/ngx-pretty-Indeterminate.component.ts","ng://ngx-pretty-checkbox/lib/directives/ngx-pretty-svg.directive.ts","ng://ngx-pretty-checkbox/lib/components/ngx-pretty-toggle.component.ts","ng://ngx-pretty-checkbox/lib/utility.ts","ng://ngx-pretty-checkbox/lib/components/ngx-pretty-hover-will-change.component.ts","ng://ngx-pretty-checkbox/lib/components/ngx-pretty-Indeterminate-will-change.component.ts","ng://ngx-pretty-checkbox/lib/components/ngx-pretty-toggle-will-change.component.ts","ng://ngx-pretty-checkbox/lib/components/ngx-pretty-checkbox.component.ts","ng://ngx-pretty-checkbox/lib/components/ngx-pretty-checkbox-will-change.component.ts","ng://ngx-pretty-checkbox/lib/ngx-pretty-checkbox.service.ts","ng://ngx-pretty-checkbox/lib/components/ngx-pretty-radio-group.component.ts","ng://ngx-pretty-checkbox/lib/components/ngx-pretty-radio.component.ts","ng://ngx-pretty-checkbox/lib/components/ngx-pretty-radio-will-change.component.ts","ng://ngx-pretty-checkbox/lib/ngx-pretty-checkbox.module.ts"],"sourcesContent":["export const DEFAULT_PRETTY_CLASS_NAME = 'pretty';\r\nexport const DEFAULT_PREFIX = 'p-';\r\nexport const DEFAULT_OUTLINE_PREFIX = '-o';\r\n\r\nexport const GROUP_NAME = 'p-radio';\r\n","export enum PrettyCheckBoxToggleType {\r\n  On = 'on',\r\n  Off = 'off'\r\n}\r\nexport enum PrettyCheckboxStroke {\r\n  // Accept Null\r\n  Fill = 'fill',   // Square and Switch\r\n  Thick = 'thick', // Square\r\n  Slim = 'slim' // Switch\r\n}\r\n\r\nexport enum PrettyCheckboxShape {\r\n  // Accept Null\r\n  Curve = 'curve',\r\n  Round = 'round',\r\n}\r\n\r\n\r\nexport enum PrettyCheckboxColor {\r\n  Primary = 'primary',\r\n  Success = 'success',\r\n  Info = 'info',\r\n  Warning = 'warning',\r\n  Danger = 'danger',\r\n}\r\n\r\nexport enum PrettyCheckboxAnimation {\r\n  Smooth = 'smooth',\r\n  Jelly = 'jelly',\r\n  Tada = 'tada',\r\n  Rotate = 'rotate',\r\n  Pulse = 'pulse',\r\n}\r\n\r\nexport interface PrettyCheckBoxChange {\r\n  checked: boolean;\r\n  value: string;\r\n  event: Event;\r\n}\r\n\r\nexport interface PrettyRadioChange {\r\n  checked: boolean;\r\n  value: string;\r\n  event: Event;\r\n}\r\n","// tslint:disable:use-host-property-decorator\r\n\r\nimport { Component, Input, ElementRef, Renderer2, SimpleChanges, AfterViewInit, ChangeDetectionStrategy, Attribute } from '@angular/core';\r\nimport { DEFAULT_PREFIX, DEFAULT_OUTLINE_PREFIX } from '../model/params';\r\nimport { PrettyCheckboxColor } from '../model/interfaces';\r\nimport { getColorClassName } from '../utility';\r\n\r\n@Component({\r\n  selector: 'ngx-p-hover:not([will-change]), p-hover:not([will-change])',\r\n  template: `\r\n    <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n    <label><ng-content></ng-content></label>\r\n  `,\r\n  host: {\r\n    class: `state ${DEFAULT_PREFIX}is-hover`\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxPrettyHoverComponent implements AfterViewInit {\r\n\r\n  constructor(\r\n    private el: ElementRef,\r\n    private renderer: Renderer2,\r\n    @Attribute('outline') private _outline = false,\r\n    @Attribute('color')   private _color: PrettyCheckboxColor,\r\n  ) { }\r\n\r\n  ngAfterViewInit() {\r\n    if (this._color) {\r\n      this.renderer.addClass(this.el.nativeElement,\r\n        `${DEFAULT_PREFIX}${this._color}${this._outline ? DEFAULT_OUTLINE_PREFIX : ''}`\r\n      );\r\n    }\r\n  }\r\n\r\n\r\n}\r\n","import { Directive, ElementRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[pIcon], [p-icon]'\r\n})\r\nexport class NgxPrettyIconDirective {\r\n\r\n  constructor(private elemRef: ElementRef) {\r\n    this.elemRef.nativeElement.classList.add('icon');\r\n  }\r\n\r\n}\r\n","import { Directive, ElementRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[pImage], [p-image]'\r\n})\r\nexport class NgxPrettyImageDirective {\r\n\r\n  constructor(private elemRef: ElementRef) {\r\n    console.log('TCL: NgxPrettyImageDirective -> constructor -> elemRef', elemRef);\r\n    this.elemRef.nativeElement.classList.add('image');\r\n  }\r\n\r\n}\r\n","// tslint:disable:use-host-property-decorator\r\n\r\nimport { Component, Input, ElementRef, Renderer2, AfterViewInit, ChangeDetectionStrategy, Attribute } from '@angular/core';\r\nimport { DEFAULT_PREFIX, DEFAULT_OUTLINE_PREFIX } from '../model/params';\r\nimport { PrettyCheckboxColor } from '../model/interfaces';\r\n\r\n@Component({\r\n  selector: 'ngx-p-indeterminate:not([will-change]), p-indeterminate:not([will-change])',\r\n  template: `\r\n    <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n    <label><ng-content></ng-content></label>\r\n  `,\r\n  host: {\r\n    class: `state ${DEFAULT_PREFIX}is-indeterminate`\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxPrettyIndeterminateComponent implements AfterViewInit {\r\n\r\n  constructor(\r\n    private el: ElementRef,\r\n    private renderer: Renderer2,\r\n    @Attribute('outline') private _outline = false,\r\n    @Attribute('color')   private _color: PrettyCheckboxColor,\r\n  ) { }\r\n\r\n  ngAfterViewInit() {\r\n    if (this._color) {\r\n      this.renderer.addClass(this.el.nativeElement,\r\n        `${DEFAULT_PREFIX}${this._color}${this._outline ? DEFAULT_OUTLINE_PREFIX : ''}`\r\n      );\r\n    }\r\n  }\r\n\r\n\r\n}\r\n","import { Directive, AfterViewInit, ElementRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[pSvg], [p-svg]'\r\n})\r\nexport class NgxPrettySvgDirective implements AfterViewInit {\r\n\r\n  constructor(private elemRef: ElementRef) { }\r\n\r\n  ngAfterViewInit() {\r\n    this.elemRef.nativeElement.classList.add('svg');\r\n  }\r\n\r\n}\r\n","// tslint:disable:use-host-property-decorator\r\n\r\nimport { Input, ElementRef, Component, AfterViewInit, Renderer2, ChangeDetectionStrategy, Attribute } from '@angular/core';\r\nimport { PrettyCheckboxColor, PrettyCheckBoxToggleType } from '../model/interfaces';\r\nimport { DEFAULT_PREFIX, DEFAULT_OUTLINE_PREFIX } from '../model/params';\r\nimport { getColorClassName } from '../utility';\r\n\r\n@Component({\r\n  selector: 'ngx-p-toggle:not([will-change]), p-toggle:not([will-change])',\r\n  template: `\r\n    <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n    <label><ng-content></ng-content></label>\r\n  `,\r\n  host: {\r\n    class: 'state'\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxPrettyToggleComponent implements AfterViewInit {\r\n\r\n  constructor(\r\n    private el: ElementRef,\r\n    private renderer: Renderer2,\r\n    @Attribute('outline') private _outline = false,\r\n    @Attribute('color')   private _color: PrettyCheckboxColor,\r\n    @Attribute('type')   private _type: PrettyCheckBoxToggleType,\r\n  ) { }\r\n\r\n  ngAfterViewInit() {\r\n    if (this._color) {\r\n      this.renderer.addClass(this.el.nativeElement,\r\n        `${DEFAULT_PREFIX}${this._color}${this._outline ? DEFAULT_OUTLINE_PREFIX : ''}`\r\n      );\r\n    }\r\n\r\n    this.renderer.addClass(this.el.nativeElement, `${DEFAULT_PREFIX}${this._type}`);\r\n  }\r\n\r\n}\r\n","import { PrettyCheckboxColor } from './model/interfaces';\r\nimport { DEFAULT_PREFIX, DEFAULT_OUTLINE_PREFIX } from './model/params';\r\n\r\nexport function getColorClassName(color: PrettyCheckboxColor, outline?: boolean) {\r\n  if (!color) { return null; }\r\n  return DEFAULT_PREFIX + color + (outline ? DEFAULT_OUTLINE_PREFIX : '');\r\n}\r\n\r\nexport function strToBoolean(str?: string | boolean): boolean {\r\n  if (typeof str === 'boolean') {\r\n    return str;\r\n  }\r\n\r\n  const regex = /^\\s*(true|1|on|enable)\\s*$/i;\r\n  return regex.test(str);\r\n}\r\n","// tslint:disable:use-host-property-decorator\r\n\r\nimport { Component, Input, ElementRef, Renderer2, SimpleChanges, OnChanges, ChangeDetectionStrategy } from '@angular/core';\r\nimport { DEFAULT_PREFIX } from '../model/params';\r\nimport { PrettyCheckboxColor } from '../model/interfaces';\r\nimport { getColorClassName } from '../utility';\r\n\r\n@Component({\r\n  selector: 'ngx-p-hover[will-change], p-hover[will-change]',\r\n  template: `\r\n    <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n    <label><ng-content></ng-content></label>\r\n  `,\r\n  host: {\r\n    class: `state ${DEFAULT_PREFIX}is-hover`\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxPrettyHoverWillChangeComponent implements OnChanges {\r\n\r\n  @Input() color: PrettyCheckboxColor;\r\n  @Input() outline = false;\r\n\r\n  constructor(\r\n    private el: ElementRef,\r\n    private renderer: Renderer2\r\n  ) { }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.color || changes.outline) {\r\n\r\n      const oldClass =\r\n        getColorClassName(\r\n          changes.color ? changes.color.previousValue : this.color,\r\n          changes.outline ? changes.outline.previousValue : null\r\n        );\r\n\r\n      const newClass =\r\n        getColorClassName(\r\n          changes.color ? changes.color.currentValue : this.color,\r\n          changes.outline ? changes.outline.currentValue : null\r\n        );\r\n\r\n      this.renderer.removeClass(this.el.nativeElement, oldClass);\r\n      this.renderer.addClass(this.el.nativeElement, newClass);\r\n    }\r\n  }\r\n\r\n}\r\n","// tslint:disable:use-host-property-decorator\r\n\r\nimport { Component, Input, ElementRef, Renderer2, SimpleChanges, OnChanges, ChangeDetectionStrategy } from '@angular/core';\r\nimport { getColorClassName } from '../utility';\r\nimport { DEFAULT_PREFIX } from '../model/params';\r\nimport { PrettyCheckboxColor } from '../model/interfaces';\r\n\r\n@Component({\r\n  selector: 'ngx-p-indeterminate[will-change], p-indeterminate[will-change]',\r\n  template: `\r\n    <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n    <label><ng-content></ng-content></label>\r\n  `,\r\n  host: {\r\n    class: `state ${DEFAULT_PREFIX}is-indeterminate`\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxPrettyIndeterminateWillChangeComponent implements OnChanges {\r\n\r\n  @Input() color: PrettyCheckboxColor;\r\n  @Input() outline = false;\r\n\r\n  constructor(private el: ElementRef, private renderer: Renderer2) { }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.color || changes.outline) {\r\n\r\n      const oldClass =\r\n        getColorClassName(\r\n          changes.color ? changes.color.previousValue : this.color,\r\n          changes.outline ? changes.outline.previousValue : null\r\n        );\r\n\r\n      const newClass =\r\n        getColorClassName(\r\n          changes.color ? changes.color.currentValue : this.color,\r\n          changes.outline ? changes.outline.currentValue : null\r\n        );\r\n\r\n      this.renderer.removeClass(this.el.nativeElement, oldClass);\r\n      this.renderer.addClass(this.el.nativeElement, newClass);\r\n    }\r\n  }\r\n\r\n}\r\n","// tslint:disable:use-host-property-decorator\r\n\r\nimport { Input, ElementRef, Component, HostBinding, SimpleChanges, OnChanges, Renderer2, ChangeDetectionStrategy } from '@angular/core';\r\nimport { PrettyCheckboxColor, PrettyCheckBoxToggleType } from '../model/interfaces';\r\nimport { DEFAULT_PREFIX, DEFAULT_OUTLINE_PREFIX } from '../model/params';\r\nimport { getColorClassName } from '../utility';\r\n\r\n@Component({\r\n  selector: 'ngx-p-toggle[will-change], p-toggle[will-change]',\r\n  template: `\r\n    <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n    <label><ng-content></ng-content></label>\r\n  `,\r\n  host: {\r\n    class: 'state'\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxPrettyToggleWillChangeComponent implements OnChanges {\r\n\r\n  @Input() type: PrettyCheckBoxToggleType;\r\n\r\n  @HostBinding(`class.${DEFAULT_PREFIX}on`)\r\n  get isToggleOn() { return this.type === PrettyCheckBoxToggleType.On; }\r\n\r\n  @HostBinding(`class.${DEFAULT_PREFIX}off`)\r\n  get isToggleOff() { return this.type === PrettyCheckBoxToggleType.Off; }\r\n\r\n\r\n  @Input() color: PrettyCheckboxColor;\r\n  @Input() outline = false;\r\n\r\n  constructor(private el: ElementRef, private renderer: Renderer2) { }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.color || changes.outline) {\r\n\r\n      const oldClass =\r\n        getColorClassName(\r\n          changes.color ? changes.color.previousValue : this.color,\r\n          changes.outline ? changes.outline.previousValue : null\r\n        );\r\n\r\n      const newClass =\r\n        getColorClassName(\r\n          changes.color ? changes.color.currentValue : this.color,\r\n          changes.outline ? changes.outline.currentValue : null\r\n        );\r\n\r\n      this.renderer.removeClass(this.el.nativeElement, oldClass);\r\n      this.renderer.addClass(this.el.nativeElement, newClass);\r\n    }\r\n  }\r\n\r\n}\r\n","import {\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  Output,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  Attribute,\r\n  AfterViewInit,\r\n  Renderer2,\r\n  ChangeDetectorRef\r\n  } from '@angular/core';\r\nimport { DEFAULT_OUTLINE_PREFIX, DEFAULT_PREFIX, DEFAULT_PRETTY_CLASS_NAME } from '../model/params';\r\nimport { NgxPrettyHoverComponent } from './ngx-pretty-hover.component';\r\nimport { NgxPrettyIconDirective } from '../directives/ngx-pretty-icon.directive';\r\nimport { NgxPrettyImageDirective } from '../directives/ngx-pretty-image.directive';\r\nimport { NgxPrettyIndeterminateComponent } from './ngx-pretty-Indeterminate.component';\r\nimport { NgxPrettySvgDirective } from '../directives/ngx-pretty-svg.directive';\r\nimport { NgxPrettyToggleComponent } from './ngx-pretty-toggle.component';\r\nimport {\r\n  PrettyCheckboxAnimation,\r\n  PrettyCheckBoxChange,\r\n  PrettyCheckboxColor,\r\n  PrettyCheckboxShape,\r\n  PrettyCheckboxStroke\r\n  } from '../model/interfaces';\r\nimport { NgxPrettyHoverWillChangeComponent } from './ngx-pretty-hover-will-change.component';\r\nimport { NgxPrettyIndeterminateWillChangeComponent } from './ngx-pretty-Indeterminate-will-change.component';\r\nimport { NgxPrettyToggleWillChangeComponent } from './ngx-pretty-toggle-will-change.component';\r\nimport { strToBoolean } from '../utility';\r\n// tslint:disable:use-host-property-decorator\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'ngx-pretty-checkbox:not([will-change]), p-checkbox:not([will-change])',\r\n  template: `\r\n    <input\r\n      #inputElem\r\n      type=\"checkbox\"\r\n      [value]=\"value\"\r\n      [checked]=\"checked\"\r\n      [disabled]=\"disabled\"\r\n      (change)=\"_onChange($event, inputElem.checked, inputElem.value)\"/>\r\n\r\n    <div #stateElem *ngIf=\"!_isToggle\" class=\"state\">\r\n\r\n      <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n      <label><ng-content></ng-content></label>\r\n\r\n    </div>\r\n\r\n    <ng-content select=\"ngx-p-indeterminate, p-indeterminate, ngx-p-hover, p-hover, ngx-p-toggle, p-toggle\"></ng-content>\r\n  `,\r\n  // changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    'class': DEFAULT_PRETTY_CLASS_NAME\r\n  },\r\n  exportAs: 'ngxPrettyCheckbox'\r\n})\r\nexport class NgxPrettyCheckboxComponent implements AfterViewInit {\r\n\r\n  public readonly _prefix = DEFAULT_PREFIX;\r\n  public readonly _outlinePrefix = DEFAULT_OUTLINE_PREFIX;\r\n\r\n\r\n  @Input() checked = false;\r\n  @Input() disabled = false;\r\n  @Input() value;\r\n\r\n\r\n  @HostBinding(`class.${DEFAULT_PREFIX}locked`)\r\n  @Input() lock = false;\r\n\r\n\r\n  @ViewChild('inputElem', { static: true }) private _inputElem: ElementRef;\r\n  @ViewChild('stateElem', { static: false }) private _stateElem: ElementRef;\r\n\r\n  @Output() change = new EventEmitter<PrettyCheckBoxChange>();\r\n\r\n\r\n  @ContentChild(NgxPrettyIconDirective, {static: false}) private _iconDir: NgxPrettyIconDirective;\r\n  @ContentChild(NgxPrettySvgDirective, {static: false}) private _svgDir: NgxPrettySvgDirective;\r\n  @ContentChild(NgxPrettyImageDirective, {static: false}) private _imgDir: NgxPrettyImageDirective;\r\n\r\n  @ContentChild(NgxPrettyHoverComponent, {static: false}) private _hoverDir: NgxPrettyHoverComponent;\r\n  @ContentChild(NgxPrettyHoverWillChangeComponent, {static: false}) private _hoverWillChangeDir: NgxPrettyHoverWillChangeComponent;\r\n\r\n  @ContentChild(NgxPrettyIndeterminateComponent, {static: false}) private _indeterminateDir: NgxPrettyIndeterminateComponent;\r\n  @ContentChild(NgxPrettyIndeterminateWillChangeComponent, {static: false}) private _indeterminateWillChangeDir: NgxPrettyIndeterminateWillChangeComponent;\r\n\r\n  @ContentChildren(NgxPrettyToggleComponent) public _toggleComps: QueryList<NgxPrettyToggleComponent>;\r\n  @ContentChildren(NgxPrettyToggleWillChangeComponent) public _toggleWillChangeComps: QueryList<NgxPrettyToggleWillChangeComponent>;\r\n\r\n  constructor (\r\n    private renderer: Renderer2,\r\n    private el: ElementRef,\r\n    private cd: ChangeDetectorRef,\r\n\r\n    @Attribute('stroke')      private _stroke: PrettyCheckboxStroke,\r\n    @Attribute('shape')       private _shape: PrettyCheckboxShape,\r\n    @Attribute('animation')   private _animation: PrettyCheckboxAnimation,\r\n    @Attribute('isSwitch')    private _isSwitch = false,\r\n    @Attribute('bigger')      private _bigger = false,\r\n    @Attribute('enableFocus') private _enableFocus = false,\r\n    @Attribute('plain')       private _plain = false,\r\n\r\n    @Attribute('outline') private _outline = false,\r\n    @Attribute('color')   private _color: PrettyCheckboxColor,\r\n  ) {\r\n      this._isSwitch    = strToBoolean(this._isSwitch);\r\n      this._bigger      = strToBoolean(this._bigger);\r\n      this._enableFocus = strToBoolean(this._enableFocus);\r\n      this._plain       = strToBoolean(this._plain);\r\n      this._outline     = strToBoolean(this._outline);\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    const el = this.el.nativeElement;\r\n\r\n    if (this._isSwitch)    { this.renderer.addClass(el, `${DEFAULT_PREFIX}switch`); }\r\n    if (this._bigger)      { this.renderer.addClass(el, `${DEFAULT_PREFIX}bigger`); }\r\n    if (this._enableFocus) { this.renderer.addClass(el, `${DEFAULT_PREFIX}has-focus`); }\r\n    if (this._plain)       { this.renderer.addClass(el, `${DEFAULT_PREFIX}plain`); }\r\n\r\n    if (this._stroke)     { this.renderer.addClass(el, `${DEFAULT_PREFIX}${this._stroke}`); }\r\n    if (this._shape)      { this.renderer.addClass(el, `${DEFAULT_PREFIX}${this._shape}`); }\r\n    if (this._animation)  { this.renderer.addClass(el, `${DEFAULT_PREFIX}${this._animation}`); }\r\n\r\n    if (this._iconDir)          { this.renderer.addClass(el, `${DEFAULT_PREFIX}icon`); }\r\n    if (this._svgDir)           { this.renderer.addClass(el, `${DEFAULT_PREFIX}svg`); }\r\n    if (this._imgDir)           { this.renderer.addClass(el, `${DEFAULT_PREFIX}image`); }\r\n\r\n    if (this._hoverDir || this._hoverWillChangeDir) {\r\n      this.renderer.addClass(el, `${DEFAULT_PREFIX}has-hover`);\r\n    }\r\n\r\n    if (this._indeterminateDir || this._indeterminateWillChangeDir) {\r\n      this.renderer.addClass(el, `${DEFAULT_PREFIX}has-indeterminate`);\r\n    }\r\n\r\n    if (this._isToggle) { this.renderer.addClass(el, `${DEFAULT_PREFIX}toggle`); }\r\n\r\n    if (!this._isSwitch && !this._iconDir && !this._svgDir && !this._imgDir) {\r\n      this.renderer.addClass(el, `${DEFAULT_PREFIX}default`);\r\n    }\r\n\r\n    // STATE ELEM\r\n    if (this._color && !this._isToggle) {\r\n      this.renderer.addClass(this._stateElem.nativeElement,\r\n        `${DEFAULT_PREFIX}${this._color}${this._outline ? DEFAULT_OUTLINE_PREFIX : ''}`\r\n      );\r\n    }\r\n\r\n  }\r\n\r\n\r\n  // ---------- PRIVATE METHODS ---------\r\n  public _onChange(event: Event, checked: boolean, value: string) {\r\n    // I stop propagation on the change event.\r\n    // Otherwise the change event, from the input element, will bubble up and\r\n    event.stopPropagation();\r\n    this.checked = checked;\r\n    this.change.emit({ value, checked, event });\r\n  }\r\n\r\n  public get _isToggle() { return this._toggleComps.length === 2 || this._toggleWillChangeComps.length === 2; }\r\n\r\n  // ---------- PUBLIC METHODS ---------\r\n  public setIndeterminate(value = true) {\r\n    this._inputElem.nativeElement.indeterminate = value;\r\n  }\r\n\r\n  public forceCheck(check: boolean) {\r\n    this.checked = check;\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n}\r\n","import {\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  Output,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef\r\n  } from '@angular/core';\r\nimport { DEFAULT_OUTLINE_PREFIX, DEFAULT_PREFIX, DEFAULT_PRETTY_CLASS_NAME } from '../model/params';\r\nimport { NgxPrettyHoverComponent } from './ngx-pretty-hover.component';\r\nimport { NgxPrettyIconDirective } from '../directives/ngx-pretty-icon.directive';\r\nimport { NgxPrettyImageDirective } from '../directives/ngx-pretty-image.directive';\r\nimport { NgxPrettyIndeterminateComponent } from './ngx-pretty-Indeterminate.component';\r\nimport { NgxPrettySvgDirective } from '../directives/ngx-pretty-svg.directive';\r\nimport { NgxPrettyToggleComponent } from './ngx-pretty-toggle.component';\r\nimport {\r\n  PrettyCheckboxAnimation,\r\n  PrettyCheckBoxChange,\r\n  PrettyCheckboxColor,\r\n  PrettyCheckboxShape,\r\n  PrettyCheckboxStroke,\r\n  } from '../model/interfaces';\r\nimport { NgxPrettyHoverWillChangeComponent } from './ngx-pretty-hover-will-change.component';\r\nimport { NgxPrettyToggleWillChangeComponent } from './ngx-pretty-toggle-will-change.component';\r\nimport { NgxPrettyIndeterminateWillChangeComponent } from './ngx-pretty-Indeterminate-will-change.component';\r\n// tslint:disable:use-host-property-decorator\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'ngx-pretty-checkbox[will-change], p-checkbox[will-change]',\r\n  template: `\r\n    <input\r\n      #inputElem\r\n      type=\"checkbox\"\r\n      [value]=\"value\"\r\n      [checked]=\"checked\"\r\n      [disabled]=\"disabled\"\r\n      (change)=\"_onChange($event, inputElem.checked, inputElem.value)\"/>\r\n\r\n    <div *ngIf=\"!_isToggle\" class=\"state\"\r\n        [ngClass]=\"[ color ? _prefix + color + (outline ? _outlinePrefix : '') : '' ]\">\r\n\r\n        <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n        <label><ng-content></ng-content></label>\r\n    </div>\r\n\r\n    <ng-content select=\"ngx-p-indeterminate, p-indeterminate, ngx-p-hover, p-hover, ngx-p-toggle, p-toggle\"></ng-content>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    'class': DEFAULT_PRETTY_CLASS_NAME\r\n  },\r\n  exportAs: 'ngxPrettyCheckboxWillChange'\r\n})\r\nexport class NgxPrettyCheckboxWillChangeComponent {\r\n\r\n  constructor(private cd: ChangeDetectorRef) {}\r\n\r\n  public readonly _prefix = DEFAULT_PREFIX;\r\n  public readonly _outlinePrefix = DEFAULT_OUTLINE_PREFIX;\r\n\r\n  @ViewChild('inputElem', { static: true }) private _inputElem: ElementRef;\r\n  @Output() change = new EventEmitter<PrettyCheckBoxChange>();\r\n\r\n\r\n  // ---------- INPUTS ----------\r\n  @Input() stroke: PrettyCheckboxStroke;\r\n  @Input() shape: PrettyCheckboxShape;\r\n  @Input() animation: PrettyCheckboxAnimation;\r\n  @Input() color: PrettyCheckboxColor;\r\n  @Input() outline = false; // COLOR . Can be used as Solid ( p-primary ) or Outline ( p-primary-o ).\r\n\r\n  @Input() checked = false;\r\n  @Input() disabled = false;\r\n  @Input() value;\r\n\r\n\r\n  // ----- INPUTS AND BINDING ------\r\n  // SWITCH\r\n  @HostBinding(`class.${DEFAULT_PREFIX}switch`)\r\n  @Input() isSwitch = false;\r\n\r\n  //  LOCK\r\n  @HostBinding(`class.${DEFAULT_PREFIX}locked`)\r\n  @Input() lock = false;\r\n\r\n  //  BIGGER\r\n  @HostBinding(`class.${DEFAULT_PREFIX}bigger`)\r\n  @Input() bigger = false;\r\n\r\n  //  FOCUS\r\n  @HostBinding(`class.${DEFAULT_PREFIX}has-focus`)\r\n  @Input() enableFocus = false;\r\n\r\n  //  PLAIN\r\n  @HostBinding(`class.${DEFAULT_PREFIX}plain`)\r\n  @Input() plain = false; // To remove the border ( when checkbox is checked ) \r\n\r\n\r\n  // ---------- STROKE ----------\r\n  // Fill\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxStroke.Fill}`)\r\n  get _isFill() { return this.stroke === PrettyCheckboxStroke.Fill; }\r\n\r\n  // Slim\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxStroke.Slim}`)\r\n  get _isSlim() { return this.stroke === PrettyCheckboxStroke.Slim; }\r\n\r\n  // Thick\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxStroke.Thick}`)\r\n  get _isThick() { return this.stroke === PrettyCheckboxStroke.Thick; }\r\n\r\n\r\n  // ---------- SHAPE ----------\r\n  // Curve\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxShape.Curve}`)\r\n  get _isCurve() { return this.shape === PrettyCheckboxShape.Curve; }\r\n\r\n  // Round\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxShape.Round}`)\r\n  get _isRound() { return this.shape === PrettyCheckboxShape.Round; }\r\n\r\n\r\n  // ---------- ANIMATION ----------\r\n  // Smooth\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxAnimation.Smooth}`)\r\n  get _isSmooth() { return this.animation === PrettyCheckboxAnimation.Smooth; }\r\n\r\n  // Jelly\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxAnimation.Jelly}`)\r\n  get _isJelly() { return this.animation === PrettyCheckboxAnimation.Jelly; }\r\n\r\n  // Tada\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxAnimation.Tada}`)\r\n  get _isTada() { return this.animation === PrettyCheckboxAnimation.Tada; }\r\n\r\n  // Rotate\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxAnimation.Rotate}`)\r\n  get _isRotate() { return this.animation === PrettyCheckboxAnimation.Rotate; }\r\n\r\n  // Pulse\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxAnimation.Pulse}`)\r\n  get _isPulse() { return this.animation === PrettyCheckboxAnimation.Pulse; }\r\n\r\n\r\n  // ---------- BINDING ----------\r\n  // Toggle\r\n  @ContentChildren(NgxPrettyToggleComponent) _toggleComp: QueryList<NgxPrettyToggleComponent>;\r\n  @ContentChildren(NgxPrettyToggleWillChangeComponent) _toggleWillChangeComp: QueryList<NgxPrettyToggleWillChangeComponent>;\r\n\r\n  @HostBinding(`class.${DEFAULT_PREFIX}toggle`)\r\n  get _isToggle() { return this._toggleComp.length === 2 || this._toggleWillChangeComp.length === 2; }\r\n\r\n  // DEFAULT\r\n  @HostBinding(`class.${DEFAULT_PREFIX}default`)\r\n  get _isDefault() { return !this.isSwitch && !this._iconElem && !this._svgElem && !this._imageElem; }\r\n\r\n\r\n\r\n  // ----- CHILD SELECTOR AND BINDING -----\r\n  // ICON\r\n  @HostBinding(`class.${DEFAULT_PREFIX}icon`)\r\n  @ContentChild(NgxPrettyIconDirective, {static: false}) _iconElem: NgxPrettyIconDirective;\r\n\r\n  // SVG\r\n  @HostBinding(`class.${DEFAULT_PREFIX}svg`)\r\n  @ContentChild(NgxPrettySvgDirective, {static: false}) _svgElem: NgxPrettySvgDirective;\r\n\r\n  // IMAGE\r\n  @HostBinding(`class.${DEFAULT_PREFIX}image`)\r\n  @ContentChild(NgxPrettyImageDirective, {static: false}) _imageElem: NgxPrettyImageDirective;\r\n\r\n  // HOVER\r\n  @ContentChild(NgxPrettyHoverWillChangeComponent, {static: false}) _hoverWillChangeDir: NgxPrettyHoverWillChangeComponent;\r\n  @ContentChild(NgxPrettyHoverComponent, {static: false}) _hoverComp: NgxPrettyHoverComponent;\r\n\r\n  @HostBinding(`class.${DEFAULT_PREFIX}has-hover`)\r\n  get _isHover() { return this._hoverComp || this._hoverWillChangeDir; }\r\n\r\n  // Indeterminate\r\n  @ContentChild(NgxPrettyIndeterminateComponent, {static: false}) _indeterminateComp: NgxPrettyIndeterminateComponent;\r\n  @ContentChild(NgxPrettyIndeterminateWillChangeComponent, {static: false}) _indeterminateWillChangeComp: NgxPrettyIndeterminateWillChangeComponent;\r\n\r\n  @HostBinding(`class.${DEFAULT_PREFIX}has-indeterminate`)\r\n  get _isIndeterminate() { return this._indeterminateComp || this._indeterminateWillChangeComp; }\r\n\r\n\r\n  // ---------- PRIVATE METHODS ---------\r\n  public _onChange(event: Event, checked: boolean, value: string) {\r\n    // I stop propagation on the change event.\r\n    // Otherwise the change event, from the input element, will bubble up and\r\n    event.stopPropagation();\r\n    this.checked = checked;\r\n    this.change.emit({ value, checked, event });\r\n  }\r\n\r\n  // ---------- PUBLIC METHODS ---------\r\n  public setIndeterminate(value = true) {\r\n    this._inputElem.nativeElement.indeterminate = value;\r\n  }\r\n\r\n  public forceCheck(check: boolean) {\r\n    this.checked = check;\r\n    this.cd.markForCheck();\r\n  }\r\n}\r\n\r\n\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NgxPrettyRadioService {\r\n\r\n  public name: string;\r\n\r\n  constructor() { }\r\n}\r\n","import { Directive, Output, EventEmitter } from '@angular/core';\r\nimport { NgxPrettyRadioService } from '../ngx-pretty-checkbox.service';\r\nimport { GROUP_NAME } from '../model/params';\r\nimport { PrettyRadioChange } from '../model/interfaces';\r\n\r\nlet nextId = 1;\r\n\r\n@Directive({\r\n  selector: 'ngx-pretty-radio-group, p-radio-group',\r\n  providers: [NgxPrettyRadioService],\r\n  exportAs: 'ngxRadioGroup'\r\n})\r\nexport class NgxPrettyRadioGroupDirective {\r\n\r\n  public name = GROUP_NAME + nextId++;\r\n\r\n  @Output() change = new EventEmitter<PrettyRadioChange>();\r\n\r\n  constructor() {}\r\n\r\n  _emitChange(event: PrettyRadioChange) {\r\n    this.change.emit(event);\r\n  }\r\n\r\n}\r\n","import {\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  Output,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  Attribute,\r\n  AfterViewInit,\r\n  Renderer2,\r\n  Optional,\r\n  OnInit\r\n  } from '@angular/core';\r\nimport { DEFAULT_OUTLINE_PREFIX, DEFAULT_PREFIX, DEFAULT_PRETTY_CLASS_NAME } from '../model/params';\r\nimport { NgxPrettyHoverComponent } from './ngx-pretty-hover.component';\r\nimport { NgxPrettyIconDirective } from '../directives/ngx-pretty-icon.directive';\r\nimport { NgxPrettyImageDirective } from '../directives/ngx-pretty-image.directive';\r\nimport { NgxPrettySvgDirective } from '../directives/ngx-pretty-svg.directive';\r\nimport { NgxPrettyToggleComponent } from './ngx-pretty-toggle.component';\r\nimport {\r\n  PrettyCheckboxAnimation,\r\n  PrettyCheckboxColor,\r\n  PrettyCheckboxShape,\r\n  PrettyCheckboxStroke,\r\n  PrettyRadioChange\r\n  } from '../model/interfaces';\r\nimport { NgxPrettyHoverWillChangeComponent } from './ngx-pretty-hover-will-change.component';\r\nimport { NgxPrettyToggleWillChangeComponent } from './ngx-pretty-toggle-will-change.component';\r\nimport { NgxPrettyRadioGroupDirective } from './ngx-pretty-radio-group.component';\r\nimport { strToBoolean } from '../utility';\r\n// tslint:disable:use-host-property-decorator\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'ngx-pretty-radio:not([will-change]), p-radio:not([will-change])',\r\n  template: `\r\n    <input\r\n      #inputElem\r\n      type=\"radio\"\r\n      [name]=\"_name\"\r\n      [value]=\"value\"\r\n      [checked]=\"checked\"\r\n      [disabled]=\"disabled\"\r\n      (change)=\"_onChange($event, inputElem.checked, inputElem.value)\"/>\r\n\r\n    <div #stateElem *ngIf=\"!_isToggle\" class=\"state\">\r\n\r\n      <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n      <label><ng-content></ng-content></label>\r\n\r\n    </div>\r\n\r\n    <ng-content select=\"ngx-p-hover, p-hover, ngx-p-toggle, p-toggle\"></ng-content>\r\n  `,\r\n  // changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    'class': DEFAULT_PRETTY_CLASS_NAME\r\n  },\r\n  exportAs: 'ngxPrettyRadio'\r\n})\r\nexport class NgxPrettyRadioComponent implements AfterViewInit {\r\n\r\n  public readonly _prefix = DEFAULT_PREFIX;\r\n  public readonly _outlinePrefix = DEFAULT_OUTLINE_PREFIX;\r\n\r\n\r\n  @Input() checked = false;\r\n  @Input() disabled = false;\r\n  @Input() value;\r\n\r\n  @HostBinding(`class.${DEFAULT_PREFIX}locked`)\r\n  @Input() lock = false;\r\n\r\n\r\n  @ViewChild('inputElem', { static: true }) private _inputElem: ElementRef;\r\n  @ViewChild('stateElem', { static: false }) private _stateElem: ElementRef;\r\n\r\n  @Output() change = new EventEmitter<PrettyRadioChange>();\r\n\r\n\r\n  @ContentChild(NgxPrettyIconDirective, {static: false}) private _iconDir: NgxPrettyIconDirective;\r\n  @ContentChild(NgxPrettySvgDirective, {static: false}) private _svgDir: NgxPrettySvgDirective;\r\n  @ContentChild(NgxPrettyImageDirective, {static: false}) private _imgDir: NgxPrettyImageDirective;\r\n\r\n  @ContentChild(NgxPrettyHoverComponent, {static: false}) private _hoverDir: NgxPrettyHoverComponent;\r\n  @ContentChild(NgxPrettyHoverWillChangeComponent, {static: false}) private _hoverWillChangeDir: NgxPrettyHoverWillChangeComponent;\r\n\r\n  @ContentChildren(NgxPrettyToggleComponent) public _toggleComps: QueryList<NgxPrettyToggleComponent>;\r\n  @ContentChildren(NgxPrettyToggleWillChangeComponent) public _toggleWillChangeComps: QueryList<NgxPrettyToggleWillChangeComponent>;\r\n\r\n  constructor (\r\n    private renderer: Renderer2,\r\n    private el: ElementRef,\r\n    @Optional() private radioGroup: NgxPrettyRadioGroupDirective,\r\n\r\n    @Attribute('stroke')      private _stroke: PrettyCheckboxStroke,\r\n    @Attribute('shape')       private _shape: PrettyCheckboxShape,\r\n    @Attribute('animation')   private _animation: PrettyCheckboxAnimation,\r\n    @Attribute('isSwitch')    private _isSwitch = false,\r\n    @Attribute('bigger')      private _bigger = false,\r\n    @Attribute('enableFocus') private _enableFocus = false,\r\n    @Attribute('plain')       private _plain = false,\r\n\r\n    @Attribute('outline') private _outline = false,\r\n    @Attribute('color')   private _color: PrettyCheckboxColor,\r\n    @Attribute('name')   public _name: string,\r\n    ) {\r\n      if (!this._name && this.radioGroup) {\r\n        this._name = this.radioGroup.name;\r\n      }\r\n\r\n      this._isSwitch    = strToBoolean(this._isSwitch);\r\n      this._bigger      = strToBoolean(this._bigger);\r\n      this._enableFocus = strToBoolean(this._enableFocus);\r\n      this._plain       = strToBoolean(this._plain);\r\n      this._outline     = strToBoolean(this._outline);\r\n    }\r\n\r\n\r\n  ngAfterViewInit(): void {\r\n    const el = this.el.nativeElement;\r\n\r\n    if (this._isSwitch)    { this.renderer.addClass(el, `${DEFAULT_PREFIX}switch`); }\r\n    if (this._bigger)      { this.renderer.addClass(el, `${DEFAULT_PREFIX}bigger`); }\r\n    if (this._enableFocus) { this.renderer.addClass(el, `${DEFAULT_PREFIX}has-focus`); }\r\n    if (this._plain)       { this.renderer.addClass(el, `${DEFAULT_PREFIX}plain`); }\r\n\r\n    if (this._stroke)     { this.renderer.addClass(el, `${DEFAULT_PREFIX}${this._stroke}`); }\r\n    if (this._shape)      { this.renderer.addClass(el, `${DEFAULT_PREFIX}${this._shape}`); }\r\n    if (this._animation)  { this.renderer.addClass(el, `${DEFAULT_PREFIX}${this._animation}`); }\r\n\r\n    if (this._iconDir)          { this.renderer.addClass(el, `${DEFAULT_PREFIX}icon`); }\r\n    if (this._svgDir)           { this.renderer.addClass(el, `${DEFAULT_PREFIX}svg`); }\r\n    if (this._imgDir)           { this.renderer.addClass(el, `${DEFAULT_PREFIX}image`); }\r\n\r\n    if (this._hoverDir || this._hoverWillChangeDir) {\r\n      this.renderer.addClass(el, `${DEFAULT_PREFIX}has-hover`);\r\n    }\r\n\r\n    if (this._isToggle) { this.renderer.addClass(el, `${DEFAULT_PREFIX}toggle`); }\r\n\r\n    if (!this._isSwitch && !this._iconDir && !this._svgDir && !this._imgDir) {\r\n      this.renderer.addClass(el, `${DEFAULT_PREFIX}default`);\r\n    }\r\n\r\n    // STATE ELEM\r\n    if (this._color && !this._isToggle) {\r\n      this.renderer.addClass(this._stateElem.nativeElement,\r\n        `${DEFAULT_PREFIX}${this._color}${this._outline ? DEFAULT_OUTLINE_PREFIX : ''}`\r\n      );\r\n    }\r\n\r\n  }\r\n\r\n\r\n  // ---------- METHODS ---------\r\n  public _onChange(event: Event, checked: boolean, value: string) {\r\n    // I stop propagation on the change event.\r\n    // Otherwise the change event, from the input element, will bubble up and\r\n    event.stopPropagation();\r\n    this.change.emit({ value, checked, event });\r\n\r\n    if (this.radioGroup) {\r\n      this.radioGroup._emitChange({ value, checked, event });\r\n    }\r\n  }\r\n\r\n  public get _isToggle() { return this._toggleComps.length === 2 || this._toggleWillChangeComps.length === 2; }\r\n}\r\n","import {\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostBinding,\r\n  Input,\r\n  Output,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  ChangeDetectionStrategy,\r\n  Optional\r\n  } from '@angular/core';\r\nimport { DEFAULT_OUTLINE_PREFIX, DEFAULT_PREFIX, DEFAULT_PRETTY_CLASS_NAME } from '../model/params';\r\nimport { NgxPrettyHoverComponent } from './ngx-pretty-hover.component';\r\nimport { NgxPrettyIconDirective } from '../directives/ngx-pretty-icon.directive';\r\nimport { NgxPrettyImageDirective } from '../directives/ngx-pretty-image.directive';\r\nimport { NgxPrettyIndeterminateComponent } from './ngx-pretty-Indeterminate.component';\r\nimport { NgxPrettySvgDirective } from '../directives/ngx-pretty-svg.directive';\r\nimport { NgxPrettyToggleComponent } from './ngx-pretty-toggle.component';\r\nimport {\r\n  PrettyCheckboxAnimation,\r\n  PrettyCheckBoxChange,\r\n  PrettyCheckboxColor,\r\n  PrettyCheckboxShape,\r\n  PrettyCheckboxStroke,\r\n  } from '../model/interfaces';\r\nimport { NgxPrettyHoverWillChangeComponent } from './ngx-pretty-hover-will-change.component';\r\nimport { NgxPrettyToggleWillChangeComponent } from './ngx-pretty-toggle-will-change.component';\r\nimport { NgxPrettyIndeterminateWillChangeComponent } from './ngx-pretty-Indeterminate-will-change.component';\r\nimport { NgxPrettyRadioGroupDirective } from './ngx-pretty-radio-group.component';\r\n// tslint:disable:use-host-property-decorator\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'ngx-pretty-radio[will-change], p-radio[will-change]',\r\n  template: `\r\n    <input\r\n      #inputElem\r\n      type=\"radio\"\r\n      [name]=\"name || radioGroupName\"\r\n      [value]=\"value\"\r\n      [checked]=\"checked\"\r\n      [disabled]=\"disabled\"\r\n      (change)=\"_onChange($event, inputElem.checked, inputElem.value)\"/>\r\n\r\n    <div *ngIf=\"!_isToggle\" class=\"state\"\r\n        [ngClass]=\"[ color ? _prefix + color + (outline ? _outlinePrefix : '') : '' ]\">\r\n\r\n        <ng-content select=\"[pIcon], [p-icon], [pSvg], [p-svg], [pImage], [p-image]\"></ng-content>\r\n        <label><ng-content></ng-content></label>\r\n    </div>\r\n\r\n    <ng-content select=\"ngx-p-indeterminate, p-indeterminate, ngx-p-hover, p-hover, ngx-p-toggle, p-toggle\"></ng-content>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    'class': DEFAULT_PRETTY_CLASS_NAME\r\n  },\r\n  exportAs: 'ngxPrettyRadio'\r\n})\r\nexport class NgxPrettyRadioWillChangeComponent {\r\n\r\n  constructor(@Optional() private radioGroup: NgxPrettyRadioGroupDirective) {\r\n    if (radioGroup) {\r\n      this.radioGroupName = radioGroup.name;\r\n    }\r\n  }\r\n\r\n  public readonly _prefix = DEFAULT_PREFIX;\r\n  public readonly _outlinePrefix = DEFAULT_OUTLINE_PREFIX;\r\n\r\n  @ViewChild('inputElem', { static: true }) private _inputElem: ElementRef;\r\n  @Output() change = new EventEmitter<PrettyCheckBoxChange>();\r\n\r\n\r\n  // ---------- INPUTS ----------\r\n  @Input() stroke: PrettyCheckboxStroke;\r\n  @Input() shape: PrettyCheckboxShape;\r\n  @Input() animation: PrettyCheckboxAnimation;\r\n  @Input() color: PrettyCheckboxColor;\r\n  @Input() outline = false; // COLOR . Can be used as Solid ( p-primary ) or Outline ( p-primary-o ).\r\n\r\n  @Input() checked = false;\r\n  @Input() disabled = false;\r\n  @Input() value;\r\n\r\n  public radioGroupName: string;\r\n  @Input() name: string;\r\n\r\n\r\n  // ----- INPUTS AND BINDING ------\r\n  // SWITCH\r\n  @HostBinding(`class.${DEFAULT_PREFIX}switch`)\r\n  @Input() isSwitch = false;\r\n\r\n  //  LOCK\r\n  @HostBinding(`class.${DEFAULT_PREFIX}locked`)\r\n  @Input() lock = false;\r\n\r\n  //  BIGGER\r\n  @HostBinding(`class.${DEFAULT_PREFIX}bigger`)\r\n  @Input() bigger = false;\r\n\r\n  //  FOCUS\r\n  @HostBinding(`class.${DEFAULT_PREFIX}has-focus`)\r\n  @Input() enableFocus = false;\r\n\r\n  //  PLAIN\r\n  @HostBinding(`class.${DEFAULT_PREFIX}plain`)\r\n  @Input() plain = false; // To remove the border ( when checkbox is checked )\r\n\r\n\r\n  // ---------- STROKE ----------\r\n  // Fill\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxStroke.Fill}`)\r\n  get _isFill() { return this.stroke === PrettyCheckboxStroke.Fill; }\r\n\r\n  // Slim\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxStroke.Slim}`)\r\n  get _isSlim() { return this.stroke === PrettyCheckboxStroke.Slim; }\r\n\r\n  // Thick\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxStroke.Thick}`)\r\n  get _isThick() { return this.stroke === PrettyCheckboxStroke.Thick; }\r\n\r\n\r\n  // ---------- SHAPE ----------\r\n  // Curve\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxShape.Curve}`)\r\n  get _isCurve() { return this.shape === PrettyCheckboxShape.Curve; }\r\n\r\n  // Round\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxShape.Round}`)\r\n  get _isRound() { return this.shape === PrettyCheckboxShape.Round; }\r\n\r\n\r\n  // ---------- ANIMATION ----------\r\n  // Smooth\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxAnimation.Smooth}`)\r\n  get _isSmooth() { return this.animation === PrettyCheckboxAnimation.Smooth; }\r\n\r\n  // Jelly\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxAnimation.Jelly}`)\r\n  get _isJelly() { return this.animation === PrettyCheckboxAnimation.Jelly; }\r\n\r\n  // Tada\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxAnimation.Tada}`)\r\n  get _isTada() { return this.animation === PrettyCheckboxAnimation.Tada; }\r\n\r\n  // Rotate\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxAnimation.Rotate}`)\r\n  get _isRotate() { return this.animation === PrettyCheckboxAnimation.Rotate; }\r\n\r\n  // Pulse\r\n  @HostBinding(`class.${DEFAULT_PREFIX}${PrettyCheckboxAnimation.Pulse}`)\r\n  get _isPulse() { return this.animation === PrettyCheckboxAnimation.Pulse; }\r\n\r\n\r\n  // ---------- BINDING ----------\r\n  // Toggle\r\n  @ContentChildren(NgxPrettyToggleComponent) _toggleComp: QueryList<NgxPrettyToggleComponent>;\r\n  @ContentChildren(NgxPrettyToggleWillChangeComponent) _toggleWillChangeComp: QueryList<NgxPrettyToggleWillChangeComponent>;\r\n\r\n  @HostBinding(`class.${DEFAULT_PREFIX}toggle`)\r\n  get _isToggle() { return this._toggleComp.length === 2 || this._toggleWillChangeComp.length === 2; }\r\n\r\n  // DEFAULT\r\n  @HostBinding(`class.${DEFAULT_PREFIX}default`)\r\n  get _isDefault() { return !this.isSwitch && !this._iconElem && !this._svgElem && !this._imageElem; }\r\n\r\n\r\n\r\n  // ----- CHILD SELECTOR AND BINDING -----\r\n  // ICON\r\n  @HostBinding(`class.${DEFAULT_PREFIX}icon`)\r\n  @ContentChild(NgxPrettyIconDirective, {static: false}) _iconElem: NgxPrettyIconDirective;\r\n\r\n  // SVG\r\n  @HostBinding(`class.${DEFAULT_PREFIX}svg`)\r\n  @ContentChild(NgxPrettySvgDirective, {static: false}) _svgElem: NgxPrettySvgDirective;\r\n\r\n  // IMAGE\r\n  @HostBinding(`class.${DEFAULT_PREFIX}image`)\r\n  @ContentChild(NgxPrettyImageDirective, {static: false}) _imageElem: NgxPrettyImageDirective;\r\n\r\n  // HOVER\r\n  @ContentChild(NgxPrettyHoverWillChangeComponent, {static: false}) _hoverWillChangeDir: NgxPrettyHoverWillChangeComponent;\r\n  @ContentChild(NgxPrettyHoverComponent, {static: false}) _hoverComp: NgxPrettyHoverComponent;\r\n\r\n  @HostBinding(`class.${DEFAULT_PREFIX}has-hover`)\r\n  get _isHover() { return this._hoverComp || this._hoverWillChangeDir; }\r\n\r\n\r\n  // ---------- METHODS ---------\r\n  public _onChange(event: Event, checked: boolean, value: string) {\r\n    // I stop propagation on the change event.\r\n    // Otherwise the change event, from the input element, will bubble up and\r\n    event.stopPropagation();\r\n    this.change.emit({ value, checked, event });\r\n\r\n    if (this.radioGroup) {\r\n      this.radioGroup._emitChange({ value, checked, event });\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { NgxPrettyCheckboxComponent } from './components/ngx-pretty-checkbox.component';\r\nimport { NgxPrettyIconDirective } from './directives/ngx-pretty-icon.directive';\r\nimport { NgxPrettySvgDirective } from './directives/ngx-pretty-svg.directive';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgxPrettyImageDirective } from './directives/ngx-pretty-image.directive';\r\nimport { NgxPrettyHoverComponent } from './components/ngx-pretty-hover.component';\r\nimport { NgxPrettyIndeterminateComponent } from './components/ngx-pretty-Indeterminate.component';\r\nimport { NgxPrettyToggleComponent } from './components/ngx-pretty-toggle.component';\r\nimport { NgxPrettyHoverWillChangeComponent } from './components/ngx-pretty-hover-will-change.component';\r\nimport { NgxPrettyCheckboxWillChangeComponent } from './components/ngx-pretty-checkbox-will-change.component';\r\nimport { NgxPrettyIndeterminateWillChangeComponent } from './components/ngx-pretty-Indeterminate-will-change.component';\r\nimport { NgxPrettyToggleWillChangeComponent } from './components/ngx-pretty-toggle-will-change.component';\r\nimport { NgxPrettyRadioGroupDirective } from './components/ngx-pretty-radio-group.component';\r\nimport { NgxPrettyRadioComponent } from './components/ngx-pretty-radio.component';\r\nimport { NgxPrettyRadioWillChangeComponent } from './components/ngx-pretty-radio-will-change.component';\r\n\r\nconst DECLARATIONS = [\r\n  NgxPrettyCheckboxComponent,\r\n  NgxPrettyCheckboxWillChangeComponent,\r\n\r\n  NgxPrettyIconDirective,\r\n  NgxPrettySvgDirective,\r\n  NgxPrettyImageDirective,\r\n\r\n  NgxPrettyToggleComponent,\r\n  NgxPrettyToggleWillChangeComponent,\r\n\r\n  NgxPrettyHoverComponent,\r\n  NgxPrettyHoverWillChangeComponent,\r\n\r\n  NgxPrettyIndeterminateComponent,\r\n  NgxPrettyIndeterminateWillChangeComponent,\r\n\r\n  NgxPrettyRadioGroupDirective,\r\n  NgxPrettyRadioComponent,\r\n  NgxPrettyRadioWillChangeComponent\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule\r\n  ],\r\n  declarations: [ DECLARATIONS ],\r\n  exports: [ DECLARATIONS ]\r\n})\r\nexport class NgxPrettyCheckboxModule { }\r\n"],"names":["Component","ChangeDetectionStrategy","ElementRef","Renderer2","Attribute","Directive","Input","HostBinding","EventEmitter","ViewEncapsulation","ChangeDetectorRef","ViewChild","Output","ContentChild","ContentChildren","Injectable","Optional","NgModule","CommonModule","FormsModule"],"mappings":";;;;;;;;;;;AAAA,QAAa,yBAAyB,GAAG,QAAQ;;AACjD,QAAa,cAAc,GAAG,IAAI;;IAClC,IAAa,sBAAsB,GAAG,IAAI;;IAE1C,IAAa,UAAU,GAAG,SAAS;;;;;;;;QCHjC,IAAK,IAAI;QACT,KAAM,KAAK;;;;;QAIX,MAAO,MAAM;QACb,OAAQ,OAAO;QACf,MAAO,MAAM;;;;;;QAKb,OAAQ,OAAO;QACf,OAAQ,OAAO;;;;QAKf,SAAU,SAAS;QACnB,SAAU,SAAS;QACnB,MAAO,MAAM;QACb,SAAU,SAAS;QACnB,QAAS,QAAQ;;;;QAIjB,QAAS,QAAQ;QACjB,OAAQ,OAAO;QACf,MAAO,MAAM;QACb,QAAS,QAAQ;QACjB,OAAQ,OAAO;;;;;;;;QCXf,iCACU,EAAc,EACd,QAAmB,EACG,QAAgB,EAChB,MAA2B;YAD3B,yBAAA,EAAA,gBAAgB;YAFtC,OAAE,GAAF,EAAE,CAAY;YACd,aAAQ,GAAR,QAAQ,CAAW;YACG,aAAQ,GAAR,QAAQ,CAAQ;YAChB,WAAM,GAAN,MAAM,CAAqB;SACtD;;;;QAEL,iDAAe;;;QAAf;YACE,IAAI,IAAI,CAAC,MAAM,EAAE;gBACf,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,EAC1C,KAAG,cAAc,GAAG,IAAI,CAAC,MAAM,IAAG,IAAI,CAAC,QAAQ,GAAG,sBAAsB,GAAG,EAAE,CAAE,CAChF,CAAC;aACH;SACF;;oBA1BFA,cAAS,SAAC;wBACT,QAAQ,EAAE,4DAA4D;wBACtE,QAAQ,EAAE,sJAGT;wBACD,IAAI,EAAE;4BACJ,KAAK,EAAE,WAAS,cAAc,aAAU;yBACzC;wBACD,eAAe,EAAEC,4BAAuB,CAAC,MAAM;qBAChD;;;;oBAf0BC,eAAU;oBAAEC,cAAS;oDAqB3CC,cAAS,SAAC,SAAS;oBAnBf,mBAAmB,uBAoBvBA,cAAS,SAAC,OAAO;;QAYtB,8BAAC;KA7BD;;;;;;ACPA;QAOE,gCAAoB,OAAmB;YAAnB,YAAO,GAAP,OAAO,CAAY;YACrC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;SAClD;;oBAPFC,cAAS,SAAC;wBACT,QAAQ,EAAE,mBAAmB;qBAC9B;;;;oBAJmBH,eAAU;;QAW9B,6BAAC;KATD;;;;;;ACFA;QAOE,iCAAoB,OAAmB;YAAnB,YAAO,GAAP,OAAO,CAAY;YACrC,OAAO,CAAC,GAAG,CAAC,wDAAwD,EAAE,OAAO,CAAC,CAAC;YAC/E,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;SACnD;;oBARFG,cAAS,SAAC;wBACT,QAAQ,EAAE,qBAAqB;qBAChC;;;;oBAJmBH,eAAU;;QAY9B,8BAAC;KAVD;;;;;;;QCiBE,yCACU,EAAc,EACd,QAAmB,EACG,QAAgB,EAChB,MAA2B;YAD3B,yBAAA,EAAA,gBAAgB;YAFtC,OAAE,GAAF,EAAE,CAAY;YACd,aAAQ,GAAR,QAAQ,CAAW;YACG,aAAQ,GAAR,QAAQ,CAAQ;YAChB,WAAM,GAAN,MAAM,CAAqB;SACtD;;;;QAEL,yDAAe;;;QAAf;YACE,IAAI,IAAI,CAAC,MAAM,EAAE;gBACf,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,EAC1C,KAAG,cAAc,GAAG,IAAI,CAAC,MAAM,IAAG,IAAI,CAAC,QAAQ,GAAG,sBAAsB,GAAG,EAAE,CAAE,CAChF,CAAC;aACH;SACF;;oBA1BFF,cAAS,SAAC;wBACT,QAAQ,EAAE,4EAA4E;wBACtF,QAAQ,EAAE,sJAGT;wBACD,IAAI,EAAE;4BACJ,KAAK,EAAE,WAAS,cAAc,qBAAkB;yBACjD;wBACD,eAAe,EAAEC,4BAAuB,CAAC,MAAM;qBAChD;;;;oBAd0BC,eAAU;oBAAEC,cAAS;oDAoB3CC,cAAS,SAAC,SAAS;oBAlBf,mBAAmB,uBAmBvBA,cAAS,SAAC,OAAO;;QAYtB,sCAAC;KA7BD;;;;;;ACNA;QAOE,+BAAoB,OAAmB;YAAnB,YAAO,GAAP,OAAO,CAAY;SAAK;;;;QAE5C,+CAAe;;;QAAf;YACE,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;SACjD;;oBATFC,cAAS,SAAC;wBACT,QAAQ,EAAE,iBAAiB;qBAC5B;;;;oBAJkCH,eAAU;;QAa7C,4BAAC;KAXD;;;;;;;QCkBE,kCACU,EAAc,EACd,QAAmB,EACG,QAAgB,EAChB,MAA2B,EAC5B,KAA+B;YAF9B,yBAAA,EAAA,gBAAgB;YAFtC,OAAE,GAAF,EAAE,CAAY;YACd,aAAQ,GAAR,QAAQ,CAAW;YACG,aAAQ,GAAR,QAAQ,CAAQ;YAChB,WAAM,GAAN,MAAM,CAAqB;YAC5B,UAAK,GAAL,KAAK,CAA0B;SACzD;;;;QAEL,kDAAe;;;QAAf;YACE,IAAI,IAAI,CAAC,MAAM,EAAE;gBACf,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,EAC1C,KAAG,cAAc,GAAG,IAAI,CAAC,MAAM,IAAG,IAAI,CAAC,QAAQ,GAAG,sBAAsB,GAAG,EAAE,CAAE,CAChF,CAAC;aACH;YAED,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,EAAE,KAAG,cAAc,GAAG,IAAI,CAAC,KAAO,CAAC,CAAC;SACjF;;oBA7BFF,cAAS,SAAC;wBACT,QAAQ,EAAE,8DAA8D;wBACxE,QAAQ,EAAE,sJAGT;wBACD,IAAI,EAAE;4BACJ,KAAK,EAAE,OAAO;yBACf;wBACD,eAAe,EAAEC,4BAAuB,CAAC,MAAM;qBAChD;;;;oBAfeC,eAAU;oBAA4BC,cAAS;oDAqB1DC,cAAS,SAAC,SAAS;oBApBf,mBAAmB,uBAqBvBA,cAAS,SAAC,OAAO;oBArBQ,wBAAwB,uBAsBjDA,cAAS,SAAC,MAAM;;QAarB,+BAAC;KA/BD;;;;;;ICNA;;;;;IAEA,SAAgB,iBAAiB,CAAC,KAA0B,EAAE,OAAiB;QAC7E,IAAI,CAAC,KAAK,EAAE;YAAE,OAAO,IAAI,CAAC;SAAE;QAC5B,OAAO,cAAc,GAAG,KAAK,IAAI,OAAO,GAAG,sBAAsB,GAAG,EAAE,CAAC,CAAC;KACzE;;;;;IAED,SAAgB,YAAY,CAAC,GAAsB;QACjD,IAAI,OAAO,GAAG,KAAK,SAAS,EAAE;YAC5B,OAAO,GAAG,CAAC;SACZ;;YAEK,KAAK,GAAG,6BAA6B;QAC3C,OAAO,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KACxB;;;;;;;QCQC,2CACU,EAAc,EACd,QAAmB;YADnB,OAAE,GAAF,EAAE,CAAY;YACd,aAAQ,GAAR,QAAQ,CAAW;YAJpB,YAAO,GAAG,KAAK,CAAC;SAKpB;;;;;QAEL,uDAAW;;;;QAAX,UAAY,OAAsB;YAChC,IAAI,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,OAAO,EAAE;;oBAE9B,QAAQ,GACZ,iBAAiB,CACf,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,aAAa,GAAG,IAAI,CAAC,KAAK,EACxD,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,aAAa,GAAG,IAAI,CACvD;;oBAEG,QAAQ,GACZ,iBAAiB,CACf,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,EACvD,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,YAAY,GAAG,IAAI,CACtD;gBAEH,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;gBAC3D,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;aACzD;SACF;;oBAvCFJ,cAAS,SAAC;wBACT,QAAQ,EAAE,gDAAgD;wBAC1D,QAAQ,EAAE,sJAGT;wBACD,IAAI,EAAE;4BACJ,KAAK,EAAE,WAAS,cAAc,aAAU;yBACzC;wBACD,eAAe,EAAEC,4BAAuB,CAAC,MAAM;qBAChD;;;;oBAf0BC,eAAU;oBAAEC,cAAS;;;4BAkB7CG,UAAK;8BACLA,UAAK;;QA2BR,wCAAC;KAzCD;;;;;;;QCgBE,mDAAoB,EAAc,EAAU,QAAmB;YAA3C,OAAE,GAAF,EAAE,CAAY;YAAU,aAAQ,GAAR,QAAQ,CAAW;YAFtD,YAAO,GAAG,KAAK,CAAC;SAE2C;;;;;QAEpE,+DAAW;;;;QAAX,UAAY,OAAsB;YAChC,IAAI,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,OAAO,EAAE;;oBAE9B,QAAQ,GACZ,iBAAiB,CACf,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,aAAa,GAAG,IAAI,CAAC,KAAK,EACxD,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,aAAa,GAAG,IAAI,CACvD;;oBAEG,QAAQ,GACZ,iBAAiB,CACf,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,EACvD,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,YAAY,GAAG,IAAI,CACtD;gBAEH,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;gBAC3D,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;aACzD;SACF;;oBApCFN,cAAS,SAAC;wBACT,QAAQ,EAAE,gEAAgE;wBAC1E,QAAQ,EAAE,sJAGT;wBACD,IAAI,EAAE;4BACJ,KAAK,EAAE,WAAS,cAAc,qBAAkB;yBACjD;wBACD,eAAe,EAAEC,4BAAuB,CAAC,MAAM;qBAChD;;;;oBAf0BC,eAAU;oBAAEC,cAAS;;;4BAkB7CG,UAAK;8BACLA,UAAK;;QAwBR,gDAAC;KAtCD;;;;;;;QCyBE,4CAAoB,EAAc,EAAU,QAAmB;YAA3C,OAAE,GAAF,EAAE,CAAY;YAAU,aAAQ,GAAR,QAAQ,CAAW;YAFtD,YAAO,GAAG,KAAK,CAAC;SAE2C;QAVpE,sBACI,0DAAU;;;;YADd,cACmB,OAAO,IAAI,CAAC,IAAI,KAAK,wBAAwB,CAAC,EAAE,CAAC,EAAE;;;WAAA;QAEtE,sBACI,2DAAW;;;;YADf,cACoB,OAAO,IAAI,CAAC,IAAI,KAAK,wBAAwB,CAAC,GAAG,CAAC,EAAE;;;WAAA;;;;;QAQxE,wDAAW;;;;QAAX,UAAY,OAAsB;YAChC,IAAI,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,OAAO,EAAE;;oBAE9B,QAAQ,GACZ,iBAAiB,CACf,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,aAAa,GAAG,IAAI,CAAC,KAAK,EACxD,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,aAAa,GAAG,IAAI,CACvD;;oBAEG,QAAQ,GACZ,iBAAiB,CACf,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,EACvD,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,YAAY,GAAG,IAAI,CACtD;gBAEH,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;gBAC3D,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;aACzD;SACF;;oBA7CFN,cAAS,SAAC;wBACT,QAAQ,EAAE,kDAAkD;wBAC5D,QAAQ,EAAE,sJAGT;wBACD,IAAI,EAAE;4BACJ,KAAK,EAAE,OAAO;yBACf;wBACD,eAAe,EAAEC,4BAAuB,CAAC,MAAM;qBAChD;;;;oBAfeC,eAAU;oBAAoDC,cAAS;;;2BAkBpFG,UAAK;iCAELC,gBAAW,SAAC,WAAS,cAAc,OAAI;kCAGvCA,gBAAW,SAAC,WAAS,cAAc,QAAK;4BAIxCD,UAAK;8BACLA,UAAK;;QAwBR,yCAAC;KA/CD;;;;;;ICPA;AAwCA;QA6DE,oCACU,QAAmB,EACnB,EAAc,EACd,EAAqB,EAEK,OAA6B,EAC7B,MAA2B,EAC3B,UAAmC,EACnC,SAAiB,EACjB,OAAe,EACf,YAAoB,EACpB,MAAc,EAElB,QAAgB,EAChB,MAA2B;YANvB,0BAAA,EAAA,iBAAiB;YACjB,wBAAA,EAAA,eAAe;YACf,6BAAA,EAAA,oBAAoB;YACpB,uBAAA,EAAA,cAAc;YAElB,yBAAA,EAAA,gBAAgB;YAZtC,aAAQ,GAAR,QAAQ,CAAW;YACnB,OAAE,GAAF,EAAE,CAAY;YACd,OAAE,GAAF,EAAE,CAAmB;YAEK,YAAO,GAAP,OAAO,CAAsB;YAC7B,WAAM,GAAN,MAAM,CAAqB;YAC3B,eAAU,GAAV,UAAU,CAAyB;YACnC,cAAS,GAAT,SAAS,CAAQ;YACjB,YAAO,GAAP,OAAO,CAAQ;YACf,iBAAY,GAAZ,YAAY,CAAQ;YACpB,WAAM,GAAN,MAAM,CAAQ;YAElB,aAAQ,GAAR,QAAQ,CAAQ;YAChB,WAAM,GAAN,MAAM,CAAqB;YA9C3C,YAAO,GAAG,cAAc,CAAC;YACzB,mBAAc,GAAG,sBAAsB,CAAC;YAG/C,YAAO,GAAG,KAAK,CAAC;YAChB,aAAQ,GAAG,KAAK,CAAC;YAKjB,SAAI,GAAG,KAAK,CAAC;YAMZ,WAAM,GAAG,IAAIE,iBAAY,EAAwB,CAAC;YAgCxD,IAAI,CAAC,SAAS,GAAM,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACjD,IAAI,CAAC,OAAO,GAAQ,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC/C,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YACpD,IAAI,CAAC,MAAM,GAAS,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC9C,IAAI,CAAC,QAAQ,GAAO,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SACnD;;;;QAED,oDAAe;;;QAAf;;gBACQ,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa;YAEhC,IAAI,IAAI,CAAC,SAAS,EAAK;gBAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,EAAK,cAAc,WAAQ,CAAC,CAAC;aAAE;YACjF,IAAI,IAAI,CAAC,OAAO,EAAO;gBAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,EAAK,cAAc,WAAQ,CAAC,CAAC;aAAE;YACjF,IAAI,IAAI,CAAC,YAAY,EAAE;gBAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,EAAK,cAAc,cAAW,CAAC,CAAC;aAAE;YACpF,IAAI,IAAI,CAAC,MAAM,EAAQ;gBAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,EAAK,cAAc,UAAO,CAAC,CAAC;aAAE;YAEhF,IAAI,IAAI,CAAC,OAAO,EAAM;gBAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,EAAE,KAAG,cAAc,GAAG,IAAI,CAAC,OAAS,CAAC,CAAC;aAAE;YACzF,IAAI,IAAI,CAAC,MAAM,EAAO;gBAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,EAAE,KAAG,cAAc,GAAG,IAAI,CAAC,MAAQ,CAAC,CAAC;aAAE;YACxF,IAAI,IAAI,CAAC,UAAU,EAAG;gBAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,EAAE,KAAG,cAAc,GAAG,IAAI,CAAC,UAAY,CAAC,CAAC;aAAE;YAE5F,IAAI,IAAI,CAAC,QAAQ,EAAW;gBAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,EAAK,cAAc,SAAM,CAAC,CAAC;aAAE;YACpF,IAAI,IAAI,CAAC,OAAO,EAAY;gBAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,EAAK,cAAc,QAAK,CAAC,CAAC;aAAE;YACnF,IAAI,IAAI,CAAC,OAAO,EAAY;gBAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,EAAK,cAAc,UAAO,CAAC,CAAC;aAAE;YAErF,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,mBAAmB,EAAE;gBAC9C,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,EAAK,cAAc,cAAW,CAAC,CAAC;aAC1D;YAED,IAAI,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,2BAA2B,EAAE;gBAC9D,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,EAAK,cAAc,sBAAmB,CAAC,CAAC;aAClE;YAED,IAAI,IAAI,CAAC,SAAS,EAAE;gBAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,EAAK,cAAc,WAAQ,CAAC,CAAC;aAAE;YAE9E,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;gBACvE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,EAAK,cAAc,YAAS,CAAC,CAAC;aACxD;;YAGD,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;gBAClC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,EAClD,KAAG,cAAc,GAAG,IAAI,CAAC,MAAM,IAAG,IAAI,CAAC,QAAQ,GAAG,sBAAsB,GAAG,EAAE,CAAE,CAChF,CAAC;aACH;SAEF;;;;;;;;;QAIM,8CAAS;;;;;;;;QAAhB,UAAiB,KAAY,EAAE,OAAgB,EAAE,KAAa;;;YAG5D,KAAK,CAAC,eAAe,EAAE,CAAC;YACxB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;YACvB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,KAAK,OAAA,EAAE,OAAO,SAAA,EAAE,KAAK,OAAA,EAAE,CAAC,CAAC;SAC7C;QAED,sBAAW,iDAAS;;;;YAApB,cAAyB,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,sBAAsB,CAAC,MAAM,KAAK,CAAC,CAAC,EAAE;;;WAAA;;;;;;;QAGtG,qDAAgB;;;;;;QAAvB,UAAwB,KAAY;YAAZ,sBAAA,EAAA,YAAY;YAClC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,aAAa,GAAG,KAAK,CAAC;SACrD;;;;;QAEM,+CAAU;;;;QAAjB,UAAkB,KAAc;YAC9B,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;YACrB,IAAI,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC;SACxB;;oBA/IFR,cAAS,SAAC;wBACT,QAAQ,EAAE,uEAAuE;wBACjF,QAAQ,EAAE,8jBAiBT;;wBAED,aAAa,EAAES,sBAAiB,CAAC,IAAI;wBACrC,IAAI,EAAE;4BACJ,OAAO,EAAE,yBAAyB;yBACnC;wBACD,QAAQ,EAAE,mBAAmB;qBAC9B;;;;oBAnDCN,cAAS;oBAXTD,eAAU;oBAYVQ,sBAAiB;oBAcjB,oBAAoB,uBA4EjBN,cAAS,SAAC,QAAQ;oBA7ErB,mBAAmB,uBA8EhBA,cAAS,SAAC,OAAO;oBAjFpB,uBAAuB,uBAkFpBA,cAAS,SAAC,WAAW;oDACrBA,cAAS,SAAC,UAAU;oDACpBA,cAAS,SAAC,QAAQ;oDAClBA,cAAS,SAAC,aAAa;oDACvBA,cAAS,SAAC,OAAO;oDAEjBA,cAAS,SAAC,SAAS;oBAtFtB,mBAAmB,uBAuFhBA,cAAS,SAAC,OAAO;;;8BA1CnBE,UAAK;+BACLA,UAAK;4BACLA,UAAK;2BAGLC,gBAAW,SAAC,WAAS,cAAc,WAAQ,cAC3CD,UAAK;iCAGLK,cAAS,SAAC,WAAW,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE;iCACvCA,cAAS,SAAC,WAAW,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE;6BAExCC,WAAM;+BAGNC,iBAAY,SAAC,sBAAsB,EAAE,EAAC,MAAM,EAAE,KAAK,EAAC;8BACpDA,iBAAY,SAAC,qBAAqB,EAAE,EAAC,MAAM,EAAE,KAAK,EAAC;8BACnDA,iBAAY,SAAC,uBAAuB,EAAE,EAAC,MAAM,EAAE,KAAK,EAAC;gCAErDA,iBAAY,SAAC,uBAAuB,EAAE,EAAC,MAAM,EAAE,KAAK,EAAC;0CACrDA,iBAAY,SAAC,iCAAiC,EAAE,EAAC,MAAM,EAAE,KAAK,EAAC;wCAE/DA,iBAAY,SAAC,+BAA+B,EAAE,EAAC,MAAM,EAAE,KAAK,EAAC;kDAC7DA,iBAAY,SAAC,yCAAyC,EAAE,EAAC,MAAM,EAAE,KAAK,EAAC;mCAEvEC,oBAAe,SAAC,wBAAwB;6CACxCA,oBAAe,SAAC,kCAAkC;;QAsFrD,iCAAC;KAjJD;;;;;;ICxCA;AAoCA;QA6BE,8CAAoB,EAAqB;YAArB,OAAE,GAAF,EAAE,CAAmB;YAEzB,YAAO,GAAG,cAAc,CAAC;YACzB,mBAAc,GAAG,sBAAsB,CAAC;YAG9C,WAAM,GAAG,IAAIN,iBAAY,EAAwB,CAAC;YAQnD,YAAO,GAAG,KAAK,CAAC;;YAEhB,YAAO,GAAG,KAAK,CAAC;YAChB,aAAQ,GAAG,KAAK,CAAC;;;YAOjB,aAAQ,GAAG,KAAK,CAAC;;YAIjB,SAAI,GAAG,KAAK,CAAC;;YAIb,WAAM,GAAG,KAAK,CAAC;;YAIf,gBAAW,GAAG,KAAK,CAAC;;YAIpB,UAAK,GAAG,KAAK,CAAC;SAxCsB;QA6C7C,sBACI,yDAAO;;;;;;;;;;YADX,cACgB,OAAO,IAAI,CAAC,MAAM,KAAK,oBAAoB,CAAC,IAAI,CAAC,EAAE;;;WAAA;QAGnE,sBACI,yDAAO;;;;;;;YADX,cACgB,OAAO,IAAI,CAAC,MAAM,KAAK,oBAAoB,CAAC,IAAI,CAAC,EAAE;;;WAAA;QAGnE,sBACI,0DAAQ;;;;;;;YADZ,cACiB,OAAO,IAAI,CAAC,MAAM,KAAK,oBAAoB,CAAC,KAAK,CAAC,EAAE;;;WAAA;QAKrE,sBACI,0DAAQ;;;;;;;;;YADZ,cACiB,OAAO,IAAI,CAAC,KAAK,KAAK,mBAAmB,CAAC,KAAK,CAAC,EAAE;;;WAAA;QAGnE,sBACI,0DAAQ;;;;;;;YADZ,cACiB,OAAO,IAAI,CAAC,KAAK,KAAK,mBAAmB,CAAC,KAAK,CAAC,EAAE;;;WAAA;QAKnE,sBACI,2DAAS;;;;;;;;;YADb,cACkB,OAAO,IAAI,CAAC,SAAS,KAAK,uBAAuB,CAAC,MAAM,CAAC,EAAE;;;WAAA;QAG7E,sBACI,0DAAQ;;;;;;;YADZ,cACiB,OAAO,IAAI,CAAC,SAAS,KAAK,uBAAuB,CAAC,KAAK,CAAC,EAAE;;;WAAA;QAG3E,sBACI,yDAAO;;;;;;;YADX,cACgB,OAAO,IAAI,CAAC,SAAS,KAAK,uBAAuB,CAAC,IAAI,CAAC,EAAE;;;WAAA;QAGzE,sBACI,2DAAS;;;;;;;YADb,cACkB,OAAO,IAAI,CAAC,SAAS,KAAK,uBAAuB,CAAC,MAAM,CAAC,EAAE;;;WAAA;QAG7E,sBACI,0DAAQ;;;;;;;YADZ,cACiB,OAAO,IAAI,CAAC,SAAS,KAAK,uBAAuB,CAAC,KAAK,CAAC,EAAE;;;WAAA;QAQ3E,sBACI,2DAAS;;;;YADb,cACkB,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,qBAAqB,CAAC,MAAM,KAAK,CAAC,CAAC,EAAE;;;WAAA;QAGpG,sBACI,4DAAU;;;;;;;YADd,cACmB,OAAO,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;;;WAAA;QAqBpG,sBACI,0DAAQ;;;;YADZ,cACiB,OAAO,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,mBAAmB,CAAC,EAAE;;;WAAA;QAMtE,sBACI,kEAAgB;;;;YADpB,cACyB,OAAO,IAAI,CAAC,kBAAkB,IAAI,IAAI,CAAC,4BAA4B,CAAC,EAAE;;;WAAA;;;;;;;;;QAIxF,wDAAS;;;;;;;;QAAhB,UAAiB,KAAY,EAAE,OAAgB,EAAE,KAAa;;;YAG5D,KAAK,CAAC,eAAe,EAAE,CAAC;YACxB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;YACvB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,KAAK,OAAA,EAAE,OAAO,SAAA,EAAE,KAAK,OAAA,EAAE,CAAC,CAAC;SAC7C;;;;;;;QAGM,+DAAgB;;;;;;QAAvB,UAAwB,KAAY;YAAZ,sBAAA,EAAA,YAAY;YAClC,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,aAAa,GAAG,KAAK,CAAC;SACrD;;;;;QAEM,yDAAU;;;;QAAjB,UAAkB,KAAc;YAC9B,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;YACrB,IAAI,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC;SACxB;;oBAjLFR,cAAS,SAAC;wBACT,QAAQ,EAAE,2DAA2D;wBACrE,QAAQ,EAAE,+oBAiBT;wBACD,eAAe,EAAEC,4BAAuB,CAAC,MAAM;wBAC/C,aAAa,EAAEQ,sBAAiB,CAAC,IAAI;wBACrC,IAAI,EAAE;4BACJ,OAAO,EAAE,yBAAyB;yBACnC;wBACD,QAAQ,EAAE,6BAA6B;qBACxC;;;;oBAjDCC,sBAAiB;;;iCAyDhBC,cAAS,SAAC,WAAW,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE;6BACvCC,WAAM;6BAINN,UAAK;4BACLA,UAAK;gCACLA,UAAK;4BACLA,UAAK;8BACLA,UAAK;8BAELA,UAAK;+BACLA,UAAK;4BACLA,UAAK;+BAKLC,gBAAW,SAAC,WAAS,cAAc,WAAQ,cAC3CD,UAAK;2BAGLC,gBAAW,SAAC,WAAS,cAAc,WAAQ,cAC3CD,UAAK;6BAGLC,gBAAW,SAAC,WAAS,cAAc,WAAQ,cAC3CD,UAAK;kCAGLC,gBAAW,SAAC,WAAS,cAAc,cAAW,cAC9CD,UAAK;4BAGLC,gBAAW,SAAC,WAAS,cAAc,UAAO,cAC1CD,UAAK;8BAKLC,gBAAW,SAAC,WAAS,cAAc,GAAG,oBAAoB,CAAC,IAAM;8BAIjEA,gBAAW,SAAC,WAAS,cAAc,GAAG,oBAAoB,CAAC,IAAM;+BAIjEA,gBAAW,SAAC,WAAS,cAAc,GAAG,oBAAoB,CAAC,KAAO;+BAMlEA,gBAAW,SAAC,WAAS,cAAc,GAAG,mBAAmB,CAAC,KAAO;+BAIjEA,gBAAW,SAAC,WAAS,cAAc,GAAG,mBAAmB,CAAC,KAAO;gCAMjEA,gBAAW,SAAC,WAAS,cAAc,GAAG,uBAAuB,CAAC,MAAQ;+BAItEA,gBAAW,SAAC,WAAS,cAAc,GAAG,uBAAuB,CAAC,KAAO;8BAIrEA,gBAAW,SAAC,WAAS,cAAc,GAAG,uBAAuB,CAAC,IAAM;gCAIpEA,gBAAW,SAAC,WAAS,cAAc,GAAG,uBAAuB,CAAC,MAAQ;+BAItEA,gBAAW,SAAC,WAAS,cAAc,GAAG,uBAAuB,CAAC,KAAO;kCAMrEO,oBAAe,SAAC,wBAAwB;4CACxCA,oBAAe,SAAC,kCAAkC;gCAElDP,gBAAW,SAAC,WAAS,cAAc,WAAQ;iCAI3CA,gBAAW,SAAC,WAAS,cAAc,YAAS;gCAO5CA,gBAAW,SAAC,WAAS,cAAc,SAAM,cACzCM,iBAAY,SAAC,sBAAsB,EAAE,EAAC,MAAM,EAAE,KAAK,EAAC;+BAGpDN,gBAAW,SAAC,WAAS,cAAc,QAAK,cACxCM,iBAAY,SAAC,qBAAqB,EAAE,EAAC,MAAM,EAAE,KAAK,EAAC;iCAGnDN,gBAAW,SAAC,WAAS,cAAc,UAAO,cAC1CM,iBAAY,SAAC,uBAAuB,EAAE,EAAC,MAAM,EAAE,KAAK,EAAC;0CAGrDA,iBAAY,SAAC,iCAAiC,EAAE,EAAC,MAAM,EAAE,KAAK,EAAC;iCAC/DA,iBAAY,SAAC,uBAAuB,EAAE,EAAC,MAAM,EAAE,KAAK,EAAC;+BAErDN,gBAAW,SAAC,WAAS,cAAc,cAAW;yCAI9CM,iBAAY,SAAC,+BAA+B,EAAE,EAAC,MAAM,EAAE,KAAK,EAAC;mDAC7DA,iBAAY,SAAC,yCAAyC,EAAE,EAAC,MAAM,EAAE,KAAK,EAAC;uCAEvEN,gBAAW,SAAC,WAAS,cAAc,sBAAmB;;QAsBzD,2CAAC;KAlLD;;;;;;ACpCA;QASE;SAAiB;;oBAPlBQ,eAAU,SAAC;wBACV,UAAU,EAAE,MAAM;qBACnB;;;;;oCAJD;KAEA;;;;;;ICFA;QAKI,MAAM,GAAG,CAAC;AAEd;QAWE;YAJO,SAAI,GAAG,UAAU,GAAG,MAAM,EAAE,CAAC;YAE1B,WAAM,GAAG,IAAIP,iBAAY,EAAqB,CAAC;SAEzC;;;;;QAEhB,kDAAW;;;;QAAX,UAAY,KAAwB;YAClC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACzB;;oBAfFH,cAAS,SAAC;wBACT,QAAQ,EAAE,uCAAuC;wBACjD,SAAS,EAAE,CAAC,qBAAqB,CAAC;wBAClC,QAAQ,EAAE,eAAe;qBAC1B;;;;;6BAKEO,WAAM;;QAQT,mCAAC;KAjBD;;;;;;ICPA;AAuCA;QA0DE,iCACU,QAAmB,EACnB,EAAc,EACF,UAAwC,EAE1B,OAA6B,EAC7B,MAA2B,EAC3B,UAAmC,EACnC,SAAiB,EACjB,OAAe,EACf,YAAoB,EACpB,MAAc,EAElB,QAAgB,EAChB,MAA2B,EAC7B,KAAa;YAPP,0BAAA,EAAA,iBAAiB;YACjB,wBAAA,EAAA,eAAe;YACf,6BAAA,EAAA,oBAAoB;YACpB,uBAAA,EAAA,cAAc;YAElB,yBAAA,EAAA,gBAAgB;YAZtC,aAAQ,GAAR,QAAQ,CAAW;YACnB,OAAE,GAAF,EAAE,CAAY;YACF,eAAU,GAAV,UAAU,CAA8B;YAE1B,YAAO,GAAP,OAAO,CAAsB;YAC7B,WAAM,GAAN,MAAM,CAAqB;YAC3B,eAAU,GAAV,UAAU,CAAyB;YACnC,cAAS,GAAT,SAAS,CAAQ;YACjB,YAAO,GAAP,OAAO,CAAQ;YACf,iBAAY,GAAZ,YAAY,CAAQ;YACpB,WAAM,GAAN,MAAM,CAAQ;YAElB,aAAQ,GAAR,QAAQ,CAAQ;YAChB,WAAM,GAAN,MAAM,CAAqB;YAC7B,UAAK,GAAL,KAAK,CAAQ;YA3C3B,YAAO,GAAG,cAAc,CAAC;YACzB,mBAAc,GAAG,sBAAsB,CAAC;YAG/C,YAAO,GAAG,KAAK,CAAC;YAChB,aAAQ,GAAG,KAAK,CAAC;YAIjB,SAAI,GAAG,KAAK,CAAC;YAMZ,WAAM,GAAG,IAAIJ,iBAAY,EAAqB,CAAC;YA8BrD,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,UAAU,EAAE;gBAClC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;aACnC;YAED,IAAI,CAAC,SAAS,GAAM,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACjD,IAAI,CAAC,OAAO,GAAQ,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC/C,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YACpD,IAAI,CAAC,MAAM,GAAS,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC9C,IAAI,CAAC,QAAQ,GAAO,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SACjD;;;;QAGH,iDAAe;;;QAAf;;gBACQ,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa;YAEhC,IAAI,IAAI,CAAC,SAAS,EAAK;gBAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,EAAK,cAAc,WAAQ,CAAC,CAAC;aAAE;YACjF,IAAI,IAAI,CAAC,OAAO,EAAO;gBAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,EAAK,cAAc,WAAQ,CAAC,CAAC;aAAE;YACjF,IAAI,IAAI,CAAC,YAAY,EAAE;gBAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,EAAK,cAAc,cAAW,CAAC,CAAC;aAAE;YACpF,IAAI,IAAI,CAAC,MAAM,EAAQ;gBAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,EAAK,cAAc,UAAO,CAAC,CAAC;aAAE;YAEhF,IAAI,IAAI,CAAC,OAAO,EAAM;gBAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,EAAE,KAAG,cAAc,GAAG,IAAI,CAAC,OAAS,CAAC,CAAC;aAAE;YACzF,IAAI,IAAI,CAAC,MAAM,EAAO;gBAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,EAAE,KAAG,cAAc,GAAG,IAAI,CAAC,MAAQ,CAAC,CAAC;aAAE;YACxF,IAAI,IAAI,CAAC,UAAU,EAAG;gBAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,EAAE,KAAG,cAAc,GAAG,IAAI,CAAC,UAAY,CAAC,CAAC;aAAE;YAE5F,IAAI,IAAI,CAAC,QAAQ,EAAW;gBAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,EAAK,cAAc,SAAM,CAAC,CAAC;aAAE;YACpF,IAAI,IAAI,CAAC,OAAO,EAAY;gBAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,EAAK,cAAc,QAAK,CAAC,CAAC;aAAE;YACnF,IAAI,IAAI,CAAC,OAAO,EAAY;gBAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,EAAK,cAAc,UAAO,CAAC,CAAC;aAAE;YAErF,IAAI,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,mBAAmB,EAAE;gBAC9C,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,EAAK,cAAc,cAAW,CAAC,CAAC;aAC1D;YAED,IAAI,IAAI,CAAC,SAAS,EAAE;gBAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,EAAK,cAAc,WAAQ,CAAC,CAAC;aAAE;YAE9E,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;gBACvE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,EAAK,cAAc,YAAS,CAAC,CAAC;aACxD;;YAGD,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;gBAClC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,EAClD,KAAG,cAAc,GAAG,IAAI,CAAC,MAAM,IAAG,IAAI,CAAC,QAAQ,GAAG,sBAAsB,GAAG,EAAE,CAAE,CAChF,CAAC;aACH;SAEF;;;;;;;;;QAIM,2CAAS;;;;;;;;QAAhB,UAAiB,KAAY,EAAE,OAAgB,EAAE,KAAa;;;YAG5D,KAAK,CAAC,eAAe,EAAE,CAAC;YACxB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,KAAK,OAAA,EAAE,OAAO,SAAA,EAAE,KAAK,OAAA,EAAE,CAAC,CAAC;YAE5C,IAAI,IAAI,CAAC,UAAU,EAAE;gBACnB,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE,KAAK,OAAA,EAAE,OAAO,SAAA,EAAE,KAAK,OAAA,EAAE,CAAC,CAAC;aACxD;SACF;QAED,sBAAW,8CAAS;;;;YAApB,cAAyB,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,sBAAsB,CAAC,MAAM,KAAK,CAAC,CAAC,EAAE;;;WAAA;;oBAvI9GR,cAAS,SAAC;wBACT,QAAQ,EAAE,iEAAiE;wBAC3E,QAAQ,EAAE,6iBAkBT;;wBAED,aAAa,EAAES,sBAAiB,CAAC,IAAI;wBACrC,IAAI,EAAE;4BACJ,OAAO,EAAE,yBAAyB;yBACnC;wBACD,QAAQ,EAAE,gBAAgB;qBAC3B;;;;oBApDCN,cAAS;oBAVTD,eAAU;oBA6BH,4BAA4B,uBAmEhCc,aAAQ;oBAxEX,oBAAoB,uBA0EjBZ,cAAS,SAAC,QAAQ;oBA3ErB,mBAAmB,uBA4EhBA,cAAS,SAAC,OAAO;oBA9EpB,uBAAuB,uBA+EpBA,cAAS,SAAC,WAAW;oDACrBA,cAAS,SAAC,UAAU;oDACpBA,cAAS,SAAC,QAAQ;oDAClBA,cAAS,SAAC,aAAa;oDACvBA,cAAS,SAAC,OAAO;oDAEjBA,cAAS,SAAC,SAAS;oBApFtB,mBAAmB,uBAqFhBA,cAAS,SAAC,OAAO;iDACjBA,cAAS,SAAC,MAAM;;;8BAvClBE,UAAK;+BACLA,UAAK;4BACLA,UAAK;2BAELC,gBAAW,SAAC,WAAS,cAAc,WAAQ,cAC3CD,UAAK;iCAGLK,cAAS,SAAC,WAAW,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE;iCACvCA,cAAS,SAAC,WAAW,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE;6BAExCC,WAAM;+BAGNC,iBAAY,SAAC,sBAAsB,EAAE,EAAC,MAAM,EAAE,KAAK,EAAC;8BACpDA,iBAAY,SAAC,qBAAqB,EAAE,EAAC,MAAM,EAAE,KAAK,EAAC;8BACnDA,iBAAY,SAAC,uBAAuB,EAAE,EAAC,MAAM,EAAE,KAAK,EAAC;gCAErDA,iBAAY,SAAC,uBAAuB,EAAE,EAAC,MAAM,EAAE,KAAK,EAAC;0CACrDA,iBAAY,SAAC,iCAAiC,EAAE,EAAC,MAAM,EAAE,KAAK,EAAC;mCAE/DC,oBAAe,SAAC,wBAAwB;6CACxCA,oBAAe,SAAC,kCAAkC;;QAgFrD,8BAAC;KAxID;;;;;;ICvCA;AAqCA;QA8BE,2CAAgC,UAAwC;YAAxC,eAAU,GAAV,UAAU,CAA8B;YAMxD,YAAO,GAAG,cAAc,CAAC;YACzB,mBAAc,GAAG,sBAAsB,CAAC;YAG9C,WAAM,GAAG,IAAIN,iBAAY,EAAwB,CAAC;YAQnD,YAAO,GAAG,KAAK,CAAC;;YAEhB,YAAO,GAAG,KAAK,CAAC;YAChB,aAAQ,GAAG,KAAK,CAAC;;;YAUjB,aAAQ,GAAG,KAAK,CAAC;;YAIjB,SAAI,GAAG,KAAK,CAAC;;YAIb,WAAM,GAAG,KAAK,CAAC;;YAIf,gBAAW,GAAG,KAAK,CAAC;;YAIpB,UAAK,GAAG,KAAK,CAAC;YA9CrB,IAAI,UAAU,EAAE;gBACd,IAAI,CAAC,cAAc,GAAG,UAAU,CAAC,IAAI,CAAC;aACvC;SACF;QAgDD,sBACI,sDAAO;;;;;;;;;;YADX,cACgB,OAAO,IAAI,CAAC,MAAM,KAAK,oBAAoB,CAAC,IAAI,CAAC,EAAE;;;WAAA;QAGnE,sBACI,sDAAO;;;;;;;YADX,cACgB,OAAO,IAAI,CAAC,MAAM,KAAK,oBAAoB,CAAC,IAAI,CAAC,EAAE;;;WAAA;QAGnE,sBACI,uDAAQ;;;;;;;YADZ,cACiB,OAAO,IAAI,CAAC,MAAM,KAAK,oBAAoB,CAAC,KAAK,CAAC,EAAE;;;WAAA;QAKrE,sBACI,uDAAQ;;;;;;;;;YADZ,cACiB,OAAO,IAAI,CAAC,KAAK,KAAK,mBAAmB,CAAC,KAAK,CAAC,EAAE;;;WAAA;QAGnE,sBACI,uDAAQ;;;;;;;YADZ,cACiB,OAAO,IAAI,CAAC,KAAK,KAAK,mBAAmB,CAAC,KAAK,CAAC,EAAE;;;WAAA;QAKnE,sBACI,wDAAS;;;;;;;;;YADb,cACkB,OAAO,IAAI,CAAC,SAAS,KAAK,uBAAuB,CAAC,MAAM,CAAC,EAAE;;;WAAA;QAG7E,sBACI,uDAAQ;;;;;;;YADZ,cACiB,OAAO,IAAI,CAAC,SAAS,KAAK,uBAAuB,CAAC,KAAK,CAAC,EAAE;;;WAAA;QAG3E,sBACI,sDAAO;;;;;;;YADX,cACgB,OAAO,IAAI,CAAC,SAAS,KAAK,uBAAuB,CAAC,IAAI,CAAC,EAAE;;;WAAA;QAGzE,sBACI,wDAAS;;;;;;;YADb,cACkB,OAAO,IAAI,CAAC,SAAS,KAAK,uBAAuB,CAAC,MAAM,CAAC,EAAE;;;WAAA;QAG7E,sBACI,uDAAQ;;;;;;;YADZ,cACiB,OAAO,IAAI,CAAC,SAAS,KAAK,uBAAuB,CAAC,KAAK,CAAC,EAAE;;;WAAA;QAQ3E,sBACI,wDAAS;;;;YADb,cACkB,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,qBAAqB,CAAC,MAAM,KAAK,CAAC,CAAC,EAAE;;;WAAA;QAGpG,sBACI,yDAAU;;;;;;;YADd,cACmB,OAAO,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;;;WAAA;QAqBpG,sBACI,uDAAQ;;;;YADZ,cACiB,OAAO,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,mBAAmB,CAAC,EAAE;;;WAAA;;;;;;;;;QAI/D,qDAAS;;;;;;;;QAAhB,UAAiB,KAAY,EAAE,OAAgB,EAAE,KAAa;;;YAG5D,KAAK,CAAC,eAAe,EAAE,CAAC;YACxB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,KAAK,OAAA,EAAE,OAAO,SAAA,EAAE,KAAK,OAAA,EAAE,CAAC,CAAC;YAE5C,IAAI,IAAI,CAAC,UAAU,EAAE;gBACnB,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE,KAAK,OAAA,EAAE,OAAO,SAAA,EAAE,KAAK,OAAA,EAAE,CAAC,CAAC;aACxD;SACF;;oBA3KFR,cAAS,SAAC;wBACT,QAAQ,EAAE,qDAAqD;wBAC/D,QAAQ,EAAE,qrBAkBT;wBACD,eAAe,EAAEC,4BAAuB,CAAC,MAAM;wBAC/C,aAAa,EAAEQ,sBAAiB,CAAC,IAAI;wBACrC,IAAI,EAAE;4BACJ,OAAO,EAAE,yBAAyB;yBACnC;wBACD,QAAQ,EAAE,gBAAgB;qBAC3B;;;;oBAhCQ,4BAA4B,uBAmCtBO,aAAQ;;;iCASpBL,cAAS,SAAC,WAAW,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE;6BACvCC,WAAM;6BAINN,UAAK;4BACLA,UAAK;gCACLA,UAAK;4BACLA,UAAK;8BACLA,UAAK;8BAELA,UAAK;+BACLA,UAAK;4BACLA,UAAK;2BAGLA,UAAK;+BAKLC,gBAAW,SAAC,WAAS,cAAc,WAAQ,cAC3CD,UAAK;2BAGLC,gBAAW,SAAC,WAAS,cAAc,WAAQ,cAC3CD,UAAK;6BAGLC,gBAAW,SAAC,WAAS,cAAc,WAAQ,cAC3CD,UAAK;kCAGLC,gBAAW,SAAC,WAAS,cAAc,cAAW,cAC9CD,UAAK;4BAGLC,gBAAW,SAAC,WAAS,cAAc,UAAO,cAC1CD,UAAK;8BAKLC,gBAAW,SAAC,WAAS,cAAc,GAAG,oBAAoB,CAAC,IAAM;8BAIjEA,gBAAW,SAAC,WAAS,cAAc,GAAG,oBAAoB,CAAC,IAAM;+BAIjEA,gBAAW,SAAC,WAAS,cAAc,GAAG,oBAAoB,CAAC,KAAO;+BAMlEA,gBAAW,SAAC,WAAS,cAAc,GAAG,mBAAmB,CAAC,KAAO;+BAIjEA,gBAAW,SAAC,WAAS,cAAc,GAAG,mBAAmB,CAAC,KAAO;gCAMjEA,gBAAW,SAAC,WAAS,cAAc,GAAG,uBAAuB,CAAC,MAAQ;+BAItEA,gBAAW,SAAC,WAAS,cAAc,GAAG,uBAAuB,CAAC,KAAO;8BAIrEA,gBAAW,SAAC,WAAS,cAAc,GAAG,uBAAuB,CAAC,IAAM;gCAIpEA,gBAAW,SAAC,WAAS,cAAc,GAAG,uBAAuB,CAAC,MAAQ;+BAItEA,gBAAW,SAAC,WAAS,cAAc,GAAG,uBAAuB,CAAC,KAAO;kCAMrEO,oBAAe,SAAC,wBAAwB;4CACxCA,oBAAe,SAAC,kCAAkC;gCAElDP,gBAAW,SAAC,WAAS,cAAc,WAAQ;iCAI3CA,gBAAW,SAAC,WAAS,cAAc,YAAS;gCAO5CA,gBAAW,SAAC,WAAS,cAAc,SAAM,cACzCM,iBAAY,SAAC,sBAAsB,EAAE,EAAC,MAAM,EAAE,KAAK,EAAC;+BAGpDN,gBAAW,SAAC,WAAS,cAAc,QAAK,cACxCM,iBAAY,SAAC,qBAAqB,EAAE,EAAC,MAAM,EAAE,KAAK,EAAC;iCAGnDN,gBAAW,SAAC,WAAS,cAAc,UAAO,cAC1CM,iBAAY,SAAC,uBAAuB,EAAE,EAAC,MAAM,EAAE,KAAK,EAAC;0CAGrDA,iBAAY,SAAC,iCAAiC,EAAE,EAAC,MAAM,EAAE,KAAK,EAAC;iCAC/DA,iBAAY,SAAC,uBAAuB,EAAE,EAAC,MAAM,EAAE,KAAK,EAAC;+BAErDN,gBAAW,SAAC,WAAS,cAAc,cAAW;;QAgBjD,wCAAC;KA7KD;;;;;;ICrCA;QAmBM,YAAY,GAAG;QACnB,0BAA0B;QAC1B,oCAAoC;QAEpC,sBAAsB;QACtB,qBAAqB;QACrB,uBAAuB;QAEvB,wBAAwB;QACxB,kCAAkC;QAElC,uBAAuB;QACvB,iCAAiC;QAEjC,+BAA+B;QAC/B,yCAAyC;QAEzC,4BAA4B;QAC5B,uBAAuB;QACvB,iCAAiC;KAClC;AAED;QAAA;SAQwC;;oBARvCU,aAAQ,SAAC;wBACR,OAAO,EAAE;4BACPC,mBAAY;4BACZC,iBAAW;yBACZ;wBACD,YAAY,EAAE,CAAE,YAAY,CAAE;wBAC9B,OAAO,EAAE,CAAE,YAAY,CAAE;qBAC1B;;QACsC,8BAAC;KARxC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}